<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Feign声明式远程调用</title>
    <url>/2021/08/26/Feign%E5%A3%B0%E6%98%8E%E5%BC%8F%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Feign是一个声明式的HTTP客户端，它的目的就是让远程调用更加简单。Feign提供了HTTP请求的模板，通过编写简单的接口和插入注解，就可以定义好HTTP请求的参数、格式、地址等信息。</p>
<p>Feign整合Ribbon（负载均衡）和Hystrix（服务熔断），可以让我们不再需要显示地使用这两个组件。</p>
<p>SpringCloudFeign在NetflixFeign的基础上扩展了对SpringMVC注解的支持，在其实现下，我们只需要创建一个接口并用注解的方式配置它，即可完成对服务提供方的接口绑定。简化了SpringCloudRibbon自行封装服务调用客户端的开发量。</p>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>假设会员服务想要调用优惠卷服务，想要远程调用别的服务的步骤如下：</p>
<h2 id="引入open-feign的依赖："><a href="#引入open-feign的依赖：" class="headerlink" title="引入open-feign的依赖："></a>引入open-feign的依赖：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="编写一个接口告诉SpringCloud这个接口需要调用远程服务"><a href="#编写一个接口告诉SpringCloud这个接口需要调用远程服务" class="headerlink" title="编写一个接口告诉SpringCloud这个接口需要调用远程服务"></a>编写一个接口告诉SpringCloud这个接口需要调用远程服务</h2><h3 id="先修改CouponController，添加以下controller方法："><a href="#先修改CouponController，添加以下controller方法：" class="headerlink" title="先修改CouponController，添加以下controller方法："></a>先修改CouponController，添加以下controller方法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/member/list&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CouponEntity couponEntity = <span class="keyword">new</span> CouponEntity();</span><br><span class="line">    couponEntity.setCouponName(<span class="string">&quot;discount 20%&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>,Arrays.asList(couponEntity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/couponcontroller.png"></p>
<h3 id="新建CouponFeignService接口"><a href="#新建CouponFeignService接口" class="headerlink" title="新建CouponFeignService接口"></a>新建CouponFeignService接口</h3><p><code>@FeignClient("gulimall-coupon")</code>注解告诉SpringCloud这是一个远程客户端，要调用远程的<code>gulimall-coupon</code>服务</p>
<p>声明接口的每一个方法都是调用那个远程服务的那个请求</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/openfeign1.png"></p>
<p>上面的路径和方法是根据远程服务中的路径和方法所得</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/openfeign2.png"></p>
<h2 id="使用-EnableFeignClients注解开启远程调用功能"><a href="#使用-EnableFeignClients注解开启远程调用功能" class="headerlink" title="使用@EnableFeignClients注解开启远程调用功能"></a>使用@EnableFeignClients注解开启远程调用功能</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/openfeign3.png"></p>
<h2 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h2><p>访问<a href="http://localhost:8000/member/member/coupons">http://localhost:8000/member/member/coupons</a></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/feignclienttest.png"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>远程调用</tag>
        <tag>Feign</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Arthas进阶教程</title>
    <url>/2024/01/05/Arthas%E8%BF%9B%E9%98%B6%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="查看-JVM-信息"><a href="#查看-JVM-信息" class="headerlink" title="查看 JVM 信息"></a>查看 JVM 信息</h1><p>下面介绍 Arthas 里查看 <code>JVM</code> 信息的命令。</p>
<h2 id="sysprop"><a href="#sysprop" class="headerlink" title="sysprop"></a>sysprop</h2><p><code>sysprop</code> 可以打印所有的 System Properties 信息。</p>
<div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 的系统属性( System Property )</p>
</div>

<h3 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  sysprop [-h] [property-name] [property-value]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Display, and change all the system properties.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">sysprop</span><br><span class="line">sysprop file.encoding</span><br><span class="line">sysprop production.mode true</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/sysprop</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                                  this help</span><br><span class="line">&lt;property-name&gt;                             property name</span><br><span class="line">&lt;property-value&gt;                            property value</span><br></pre></td></tr></table></figure>

<h3 id="查看所有属性"><a href="#查看所有属性" class="headerlink" title="查看所有属性"></a>查看所有属性</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop</span><br><span class="line"> KEY                                                  VALUE</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> java.runtime.name                                    Java(TM) SE Runtime Environment</span><br><span class="line"> sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib</span><br><span class="line"> java.vm.version                                      25.51-b03</span><br><span class="line"> user.country.format                                  CN</span><br><span class="line"> gopherProxySet                                       false</span><br><span class="line"> java.vm.vendor                                       Oracle Corporation</span><br><span class="line"> java.vendor.url                                      http://java.oracle.com/</span><br><span class="line"> path.separator                                       :</span><br><span class="line"> java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line"> file.encoding.pkg                                    sun.io</span><br><span class="line"> user.country                                         US</span><br><span class="line"> sun.java.launcher                                    SUN_STANDARD</span><br><span class="line"> sun.os.patch.level                                   unknown</span><br><span class="line"> java.vm.specification.name                           Java Virtual Machine Specification</span><br><span class="line"> user.dir                                             /private/var/tmp</span><br><span class="line"> java.runtime.version                                 1.8.0_51-b16</span><br><span class="line"> java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment</span><br><span class="line"> java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors</span><br><span class="line">                                                      ed</span><br><span class="line"> os.arch                                              x86_64</span><br><span class="line"> java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/</span><br><span class="line"> line.separator</span><br><span class="line"></span><br><span class="line"> java.vm.specification.vendor                         Oracle Corporation</span><br><span class="line"> os.name                                              Mac OS X</span><br><span class="line"> sun.jnu.encoding                                     UTF-8</span><br><span class="line"> java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra</span><br><span class="line">                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class="line"> sun.nio.ch.bugLevel</span><br><span class="line"> java.specification.name                              Java Platform API Specification</span><br><span class="line"> java.class.version                                   52.0</span><br><span class="line"> sun.management.compiler                              HotSpot 64-Bit Tiered Compilers</span><br><span class="line"> os.version                                           10.12.6</span><br><span class="line"> user.home                                            /Users/wangtao</span><br><span class="line"> user.timezone                                        Asia/Shanghai</span><br><span class="line"> java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob</span><br><span class="line"> file.encoding                                        UTF-8</span><br><span class="line"> java.specification.version                           1.8</span><br><span class="line"> user.name                                            wangtao</span><br><span class="line"> java.class.path                                      .</span><br><span class="line"> java.vm.specification.version                        1.8</span><br><span class="line"> sun.arch.data.model                                  64</span><br><span class="line"> java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre</span><br><span class="line"> sun.java.command                                     Test</span><br><span class="line"> java.specification.vendor                            Oracle Corporation</span><br><span class="line"> user.language                                        en</span><br><span class="line"> awt.toolkit                                          sun.lwawt.macosx.LWCToolkit</span><br><span class="line"> java.vm.info                                         mixed mode</span><br><span class="line"> java.version                                         1.8.0_51</span><br><span class="line"> java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.</span><br><span class="line">                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library</span><br><span class="line">                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java</span><br><span class="line"> sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour</span><br><span class="line">                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li</span><br><span class="line">                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l</span><br><span class="line">                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H</span><br><span class="line">                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content</span><br><span class="line">                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte</span><br><span class="line">                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd</span><br><span class="line">                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.</span><br><span class="line">                                                      jdk/Contents/Home/jre/classes</span><br><span class="line"> java.vendor                                          Oracle Corporation</span><br><span class="line"> file.separator                                       /</span><br><span class="line"> java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/</span><br><span class="line"> sun.cpu.endian                                       little</span><br><span class="line"> sun.io.unicode.encoding                              UnicodeBig</span><br><span class="line"> sun.cpu.isalist</span><br></pre></td></tr></table></figure>

<h3 id="查看单个属性"><a href="#查看单个属性" class="headerlink" title="查看单个属性"></a>查看单个属性</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop java.version</span><br><span class="line">java.version=1.8.0_51</span><br></pre></td></tr></table></figure>

<h3 id="修改单个属性"><a href="#修改单个属性" class="headerlink" title="修改单个属性"></a>修改单个属性</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop user.country</span><br><span class="line">user.country=US</span><br><span class="line">$ sysprop user.country CN</span><br><span class="line">Successfully changed the system property.</span><br><span class="line">user.country=CN</span><br></pre></td></tr></table></figure>

<h2 id="sysenv"><a href="#sysenv" class="headerlink" title="sysenv"></a>sysenv</h2><p><code>sysenv</code> 命令可以获取到环境变量。和<code>sysprop</code> 命令类似。</p>
<div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 的环境属性( System Environment Variables )</p>
</div>

<h3 id="使用参考-1"><a href="#使用参考-1" class="headerlink" title="使用参考"></a>使用参考</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  sysenv [-h] [env-name]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Display the system env.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">  sysenv</span><br><span class="line">  sysenv USER</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/sysenv</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                                                 this help</span><br><span class="line">&lt;env-name&gt;                                                 env name</span><br></pre></td></tr></table></figure>

<h3 id="查看所有环境变量"><a href="#查看所有环境变量" class="headerlink" title="查看所有环境变量"></a>查看所有环境变量</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysenv</span><br><span class="line"> KEY                      VALUE</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja</span><br><span class="line">                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/</span><br><span class="line">                          MacOS</span><br><span class="line"> SDKMAN_VERSION           5.7.3+337</span><br><span class="line"> JAVA_HOME                /Users/admin/.sdkman/candidates/java/current</span><br><span class="line"> JAVA_MAIN_CLASS_65244    demo.MathGame</span><br><span class="line"> TERM                     xterm-256color</span><br><span class="line"> LANG                     zh_CN.UTF-8</span><br><span class="line"> AUTOJUMP_SOURCED         1</span><br><span class="line"> COLORTERM                truecolor</span><br><span class="line"> LOGNAME                  admin</span><br><span class="line"> XPC_SERVICE_NAME         0</span><br><span class="line"> PWD                      /Users/admin/code/ali/arthas/demo</span><br><span class="line"> TERM_PROGRAM_VERSION     3.2.5</span><br><span class="line"> _                        /Users/admin/.sdkman/candidates/java/current/bin/java</span><br><span class="line"> SHELL                    /bin/bash</span><br><span class="line"> TERM_PROGRAM             iTerm.app</span><br><span class="line"> SDKMAN_PLATFORM          Darwin</span><br><span class="line"> USER                     admin</span><br><span class="line"> ITERM_PROFILE            Default</span><br><span class="line"> TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/</span><br><span class="line"> XPC_FLAGS                0x0</span><br><span class="line"> TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8</span><br><span class="line"> __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34</span><br><span class="line"> Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render</span><br><span class="line"> der</span><br><span class="line"> COLORFGBG                7;0</span><br><span class="line"> HOME                     /Users/admin</span><br><span class="line"> SHLVL                    1</span><br><span class="line"> AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log</span><br></pre></td></tr></table></figure>

<h3 id="查看单个环境变量"><a href="#查看单个环境变量" class="headerlink" title="查看单个环境变量"></a>查看单个环境变量</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysenv USER</span><br><span class="line">USER=admin</span><br></pre></td></tr></table></figure>

<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p><code>jvm</code> 命令会打印出<code>JVM</code> 的各种详细信息。</p>
<div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 信息</p>
</div>

<h3 id="使用参考-2"><a href="#使用参考-2" class="headerlink" title="使用参考"></a>使用参考</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ jvm</span><br><span class="line">RUNTIME</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MACHINE-NAME                   37@ff267334bb65</span><br><span class="line"> JVM-START-TIME                 2020-07-23 07:50:36</span><br><span class="line"> MANAGEMENT-SPEC-VERSION        1.2</span><br><span class="line"> SPEC-NAME                      Java Virtual Machine Specification</span><br><span class="line"> SPEC-VENDOR                    Oracle Corporation</span><br><span class="line"> SPEC-VERSION                   1.8</span><br><span class="line"> VM-NAME                        Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line"> VM-VENDOR                      Oracle Corporation</span><br><span class="line"> VM-VERSION                     25.201-b09</span><br><span class="line"> INPUT-ARGUMENTS                []</span><br><span class="line"> CLASS-PATH                     demo-arthas-spring-boot.jar</span><br><span class="line"> BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j</span><br><span class="line">                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/</span><br><span class="line">                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us</span><br><span class="line">                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l</span><br><span class="line">                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes</span><br><span class="line"> LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CLASS-LOADING</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> LOADED-CLASS-COUNT             7529</span><br><span class="line"> TOTAL-LOADED-CLASS-COUNT       7529</span><br><span class="line"> UNLOADED-CLASS-COUNT           0</span><br><span class="line"> IS-VERBOSE                     false</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COMPILATION</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                           HotSpot 64-Bit Tiered Compilers</span><br><span class="line"> TOTAL-COMPILE-TIME             14921(ms)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> GARBAGE-COLLECTORS</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PS Scavenge                            name : PS Scavenge</span><br><span class="line"> [count/time (ms)]                      collectionCount : 7</span><br><span class="line">                                        collectionTime : 68</span><br><span class="line"></span><br><span class="line"> PS MarkSweep                           name : PS MarkSweep</span><br><span class="line"> [count/time (ms)]                      collectionCount : 1</span><br><span class="line">                                        collectionTime : 47</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY-MANAGERS</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CodeCacheManager               Code Cache</span><br><span class="line"></span><br><span class="line"> Metaspace Manager              Metaspace</span><br><span class="line">                                Compressed Class Space</span><br><span class="line"></span><br><span class="line"> Copy                           Eden Space</span><br><span class="line">                                Survivor Space</span><br><span class="line"></span><br><span class="line"> MarkSweepCompact               Eden Space</span><br><span class="line">                                Survivor Space</span><br><span class="line">                                Tenured Gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)</span><br><span class="line"> [memory in bytes]                      used : 18039504(17.2 MiB)</span><br><span class="line">                                        committed : 181403648(173.0 MiB)</span><br><span class="line">                                        max : 3817865216(3.6 GiB)</span><br><span class="line"></span><br><span class="line"> NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)</span><br><span class="line"> [memory in bytes]                      used : 33926216(32.4 MiB)</span><br><span class="line">                                        committed : 35176448(33.5 MiB)</span><br><span class="line">                                        max : -1(-1 B)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OPERATING-SYSTEM</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OS                             Linux</span><br><span class="line"> ARCH                           amd64</span><br><span class="line"> PROCESSORS-COUNT               3</span><br><span class="line"> LOAD-AVERAGE                   29.53</span><br><span class="line"> VERSION                        4.15.0-52-generic</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> THREAD</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COUNT                          30</span><br><span class="line"> DAEMON-COUNT                   24</span><br><span class="line"> PEAK-COUNT                     31</span><br><span class="line"> STARTED-COUNT                  36</span><br><span class="line"> DEADLOCK-COUNT                 0</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> FILE-DESCRIPTOR</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MAX-FILE-DESCRIPTOR-COUNT      1048576</span><br><span class="line"> OPEN-FILE-DESCRIPTOR-COUNT     100</span><br><span class="line">Affect(row-cnt:0) cost in 88 ms.</span><br></pre></td></tr></table></figure>

<h3 id="THREAD-相关"><a href="#THREAD-相关" class="headerlink" title="THREAD 相关"></a>THREAD 相关</h3><ul>
<li><code>COUNT</code>: JVM 当前活跃的线程数</li>
<li><code>DAEMON-COUNT</code>: JVM 当前活跃的守护线程数</li>
<li><code>PEAK-COUNT</code>: 从 JVM 启动开始曾经活着的最大线程数</li>
<li><code>STARTED-COUNT</code>: 从 JVM 启动开始总共启动过的线程次数</li>
<li><code>DEADLOCK-COUNT</code>: JVM 当前死锁的线程数</li>
</ul>
<h3 id="文件描述符相关"><a href="#文件描述符相关" class="headerlink" title="文件描述符相关"></a>文件描述符相关</h3><ul>
<li><code>MAX-FILE-DESCRIPTOR-COUNT</code>：JVM 进程最大可以打开的文件描述符数</li>
<li><code>OPEN-FILE-DESCRIPTOR-COUNT</code>：JVM 当前打开的文件描述符数</li>
</ul>
<hr>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>为了更好使用 Arthas，下面先介绍 Arthas 里的一些使用技巧。</p>
<h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>Arthas 里每一个命令都有详细的帮助信息。可以用<code>-h</code> 来查看。帮助信息里有<code>EXAMPLES</code> 和<code>WIKI</code> 链接。</p>
<p>比如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysprop -h</span><br></pre></td></tr></table></figure>

<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p><code>Arthas</code> 支持丰富的自动补全功能，在使用有疑惑时，可以输入<code>Tab</code> 来获取更多信息。</p>
<p>比如输入 <code>sysprop java.</code> 之后，再输入<code>Tab</code> ，会补全出对应的 key。</p>
<h2 id="readline-的快捷键支持"><a href="#readline-的快捷键支持" class="headerlink" title="readline 的快捷键支持"></a>readline 的快捷键支持</h2><p><code>Arthas</code> 支持常见的命令行快捷键，比如<code>Ctrl + A</code> 跳转行首，<code>Ctrl + E</code> 跳转行尾。</p>
<p>更多的快捷键可以用 <code>keymap</code> 命令查看。</p>
<h2 id="历史命令的补全"><a href="#历史命令的补全" class="headerlink" title="历史命令的补全"></a>历史命令的补全</h2><p>如果想再执行之前的命令，可以在输入一半时，按<code>Up/↑</code> 或者 <code>Ddown/↓</code> ，来匹配到之前的命令。</p>
<p>比如之前执行过<code>sysprop java.version</code> ，那么在输入<code>sysprop ja</code> 之后，可以输入<code>Up/↑</code> ，就会自动补全为<code>sysprop java.version</code> 。</p>
<p>如果想查看所有的历史命令，也可以通过 <code>history</code> 命令查看到。</p>
<h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><p><code>Arthas</code> 支持在 <code>pipeline</code> 之后，执行一些简单的命令，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysprop | grep java</span><br><span class="line">sysprop | wc -l</span><br></pre></td></tr></table></figure>

<h1 id="Sc-sm-查看已加载的类"><a href="#Sc-sm-查看已加载的类" class="headerlink" title="Sc/sm 查看已加载的类"></a>Sc/sm 查看已加载的类</h1><p>下面介绍 <code>Arthas</code> 里查找已加载类的命令。</p>
<h2 id="Sc"><a href="#Sc" class="headerlink" title="Sc"></a>Sc</h2><p><code>sc</code> 命令可以查找到所有 JVM 已经加载到的类。</p>
<p>如果搜索的是接口，还会搜索所有的实现类。比如查看所有的<code>Filter</code> 实现类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc javax.servlet.Filter</span><br></pre></td></tr></table></figure>

<p>通过<code>-d</code> 参数，可以打印出类加载的具体信息，很方便查找类加载问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d javax.servlet.Filter</span><br></pre></td></tr></table></figure>

<p><code>sc</code> 支持通配，比如搜索所有的<code>StringUtils</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc *StringUtils</span><br></pre></td></tr></table></figure>

<h2 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h2><div class="note info no-icon"><p>提示</p>
<p>查看已加载类的方法信息</p>
</div>

<p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p>
<p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right">[d]</td>
<td align="left">展示每个方法的详细信息</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">指定 class 的 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right"><code>[n:]</code></td>
<td align="left">具有详细信息的匹配类的最大数量（默认为 100）</td>
</tr>
</tbody></table>
<h3 id="使用参考-3"><a href="#使用参考-3" class="headerlink" title="使用参考"></a>使用参考</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sm java.lang.String</span><br><span class="line">java.lang.String-&gt;&lt;init&gt;</span><br><span class="line">java.lang.String-&gt;equals</span><br><span class="line">java.lang.String-&gt;toString</span><br><span class="line">java.lang.String-&gt;hashCode</span><br><span class="line">java.lang.String-&gt;compareTo</span><br><span class="line">java.lang.String-&gt;indexOf</span><br><span class="line">java.lang.String-&gt;valueOf</span><br><span class="line">java.lang.String-&gt;checkBounds</span><br><span class="line">java.lang.String-&gt;length</span><br><span class="line">java.lang.String-&gt;isEmpty</span><br><span class="line">java.lang.String-&gt;charAt</span><br><span class="line">java.lang.String-&gt;codePointAt</span><br><span class="line">java.lang.String-&gt;codePointBefore</span><br><span class="line">java.lang.String-&gt;codePointCount</span><br><span class="line">java.lang.String-&gt;offsetByCodePoints</span><br><span class="line">java.lang.String-&gt;getChars</span><br><span class="line">java.lang.String-&gt;getBytes</span><br><span class="line">java.lang.String-&gt;contentEquals</span><br><span class="line">java.lang.String-&gt;nonSyncContentEquals</span><br><span class="line">java.lang.String-&gt;equalsIgnoreCase</span><br><span class="line">java.lang.String-&gt;compareToIgnoreCase</span><br><span class="line">java.lang.String-&gt;regionMatches</span><br><span class="line">java.lang.String-&gt;startsWith</span><br><span class="line">java.lang.String-&gt;endsWith</span><br><span class="line">java.lang.String-&gt;indexOfSupplementary</span><br><span class="line">java.lang.String-&gt;lastIndexOf</span><br><span class="line">java.lang.String-&gt;lastIndexOfSupplementary</span><br><span class="line">java.lang.String-&gt;substring</span><br><span class="line">java.lang.String-&gt;subSequence</span><br><span class="line">java.lang.String-&gt;concat</span><br><span class="line">java.lang.String-&gt;replace</span><br><span class="line">java.lang.String-&gt;matches</span><br><span class="line">java.lang.String-&gt;contains</span><br><span class="line">java.lang.String-&gt;replaceFirst</span><br><span class="line">java.lang.String-&gt;replaceAll</span><br><span class="line">java.lang.String-&gt;split</span><br><span class="line">java.lang.String-&gt;join</span><br><span class="line">java.lang.String-&gt;toLowerCase</span><br><span class="line">java.lang.String-&gt;toUpperCase</span><br><span class="line">java.lang.String-&gt;trim</span><br><span class="line">java.lang.String-&gt;toCharArray</span><br><span class="line">java.lang.String-&gt;format</span><br><span class="line">java.lang.String-&gt;copyValueOf</span><br><span class="line">java.lang.String-&gt;intern</span><br><span class="line">Affect(row-cnt:44) cost <span class="keyword">in</span> 1342 ms.</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sm -d java.lang.String toString</span><br><span class="line"> declaring-class  java.lang.String</span><br><span class="line"> method-name      toString</span><br><span class="line"> modifier         public</span><br><span class="line"> annotation</span><br><span class="line"> parameters</span><br><span class="line"> <span class="built_in">return</span>           java.lang.String</span><br><span class="line"> exceptions</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 3 ms.</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Jad"><a href="#Jad" class="headerlink" title="Jad"></a>Jad</h1><p>可以通过 <code>jad</code> 命令来反编译代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jad com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>

<p>通过<code>--source-only</code> 参数可以只打印出在反编译的源代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jad --source-only com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h1><h2 id="OGNL-一般语法"><a href="#OGNL-一般语法" class="headerlink" title="OGNL 一般语法"></a>OGNL 一般语法</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul>
<li><p>数组和列表的索引，可以使用 <code>array[&quot;length&quot;]</code></p>
</li>
<li><p>JavaBeans 索引属性</p>
<p>如一个 JavaBeans 有以下四个重载方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PropertyType[] getPropertyName();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyName</span><span class="params">(PropertyType[] anArray)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> PropertyType <span class="title">getPropertyName</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyName</span><span class="params">(<span class="keyword">int</span> index, PropertyType value)</span></span>;</span><br></pre></td></tr></table></figure>

<p>则</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">someProperty[2]</span><br></pre></td></tr></table></figure>

<p>等价于 Java 代码的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getPropertyName(2)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ognl <span class="string">&quot;&#123;1,2,3,4&#125;[0]&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过上面命令可以获取到列表的第一个元素</p>
<h3 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h3><p>使用 <code>#</code> 在 OGNL 中定义临时变量，他们全局可见，此外表达式计算的每一步结果都保存在变量 <code>this</code> 中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ognl <span class="string">&quot;&#123;10,20,30&#125;[0].(#this &gt; 5 ? #this*2 : #this+10)&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面命令通过获取列表的第一个元素进行判断，如果大于 <code>5</code> 则乘以 <code>2</code> 反之则加 <code>10</code> 。</p>
<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">method( ensureLoaded(), name )</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>OGNL 是运行时调用，因此没有任何静态类型的信息可以参考，所以如果解析到有多个匹配的方法，则任选其中一个方法调用</li>
<li>常量 null 可以匹配所有的非原始类型的对象</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ognl <span class="string">&quot;&#123;1,2,3,4&#125;.size()&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过上面命令可以调用 <code>ArrayList</code> 的 <code>size()</code> 方法获取到 ArrayList 的大小</p>
<h3 id="复杂链式表达式"><a href="#复杂链式表达式" class="headerlink" title="复杂链式表达式"></a>复杂链式表达式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">headline.parent.(ensureLoaded(), name)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">headline.parent.ensureLoaded(), headline.parent.name</span><br><span class="line">ognl <span class="string">&quot;@java.lang.System@out.(print(&#x27;Hello &#x27;), print(&#x27;world\n&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p>运行上面这个命令后，你可以在 Tab1 的终端看到 <code>Hello world</code> 的输出。</p>
<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="新建列表"><a href="#新建列表" class="headerlink" title="新建列表"></a>新建列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;1 in &#123;2, 3&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>上面这条命令判断 <code>1</code> 是否在列表 <code>[2, 3]</code> 中。</p>
<h4 id="新建原生数组"><a href="#新建原生数组" class="headerlink" title="新建原生数组"></a>新建原生数组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;new int[] &#123;1, 2, 3&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>指定长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;new int[9]&quot;</span><br></pre></td></tr></table></figure>

<h4 id="新建-Maps"><a href="#新建-Maps" class="headerlink" title="新建 Maps"></a>新建 Maps</h4><p>新建普通 Map</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;#&#123; &#39;foo&#39;: &#39;foo value&#39;, &#39;bar&#39;: &#39;bar value&#39; &#125;&quot;</span><br></pre></td></tr></table></figure>

<p>新建特定类型 Map</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;#@java.util.HashMap@&#123; &#39;foo&#39;: &#39;foo value&#39;, &#39;bar&#39;: &#39;bar value&#39; &#125;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="集合的投影"><a href="#集合的投影" class="headerlink" title="集合的投影"></a>集合的投影</h4><p>OGNL 把对针对集合上的每个元素调用同一个方法并返回新的集合的行为称之为“投影”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;&#123;1, 2, 3&#125;.&#123;#this*2&#125;&quot;</span><br></pre></td></tr></table></figure>

<h4 id="查找集合元素"><a href="#查找集合元素" class="headerlink" title="查找集合元素"></a>查找集合元素</h4><ul>
<li>查找所有匹配的元素<br><code>ognl &quot;&#123;1024, &#39;Hello world!&#39;, true, 2048&#125;.&#123;? #this instanceof Number&#125;&quot;</code></li>
<li>查找第一个匹配的元素<br><code>ognl &quot;&#123;1024, &#39;Hello world!&#39;, true, 2048&#125;.&#123;^ #this instanceof Number&#125;&quot;</code></li>
<li>查找最后一个匹配的元素<br><code>ognl &quot;&#123;1024, &#39;Hello world!&#39;, true, 2048&#125;.&#123;$ #this instanceof Number&#125;&quot;</code></li>
</ul>
<h4 id="集合的虚拟属性"><a href="#集合的虚拟属性" class="headerlink" title="集合的虚拟属性"></a>集合的虚拟属性</h4><p>OGNL 定义了一些特定的集合属性，含义与相应的 Java 集合方法完全等价。</p>
<ul>
<li><code>Collections</code><ul>
<li><code>size</code> 集合大小</li>
<li><code>isEmpty</code> 集合为空时返回 <code>true</code></li>
</ul>
</li>
<li><code>List</code><ul>
<li><code>iterator</code> 返回 List 的 iterator</li>
</ul>
</li>
<li><code>Map</code><ul>
<li><code>keys</code> 返回 Map 的所有 Key 值</li>
<li><code>values</code> 返回 Map 的所有 Value 值</li>
</ul>
</li>
<li><code>Set</code><ul>
<li><code>iterator</code> 返回 Set 的 iterator</li>
</ul>
</li>
</ul>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>非 <code>java.lang</code> 包下的所有类的构造函数都要用类的权限定名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;new java.util.ArrayList()&quot;</span><br></pre></td></tr></table></figure>

<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl -x 3 &#39;@java.lang.Math@sqrt(9.0D)&#39;</span><br></pre></td></tr></table></figure>

<h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl -x 3 &#39;@java.io.File@separator&#39;</span><br></pre></td></tr></table></figure>

<h4 id="伪-lambda-表达式"><a href="#伪-lambda-表达式" class="headerlink" title="伪 lambda 表达式"></a>伪 lambda 表达式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &quot;#fact &#x3D; :[#this&lt;&#x3D;1? 1 : #this*#fact(#this-1)], #fact(3)&quot;</span><br></pre></td></tr></table></figure>

<p>该命令实现了一个 lambda 递归实现了一个阶乘函数，并求 3 的阶乘。</p>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>更多详细语法请查看<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">官方文档</a>。</p>
<h2 id="Arthas-OGNL"><a href="#Arthas-OGNL" class="headerlink" title="Arthas-OGNL"></a>Arthas-OGNL</h2><p>在 Arthas 里，有一个单独的 ognl 命令，可以动态执行代码。</p>
<h3 id="调用-static-函数"><a href="#调用-static-函数" class="headerlink" title="调用 static 函数"></a>调用 static 函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ognl &#39;@java.lang.System@out.println(&quot;hello ognl&quot;)&#39;</span><br></pre></td></tr></table></figure>

<h3 id="查找-UserController-的-ClassLoader"><a href="#查找-UserController-的-ClassLoader" class="headerlink" title="查找 UserController 的 ClassLoader"></a>查找 UserController 的 ClassLoader</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>

<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。<br>如果你使用<code>-c</code> ，你需要手动输入由上述命令获取到的 hashcode：<code>-c &lt;hashcode&gt;</code><br>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code> 指定 class name，使用起来更加方便：<br><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code> 是动态变化的。</p>
<h3 id="获取静态类的静态字段"><a href="#获取静态类的静态字段" class="headerlink" title="获取静态类的静态字段"></a>获取静态类的静态字段</h3><p>获取<code>CRBCMsgAdapterController</code> 类里的<code>logger</code> 字段：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[arthas@9012]$ ognl -c 18b4aac2 @com.crb.adaptor.controller.CRBCMsgAdapterController@logger</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID=@Long[5454405123156820674],</span><br><span class="line">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name=@String[com.crb.adaptor.controller.CRBCMsgAdapterController],</span><br><span class="line">    level=null,</span><br><span class="line">    effectiveLevelInt=@Integer[20000],</span><br><span class="line">    parent=@Logger[Logger[com.crb.adaptor.controller]],</span><br><span class="line">    childrenList=null,</span><br><span class="line">    aai=null,</span><br><span class="line">    additive=@Boolean[<span class="literal">true</span>],</span><br><span class="line">    loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>还可以通过<code>-x</code> 参数控制返回值的展开层数。比如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[arthas@9012]$ ognl c 18b4aacc2 -x 2 @com.crb.adaptor.controller.CRBCMsgAdapterController@logger</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID=@Long[5454405123156820674],</span><br><span class="line">    FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name=@String[com.crb.adaptor.controller.CRBCMsgAdapterController],</span><br><span class="line">    level=null,</span><br><span class="line">    effectiveLevelInt=@Integer[20000],</span><br><span class="line">    parent=@Logger[</span><br><span class="line">        serialVersionUID=@Long[5454405123156820674],</span><br><span class="line">        FQCN=@String[ch.qos.logback.classic.Logger],</span><br><span class="line">        name=@String[com.crb.adaptor.controller],</span><br><span class="line">        level=null,</span><br><span class="line">        effectiveLevelInt=@Integer[20000],</span><br><span class="line">        parent=@Logger[Logger[com.crb.adaptor]],</span><br><span class="line">        childrenList=@CopyOnWriteArrayList[isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">        aai=null,</span><br><span class="line">        additive=@Boolean[<span class="literal">true</span>],</span><br><span class="line">        loggerContext=@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">    ],</span><br><span class="line">    childrenList=null,</span><br><span class="line">    aai=null,</span><br><span class="line">    additive=@Boolean[<span class="literal">true</span>],</span><br><span class="line">    loggerContext=@LoggerContext[</span><br><span class="line">        DEFAULT_PACKAGING_DATA=@Boolean[<span class="literal">false</span>],</span><br><span class="line">        root=@Logger[Logger[ROOT]],</span><br><span class="line">        size=@Integer[416],</span><br><span class="line">        noAppenderWarning=@Integer[2],</span><br><span class="line">        loggerContextListenerList=@ArrayList[isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">        loggerCache=@ConcurrentHashMap[isEmpty=<span class="literal">false</span>;size=416],</span><br><span class="line">        loggerContextRemoteView=@LoggerContextVO[LoggerContextVO&#123;name=<span class="string">&#x27;default&#x27;</span>, propertyMap=&#123;PORT=8610, APPLICATION_NAME=core-tf-application&#125;, birthTime=1704438833539&#125;],</span><br><span class="line">        turboFilterList=@TurboFilterList[isEmpty=<span class="literal">true</span>;size=0],</span><br><span class="line">        packagingDataEnabled=@Boolean[<span class="literal">false</span>],</span><br><span class="line">        maxCallerDataDepth=@Integer[8],</span><br><span class="line">        resetCount=@Integer[2],</span><br><span class="line">        frameworkPackages=@ArrayList[isEmpty=<span class="literal">true</span>;size=0],</span><br><span class="line">        birthTime=@Long[1704438833539],</span><br><span class="line">        name=@String[default],</span><br><span class="line">        sm=@BasicStatusManager[ch.qos.logback.core.BasicStatusManager@2eb37a8d],</span><br><span class="line">        propertyMap=@HashMap[isEmpty=<span class="literal">false</span>;size=2],</span><br><span class="line">        objectMap=@HashMap[isEmpty=<span class="literal">false</span>;size=7],</span><br><span class="line">        configurationLock=@LogbackLock[ch.qos.logback.core.spi.LogbackLock@1db45c81],</span><br><span class="line">        scheduledExecutorService=@ScheduledThreadPoolExecutor[java.util.concurrent.ScheduledThreadPoolExecutor@ac21a5d[Running, pool size = 8, active threads = 0, queued tasks = 1, completed tasks = 28]],</span><br><span class="line">        scheduledFutures=@ArrayList[isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">        lifeCycleManager=@LifeCycleManager[ch.qos.logback.core.LifeCycleManager@74197f30],</span><br><span class="line">        started=@Boolean[<span class="literal">false</span>],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="执行多行表达式，赋值给临时变量，返回一个-List"><a href="#执行多行表达式，赋值给临时变量，返回一个-List" class="headerlink" title="执行多行表达式，赋值给临时变量，返回一个 List"></a>执行多行表达式，赋值给临时变量，返回一个 List</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ognl <span class="string">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br><span class="line">@ArrayList[</span><br><span class="line">    @String[/opt/java/8.0.181-zulu/jre],</span><br><span class="line">    @String[OpenJDK Runtime Environment],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>在 Arthas 里<code>ognl</code> 表达式是很重要的功能，在很多命令里都可以使用<code>ognl</code> 表达式。</p>
<p>一些更复杂的用法，可以参考：</p>
<ul>
<li>OGNL 特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71</a></li>
<li>OGNL 表达式官方指南：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>
</ul>
<hr>
<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><p>在 Arthas 里有一些开关，可以通过 <code>options</code> 命令来查看 。</p>
<h2 id="查看所有的-options"><a href="#查看所有的-options" class="headerlink" title="查看所有的 options"></a>查看所有的 options</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ options</span><br><span class="line"> LEVEL  TYPE    NAME          VALUE   SUMMARY               DESCRIPTION</span><br><span class="line">-------------------------------------------------------------------------------------------------------</span><br><span class="line"> 0      boolea  unsafe        <span class="literal">false</span>   Option to support sy  This option enables to proxy functionality</span><br><span class="line">        n                             stem-level class       of JVM classes. Due to serious security r</span><br><span class="line">                                                            isk a JVM crash is possibly be introduced.</span><br><span class="line">                                                             Do not activate it unless you are able to</span><br><span class="line">                                                             manage.</span><br><span class="line"> 1      boolea  dump          <span class="literal">false</span>   Option to dump the e  This option enables the enhanced classes t</span><br><span class="line">        n                             nhanced classes       o be dumped to external file <span class="keyword">for</span> further d</span><br><span class="line">                                                            e-compilation and analysis.</span><br><span class="line"> 1      boolea  batch-re-tra  <span class="literal">true</span>    Option to support ba  This options enables to reTransform classe</span><br><span class="line">        n       nsform                tch reTransform Clas  s with batch mode.</span><br><span class="line">                                      s</span><br><span class="line"> 2      boolea  json-format   <span class="literal">false</span>   Option to support JS  This option enables to format object outpu</span><br><span class="line">        n                             ON format of object   t with JSON when -x option selected.</span><br><span class="line">                                      output</span><br><span class="line"> 1      boolea  disable-sub-  <span class="literal">false</span>   Option to control <span class="keyword">in</span>  This option <span class="built_in">disable</span> to include sub class w</span><br><span class="line">        n       class                 clude sub class when  hen matching class.</span><br><span class="line">                                       class matching</span><br><span class="line"> 1      boolea  support-defa  <span class="literal">true</span>    Option to control <span class="keyword">in</span>  This option <span class="built_in">disable</span> to include default met</span><br><span class="line">        n       ult-method            clude default method  hod <span class="keyword">in</span> interface when matching class.</span><br><span class="line">                                       <span class="keyword">in</span> interface when c</span><br><span class="line">                                      lass matching</span><br><span class="line"> 1      boolea  save-result   <span class="literal">false</span>   Option to <span class="built_in">print</span> comm  This option enables to save each <span class="built_in">command</span><span class="string">&#x27;s</span></span><br><span class="line"><span class="string">        n                             and&#x27;</span>s result to <span class="built_in">log</span>    result to <span class="built_in">log</span> file, <span class="built_in">which</span> path is <span class="variable">$&#123;user.</span></span><br><span class="line"><span class="variable">                                      file                  home&#125;</span>/logs/arthas-cache/result.log.</span><br><span class="line"> 2      String  job-timeout   1d      Option to job timeou  This option setting job timeout,The unit c</span><br><span class="line">                                      t                     an be d, h, m, s <span class="keyword">for</span> day, hour, minute, se</span><br><span class="line">                                                            cond. 1d is one day <span class="keyword">in</span> default</span><br><span class="line"> 1      boolea  print-parent  <span class="literal">true</span>    Option to <span class="built_in">print</span> all   This option enables <span class="built_in">print</span> files <span class="keyword">in</span> parent</span><br><span class="line">        n       -fields               fileds <span class="keyword">in</span> parent cla  class, default value <span class="literal">true</span>.</span><br><span class="line">                                      ss</span><br><span class="line"> 1      boolea  verbose       <span class="literal">false</span>   Option to <span class="built_in">print</span> verb  This option enables <span class="built_in">print</span> verbose informat</span><br><span class="line">        n                             ose information       ion, default value <span class="literal">false</span>.</span><br><span class="line"> 1      boolea  strict        <span class="literal">true</span>    Option to strict mod  By default, strict mode is <span class="literal">true</span>, not allow</span><br><span class="line">        n                             e                     ed to <span class="built_in">set</span> object properties. Want to <span class="built_in">set</span> o</span><br><span class="line">                                                            bject properties, execute `options strict</span><br><span class="line">                                                            <span class="literal">false</span>`</span><br></pre></td></tr></table></figure>

<h2 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>unsafe</td>
<td>false</td>
<td>是否支持对系统级别的类进行增强，打开该开关可能导致把 JVM 搞挂，请慎重选择！</td>
</tr>
<tr>
<td>dump</td>
<td>false</td>
<td>是否支持被增强了的类 dump 到外部文件中，如果打开开关，class 文件会被 dump 到<code>/$&#123;application working dir&#125;/arthas-class-dump/</code>目录下，具体位置详见控制台输出</td>
</tr>
<tr>
<td>batch-re-transform</td>
<td>true</td>
<td>是否支持批量对匹配到的类执行 retransform 操作</td>
</tr>
<tr>
<td>json-format</td>
<td>false</td>
<td>是否支持 json 化的输出</td>
</tr>
<tr>
<td>disable-sub-class</td>
<td>false</td>
<td>是否禁用子类匹配，默认在匹配目标类的时候会默认匹配到其子类，如果想精确匹配，可以关闭此开关</td>
</tr>
<tr>
<td>support-default-method</td>
<td>true</td>
<td>是否支持匹配到 default method， 默认会查找 interface，匹配里面的 default method。参考 <a href="https://github.com/alibaba/arthas/issues/1105">#1105在新窗口打开</a></td>
</tr>
<tr>
<td>save-result</td>
<td>false</td>
<td>是否打开执行结果存日志功能，打开之后所有命令的运行结果都将保存到<code>~/logs/arthas-cache/result.log</code>中</td>
</tr>
<tr>
<td>job-timeout</td>
<td>1d</td>
<td>异步后台任务的默认超时时间，超过这个时间，任务自动停止；比如设置 1d, 2h, 3m, 25s，分别代表天、小时、分、秒</td>
</tr>
<tr>
<td>print-parent-fields</td>
<td>true</td>
<td>是否打印在 parent class 里的 filed</td>
</tr>
<tr>
<td>verbose</td>
<td>false</td>
<td>是否打印更多详细信息</td>
</tr>
<tr>
<td>strict</td>
<td>true</td>
<td>是否启用 strict 模式</td>
</tr>
</tbody></table>
<h2 id="获取单个option-的值"><a href="#获取单个option-的值" class="headerlink" title="获取单个option 的值"></a>获取单个option 的值</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ options json-format</span><br><span class="line"> LEVEL  TYPE  NAME         VALUE  SUMMARY             DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line"> 2      bool  json-format  false  Option to support   This option enables to format object</span><br><span class="line">        ean                       JSON format of obj  output with JSON when -x option selec</span><br><span class="line">                                  ect output          ted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>默认情况下 json-format 为 false，如果希望 watch / tt 等命令结果以 json 格式输出，则可以设置 json-format 为 true。</p>
</div>

<h2 id="设置指定的-option"><a href="#设置指定的-option" class="headerlink" title="设置指定的 option"></a>设置指定的 option</h2><p>例如，想打开执行结果存日志功能，输入如下命令即可：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ options save-result true</span><br><span class="line"> NAME         BEFORE-VALUE  AFTER-VALUE</span><br><span class="line">----------------------------------------</span><br><span class="line"> save-result  false         true</span><br></pre></td></tr></table></figure>

<h2 id="允许增强-JDK-的类"><a href="#允许增强-JDK-的类" class="headerlink" title="允许增强 JDK 的类"></a>允许增强 JDK 的类</h2><p>默认情况下<code>unsafe</code> 为 false，即 watch/trace 等命令不会增强 JVM 的类，即<code>java.*</code> 下面的类。</p>
<p>如果想增强 JVM 里的类，可以执行 <code>options unsafe true</code> ，设置<code>unsafe</code> 为 true。</p>
<h2 id="以-JSON-格式打印对象"><a href="#以-JSON-格式打印对象" class="headerlink" title="以 JSON 格式打印对象"></a>以 JSON 格式打印对象</h2><p><code>options json-format</code> 可以看到当前的 <code>json-format</code> 为 false<br>运行 <code>ognl &#39;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#39;</code> 得到的结果并不是 JSON 格式</p>
<p>如果希望输出 JSON 格式，可以使用 <code>options json-format true</code> 开启，开启后再运行 <code>ognl &#39;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#39;</code> 这是可以看到输出的格式已经转变为 JSON 格式。</p>
<hr>
<h1 id="案例：排查函数调用异常"><a href="#案例：排查函数调用异常" class="headerlink" title="案例：排查函数调用异常"></a>案例：排查函数调用异常</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>目前，访问 <code>/user/0</code> ，会返回 500 异常：</p>
<p>但请求的具体参数，异常栈是什么呢？</p>
<h2 id="查看-UserController-的-参数-异常"><a href="#查看-UserController-的-参数-异常" class="headerlink" title="查看 UserController 的 参数/异常"></a>查看 UserController 的 参数/异常</h2><p>在 Arthas 里执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * &#39;&#123;params, throwExp&#125;&#39;</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个参数是类名，支持通配</li>
<li>第二个参数是函数名，支持通配</li>
</ol>
<p>访问 <code>/user/0</code>,<code>watch</code> 命令会打印调用的参数和异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@5728]$ watch  com.example.demo.arthas.user.UserController  * &#39;&#123;params, throwExp&#125;&#39;</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost in 172 ms, listenerId: 1</span><br><span class="line">method&#x3D;com.example.demo.arthas.user.UserController.findUserById location&#x3D;AtExceptionExit</span><br><span class="line">ts&#x3D;2024-01-05 16:31:06; [cost&#x3D;6.6047ms] result&#x3D;@ArrayList[</span><br><span class="line">    @Object[][isEmpty&#x3D;false;size&#x3D;1],</span><br><span class="line">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>可以看到实际抛出的异常是<code>IllegalArgumentException</code> 。</p>
<p>可以输入 <code>Q</code> 或者 <code>Ctrl+C</code> 退出 watch 命令。</p>
<p>如果想把获取到的结果展开，可以用<code>-x</code> 参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@6392]$ watch  com.example.demo.arthas.user.UserController  * &#39;&#123;params, throwExp&#125;&#39; -x 2</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost in 119 ms, listenerId: 1</span><br><span class="line">method&#x3D;com.example.demo.arthas.user.UserController.findUserById location&#x3D;AtExceptionExit</span><br><span class="line">ts&#x3D;2024-01-05 16:38:32; [cost&#x3D;6.8937ms] result&#x3D;@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[0],</span><br><span class="line">    ],</span><br><span class="line">    java.lang.IllegalArgumentException: id &lt; 1</span><br><span class="line">        at com.example.demo.arthas.user.UserController.findUserById(UserController.java:19)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Unknown Source)</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:133)</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)</span><br><span class="line">        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:635)</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        ......</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<h2 id="返回值表达式"><a href="#返回值表达式" class="headerlink" title="返回值表达式"></a>返回值表达式</h2><p>在上面的例子里，第三个参数是<code>返回值表达式</code> ，它实际上是一个<code>ognl</code> 表达式，它支持一些内置对象：</p>
<ul>
<li><code>loader</code></li>
<li><code>clazz</code></li>
<li><code>method</code></li>
<li><code>target</code></li>
<li><code>params</code></li>
<li><code>returnObj</code></li>
<li><code>throwExp</code></li>
<li><code>isBefore</code></li>
<li><code>isThrow</code></li>
<li><code>isReturn</code></li>
</ul>
<p>你可以利用这些内置对象来组成不同的表达式。比如返回一个数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * &#39;&#123;params[0], target, returnObj&#125;&#39;</span><br></pre></td></tr></table></figure>

<p>更多参考：<a href="https://arthas.aliyun.com/doc/advice-class.html">https://arthas.aliyun.com/doc/advice-class.html</a></p>
<h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><p><code>watch</code> 命令支持在第 4 个参数里写条件表达式，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * returnObj &#39;params[0] &gt; 100&#39;</span><br></pre></td></tr></table></figure>

<p>当访问 <code>/user/1</code> 时，<code>watch</code> 命令没有输出</p>
<p>当访问 <code>/user/101</code> 时，<code>watch</code> 会打印出结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@6392]$ watch com.example.demo.arthas.user.UserController  * returnObj &#39;params[0]&gt;100&#39;</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost in 31 ms, listenerId: 2</span><br><span class="line">method&#x3D;com.example.demo.arthas.user.UserController.findUserById location&#x3D;AtExit</span><br><span class="line">ts&#x3D;2024-01-05 16:46:59; [cost&#x3D;0.5729ms] result&#x3D;@User[</span><br><span class="line">    id&#x3D;@Integer[101],</span><br><span class="line">    name&#x3D;@String[name101],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="当异常时捕获"><a href="#当异常时捕获" class="headerlink" title="当异常时捕获"></a>当异常时捕获</h2><p><code>watch</code> 命令支持<code>-e</code> 选项，表示只捕获抛出异常时的请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * &quot;&#123;params[0],throwExp&#125;&quot; -e</span><br></pre></td></tr></table></figure>

<p>当访问<code>/user/0</code>时，<code>watch</code>会打印异常信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@6392]$ watch com.example.demo.arthas.user.UserController * &quot;&#123;params[0],throwExp&#125;&quot; -e</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost in 38 ms, listenerId: 6</span><br><span class="line">method&#x3D;com.example.demo.arthas.user.UserController.findUserById location&#x3D;AtExceptionExit</span><br><span class="line">ts&#x3D;2024-01-05 16:57:40; [cost&#x3D;1.197ms] result&#x3D;@ArrayList[</span><br><span class="line">    @Integer[0],</span><br><span class="line">    @IllegalArgumentException[java.lang.IllegalArgumentException: id &lt; 1],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="按照耗时进行过滤"><a href="#按照耗时进行过滤" class="headerlink" title="按照耗时进行过滤"></a>按照耗时进行过滤</h2><p>watch 命令支持按请求耗时进行过滤，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * &#39;&#123;params, returnObj&#125;&#39; &#39;#cost&gt;200&#39;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="案例：热更新代码"><a href="#案例：热更新代码" class="headerlink" title="案例：热更新代码"></a>案例：热更新代码</h1><p>下面介绍通过<code>jad</code> /<code>mc</code> /<code>redefine</code> 命令实现动态更新代码的功能。</p>
<p>目前，访问 <code>/user/0</code> ，会返回 500 异常：</p>
<p>下面通过热更新代码，修改这个逻辑。</p>
<h2 id="jad-反编译-UserController"><a href="#jad-反编译-UserController" class="headerlink" title="jad 反编译 UserController"></a>jad 反编译 UserController</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; &#x2F;tmp&#x2F;UserController.java</span><br></pre></td></tr></table></figure>

<p>jad 反编译的结果保存在 <code>/tmp/UserController.java</code> 文件里了。</p>
<p>再打开一个终端于 <code>Tab 3</code> ，然后在 <code>Tab3</code> 里用 <code>sed</code> 来编辑<code>/tmp/UserController.java</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;throw new IllegalArgumentException(&quot;id &lt; 1&quot;)&#x2F;return new User(id, &quot;name&quot; + id)&#x2F;g&#39; &#x2F;tmp&#x2F;UserController.java</span><br></pre></td></tr></table></figure>

<p>使用 <code>cat</code> 命令查看修改后的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;UserController.java</span><br></pre></td></tr></table></figure>

<p>比如当 user id 小于 1 时，也正常返回，不抛出异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(value=&#123;&quot;/user/&#123;id&#125;&quot;&#125;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">     logger.info(<span class="string">&quot;id: &#123;&#125;&quot;</span>, (Object)id);</span><br><span class="line">     <span class="keyword">if</span> (id != <span class="keyword">null</span> &amp;&amp; id &lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">&quot;name&quot;</span> + id);</span><br><span class="line">         <span class="comment">// throw new IllegalArgumentException(&quot;id &lt; 1&quot;);</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> User(id.intValue(), <span class="string">&quot;name&quot;</span> + id);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>mc</code> (Memory Compiler) 命令来编译加载 UserController， 可以通过 -c 指定 classLoaderHash 或者 –classLoaderClass 参数指定 ClassLoader，这里为了操作连贯性使用 classLoaderClass。</p>
<h2 id="查询-UserController-类加载器"><a href="#查询-UserController-类加载器" class="headerlink" title="查询 UserController 类加载器"></a>查询 UserController 类加载器</h2><h3 id="sc-查找加载-UserController-的-ClassLoader"><a href="#sc-查找加载-UserController-的-ClassLoader" class="headerlink" title="sc 查找加载 UserController 的 ClassLoader"></a>sc 查找加载 UserController 的 ClassLoader</h3><p>回到 <code>Tab 2</code> 里运行 <code>sc -d *UserController | grep classLoaderHash</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@6392]$ sc -d *UserController | grep classLoaderHash</span><br><span class="line"> classLoaderHash   38af3868</span><br></pre></td></tr></table></figure>

<h3 id="classloader-查询类加载器名称"><a href="#classloader-查询类加载器名称" class="headerlink" title="classloader 查询类加载器名称"></a>classloader 查询类加载器名称</h3><p><code>classloader -l</code> 查询所有的类加载器列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@6392]$ classloader  -l</span><br><span class="line"> name                                                             loadedCount  hash      parent</span><br><span class="line"> BootstrapClassLoader                                             3221         null      null</span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader@384abb78               2630         384abb78  sun.misc.Launcher$ExtClassLoade</span><br><span class="line">                                                                                         r@a09ee92</span><br><span class="line"> org.springframework.boot.loader.LaunchedURLClassLoader@38af3868  4591         38af3868  sun.misc.Launcher$AppClassLoade</span><br><span class="line">                                                                                         r@5c647e05</span><br><span class="line"> sun.misc.Launcher$AppClassLoader@5c647e05                        45           5c647e05  sun.misc.Launcher$ExtClassLoade</span><br><span class="line">                                                                                         r@a09ee92</span><br><span class="line"> sun.misc.Launcher$ExtClassLoader@a09ee92                         19           a09ee92   null</span><br><span class="line">Affect(row-cnt:5) cost in 7 ms.</span><br></pre></td></tr></table></figure>

<p><code>UserController classLoaderHash</code> 值对应的类加载器为 <code>org.springframework.boot.loader.LaunchedURLClassLoader</code></p>
<h3 id="mc-编译加载-UserController"><a href="#mc-编译加载-UserController" class="headerlink" title="mc 编译加载 UserController"></a>mc 编译加载 UserController</h3><p>保存到 <code>/tmp/UserController.java</code> 之后可以使用 mc (Memory Compiler) 命令来编译</p>
<h3 id="mc-指定-classloader-编译-UserController"><a href="#mc-指定-classloader-编译-UserController" class="headerlink" title="mc 指定 classloader 编译 UserController"></a>mc 指定 classloader 编译 UserController</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ mc -c 33c7353a &#x2F;tmp&#x2F;UserController.java  -d &#x2F;tmp&#x2F;</span><br><span class="line">Memory compiler output:</span><br><span class="line">D:\tmp\com\example\demo\arthas\user\UserController.class</span><br><span class="line">Affect(row-cnt:1) cost in 4442 ms.</span><br></pre></td></tr></table></figure>

<h3 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h3><p>再使用<code>redefine</code> 命令重新加载新编译好的<code>UserController.class</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ redefine &#x2F;tmp&#x2F;com&#x2F;example&#x2F;demo&#x2F;arthas&#x2F;user&#x2F;UserController.class</span><br><span class="line">redefine success, size: 1, classes:</span><br><span class="line">com.example.demo.arthas.user.UserController</span><br></pre></td></tr></table></figure>

<h3 id="热修改代码结果"><a href="#热修改代码结果" class="headerlink" title="热修改代码结果"></a>热修改代码结果</h3><p><code>redefine</code> 成功之后，再次访问 <code>/user/0</code>，结果是：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;name0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="案例：Arthas-后台异步任务"><a href="#案例：Arthas-后台异步任务" class="headerlink" title="案例：Arthas 后台异步任务"></a>案例：Arthas 后台异步任务</h1><p>arthas 中的后台异步任务，使用了仿 linux 系统任务相关的命令。</p>
<h2 id="使用-amp-在后台执行任务，任务输出重定向"><a href="#使用-amp-在后台执行任务，任务输出重定向" class="headerlink" title="使用 &amp; 在后台执行任务，任务输出重定向"></a>使用 &amp; 在后台执行任务，任务输出重定向</h2><p>可通过 <code>&gt;</code> 或者 <code>&gt;&gt;</code> 将任务输出结果输出到指定的文件中，可以和 <code>&amp;</code> 一起使用，实现 arthas 命令的后台异步任务。</p>
<p>当前我们需要排查一个问题，但是这个问题的出现时间不能确定，那我们就可以把检测命令挂在后台运行，并将保存到输出日志，如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch com.example.demo.arthas.user.UserController * &#39;&#123;params, throwExp&#125;&#39; &#39;throwExp !&#x3D; null&#39; &gt;&gt; a.log &amp;</span><br></pre></td></tr></table></figure>

<p>这时命令在后台执行，可以在 console 中继续执行其他命令。</p>
<p>之后我们去访问：<code>/user/0</code></p>
<p>然后使用 <code>cat a.log</code> 可以看到我们刚刚访问的 URL 抛出了一个异常</p>
<h2 id="通过-jobs-查看任务"><a href="#通过-jobs-查看任务" class="headerlink" title="通过 jobs 查看任务"></a>通过 jobs 查看任务</h2><p>如果希望查看当前有哪些 arthas 任务在执行，可以执行 jobs 命令，执行结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ jobs</span><br><span class="line">[4]*</span><br><span class="line">       Running           watch com.example.demo.arthas.user.UserController * &#39;&#123;params, throwExp !&#x3D; null&#125;&#39; &gt;&gt; a.log &amp;</span><br><span class="line">       execution count : 1</span><br><span class="line">       start time      : Sat Jan 06 09:36:28 CST 2024</span><br><span class="line">       timeout date    : Sun Jan 07 09:36:28 CST 2024</span><br><span class="line">       session         : 4251ad90-2951-4d33-8da1-2d241a3e0a0f (current)</span><br></pre></td></tr></table></figure>

<p>可以看到目前有一个后台任务在执行</p>
<p>job id 是 4, <code>*</code> 表示此 job 是当前 session 创建（生命周期默认为一天）</p>
<p>状态是 <code>Running</code></p>
<p><code>execution count</code> 是执行次数，从启动开始已经执行了 1 次</p>
<p><code>timeout date</code> 是超时的时间，到这个时间，任务将会自动超时退出。</p>
<h2 id="停止命令、切换前后台"><a href="#停止命令、切换前后台" class="headerlink" title="停止命令、切换前后台"></a>停止命令、切换前后台</h2><p>异步执行的命令，如果希望停止，可执行 <code>kill</code>, 希望命令转到前台、后台继续执行 fg、bg 命令。</p>
<p><code>kill</code>掉job id 是 4 的任务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ kill 4</span><br><span class="line">kill job 4 success</span><br><span class="line">[arthas@3880]$ jobs</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>最多同时支持 8 个命令使用重定向将结果写日志</li>
<li>请勿同时开启过多的后台异步命令，以免对目标 JVM 性能造成影响</li>
<li>如果不想停止 arthas，继续执行后台任务，可以执行 <code>quit</code> 退出 arthas 控制台（<code>stop</code> 会停止 arthas 服务）</li>
</ul>
<hr>
<h1 id="案例：动态更新应用-Logger-Level"><a href="#案例：动态更新应用-Logger-Level" class="headerlink" title="案例：动态更新应用 Logger Level"></a>案例：动态更新应用 Logger Level</h1><p>在这个案例里，动态修改应用的 Logger Level。</p>
<h2 id="使用-sc-查找-UserController-的-ClassLoader"><a href="#使用-sc-查找-UserController-的-ClassLoader" class="headerlink" title="使用 sc 查找 UserController 的 ClassLoader"></a>使用 sc 查找 UserController 的 ClassLoader</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>

<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。<br>如果你使用<code>-c</code> ，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code><br>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code> 指定 class name，使用起来更加方便：<br><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code> 是动态变化的。</p>
<h2 id="使用-ognl"><a href="#使用-ognl" class="headerlink" title="使用 ognl"></a>使用 ognl</h2><h3 id="用-ognl-获取-logger"><a href="#用-ognl-获取-logger" class="headerlink" title="用 ognl 获取 logger"></a>用 ognl 获取 logger</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@com.example.demo.arthas.user.UserController@logger&#39;</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID&#x3D;@Long[5454405123156820674],</span><br><span class="line">    FQCN&#x3D;@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name&#x3D;@String[com.example.demo.arthas.user.UserController],</span><br><span class="line">    level&#x3D;null,</span><br><span class="line">    effectiveLevelInt&#x3D;@Integer[20000],</span><br><span class="line">    parent&#x3D;@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class="line">    childrenList&#x3D;null,</span><br><span class="line">    aai&#x3D;null,</span><br><span class="line">    additive&#x3D;@Boolean[true],</span><br><span class="line">    loggerContext&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>可以知道 <code>UserController@logger</code> 实际使用的是 logback。可以看到 <code>level=null</code> ，则说明实际最终的 level 是从 <code>root logger </code>里来的。</p>
<p>查看<code>root logger </code>的<code>Lever</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;)&#39;</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID&#x3D;@Long[5454405123156820674],</span><br><span class="line">    FQCN&#x3D;@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name&#x3D;@String[ROOT],</span><br><span class="line">    level&#x3D;@Level[INFO],</span><br><span class="line">    effectiveLevelInt&#x3D;@Integer[20000],</span><br><span class="line">    parent&#x3D;null,</span><br><span class="line">    childrenList&#x3D;@CopyOnWriteArrayList[isEmpty&#x3D;false;size&#x3D;3],</span><br><span class="line">    aai&#x3D;@AppenderAttachableImpl[ch.qos.logback.core.spi.AppenderAttachableImpl@452a4e77],</span><br><span class="line">    additive&#x3D;@Boolean[true],</span><br><span class="line">    loggerContext&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="单独设置-UserController-的-logger-level"><a href="#单独设置-UserController-的-logger-level" class="headerlink" title="单独设置 UserController 的 logger level"></a>单独设置 UserController 的 logger level</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@com.example.demo.arthas.user.UserController@logger.setLevel(@ch.qos.logback.classic.Level@DEBUG)&#39;</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>再次获取 <code>UserController@logger</code> ，可以发现已经是 <code>DEBUG</code> 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@com.example.demo.arthas.user.UserController@logger&#39;</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID&#x3D;@Long[5454405123156820674],</span><br><span class="line">    FQCN&#x3D;@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name&#x3D;@String[com.example.demo.arthas.user.UserController],</span><br><span class="line">    level&#x3D;@Level[DEBUG],</span><br><span class="line">    effectiveLevelInt&#x3D;@Integer[10000],</span><br><span class="line">    parent&#x3D;@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class="line">    childrenList&#x3D;null,</span><br><span class="line">    aai&#x3D;null,</span><br><span class="line">    additive&#x3D;@Boolean[true],</span><br><span class="line">    loggerContext&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="修改-logback-的全局-logger-level"><a href="#修改-logback-的全局-logger-level" class="headerlink" title="修改 logback 的全局 logger level"></a>修改 logback 的全局 logger level</h3><p>通过获取 <code>root</code> logger，可以修改全局的 logger level：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).setLevel(@ch.qos.logback.classic.Level@DEBUG)&#39;</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>运行下面命令可以看到 <code>ROOT</code> 的 level 已经修改为了 <code>DEBUG</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;)&#39;</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID&#x3D;@Long[5454405123156820674],</span><br><span class="line">    FQCN&#x3D;@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name&#x3D;@String[ROOT],</span><br><span class="line">    level&#x3D;@Level[DEBUG],</span><br><span class="line">    effectiveLevelInt&#x3D;@Integer[10000],</span><br><span class="line">    parent&#x3D;null,</span><br><span class="line">    childrenList&#x3D;@CopyOnWriteArrayList[isEmpty&#x3D;false;size&#x3D;3],</span><br><span class="line">    aai&#x3D;@AppenderAttachableImpl[ch.qos.logback.core.spi.AppenderAttachableImpl@452a4e77],</span><br><span class="line">    additive&#x3D;@Boolean[true],</span><br><span class="line">    loggerContext&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="使用-logger"><a href="#使用-logger" class="headerlink" title="使用 logger"></a>使用 logger</h2><p>使用 <code>logger</code> 命令可以相较于 <code>ognl</code> 更加便捷的实现 logger level 的动态设置。</p>
<h3 id="使用-logger-命令获取对应-logger-信息"><a href="#使用-logger-命令获取对应-logger-信息" class="headerlink" title="使用 logger 命令获取对应 logger 信息"></a>使用 logger 命令获取对应 logger 信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ logger --name  com.example.demo.arthas.user.UserController</span><br><span class="line"> name                                      com.example.demo.arthas.user.UserController</span><br><span class="line"> class                                     ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                               org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line"> classLoaderHash                           33c7353a</span><br><span class="line"> level                                     DEBUG</span><br><span class="line"> effectiveLevel                            DEBUG</span><br><span class="line"> additivity                                true</span><br><span class="line"> codeSource                                jar:file:&#x2F;D:&#x2F;arthas&#x2F;arthas-packaging-3.7.1-bin&#x2F;demo-arthas-spring-boot.jar!&#x2F;BOOT-INF&#x2F;lib&#x2F;logback-classic-1.1.11.jar!&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="单独设置-UserController-的-logger-level-1"><a href="#单独设置-UserController-的-logger-level-1" class="headerlink" title="单独设置 UserController 的 logger level"></a>单独设置 UserController 的 logger level</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ logger --name com.example.demo.arthas.user.UserController --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --level WARN</span><br><span class="line">Update logger level success.</span><br></pre></td></tr></table></figure>

<p>再次获取对应 <code>logger</code> 信息，可以发现已经是 <code>WARN</code> 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ logger --name com.example.demo.arthas.user.UserController</span><br><span class="line"> name                                      com.example.demo.arthas.user.UserController</span><br><span class="line"> class                                     ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                               org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line"> classLoaderHash                           33c7353a</span><br><span class="line"> level                                     WARN</span><br><span class="line"> effectiveLevel                            WARN</span><br><span class="line"> additivity                                true</span><br><span class="line"> codeSource                                jar:file:&#x2F;D:&#x2F;arthas&#x2F;arthas-packaging-3.7.1-bin&#x2F;demo-arthas-spring-boot.jar!&#x2F;BOOT-INF&#x2F;lib&#x2F;logback-classic-1.1.11.jar!&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="修改-logback-的全局-logger-level-1"><a href="#修改-logback-的全局-logger-level-1" class="headerlink" title="修改 logback 的全局 logger level"></a>修改 logback 的全局 logger level</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ logger --name ROOT --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --level ERROR</span><br><span class="line">Update logger level success.</span><br></pre></td></tr></table></figure>

<p>运行下面命令可以看到 <code>ROOT</code> 的 level 已经修改为了 <code>ERROR</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ logger  --name ROOT --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br><span class="line"> name                                      ROOT</span><br><span class="line"> class                                     ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                               org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line"> classLoaderHash                           33c7353a</span><br><span class="line"> level                                     ERROR</span><br><span class="line"> effectiveLevel                            ERROR</span><br><span class="line"> additivity                                true</span><br><span class="line"> codeSource                                jar:file:&#x2F;D:&#x2F;arthas&#x2F;arthas-packaging-3.7.1-bin&#x2F;demo-arthas-spring-boot.jar!&#x2F;BOOT-INF&#x2F;lib&#x2F;logback-classic-1.1.11.jar!&#x2F;</span><br><span class="line"> appenders                                 name            CONSOLE</span><br><span class="line">                                           class           ch.qos.logback.core.ConsoleAppender</span><br><span class="line">                                           classLoader     org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line">                                           classLoaderHash 33c7353a</span><br><span class="line">                                           target          System.out</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="案例：排查-logger-冲突问题"><a href="#案例：排查-logger-冲突问题" class="headerlink" title="案例：排查 logger 冲突问题"></a>案例：排查 logger 冲突问题</h1><p>在这个案例里，展示排查 logger 冲突的方法。</p>
<h2 id="查找-UserController-的-ClassLoader-1"><a href="#查找-UserController-的-ClassLoader-1" class="headerlink" title="查找 UserController 的 ClassLoader"></a>查找 UserController 的 ClassLoader</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d com.example.demo.arthas.user.UserController | grep classLoaderHash</span><br></pre></td></tr></table></figure>

<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。<br>如果你使用<code>-c</code> ，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code><br>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code> 指定 class name，使用起来更加方便：<br><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code> 是动态变化的。</p>
<h2 id="确认应用使用的-logger-系统"><a href="#确认应用使用的-logger-系统" class="headerlink" title="确认应用使用的 logger 系统"></a>确认应用使用的 logger 系统</h2><p>以 <code>UserController</code> 为例，它使用的是 slf4j api，但实际使用到的 logger 系统是 logback。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader &#39;@com.example.demo.arthas.user.UserController@logger&#39;</span><br><span class="line">@Logger[</span><br><span class="line">    serialVersionUID&#x3D;@Long[5454405123156820674],</span><br><span class="line">    FQCN&#x3D;@String[ch.qos.logback.classic.Logger],</span><br><span class="line">    name&#x3D;@String[com.example.demo.arthas.user.UserController],</span><br><span class="line">    level&#x3D;@Level[INFO],</span><br><span class="line">    effectiveLevelInt&#x3D;@Integer[20000],</span><br><span class="line">    parent&#x3D;@Logger[Logger[com.example.demo.arthas.user]],</span><br><span class="line">    childrenList&#x3D;null,</span><br><span class="line">    aai&#x3D;null,</span><br><span class="line">    additive&#x3D;@Boolean[true],</span><br><span class="line">    loggerContext&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="获取-logback-实际加载的配置文件"><a href="#获取-logback-实际加载的配置文件" class="headerlink" title="获取 logback 实际加载的配置文件"></a>获取 logback 实际加载的配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ ognl --classLoaderClass  org.springframework.boot.loader.LaunchedURLClassLoader  &#39;#map1&#x3D;@org.slf4j.LoggerFactory@getLogger(&quot;root&quot;).loggerContext.objectMap, #map1.get(&quot;CONFIGURATION_WATCH_LIST&quot;)&#39;</span><br><span class="line">@ConfigurationWatchList[</span><br><span class="line">    mainURL&#x3D;@URL[jar:file:&#x2F;D:&#x2F;arthas&#x2F;arthas-packaging-3.7.1-bin&#x2F;demo-arthas-spring-boot.jar!&#x2F;BOOT-INF&#x2F;classes!&#x2F;logback-spring.xml],</span><br><span class="line">    fileWatchList&#x3D;@ArrayList[isEmpty&#x3D;true;size&#x3D;0],</span><br><span class="line">    lastModifiedList&#x3D;@ArrayList[isEmpty&#x3D;true;size&#x3D;0],</span><br><span class="line">    noContextWarning&#x3D;@Integer[0],</span><br><span class="line">    context&#x3D;@LoggerContext[ch.qos.logback.classic.LoggerContext[default]],</span><br><span class="line">    declaredOrigin&#x3D;@ConfigurationWatchList[ch.qos.logback.core.joran.spi.ConfigurationWatchList@5149876],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="使用classloader-命令查找可能存在的-logger-配置文件"><a href="#使用classloader-命令查找可能存在的-logger-配置文件" class="headerlink" title="使用classloader 命令查找可能存在的 logger 配置文件"></a>使用classloader 命令查找可能存在的 logger 配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader --classLoaderClass  org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</span><br><span class="line"> jar:file:&#x2F;D:&#x2F;arthas&#x2F;arthas-packaging-3.7.1-bin&#x2F;demo-arthas-spring-boot.jar!&#x2F;BOOT-INF&#x2F;classes!&#x2F;logback-spring.xml</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 1 ms.</span><br></pre></td></tr></table></figure>

<p>可以知道加载的配置的具体来源。</p>
<p>可以尝试加载容易冲突的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback.xml</span><br><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r log4j.properties</span><br></pre></td></tr></table></figure>

<h1 id="案例：获取-Spring-Context"><a href="#案例：获取-Spring-Context" class="headerlink" title="案例：获取 Spring Context"></a>案例：获取 Spring Context</h1><p>在这个案例里，展示获取 spring context，再获取 bean，然后调用函数。</p>
<h2 id="使用-tt-命令获取到-spring-context"><a href="#使用-tt-命令获取到-spring-context" class="headerlink" title="使用 tt 命令获取到 spring context"></a>使用 tt 命令获取到 spring context</h2><p><a href="https://arthas.aliyun.com/doc/tt.html">tt</a> 即 TimeTunnel，它可以记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br></pre></td></tr></table></figure>

<p>访问：<code>/user/1</code></p>
<p>可以看到<code>tt</code> 命令捕获到了请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ tt -t  org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost in 50 ms, listenerId: 2</span><br><span class="line"> INDEX           TIMESTAMP                              COST(ms)           IS-RET          IS-EXP         OBJECT                        CLASS                                                     METHOD</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000            2024-01-06 15:47:59                    4.1345             true            false          0x369e7ab5                    RequestMappingHandlerAdapter                              invokeHandlerMethod</span><br></pre></td></tr></table></figure>

<h2 id="使用-tt-命令从调用记录里获取到-spring-context"><a href="#使用-tt-命令从调用记录里获取到-spring-context" class="headerlink" title="使用 tt 命令从调用记录里获取到 spring context"></a>使用 tt 命令从调用记录里获取到 spring context</h2><p>输入 <code>Q</code> 或者 <code>Ctrl + C</code> 退出上面的 <code>tt -t</code> 命令。<br>使用 <code>tt -l</code> 命令可以查看之前 <code>tt</code> 命令捕获到的请求信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tt -i 1000 -w &#39;target.getApplicationContext()&#39;</span><br></pre></td></tr></table></figure>

<h2 id="获取-spring-bean，并调用函数"><a href="#获取-spring-bean，并调用函数" class="headerlink" title="获取 spring bean，并调用函数"></a>获取 spring bean，并调用函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ tt -i 1000 -w &#39;target.getApplicationContext().getBean(&quot;helloWorldService&quot;).getHelloMessage()&#39;</span><br><span class="line">@String[Hello World]</span><br><span class="line">Affect(row-cnt:1) cost in 4 ms.</span><br></pre></td></tr></table></figure>

<h2 id="Vmtool-获取-HelloWorldService-对象实例，并调用函数"><a href="#Vmtool-获取-HelloWorldService-对象实例，并调用函数" class="headerlink" title="Vmtool 获取 HelloWorldService 对象实例，并调用函数"></a>Vmtool 获取 HelloWorldService 对象实例，并调用函数</h2><p>上面的方法使用 tt 命令获取 spring bean，并调用函数，有点繁琐，更换为使用 <a href="https://arthas.aliyun.com/doc/vmtool.html">vmtool</a> 将会极大的简化这个流程，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ vmtool --action getInstances --className com.example.demo.arthas.aop.HelloWorldService --express &#39;instances[0].getHelloMessage()&#39;</span><br><span class="line">@String[Hello World]</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="案例：排查-HTTP-请求返回-401"><a href="#案例：排查-HTTP-请求返回-401" class="headerlink" title="案例：排查 HTTP 请求返回 401"></a>案例：排查 HTTP 请求返回 401</h1><p>在这个案例里，展示排查 HTTP 401 问题的技巧。</p>
<p>访问： <code>/admin</code></p>
<p>结果是：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Something went wrong:</span> <span class="number">401</span> <span class="string">Unauthorized</span></span><br></pre></td></tr></table></figure>

<p>我们知道<code>401</code> 通常是被权限管理的<code>Filter</code> 拦截了，那么到底是哪个<code>Filter</code> 处理了这个请求，返回了 401？</p>
<h2 id="跟踪所有的-Filter-函数"><a href="#跟踪所有的-Filter-函数" class="headerlink" title="跟踪所有的 Filter 函数"></a>跟踪所有的 Filter 函数</h2><p>开始 trace：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">trace javax.servlet.Filter *</span><br></pre></td></tr></table></figure>

<p>访问： <code>/admin</code></p>
<p>可以在调用树的最深层，找到<code>AdminFilterConfig$AdminFilter</code> 返回了<code>401</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+---[<span class="number">3.806273</span>ms] javax.servlet.FilterChain:doFilter()</span><br><span class="line">|   <span class="string">`---[3.447472ms] com.example.demo.arthas.AdminFilterConfig$AdminFilter:doFilter()</span></span><br><span class="line"><span class="string">|       `</span>---[<span class="number">0.17259</span>ms] javax.servlet.http.HttpServletResponse:sendError()</span><br></pre></td></tr></table></figure>

<p>输入 <code>Q</code> 或者 <code>Ctrl+C</code> 退出 watch 命令。</p>
<h3 id="通过-stack-获取调用栈"><a href="#通过-stack-获取调用栈" class="headerlink" title="通过 stack 获取调用栈"></a>通过 stack 获取调用栈</h3><p>上面是通过<code>trace</code> 命令来获取信息，从结果里，我们可以知道通过<code>stack</code> 跟踪<code>HttpServletResponse:sendError()</code> ，同样可以知道是哪个<code>Filter</code> 返回了<code>401</code></p>
<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stack javax.servlet.http.HttpServletResponse sendError &#39;params[0]&#x3D;&#x3D;401&#39;</span><br></pre></td></tr></table></figure>

<p>访问： <code>/admin</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ stack  javax.servlet.http.HttpServletResponse sendError &#39;params[0]&#x3D;&#x3D;401&#39;</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 3 , method count: 4) cost in 99 ms, listenerId: 4</span><br><span class="line">ts&#x3D;2024-01-06 16:33:24;thread_name&#x3D;http-nio-80-exec-3;id&#x3D;14;is_daemon&#x3D;true;priority&#x3D;5;TCCL&#x3D;org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader@54c14576</span><br><span class="line">    @org.apache.catalina.connector.Response.sendError()</span><br><span class="line">        at org.apache.catalina.connector.ResponseFacade.sendError(ResponseFacade.java:462)</span><br><span class="line">        at com.example.demo.arthas.AdminFilterConfig$AdminFilter.doFilter(AdminFilterConfig.java:38)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109)</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81)</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class="line">        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496)</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342)</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803)</span><br><span class="line">        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)</span><br><span class="line">        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1468)</span><br><span class="line">        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>

<p>输入 <code>Q</code> 或者 <code>Ctrl+C</code> 退出 watch 命令。</p>
<h1 id="案例：理解-Spring-Boot-应用的-ClassLoader-结构"><a href="#案例：理解-Spring-Boot-应用的-ClassLoader-结构" class="headerlink" title="案例：理解 Spring Boot 应用的 ClassLoader 结构"></a>案例：理解 Spring Boot 应用的 ClassLoader 结构</h1><p>下面介绍<code>classloader</code> 命令的功能。</p>
<p>先访问一个 jsp 网页，触发 jsp 的加载： <code>访问 hello 页面</code></p>
<h2 id="列出所有-ClassLoader"><a href="#列出所有-ClassLoader" class="headerlink" title="列出所有 ClassLoader"></a>列出所有 ClassLoader</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader -l</span><br><span class="line"> name                                                             loadedCount  hash      parent</span><br><span class="line"> BootstrapClassLoader                                             3132         null      null</span><br><span class="line"> com.taobao.arthas.agent.ArthasClassloader@a3df247                1810         a3df247   sun.misc.Launcher$ExtClassLoader@f6f4d33</span><br><span class="line"> java.net.FactoryURLClassLoader@7b8e788f                          842          7b8e788f  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class="line"> org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a  4759         33c7353a  sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class="line"> sun.misc.Launcher$AppClassLoader@3d4eac69                        45           3d4eac69  sun.misc.Launcher$ExtClassLoader@f6f4d33</span><br><span class="line"> sun.misc.Launcher$ExtClassLoader@f6f4d33                         23           f6f4d33   null</span><br><span class="line">Affect(row-cnt:6) cost in 4 ms.</span><br></pre></td></tr></table></figure>

<h2 id="统计-ClassLoader-实际使用-URL-和未使用的-URL"><a href="#统计-ClassLoader-实际使用-URL-和未使用的-URL" class="headerlink" title="统计 ClassLoader 实际使用 URL 和未使用的 URL"></a>统计 ClassLoader 实际使用 URL 和未使用的 URL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --url-stat</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>注意：基于 JVM 目前已加载的所有类统计，不代表 Unused URLs 可以从应用中删掉。因为可能将来需要从 Unused URLs 里加载类，或者需要加载 resources</p>
</div>

<h2 id="列出-ClassLoader-里加载的所有类"><a href="#列出-ClassLoader-里加载的所有类" class="headerlink" title="列出 ClassLoader 里加载的所有类"></a>列出 ClassLoader 里加载的所有类</h2><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code> 加载的类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader -a --classLoaderClass  org.apache.jasper.servlet.JasperLoader | grep hello</span><br><span class="line"> org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>

<h2 id="查看类的-classloader-层次"><a href="#查看类的-classloader-层次" class="headerlink" title="查看类的 classloader 层次"></a>查看类的 classloader 层次</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ sc -d org.apache.jsp.jsp.hello_jsp</span><br><span class="line"> class-info        org.apache.jsp.jsp.hello_jsp</span><br><span class="line"> code-source       &#x2F;C:&#x2F;Users&#x2F;pt-tianzhencai&#x2F;AppData&#x2F;Local&#x2F;Temp&#x2F;tomcat.2859845778385490372.80&#x2F;work&#x2F;Tomcat&#x2F;localhost&#x2F;ROOT&#x2F;</span><br><span class="line"> name              org.apache.jsp.jsp.hello_jsp</span><br><span class="line"> isInterface       false</span><br><span class="line"> isAnnotation      false</span><br><span class="line"> isEnum            false</span><br><span class="line"> isAnonymousClass  false</span><br><span class="line"> isArray           false</span><br><span class="line"> isLocalClass      false</span><br><span class="line"> isMemberClass     false</span><br><span class="line"> isPrimitive       false</span><br><span class="line"> isSynthetic       false</span><br><span class="line"> simple-name       hello_jsp</span><br><span class="line"> modifier          final,public</span><br><span class="line"> annotation</span><br><span class="line"> interfaces        org.apache.jasper.runtime.JspSourceDependent,org.apache.jasper.runtime.JspSourceImports</span><br><span class="line"> super-class       +-org.apache.jasper.runtime.HttpJspBase</span><br><span class="line">                     +-javax.servlet.http.HttpServlet</span><br><span class="line">                       +-javax.servlet.GenericServlet</span><br><span class="line">                         +-java.lang.Object</span><br><span class="line"> class-loader      +-org.apache.jasper.servlet.JasperLoader@4bc4fe20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                       +-org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line">                         +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class="line">                           +-sun.misc.Launcher$ExtClassLoader@f6f4d33</span><br><span class="line"> classLoaderHash   4bc4fe20</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 7 ms.</span><br></pre></td></tr></table></figure>

<h2 id="查看-ClassLoader-树"><a href="#查看-ClassLoader-树" class="headerlink" title="查看 ClassLoader 树"></a>查看 ClassLoader 树</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader -t</span><br><span class="line">+-BootstrapClassLoader</span><br><span class="line">+-sun.misc.Launcher$ExtClassLoader@f6f4d33</span><br><span class="line">  +-com.taobao.arthas.agent.ArthasClassloader@a3df247</span><br><span class="line">  +-sun.misc.Launcher$AppClassLoader@3d4eac69</span><br><span class="line">    +-java.net.FactoryURLClassLoader@7b8e788f</span><br><span class="line">    +-org.springframework.boot.loader.LaunchedURLClassLoader@33c7353a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        +-org.apache.jasper.servlet.JasperLoader@4bc4fe20</span><br><span class="line">Affect(row-cnt:8) cost in 4 ms.</span><br></pre></td></tr></table></figure>

<h2 id="查看-URLClassLoader-实际的-urls"><a href="#查看-URLClassLoader-实际的-urls" class="headerlink" title="查看 URLClassLoader 实际的 urls"></a>查看 URLClassLoader 实际的 urls</h2><p>比如上面查看到的 spring LaunchedURLClassLoader 为 <code>org.springframework.boot.loader.LaunchedURLClassLoader</code> ，可以通过 <code>-c &lt;hashcode&gt;</code> 参数来指定 classloader，还有一种方法可以通过使用 <code>--classLoaderClass</code> 指定类名，从而查看 URLClassLoader 实际的 urls：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>

<h2 id="查找-ClassLoader-里的资源文件"><a href="#查找-ClassLoader-里的资源文件" class="headerlink" title="查找 ClassLoader 里的资源文件"></a>查找 ClassLoader 里的资源文件</h2><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java&#x2F;lang&#x2F;String.class</span><br><span class="line"> jar:file:&#x2F;D:&#x2F;developInstall&#x2F;JDK&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;lib&#x2F;rt.jar!&#x2F;java&#x2F;lang&#x2F;String.class</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 1 ms.</span><br></pre></td></tr></table></figure>

<p>也可以尝试查找类的 class 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@3880]$ classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java&#x2F;lang&#x2F;String.class</span><br><span class="line"> jar:file:&#x2F;D:&#x2F;developInstall&#x2F;JDK&#x2F;jdk1.8.0_161&#x2F;jre&#x2F;lib&#x2F;rt.jar!&#x2F;java&#x2F;lang&#x2F;String.class</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 1 ms.</span><br></pre></td></tr></table></figure>

<h1 id="案例：查找-Top-N-线程"><a href="#案例：查找-Top-N-线程" class="headerlink" title="案例：查找 Top N 线程"></a>案例：查找 Top N 线程</h1><h2 id="查看所有线程信息"><a href="#查看所有线程信息" class="headerlink" title="查看所有线程信息"></a>查看所有线程信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread</span><br></pre></td></tr></table></figure>

<h2 id="查看具体线程的栈"><a href="#查看具体线程的栈" class="headerlink" title="查看具体线程的栈"></a>查看具体线程的栈</h2><p>查看线程 ID 16 的栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread 16</span><br></pre></td></tr></table></figure>

<h2 id="查看-CPU-使用率-top-n-线程的栈"><a href="#查看-CPU-使用率-top-n-线程的栈" class="headerlink" title="查看 CPU 使用率 top n 线程的栈"></a>查看 CPU 使用率 top n 线程的栈</h2><p>参数<code>n</code> 用来指定最忙的前 N 个线程并打印堆栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -n 3</span><br></pre></td></tr></table></figure>

<p>参数<code>i</code> 用来指定 cpu 占比统计的采样间隔，单位为毫秒</p>
<p>查看 5 秒内的 CPU 使用率 top n 线程栈</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -n 3 -i 5000</span><br></pre></td></tr></table></figure>

<h2 id="查找线程是否有阻塞"><a href="#查找线程是否有阻塞" class="headerlink" title="查找线程是否有阻塞"></a>查找线程是否有阻塞</h2><p>参数<code>b</code> 用来指定找出当前阻塞其他线程的线程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -b</span><br></pre></td></tr></table></figure>

<h1 id="案例：获取-Spring-应用运行时配置值"><a href="#案例：获取-Spring-应用运行时配置值" class="headerlink" title="案例：获取 Spring 应用运行时配置值"></a>案例：获取 Spring 应用运行时配置值</h1><p>众所周之，Spring 应用的配置注入方式非常多。除了我们熟悉的方式，比如</p>
<ul>
<li>System Properties/System Env</li>
<li>application.properties/application.yaml</li>
<li>spring profiles</li>
<li>spring cloud config</li>
</ul>
<p>还有很多配置注入的方式，令人眼花缭乱。</p>
<h2 id="获取运行时具体配置"><a href="#获取运行时具体配置" class="headerlink" title="获取运行时具体配置"></a>获取运行时具体配置</h2><p>对于开发人员来说，在运行时怎样确定某个配置是否生效？它的具体值是什么？</p>
<p>用Arthas可以一行命令获取。</p>
<p>比如获取<code>server.port</code>的具体值：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vmtool --action getInstances --className org.springframework.context.ConfigurableApplicationContext --express <span class="string">&#x27;instances[0].getEnvironment().getProperty(&quot;server.port&quot;)&#x27;</span></span><br><span class="line">@String[8810]</span><br></pre></td></tr></table></figure>

<h2 id="获取具体的配置来源"><a href="#获取具体的配置来源" class="headerlink" title="获取具体的配置来源"></a>获取具体的配置来源</h2><p>但是怎样具体是从哪个配置源来的？</p>
<ol>
<li><p> 对于 spring boot应用，可以打开一个新的 terminal 窗口，执行 <code>telnet 127.0.0.1 3658</code>连接上Arthas。</p>
</li>
<li><p>执行下面的 watch 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource findConfigurationProperty</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li> 在原来窗口用上面的<code>vmtool</code>命令来获取<code>server.port</code>的值</li>
</ol>
<p>可以看到 watch 返回结果里有具体的配置来源<code>application.yml</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ watch org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource findConfigurationProperty</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost <span class="keyword">in</span> 217 ms, listenerId: 5</span><br><span class="line">method=org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource.findConfigurationProperty location=AtExit</span><br><span class="line">ts=2023-11-27 16:08:07.696; [cost=0.327042ms] result=@ArrayList[</span><br><span class="line">    @Object[][isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">    @ConfigurationPropertySourcesPropertySource[ConfigurationPropertySourcesPropertySource &#123;name=<span class="string">&#x27;configurationProperties&#x27;</span>&#125;],</span><br><span class="line">    @ConfigurationProperty[[ConfigurationProperty@18fb3ec9 name = server.port, value = 7001, origin = class path resource [application.yml] - 2:9]],</span><br></pre></td></tr></table></figure>

<h1 id="Exit-Stop"><a href="#Exit-Stop" class="headerlink" title="Exit/Stop"></a>Exit/Stop</h1><h2 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h2><p>Arthas 在 watch/trace 等命令时，实际上是修改了应用的字节码，插入增强的代码。显式执行 <code>reset</code> 命令，可以清除掉这些增强代码。</p>
<h2 id="退出-Arthas"><a href="#退出-Arthas" class="headerlink" title="退出 Arthas"></a>退出 Arthas</h2><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出 Arthas。</p>
<p>退出 Arthas 之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>
<h2 id="彻底退出-Arthas"><a href="#彻底退出-Arthas" class="headerlink" title="彻底退出 Arthas"></a>彻底退出 Arthas</h2><p><code>exit/quit</code> 命令只是退出当前 session，arthas server 还在目标进程中运行。</p>
<p>想完全退出 Arthas，可以执行 <code>stop</code> 命令。</p>
<h1 id="Arthas-boot-支持的参数"><a href="#Arthas-boot-支持的参数" class="headerlink" title="Arthas-boot 支持的参数"></a>Arthas-boot 支持的参数</h1><p><code>arthas-boot.jar</code> 支持很多参数，可以执行 <code>java -jar arthas-boot.jar -h</code> 来查看。</p>
<h2 id="允许外部访问"><a href="#允许外部访问" class="headerlink" title="允许外部访问"></a>允许外部访问</h2><p>默认情况下，arthas server 侦听的是 <code>127.0.0.1</code> 这个 IP，如果希望远程可以访问，可以使用<code>--target-ip</code> 的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar --target-ip</span><br></pre></td></tr></table></figure>

<h2 id="列出所有的版本"><a href="#列出所有的版本" class="headerlink" title="列出所有的版本"></a>列出所有的版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar --versions</span><br></pre></td></tr></table></figure>

<p>使用指定版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar --use-version 3.1.0</span><br></pre></td></tr></table></figure>

<h2 id="只侦听-Telnet-端口，不侦听-HTTP-端口"><a href="#只侦听-Telnet-端口，不侦听-HTTP-端口" class="headerlink" title="只侦听 Telnet 端口，不侦听 HTTP 端口"></a>只侦听 Telnet 端口，不侦听 HTTP 端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar --telnet-port 9999 --http-port -1</span><br></pre></td></tr></table></figure>

<h2 id="打印运行的详情"><a href="#打印运行的详情" class="headerlink" title="打印运行的详情"></a>打印运行的详情</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar -v</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java诊断工具</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
        <tag>Java诊断工具</tag>
        <tag>线上问题排查</tag>
        <tag>JVM</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Arthas 命令</title>
    <url>/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h1><h2 id="jvm-相关"><a href="#jvm-相关" class="headerlink" title="jvm 相关"></a>jvm 相关</h2><ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Dashboard-%E5%91%BD%E4%BB%A4">dashboard</a> - 当前系统的实时数据面板</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Getstatic-%E5%91%BD%E4%BB%A4">getstatic</a> - 查看类的静态属性</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#dump-%E5%91%BD%E4%BB%A4">heapdump</a> - dump java heap, 类似 jmap 命令的 heap dump 功能</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Jvm-%E5%91%BD%E4%BB%A4">jvm</a> - 查看当前 JVM 的信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Logger-%E5%91%BD%E4%BB%A4">logger</a> - 查看和修改 logger</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Mbean-%E5%91%BD%E4%BB%A4">mbean</a> - 查看 Mbean 的信息</li>
<li><a href="http://localhost:4000/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#memory-%E5%91%BD%E4%BB%A4">memory</a> - 查看 JVM 的内存信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#ognl-%E5%91%BD%E4%BB%A4">ognl</a> - 执行 ognl 表达式</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Perfcounter-%E5%91%BD%E4%BB%A4">perfcounter</a> - 查看当前 JVM 的 Perf Counter 信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Sysenv-%E5%91%BD%E4%BB%A4">sysenv</a> - 查看 JVM 的环境变量</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#sysprop-%E5%91%BD%E4%BB%A4">sysprop</a> - 查看和修改 JVM 的系统属性</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#thread-%E5%91%BD%E4%BB%A4">thread</a> - 查看当前 JVM 的线程堆栈信息</li>
<li><a href="http://localhost:4000/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Vmoption-%E5%91%BD%E4%BB%A4">vmoption</a> - 查看和修改 JVM 里诊断相关的 option</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Vmoption-%E5%91%BD%E4%BB%A4">vmtool</a> - 从 jvm 里查询对象，执行 forceGc</li>
</ul>
<h2 id="class-classloader-相关"><a href="#class-classloader-相关" class="headerlink" title="class/classloader 相关"></a>class/classloader 相关</h2><ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Classloader-%E5%91%BD%E4%BB%A4">classloader</a> - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#dump-%E5%91%BD%E4%BB%A4">dump</a> - dump 已加载类的 byte code 到特定目录</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Jad-%E5%91%BD%E4%BB%A4">jad</a> - 反编译指定已加载类的源码</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#mc">mc</a> - 内存编译器，内存编译<code>.java</code>文件为<code>.class</code>文件</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#redefine">redefine</a> - 加载外部的<code>.class</code>文件，redefine 到 JVM 里</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#retransform-%E5%91%BD%E4%BB%A4">retransform</a> - 加载外部的<code>.class</code>文件，retransform 到 JVM 里</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Sc-%E5%91%BD%E4%BB%A4">sc</a> - 查看 JVM 已加载的类信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Sm-%E5%91%BD%E4%BB%A4">sm</a> - 查看已加载类的方法信息</li>
</ul>
<h2 id="monitor-watch-trace-相关"><a href="#monitor-watch-trace-相关" class="headerlink" title="monitor/watch/trace 相关"></a>monitor/watch/trace 相关</h2><p>注意</p>
<p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 <code>stop</code> 或将增强过的类执行 <code>reset</code> 命令。</p>
<ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Monitor-%E5%91%BD%E4%BB%A4">monitor</a> - 方法执行监控</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Stack-%E5%91%BD%E4%BB%A4">stack</a> - 输出当前方法被调用的调用路径</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#trace-%E5%91%BD%E4%BB%A4">trace</a> - 方法内部调用路径，并输出方法路径上的每个节点上耗时</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#tt-%E5%91%BD%E4%BB%A4">tt</a> - 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#watch-%E5%91%BD%E4%BB%A4">watch</a> - 方法执行数据观测</li>
</ul>
<h2 id="profiler-火焰图"><a href="#profiler-火焰图" class="headerlink" title="profiler/火焰图"></a>profiler/火焰图</h2><ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Profiler-%E5%91%BD%E4%BB%A4">profiler</a> - 使用<a href="https://github.com/jvm-profiling-tools/async-profiler">async-profiler在新窗口打开</a>对应用采样，生成火焰图</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#jfr-%E5%91%BD%E4%BB%A4">jfr</a> - 动态开启关闭 JFR 记录</li>
</ul>
<h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/auth.html">auth</a> - 鉴权</li>
</ul>
<h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Options-%E5%91%BD%E4%BB%A4">options</a> - 查看或设置 Arthas 全局开关</li>
</ul>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>Arthas 支持使用管道对上述命令的结果进行进一步的处理，如<code>sm java.lang.String * | grep &#39;index&#39;</code></p>
<ul>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Grep-%E5%91%BD%E4%BB%A4">grep</a> - 搜索满足条件的结果</li>
<li>plaintext - 将命令的结果去除 ANSI 颜色</li>
<li>wc - 按行统计输出结果</li>
</ul>
<h2 id="后台异步任务"><a href="#后台异步任务" class="headerlink" title="后台异步任务"></a>后台异步任务</h2><p>当线上出现偶发的问题，比如需要 watch 某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考<a href="https://arthas.aliyun.com/doc/async.html">这里</a></p>
<ul>
<li>使用 <code>&gt;</code> 将结果重写向到日志文件，使用 <code>&amp;</code> 指定命令是后台运行，session 断开不影响任务执行（生命周期默认为 1 天）</li>
<li>jobs - 列出所有 job</li>
<li>kill - 强制终止任务</li>
<li>fg - 将暂停的任务拉到前台执行</li>
<li>bg - 将暂停的任务放到后台执行</li>
</ul>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/base64.html">base64</a> - base64 编码转换，和 linux 里的 base64 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Cat-%E5%91%BD%E4%BB%A4">cat</a> - 打印文件内容，和 linux 里的 cat 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Cls-%E5%91%BD%E4%BB%A4">cls</a> - 清空当前屏幕区域</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#echo-%E5%91%BD%E4%BB%A4">echo</a> - 打印参数，和 linux 里的 echo 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Grep-%E5%91%BD%E4%BB%A4">grep</a> - 匹配查找，和 linux 里的 grep 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Help-%E5%91%BD%E4%BB%A4">help</a> - 查看命令帮助信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#history-%E5%91%BD%E4%BB%A4">history</a> - 打印命令历史</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Keymap-%E5%91%BD%E4%BB%A4">keymap</a> - Arthas 快捷键列表及自定义快捷键</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Pwd-%E5%91%BD%E4%BB%A4">pwd</a> - 返回当前的工作目录，和 linux 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Quit-stop-%E5%91%BD%E4%BB%A4">quit</a> - 退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Reset-%E5%91%BD%E4%BB%A4">reset</a> - 重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#session-%E5%91%BD%E4%BB%A4">session</a> - 查看当前会话的信息</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#Quit-stop-%E5%91%BD%E4%BB%A4">stop</a> - 关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#tee-%E5%91%BD%E4%BB%A4">tee</a> - 复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似</li>
<li><a href="https://tianzhencai.xyz/2024/01/08/Arthas-%E5%91%BD%E4%BB%A4/#version-%E5%91%BD%E4%BB%A4">version</a> - 输出当前目标 Java 进程所加载的 Arthas 版本号</li>
</ul>
<hr>
<h1 id="Cat-命令"><a href="#Cat-命令" class="headerlink" title="Cat 命令"></a>Cat 命令</h1><div class="note info no-icon"><p>提示</p>
<p>打印文件内容，和 linux 里的 cat 命令类似。</p>
</div>

<p>使用参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &#x2F;tmp&#x2F;a.txt</span><br></pre></td></tr></table></figure>

<h1 id="Classloader-命令"><a href="#Classloader-命令" class="headerlink" title="Classloader 命令"></a>Classloader 命令</h1><h2 id="列出所有-ClassLoader"><a href="#列出所有-ClassLoader" class="headerlink" title="列出所有 ClassLoader"></a>列出所有 ClassLoader</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader -l</span><br></pre></td></tr></table></figure>

<h2 id="统计-ClassLoader-实际使用-URL-和未使用的-URL"><a href="#统计-ClassLoader-实际使用-URL-和未使用的-URL" class="headerlink" title="统计 ClassLoader 实际使用 URL 和未使用的 URL"></a>统计 ClassLoader 实际使用 URL 和未使用的 URL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --url-stat</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：基于 JVM 目前已加载的所有类统计，不代表 Unused URLs 可以从应用中删掉。因为可能将来需要从 Unused URLs 里加载类，或者需要加载 resources</p>
</blockquote>
<h2 id="列出-ClassLoader-里加载的所有类"><a href="#列出-ClassLoader-里加载的所有类" class="headerlink" title="列出 ClassLoader 里加载的所有类"></a>列出 ClassLoader 里加载的所有类</h2><p>列出上面的<code>org.apache.jasper.servlet.JasperLoader</code> 加载的类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader -a --classLoaderClass org.apache.jasper.servlet.JasperLoader | grep hello</span><br></pre></td></tr></table></figure>

<h2 id="查看类的-classloader-层次"><a href="#查看类的-classloader-层次" class="headerlink" title="查看类的 classloader 层次"></a>查看类的 classloader 层次</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d org.apache.jsp.jsp.hello_jsp</span><br></pre></td></tr></table></figure>

<h2 id="查看-ClassLoader-树"><a href="#查看-ClassLoader-树" class="headerlink" title="查看 ClassLoader 树"></a>查看 ClassLoader 树</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader -t</span><br></pre></td></tr></table></figure>

<h2 id="查看-URLClassLoader-实际的-urls"><a href="#查看-URLClassLoader-实际的-urls" class="headerlink" title="查看 URLClassLoader 实际的 urls"></a>查看 URLClassLoader 实际的 urls</h2><p>比如上面查看到的 spring LaunchedURLClassLoader 为 <code>org.springframework.boot.loader.LaunchedURLClassLoader</code> ，可以通过 <code>-c &lt;hashcode&gt;</code> 参数来指定 classloader，还有一种方法可以通过使用 <code>--classLoaderClass</code> 指定类名，从而查看 URLClassLoader 实际的 urls：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader</span><br></pre></td></tr></table></figure>

<h2 id="查找-ClassLoader-里的资源文件"><a href="#查找-ClassLoader-里的资源文件" class="headerlink" title="查找 ClassLoader 里的资源文件"></a>查找 ClassLoader 里的资源文件</h2><p>查找指定的资源文件： <code>classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r logback-spring.xml</code></p>
<p>也可以尝试查找类的 class 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classloader --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader -r java&#x2F;lang&#x2F;String.class</span><br></pre></td></tr></table></figure>

<h1 id="Cls-命令"><a href="#Cls-命令" class="headerlink" title="Cls 命令"></a>Cls 命令</h1><p>通过 <code>cls</code> 命令 可以清空当前屏幕区域。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Grep-命令"><a href="#Grep-命令" class="headerlink" title="Grep 命令"></a>Grep 命令</h1><div class="note info no-icon"><p>提示</p>
<p>类似传统的 grep 命令。</p>
</div>

<h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  grep [-A &lt;value&gt;] [-B &lt;value&gt;] [-C &lt;value&gt;] [-h] [-i] [-v] [-n] [-m &lt;value&gt;] [-e] [--trim-end] pattern</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  grep command for pipes.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line"> sysprop | grep java</span><br><span class="line"> sysprop | grep java -n</span><br><span class="line"> sysenv | grep -v JAVA</span><br><span class="line"> sysenv | grep -e &quot;(?i)(JAVA|sun)&quot; -m 3  -C 2</span><br><span class="line"> sysenv | grep JAVA -A2 -B3</span><br><span class="line"> thread | grep -m 10 -e  &quot;TIMED_WAITING|WAITING&quot;</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/grep</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-A, --after-context &lt;value&gt;                                                    Print NUM lines of trailing context)</span><br><span class="line">-B, --before-context &lt;value&gt;                                                   Print NUM lines of leading context)</span><br><span class="line">-C, --context &lt;value&gt;                                                          Print NUM lines of output context)</span><br><span class="line">-h, --help                                                                     this help</span><br><span class="line">-i, --ignore-case                                                              Perform case insensitive matching.  By default, grep is case sensitive.</span><br><span class="line">-v, --invert-match                                                             Select non-matching lines</span><br><span class="line">-n, --line-number                                                              Print line number with output lines</span><br><span class="line">-m, --max-count &lt;value&gt;                                                        stop after NUM selected lines)</span><br><span class="line">-e, --regex                                                                    Enable regular expression to match</span><br><span class="line">    --trim-end                                                                 Remove whitespaces at the end of the line</span><br><span class="line">&lt;pattern&gt;                                                                      Pattern</span><br></pre></td></tr></table></figure>

<h3 id="匹配展示符合范本样式的项"><a href="#匹配展示符合范本样式的项" class="headerlink" title="匹配展示符合范本样式的项"></a>匹配展示符合范本样式的项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@13372]$ sysprop | grep java</span><br><span class="line"> java.specification.version                        1.8</span><br><span class="line"> java.class.path                                   math-game.jar</span><br><span class="line"> java.vm.vendor                                    Oracle Corporation</span><br><span class="line"> java.vendor.url                                   http:&#x2F;&#x2F;java.oracle.com&#x2F;</span><br><span class="line"> java.vm.specification.version                     1.8</span><br><span class="line"> sun.java.launcher                                 SUN_STANDARD</span><br><span class="line"> sun.java.command                                  math-game.jar</span><br><span class="line"> java.specification.vendor                         Oracle Corporation</span><br><span class="line"> java.home                                         D:\developInstall\JDK\jdk1.8.0_161\jre</span><br><span class="line"> java.vm.specification.vendor                      Oracle Corporation</span><br><span class="line"> java.specification.name                           Java Platform API Specification</span><br><span class="line"> java.awt.graphicsenv                              sun.awt.Win32GraphicsEnvironment</span><br><span class="line"> java.runtime.version                              1.8.0_161-b12</span><br><span class="line"> java.endorsed.dirs                                D:\developInstall\JDK\jdk1.8.0_161\jre\lib\endorsed</span><br><span class="line"> java.runtime.name                                 Java(TM) SE Runtime Environment</span><br><span class="line"> java.vm.name                                      Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line"> java.vendor.url.bug                               http:&#x2F;&#x2F;bugreport.sun.com&#x2F;bugreport&#x2F;</span><br><span class="line"> java.io.tmpdir                                    C:\Users\PT-TIA~1\AppData\Local\Temp\</span><br><span class="line"> java.version                                      1.8.0_161</span><br><span class="line"> java.vm.specification.name                        Java Virtual Machine Specification</span><br><span class="line"> java.awt.printerjob                               sun.awt.windows.WPrinterJob</span><br><span class="line"> java.library.path                                 D:\developInstall\JDK\jdk1.8.0_161\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Python27\;C:\Python27\Scripts;D:\app\pt-tianzhencai\product\11.1.0\db_1\bin;C:\Program Files (x86)\Comm</span><br><span class="line">                                                   on Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\TortoiseSVN\bin;C:\Progr</span><br><span class="line"> java.vm.info                                      mixed mode</span><br><span class="line"> java.vendor                                       Oracle Corporation</span><br><span class="line"> java.vm.version                                   25.161-b12</span><br><span class="line"> java.ext.dirs                                     D:\developInstall\JDK\jdk1.8.0_161\jre\lib\ext;C:\Windows\Sun\Java\lib\ext</span><br><span class="line"> java.class.version                                52.0</span><br></pre></td></tr></table></figure>

<h3 id="n-命令显示行号："><a href="#n-命令显示行号：" class="headerlink" title="-n 命令显示行号："></a><code>-n</code> 命令显示行号：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysprop | grep java -n</span><br></pre></td></tr></table></figure>

<h3 id="v-展示非匹配"><a href="#v-展示非匹配" class="headerlink" title="-v 展示非匹配"></a><code>-v</code> 展示非匹配</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysenv | grep -v JAVA</span><br></pre></td></tr></table></figure>

<h3 id="e-使用正则表达式匹配，-m-设定最大展示条数，"><a href="#e-使用正则表达式匹配，-m-设定最大展示条数，" class="headerlink" title="-e 使用正则表达式匹配，-m 设定最大展示条数，"></a><code>-e</code> 使用正则表达式匹配，<code>-m</code> 设定最大展示条数，</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysenv | grep -e &quot;(?i)(JAVA|sun)&quot; -m 3 -C 2</span><br><span class="line">thread | grep -m 10 -e &quot;TIMED_WAITING|WAITING&quot;</span><br></pre></td></tr></table></figure>

<h3 id="除了显示符合范本样式的那一行之外，-A-指定显示该行之后的内容，-B-指定显示该行之前的内容。"><a href="#除了显示符合范本样式的那一行之外，-A-指定显示该行之后的内容，-B-指定显示该行之前的内容。" class="headerlink" title="除了显示符合范本样式的那一行之外，-A 指定显示该行之后的内容，-B 指定显示该行之前的内容。"></a>除了显示符合范本样式的那一行之外，<code>-A</code> 指定显示该行之后的内容，<code>-B</code> 指定显示该行之前的内容。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysenv | grep JAVA -A2 -B3</span><br></pre></td></tr></table></figure>

<h1 id="Dashboard-命令"><a href="#Dashboard-命令" class="headerlink" title="Dashboard 命令"></a>Dashboard 命令</h1><p>dashboard 命令可以查看当前系统的实时数据面板。</p>
<p>当运行在 Ali-tomcat 时，会显示当前 tomcat 的实时信息，如 HTTP 请求的 qps, rt, 错误数, 线程池信息等等。</p>
<h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">[i:]</td>
<td align="left">刷新实时数据的时间间隔 (ms)，默认 5000ms</td>
</tr>
<tr>
<td align="right">[n:]</td>
<td align="left">刷新实时数据的次数</td>
</tr>
</tbody></table>
<h2 id="使用参考-1"><a href="#使用参考-1" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ dashboard</span><br><span class="line">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class="line">-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   false      true</span><br><span class="line">53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   false      true</span><br><span class="line">22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   false      false</span><br><span class="line">-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   false      true</span><br><span class="line">-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   false      true</span><br><span class="line">49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   false      true</span><br><span class="line">16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   false      false</span><br><span class="line">-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   false      true</span><br><span class="line">17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   false      false</span><br><span class="line">34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   false      true</span><br><span class="line">23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   false      true</span><br><span class="line">-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   false      true</span><br><span class="line">-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   false      true</span><br><span class="line">-1   GC Thread#5                    -               -1         -         0.0       0.000      0:0.043   false      true</span><br><span class="line">Memory                     used     total    max      usage    GC</span><br><span class="line">heap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12</span><br><span class="line">g1_eden_space              6M       18M      -1       33.33%                                  86</span><br><span class="line">g1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0</span><br><span class="line">g1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0</span><br><span class="line">nonheap                    66M      69M      -1       96.56%</span><br><span class="line">codeheap_&#x27;non-nmethods&#x27;    1M       2M       5M       22.39%</span><br><span class="line">metaspace                  46M      47M      -1       98.01%</span><br><span class="line">Runtime</span><br><span class="line">os.name                                                        Mac OS X</span><br><span class="line">os.version                                                     10.15.4</span><br><span class="line">java.version                                                   15</span><br><span class="line">java.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home</span><br><span class="line">systemload.average                                             10.68</span><br><span class="line">processors                                                     8</span><br><span class="line">uptime                                                         272s</span><br></pre></td></tr></table></figure>

<h2 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h2><ul>
<li>ID: Java 级别的线程 ID，注意这个 ID 不能跟 jstack 中的 nativeID 一一对应。</li>
<li>NAME: 线程名</li>
<li>GROUP: 线程组名</li>
<li>PRIORITY: 线程优先级, 1~10 之间的数字，越大表示优先级越高</li>
<li>STATE: 线程的状态</li>
<li>CPU%: 线程的 cpu 使用率。比如采样间隔 1000ms，某个线程的增量 cpu 时间为 100ms，则 cpu 使用率=100/1000=10%</li>
<li>DELTA_TIME: 上次采样之后线程运行增量 CPU 时间，数据格式为<code>秒</code></li>
<li>TIME: 线程运行总 CPU 时间，数据格式为<code>分:秒</code></li>
<li>INTERRUPTED: 线程当前的中断位状态</li>
<li>DAEMON: 是否是 daemon 线程</li>
</ul>
<h3 id="JVM-内部线程"><a href="#JVM-内部线程" class="headerlink" title="JVM 内部线程"></a>JVM 内部线程</h3><p>Java 8 之后支持获取 JVM 内部线程 CPU 时间，这些线程只有名称和 CPU 时间，没有 ID 及状态等信息（显示 ID 为-1）。 通过内部线程可以观测到 JVM 活动，如 GC、JIT 编译等占用 CPU 情况，方便了解 JVM 整体运行状况。</p>
<ul>
<li>当 JVM 堆(heap)/元数据(metaspace)空间不足或 OOM 时，可以看到 GC 线程的 CPU 占用率明显高于其他的线程。</li>
<li>当执行<code>trace/watch/tt/redefine</code>等命令后，可以看到 JIT 线程活动变得更频繁。因为 JVM 热更新 class 字节码时清除了此 class 相关的 JIT 编译结果，需要重新编译。</li>
</ul>
<p>JVM 内部线程包括下面几种：</p>
<ul>
<li>JIT 编译线程: 如 <code>C1 CompilerThread0</code>, <code>C2 CompilerThread0</code></li>
<li>GC 线程: 如<code>GC Thread0</code>, <code>G1 Young RemSet Sampling</code></li>
<li>其它内部线程: 如<code>VM Periodic Task Thread</code>, <code>VM Thread</code>, <code>Service Thread</code></li>
</ul>
<hr>
<h1 id="dump-命令"><a href="#dump-命令" class="headerlink" title="dump 命令"></a>dump 命令</h1><div class="note info no-icon"><p>提示</p>
<p>dump 已加载类的 bytecode 到特定目录</p>
</div>

<p>dump 命令将 JVM 中实际运行的 class 的 byte code dump 到指定目录，适用场景批量下载指定包目录的 class 字节码；如需反编译单一类、实时查看类信息，可参考 <a href="https://arthas.aliyun.com/doc/jad.html">jad</a>。</p>
<h2 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">类所属 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right"><code>[d:]</code></td>
<td align="left">设置类文件的目标目录</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
</tbody></table>
<h2 id="使用参考-2"><a href="#使用参考-2" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dump java.lang.String</span><br><span class="line"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class="line"> null                   /Users/admin/logs/arthas/classdump/java/lang/String.class</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 119 ms.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dump demo.*</span><br><span class="line"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class="line"> 3d4eac69  +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher<span class="variable">$AppClassLoader</span>-3d4eac69/demo/MathGame.class</span><br><span class="line">             +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@66350f69</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 39 ms.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dump -d /tmp/output java.lang.String</span><br><span class="line"> HASHCODE  CLASSLOADER  LOCATION</span><br><span class="line"> null                   /tmp/output/java/lang/String.class</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 138 ms.</span><br></pre></td></tr></table></figure>

<ul>
<li>指定 classLoader</li>
</ul>
<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。</p>
<p>如果你使用<code>-c</code>，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dump -c 3d4eac69 demo.*</span><br></pre></td></tr></table></figure>

<p>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code>指定 class name，使用起来更加方便：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dump --classLoaderClass sun.misc.Launcher<span class="variable">$AppClassLoader</span> demo.*</span><br><span class="line"> HASHCODE  CLASSLOADER                                    LOCATION</span><br><span class="line"> 3d4eac69  +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69    /Users/admin/logs/arthas/classdump/sun.misc.Launcher<span class="variable">$AppClassLoader</span>-3d4eac69/demo/MathGame.class</span><br><span class="line">             +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@66350f69</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 39 ms.</span><br></pre></td></tr></table></figure>

<ul>
<li>注：这里 classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而 java 11 的 classloader 是 jdk.internal.loader.ClassLoaders$AppClassLoader，killercoda 目前环境是 java11。</li>
</ul>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>
<hr>
<h1 id="echo-命令"><a href="#echo-命令" class="headerlink" title="echo 命令"></a>echo 命令</h1><div class="note info no-icon"><p>提示</p>
<p>打印参数，和 linux 里的 echo 命令类似。</p>
</div>

<h2 id="使用参考-3"><a href="#使用参考-3" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Getstatic-命令"><a href="#Getstatic-命令" class="headerlink" title="Getstatic 命令"></a>Getstatic 命令</h1><ul>
<li>推荐直接使用<a href="https://arthas.aliyun.com/doc/arthas-tutorials.html?language=cn&id=ognl">ognl</a>命令，更加灵活。</li>
</ul>
<p>通过 <code>getstatic</code> 命令可以方便的查看类的静态属性。使用方法为<code>getstatic class_name field_name</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ getstatic demo.MathGame random</span><br><span class="line">field: random</span><br><span class="line">@Random[</span><br><span class="line">    serialVersionUID=@Long[3905348978240129619],</span><br><span class="line">    seed=@AtomicLong[120955813885284],</span><br><span class="line">    multiplier=@Long[25214903917],</span><br><span class="line">    addend=@Long[11],</span><br><span class="line">    mask=@Long[281474976710655],</span><br><span class="line">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class="line">    BadBound=@String[bound must be positive],</span><br><span class="line">    BadRange=@String[bound must be greater than origin],</span><br><span class="line">    BadSize=@String[size must be non-negative],</span><br><span class="line">    seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class="line">    nextNextGaussian=@Double[0.0],</span><br><span class="line">    haveNextNextGaussian=@Boolean[<span class="literal">false</span>],</span><br><span class="line">    serialPersistentFields=@ObjectStreamField[][isEmpty=<span class="literal">false</span>;size=3],</span><br><span class="line">    unsafe=@Unsafe[sun.misc.Unsafe@2eaa1027],</span><br><span class="line">    seedOffset=@Long[24],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>指定 classLoader</li>
</ul>
<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，使用<code>sc -d &lt;ClassName&gt;</code>提取对应 ClassLoader 的 hashcode。</p>
<p>如果你使用<code>-c</code>，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ getstatic -c 3d4eac69 demo.MathGame random</span><br></pre></td></tr></table></figure>

<p>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code>指定 class name，使用起来更加方便：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getstatic --classLoaderClass sun.misc.Launcher$AppClassLoader demo.MathGame random</span><br></pre></td></tr></table></figure>

<ul>
<li>注: 这里 classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader，killercoda 目前环境是 java11。</li>
</ul>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>
<hr>
<h1 id="Help-命令"><a href="#Help-命令" class="headerlink" title="Help 命令"></a>Help 命令</h1><p>查看命令帮助信息，可以查看当前 arthas 版本支持的指令，或者查看具体指令的使用说明。</p>
<div class="note info no-icon"><p>提示</p>
<p>[help 指令]的等同于[指令 -help]，都是查看具体指令的使用说明。</p>
</div>

<h2 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">不接参数</td>
<td align="left">查询当前 arthas 版本支持的指令以及指令描述</td>
</tr>
<tr>
<td align="right">[name:]</td>
<td align="left">查询具体指令的使用说明</td>
</tr>
</tbody></table>
<h2 id="使用参考-4"><a href="#使用参考-4" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ help dashboard</span><br><span class="line"> USAGE:</span><br><span class="line">  dashboard [-h] [-i &lt;value&gt;] [-n &lt;value&gt;]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Overview of target jvm&#39;s thread, memory, gc, vm, tomcat info.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">  dashboard</span><br><span class="line">  dashboard -n 10</span><br><span class="line">  dashboard -i 2000</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https:&#x2F;&#x2F;arthas.aliyun.com&#x2F;doc&#x2F;dashboard</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                              this help</span><br><span class="line">-i, --interval &lt;value&gt;                  The interval (in ms) between two executions, default is 5000 ms.</span><br><span class="line">-n, --number-of-execution &lt;value&gt;       The number of times this command will be executed.</span><br></pre></td></tr></table></figure>

<h1 id="history-命令"><a href="#history-命令" class="headerlink" title="history 命令"></a>history 命令</h1><p>打印命令历史。</p>
<div class="note info no-icon"><p>提示</p>
<p>历史指令会通过一个名叫 history 的文件持久化，所以 history 指令可以查看当前 arthas 服务器的所有历史命令，而不仅只是当前次会话使用过的命令。</p>
</div>

<h2 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">[c:]</td>
<td align="left">清空历史指令</td>
</tr>
<tr>
<td align="right">[n:]</td>
<td align="left">显示最近执行的 n 条指令</td>
</tr>
</tbody></table>
<h2 id="使用参考-5"><a href="#使用参考-5" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#查看最近执行的3条指令</span><br><span class="line">$ history 3</span><br><span class="line">  269  thread</span><br><span class="line">  270  cls</span><br><span class="line">  271  history 3</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#清空指令</span><br><span class="line">$ history -c</span><br><span class="line">$ history 3</span><br><span class="line"> 1  history 3</span><br></pre></td></tr></table></figure>

<h1 id="Jad-命令"><a href="#Jad-命令" class="headerlink" title="Jad 命令"></a>Jad 命令</h1><p><code>jad</code> 命令 将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；</p>
<ul>
<li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</li>
<li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</li>
</ul>
<h2 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">类所属 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
</tbody></table>
<h2 id="使用参考-6"><a href="#使用参考-6" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="反编译java-lang-String"><a href="#反编译java-lang-String" class="headerlink" title="反编译java.lang.String"></a>反编译<code>java.lang.String</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad java.lang.String</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Decompiled with CFR.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.ObjectStreamField;</span><br><span class="line">        <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] value;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> hash;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = <span class="keyword">new</span> CaseInsensitiveComparator();</span><br><span class="line">...</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] byArray, <span class="keyword">int</span> n, <span class="keyword">int</span> n2, Charset charset)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*460*/</span>         <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">/*462*/</span>         String.checkBounds(byArray, n, n2);</span><br><span class="line"><span class="comment">/*463*/</span>         <span class="keyword">this</span>.value = StringCoding.decode(charset, byArray, n, n2);</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="反编译时只显示源代码"><a href="#反编译时只显示源代码" class="headerlink" title="反编译时只显示源代码"></a>反编译时只显示源代码</h3><p>默认情况下，反编译结果里会带有<code>ClassLoader</code>信息，通过<code>--source-only</code>选项，可以只打印源代码。方便和<a href="https://arthas.aliyun.com/doc/mc.html">mc</a>/<a href="https://arthas.aliyun.com/doc/retransform.html">retransform</a>命令结合使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad --source-only demo.MathGame</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR 0_132.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathGame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> illegalArgumentCount = <span class="number">0</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="反编译指定的函数"><a href="#反编译指定的函数" class="headerlink" title="反编译指定的函数"></a>反编译指定的函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad demo.MathGame main</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">232204</span>a1</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">7f</span>31245a</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/<span class="keyword">private</span>/tmp/math-game.jar</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">           MathGame game = <span class="keyword">new</span> MathGame();</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">/*16*/</span>         game.run();</span><br><span class="line"><span class="comment">/*17*/</span>         TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="反编译时不显示行号"><a href="#反编译时不显示行号" class="headerlink" title="反编译时不显示行号"></a>反编译时不显示行号</h3><p><code>--lineNumber</code> 参数默认值为 true，显示指定为 false 则不打印行号。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad demo.MathGame main --lineNumber <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">232204</span>a1</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">7f</span>31245a</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/<span class="keyword">private</span>/tmp/math-game.jar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    MathGame game = <span class="keyword">new</span> MathGame();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        game.run();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反编译时指定-ClassLoader"><a href="#反编译时指定-ClassLoader" class="headerlink" title="反编译时指定 ClassLoader"></a>反编译时指定 ClassLoader</h3><div class="note info no-icon"><p>提示</p>
<p>当有多个 <code>ClassLoader</code> 都加载了这个类时，<code>jad</code> 命令会输出对应 <code>ClassLoader</code> 实例的 <code>hashcode</code>，然后你只需要重新执行 <code>jad</code> 命令，并使用参数 <code>-c &lt;hashcode&gt;</code> 就可以反编译指定 ClassLoader 加载的那个类了；</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad org.apache.log4j.Logger</span><br><span class="line"></span><br><span class="line">Found more than one class for: org.apache.log4j.Logger, Please use jad -c hashcode org.apache.log4j.Logger</span><br><span class="line">HASHCODE  CLASSLOADER</span><br><span class="line"><span class="number">69d</span>caba4  +-monitor<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string">6e51ad67  +-java.net.URLClassLoader@6e51ad67</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$AppClassLoader@6951a712</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$ExtClassLoader@6fafc4c2</span></span><br><span class="line"><span class="string">2bdd9114  +-pandora-qos-service&#x27;</span>s ModuleClassLoader</span><br><span class="line"><span class="number">4</span>c0df5f8  +-pandora-framework<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Affect(row-cnt:0) cost in 38 ms.</span></span><br><span class="line"><span class="string">$ jad org.apache.log4j.Logger -c 69dcaba4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ClassLoader:</span></span><br><span class="line"><span class="string">+-monitor&#x27;</span>s ModuleClassLoader</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/Users/admin/app/log4j-<span class="number">1.2</span>.<span class="number">14.</span>jar</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.spi.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">extends</span> <span class="title">Category</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Logger</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">190</span> ms.</span><br></pre></td></tr></table></figure>

<p>对于只有唯一实例的 ClassLoader 还可以通过<code>--classLoaderClass</code>指定 class name，使用起来更加方便：</p>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>
<h1 id="jfr-命令"><a href="#jfr-命令" class="headerlink" title="jfr 命令"></a>jfr 命令</h1><div class="note info no-icon"><p>提示</p>
<p>Java Flight Recorder (JFR) 是一种用于收集有关正在运行的 Java 应用程序的诊断和分析数据的工具。它集成到 Java 虚拟机 (JVM) 中，几乎不会造成性能开销，因此即使在负载较重的生产环境中也可以使用。</p>
</div>

<p><code>jfr</code> 命令支持在程序动态运行过程中开启和关闭 JFR 记录。 记录收集有关 event 的数据。事件在特定时间点发生在 JVM 或 Java 应用程序中。每个事件都有一个名称、一个时间戳和一个可选的有效负载。负载是与事件相关的数据，例如 CPU 使用率、事件前后的 Java 堆大小、锁持有者的线程 ID 等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jfr 命令基本运行结构是 jfr cmd [actionArg]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： JDK8 的 8u262 版本之后才支持 jfr</p>
</blockquote>
<h2 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>cmd</em></td>
<td align="left">要执行的操作 支持的命令【start，status，dump，stop】</td>
</tr>
<tr>
<td align="right"><em>actionArg</em></td>
<td align="left">属性名模式</td>
</tr>
<tr>
<td align="right">[n:]</td>
<td align="left">记录名称</td>
</tr>
<tr>
<td align="right">[r:]</td>
<td align="left">记录 id 值</td>
</tr>
<tr>
<td align="right">[dumponexit:]</td>
<td align="left">程序退出时，是否要 dump 出 .jfr 文件，默认为 false</td>
</tr>
<tr>
<td align="right">[d:]</td>
<td align="left">延迟多久后启动 JFR 记录，支持带单位配置，eg: 60s, 2m, 5h, 3d. 不带单位就是秒，默认无延迟</td>
</tr>
<tr>
<td align="right">[duration:]</td>
<td align="left">JFR 记录持续时间，支持单位配置，不带单位就是秒，默认一直记录</td>
</tr>
<tr>
<td align="right">[s:]</td>
<td align="left">采集 Event 的详细配置文件，默认是 default.jfc 位于 <code>$JAVA_HOME/lib/jfr/default.jfc</code></td>
</tr>
<tr>
<td align="right">[f:]</td>
<td align="left">将输出转储到指定路径</td>
</tr>
<tr>
<td align="right">[maxage:]</td>
<td align="left">缓冲区数据最大文件记录保存时间，支持单位配置，不带单位就是秒，默认是不限制</td>
</tr>
<tr>
<td align="right">[maxsize:]</td>
<td align="left">缓冲区的最大文件大小，支持单位配置， 不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。</td>
</tr>
<tr>
<td align="right">[state:]</td>
<td align="left">jfr 记录状态</td>
</tr>
</tbody></table>
<h2 id="启动-JFR-记录"><a href="#启动-JFR-记录" class="headerlink" title="启动 JFR 记录"></a>启动 JFR 记录</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ jfr start</span><br><span class="line">Started recording 1. No limit specified, using maxsize=250MB as default.</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>默认情况下，开启的是默认参数的 jfr 记录</p>
</div>

<p>启动 jfr 记录，指定记录名，记录持续时间，记录文件保存路径。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ jfr start -n myRecording --duration 60s -f /tmp/myRecording.jfr</span><br><span class="line">Started recording 2. The result will be written to:</span><br><span class="line">/tmp/myRecording.jfr</span><br></pre></td></tr></table></figure>

<h2 id="查看-JFR-记录状态"><a href="#查看-JFR-记录状态" class="headerlink" title="查看 JFR 记录状态"></a>查看 JFR 记录状态</h2><p>默认是查看所有 JFR 记录信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr status</span><br><span class="line">Recording: recording=1 name=Recording-1 (running)</span><br><span class="line">Recording: recording=2 name=myRecording duration=PT1M (closed)</span><br></pre></td></tr></table></figure>

<p>查看指定记录 id 的记录信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr status -r 1</span><br><span class="line">Recording: recording=1 name=Recording-1 (running)</span><br></pre></td></tr></table></figure>

<p>查看指定状态的记录信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr status --state closed</span><br><span class="line">Recording: recording=2 name=myRecording duration=PT1M (closed)</span><br></pre></td></tr></table></figure>

<h2 id="dump-jfr-记录"><a href="#dump-jfr-记录" class="headerlink" title="dump jfr 记录"></a>dump jfr 记录</h2><p><code>jfr dump</code> 会输出从开始到运行该命令这段时间内的记录到 JFR 文件，且不会停止 <code>jfr</code> 的记录<br>指定记录输出路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr dump -r 1 -f /tmp/myRecording1.jfr</span><br><span class="line">Dump recording 1, The result will be written to:</span><br><span class="line">/tmp/myRecording1.jfr</span><br></pre></td></tr></table></figure>

<p>不指定文件输出路径，默认是保存到<code>arthas-output</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr dump -r 1</span><br><span class="line">Dump recording 1, The result will be written to:</span><br><span class="line">/tmp/<span class="built_in">test</span>/arthas-output/20220819-200915.jfr</span><br></pre></td></tr></table></figure>

<h2 id="停止-jfr-记录"><a href="#停止-jfr-记录" class="headerlink" title="停止 jfr 记录"></a>停止 jfr 记录</h2><p>不指定记录输出路径，默认是保存到<code>arthas-output</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jfr stop -r 1</span><br><span class="line">Stop recording 1, The result will be written to:</span><br><span class="line">/tmp/<span class="built_in">test</span>/arthas-output/20220819-202049.jfr</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意一条记录只能停止一次。</p>
</blockquote>
<p>也可以指定记录输出路径。</p>
<h2 id="通过浏览器查看-arthas-output-下面-JFR-记录的结果"><a href="#通过浏览器查看-arthas-output-下面-JFR-记录的结果" class="headerlink" title="通过浏览器查看 arthas-output 下面 JFR 记录的结果"></a>通过浏览器查看 arthas-output 下面 JFR 记录的结果</h2><p>默认情况下，arthas 使用 8563 端口，则可以打开： <a href="http://localhost:8563/arthas-output/%E5%9C%A8%E6%96%B0%E7%AA%97%E5%8F%A3%E6%89%93%E5%BC%80">http://localhost:8563/arthas-output/在新窗口打开</a>  查看到<code>arthas-output</code>目录下面的 JFR 记录结果：</p>
<p><img src="https://arthas.aliyun.com/images/arthas-output-recording.png" alt="img"></p>
<p>生成的结果可以用支持 jfr 格式的工具来查看。比如：</p>
<ul>
<li>JDK Mission Control ： <a href="https://github.com/openjdk/jmc">https://github.com/openjdk/jmc</a></li>
</ul>
<hr>
<h1 id="Jvm-命令"><a href="#Jvm-命令" class="headerlink" title="Jvm 命令"></a>Jvm 命令</h1><div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 信息</p>
</div>

<h2 id="使用参考-7"><a href="#使用参考-7" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ jvm</span><br><span class="line">RUNTIME</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MACHINE-NAME                   37@ff267334bb65</span><br><span class="line"> JVM-START-TIME                 2020-07-23 07:50:36</span><br><span class="line"> MANAGEMENT-SPEC-VERSION        1.2</span><br><span class="line"> SPEC-NAME                      Java Virtual Machine Specification</span><br><span class="line"> SPEC-VENDOR                    Oracle Corporation</span><br><span class="line"> SPEC-VERSION                   1.8</span><br><span class="line"> VM-NAME                        Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line"> VM-VENDOR                      Oracle Corporation</span><br><span class="line"> VM-VERSION                     25.201-b09</span><br><span class="line"> INPUT-ARGUMENTS                []</span><br><span class="line"> CLASS-PATH                     demo-arthas-spring-boot.jar</span><br><span class="line"> BOOT-CLASS-PATH                /usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/j</span><br><span class="line">                                re/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/</span><br><span class="line">                                java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/us</span><br><span class="line">                                r/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/l</span><br><span class="line">                                ib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes</span><br><span class="line"> LIBRARY-PATH                   /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CLASS-LOADING</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> LOADED-CLASS-COUNT             7529</span><br><span class="line"> TOTAL-LOADED-CLASS-COUNT       7529</span><br><span class="line"> UNLOADED-CLASS-COUNT           0</span><br><span class="line"> IS-VERBOSE                     false</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COMPILATION</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                           HotSpot 64-Bit Tiered Compilers</span><br><span class="line"> TOTAL-COMPILE-TIME             14921(ms)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> GARBAGE-COLLECTORS</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PS Scavenge                            name : PS Scavenge</span><br><span class="line"> [count/time (ms)]                      collectionCount : 7</span><br><span class="line">                                        collectionTime : 68</span><br><span class="line"></span><br><span class="line"> PS MarkSweep                           name : PS MarkSweep</span><br><span class="line"> [count/time (ms)]                      collectionCount : 1</span><br><span class="line">                                        collectionTime : 47</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY-MANAGERS</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> CodeCacheManager               Code Cache</span><br><span class="line"></span><br><span class="line"> Metaspace Manager              Metaspace</span><br><span class="line">                                Compressed Class Space</span><br><span class="line"></span><br><span class="line"> Copy                           Eden Space</span><br><span class="line">                                Survivor Space</span><br><span class="line"></span><br><span class="line"> MarkSweepCompact               Eden Space</span><br><span class="line">                                Survivor Space</span><br><span class="line">                                Tenured Gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MEMORY</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> HEAP-MEMORY-USAGE                      init : 268435456(256.0 MiB)</span><br><span class="line"> [memory in bytes]                      used : 18039504(17.2 MiB)</span><br><span class="line">                                        committed : 181403648(173.0 MiB)</span><br><span class="line">                                        max : 3817865216(3.6 GiB)</span><br><span class="line"></span><br><span class="line"> NO-HEAP-MEMORY-USAGE                   init : 2555904(2.4 MiB)</span><br><span class="line"> [memory in bytes]                      used : 33926216(32.4 MiB)</span><br><span class="line">                                        committed : 35176448(33.5 MiB)</span><br><span class="line">                                        max : -1(-1 B)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OPERATING-SYSTEM</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> OS                             Linux</span><br><span class="line"> ARCH                           amd64</span><br><span class="line"> PROCESSORS-COUNT               3</span><br><span class="line"> LOAD-AVERAGE                   29.53</span><br><span class="line"> VERSION                        4.15.0-52-generic</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> THREAD</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> COUNT                          30</span><br><span class="line"> DAEMON-COUNT                   24</span><br><span class="line"> PEAK-COUNT                     31</span><br><span class="line"> STARTED-COUNT                  36</span><br><span class="line"> DEADLOCK-COUNT                 0</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> FILE-DESCRIPTOR</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br><span class="line"> MAX-FILE-DESCRIPTOR-COUNT      1048576</span><br><span class="line"> OPEN-FILE-DESCRIPTOR-COUNT     100</span><br><span class="line">Affect(row-cnt:0) cost in 88 ms.</span><br></pre></td></tr></table></figure>

<h2 id="THREAD-相关"><a href="#THREAD-相关" class="headerlink" title="THREAD 相关"></a>THREAD 相关</h2><ul>
<li>COUNT: JVM 当前活跃的线程数</li>
<li>DAEMON-COUNT: JVM 当前活跃的守护线程数</li>
<li>PEAK-COUNT: 从 JVM 启动开始曾经活着的最大线程数</li>
<li>STARTED-COUNT: 从 JVM 启动开始总共启动过的线程次数</li>
<li>DEADLOCK-COUNT: JVM 当前死锁的线程数</li>
</ul>
<h2 id="文件描述符相关"><a href="#文件描述符相关" class="headerlink" title="文件描述符相关"></a>文件描述符相关</h2><ul>
<li>MAX-FILE-DESCRIPTOR-COUNT：JVM 进程最大可以打开的文件描述符数</li>
<li>OPEN-FILE-DESCRIPTOR-COUNT：JVM 当前打开的文件描述符数</li>
</ul>
<hr>
<h1 id="Keymap-命令"><a href="#Keymap-命令" class="headerlink" title="Keymap 命令"></a>Keymap 命令</h1><p><code>keymap</code>命令输出当前的快捷键映射表：</p>
<p>默认的快捷键如下：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>快捷键说明</th>
<th>命令名称</th>
<th>命令说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>&quot;\C-a&quot;</code></td>
<td>ctrl + a</td>
<td>beginning-of-line</td>
<td>跳到行首</td>
</tr>
<tr>
<td><code>&quot;\C-e&quot;</code></td>
<td>ctrl + e</td>
<td>end-of-line</td>
<td>跳到行尾</td>
</tr>
<tr>
<td><code>&quot;\C-f&quot;</code></td>
<td>ctrl + f</td>
<td>forward-word</td>
<td>向前移动一个单词</td>
</tr>
<tr>
<td><code>&quot;\C-b&quot;</code></td>
<td>ctrl + b</td>
<td>backward-word</td>
<td>向后移动一个单词</td>
</tr>
<tr>
<td><code>&quot;\e[D&quot;</code></td>
<td>键盘左方向键</td>
<td>backward-char</td>
<td>光标向前移动一个字符</td>
</tr>
<tr>
<td><code>&quot;\e[C&quot;</code></td>
<td>键盘右方向键</td>
<td>forward-char</td>
<td>光标向后移动一个字符</td>
</tr>
<tr>
<td><code>&quot;\e[B&quot;</code></td>
<td>键盘下方向键</td>
<td>next-history</td>
<td>下翻显示下一个命令</td>
</tr>
<tr>
<td><code>&quot;\e[A&quot;</code></td>
<td>键盘上方向键</td>
<td>previous-history</td>
<td>上翻显示上一个命令</td>
</tr>
<tr>
<td><code>&quot;\C-h&quot;</code></td>
<td>ctrl + h</td>
<td>backward-delete-char</td>
<td>向后删除一个字符</td>
</tr>
<tr>
<td><code>&quot;\C-?&quot;</code></td>
<td>ctrl + shift + /</td>
<td>backward-delete-char</td>
<td>向后删除一个字符</td>
</tr>
<tr>
<td><code>&quot;\C-u&quot;</code></td>
<td>ctrl + u</td>
<td>undo</td>
<td>撤销上一个命令，相当于清空当前行</td>
</tr>
<tr>
<td><code>&quot;\C-d&quot;</code></td>
<td>ctrl + d</td>
<td>delete-char</td>
<td>删除当前光标所在字符</td>
</tr>
<tr>
<td><code>&quot;\C-k&quot;</code></td>
<td>ctrl + k</td>
<td>kill-line</td>
<td>删除当前光标到行尾的所有字符</td>
</tr>
<tr>
<td><code>&quot;\C-i&quot;</code></td>
<td>ctrl + i</td>
<td>complete</td>
<td>自动补全，相当于敲<code>TAB</code></td>
</tr>
<tr>
<td><code>&quot;\C-j&quot;</code></td>
<td>ctrl + j</td>
<td>accept-line</td>
<td>结束当前行，相当于敲回车</td>
</tr>
<tr>
<td><code>&quot;\C-m&quot;</code></td>
<td>ctrl + m</td>
<td>accept-line</td>
<td>结束当前行，相当于敲回车</td>
</tr>
<tr>
<td><code>&quot;\C-w&quot;</code></td>
<td></td>
<td>backward-delete-word</td>
<td></td>
</tr>
<tr>
<td><code>&quot;\C-x\e[3~&quot;</code></td>
<td></td>
<td>backward-kill-line</td>
<td></td>
</tr>
<tr>
<td><code>&quot;\e\C-?&quot;</code></td>
<td></td>
<td>backward-kill-word</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>任何时候 <code>tab</code> 键，会根据当前的输入给出提示</li>
<li>命令后敲 <code>-</code> 或 <code>--</code> ，然后按 <code>tab</code> 键，可以展示出此命令具体的选项</li>
</ul>
<h2 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h2><p>在当前用户目录下新建<code>$USER_HOME/.arthas/conf/inputrc</code>文件，加入自定义配置。</p>
<p>假设我是 vim 的重度用户，我要把<code>ctrl+h</code>设置为光标向前一个字符，则设置如下，首先拷贝默认配置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&quot;\C-a&quot;: beginning-of-line</span><br><span class="line">&quot;\C-e&quot;: end-of-line</span><br><span class="line">&quot;\C-f&quot;: forward-word</span><br><span class="line">&quot;\C-b&quot;: backward-word</span><br><span class="line">&quot;\e[D&quot;: backward-char</span><br><span class="line">&quot;\e[C&quot;: forward-char</span><br><span class="line">&quot;\e[B&quot;: next-history</span><br><span class="line">&quot;\e[A&quot;: previous-history</span><br><span class="line">&quot;\C-h&quot;: backward-delete-char</span><br><span class="line">&quot;\C-?&quot;: backward-delete-char</span><br><span class="line">&quot;\C-u&quot;: undo</span><br><span class="line">&quot;\C-d&quot;: delete-char</span><br><span class="line">&quot;\C-k&quot;: kill-line</span><br><span class="line">&quot;\C-i&quot;: complete</span><br><span class="line">&quot;\C-j&quot;: accept-line</span><br><span class="line">&quot;\C-m&quot;: accept-line</span><br><span class="line">&quot;\C-w&quot;: backward-delete-word</span><br><span class="line">&quot;\C-x\e[3~&quot;: backward-kill-line</span><br><span class="line">&quot;\e\C-?&quot;: backward-kill-word</span><br></pre></td></tr></table></figure>

<p>然后把<code>&quot;\C-h&quot;: backward-delete-char</code>换成<code>&quot;\C-h&quot;: backward-char</code>，然后重新连接即可。</p>
<h2 id="后台异步命令相关快捷键"><a href="#后台异步命令相关快捷键" class="headerlink" title="后台异步命令相关快捷键"></a>后台异步命令相关快捷键</h2><ul>
<li>ctrl + c: 终止当前命令</li>
<li>ctrl + z: 挂起当前命令，后续可以 bg/fg 重新支持此命令，或 kill 掉</li>
<li>ctrl + a: 回到行首</li>
<li>ctrl + e: 回到行尾</li>
</ul>
<h1 id="Logger-命令"><a href="#Logger-命令" class="headerlink" title="Logger 命令"></a>Logger 命令</h1><div class="note info no-icon"><p>提示</p>
<p>查看 logger 信息，更新 logger level</p>
</div>

<h2 id="使用参考-8"><a href="#使用参考-8" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="查看所有-logger-信息"><a href="#查看所有-logger-信息" class="headerlink" title="查看所有 logger 信息"></a>查看所有 logger 信息</h3><p>以下面的<code>logback.xml</code>为例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;APPLICATION&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>app.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>mylog-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>2GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ASYNC&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;APPLICATION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ASYNC&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>logger</code>命令打印的结果是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger</span><br><span class="line"> name                                   ROOT</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  INFO</span><br><span class="line"> effectiveLevel                         INFO</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br><span class="line"> appenders                              name            CONSOLE</span><br><span class="line">                                        class           ch.qos.logback.core.ConsoleAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        target          System.out</span><br><span class="line">                                        name            APPLICATION</span><br><span class="line">                                        class           ch.qos.logback.core.rolling.RollingFileAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        file            app.log</span><br><span class="line">                                        name            ASYNC</span><br><span class="line">                                        class           ch.qos.logback.classic.AsyncAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        appenderRef     [APPLICATION]</span><br></pre></td></tr></table></figure>

<p>从<code>appenders</code>的信息里，可以看到</p>
<ul>
<li><code>CONSOLE</code> logger 的 target 是<code>System.out</code></li>
<li><code>APPLICATION</code> logger 是<code>RollingFileAppender</code>，它的 file 是<code>app.log</code></li>
<li><code>ASYNC</code>它的<code>appenderRef</code>是<code>APPLICATION</code>，即异步输出到文件里</li>
</ul>
<h3 id="查看指定名字的-logger-信息"><a href="#查看指定名字的-logger-信息" class="headerlink" title="查看指定名字的 logger 信息"></a>查看指定名字的 logger 信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger -n org.springframework.web</span><br><span class="line"> name                                   org.springframework.web</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  null</span><br><span class="line"> effectiveLevel                         INFO</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br></pre></td></tr></table></figure>

<h3 id="查看指定-classloader-的-logger-信息"><a href="#查看指定-classloader-的-logger-信息" class="headerlink" title="查看指定 classloader 的 logger 信息"></a>查看指定 classloader 的 logger 信息</h3><p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。</p>
<p>如果你使用<code>-c</code>，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger -c 2a139a55</span><br><span class="line"> name                                   ROOT</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  DEBUG</span><br><span class="line"> effectiveLevel                         DEBUG</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br><span class="line"> appenders                              name            CONSOLE</span><br><span class="line">                                        class           ch.qos.logback.core.ConsoleAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        target          System.out</span><br><span class="line">                                        name            APPLICATION</span><br><span class="line">                                        class           ch.qos.logback.core.rolling.RollingFileAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        file            app.log</span><br><span class="line">                                        name            ASYNC</span><br><span class="line">                                        class           ch.qos.logback.classic.AsyncAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        appenderRef     [APPLICATION]</span><br></pre></td></tr></table></figure>

<p>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code>指定 class name，使用起来更加方便：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger --classLoaderClass sun.misc.Launcher$AppClassLoader</span><br></pre></td></tr></table></figure>

<ul>
<li>注: 这里 classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而java 11的classloader是jdk.internal.loader.ClassLoaders$AppClassLoader。</li>
</ul>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>
<h3 id="更新-logger-level"><a href="#更新-logger-level" class="headerlink" title="更新 logger level"></a>更新 logger level</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger --name ROOT --level debug</span><br><span class="line">update logger level success.</span><br></pre></td></tr></table></figure>

<h3 id="指定-classloader-更新-logger-level"><a href="#指定-classloader-更新-logger-level" class="headerlink" title="指定 classloader 更新 logger level"></a>指定 classloader 更新 logger level</h3><p>默认情况下，logger 命令会在 SystemClassloader 下执行，如果应用是传统的<code>war</code>应用，或者 spring boot fat jar 启动的应用，那么需要指定 classloader。</p>
<p>可以先用 <code>sc -d yourClassName</code> 来查看具体的 classloader hashcode，然后在更新 level 时指定 classloader：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger -c 2a139a55 --name ROOT --level debug</span><br></pre></td></tr></table></figure>

<h3 id="查看没有-appender-的-logger-的信息"><a href="#查看没有-appender-的-logger-的信息" class="headerlink" title="查看没有 appender 的 logger 的信息"></a>查看没有 appender 的 logger 的信息</h3><p>默认情况下，<code>logger</code>命令只打印有 appender 的 logger 的信息。如果想查看没有<code>appender</code>的 logger 的信息，可以加上参数<code>--include-no-appender</code>。</p>
<p>注意，通常输出结果会很长。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@2062]$ logger --include-no-appender</span><br><span class="line"> name                                   ROOT</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  DEBUG</span><br><span class="line"> effectiveLevel                         DEBUG</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br><span class="line"> appenders                              name            CONSOLE</span><br><span class="line">                                        class           ch.qos.logback.core.ConsoleAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        target          System.out</span><br><span class="line">                                        name            APPLICATION</span><br><span class="line">                                        class           ch.qos.logback.core.rolling.RollingFileAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        file            app.log</span><br><span class="line">                                        name            ASYNC</span><br><span class="line">                                        class           ch.qos.logback.classic.AsyncAppender</span><br><span class="line">                                        classLoader     sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line">                                        classLoaderHash 2a139a55</span><br><span class="line">                                        appenderRef     [APPLICATION]</span><br><span class="line"></span><br><span class="line"> name                                   com</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  null</span><br><span class="line"> effectiveLevel                         DEBUG</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br><span class="line"></span><br><span class="line"> name                                   com.alibaba</span><br><span class="line"> class                                  ch.qos.logback.classic.Logger</span><br><span class="line"> classLoader                            sun.misc.Launcher<span class="variable">$AppClassLoader</span>@2a139a55</span><br><span class="line"> classLoaderHash                        2a139a55</span><br><span class="line"> level                                  null</span><br><span class="line"> effectiveLevel                         DEBUG</span><br><span class="line"> additivity                             <span class="literal">true</span></span><br><span class="line"> codeSource                             file:/Users/hengyunabc/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Mbean-命令"><a href="#Mbean-命令" class="headerlink" title="Mbean 命令"></a>Mbean 命令</h1><div class="note info no-icon"><p>提示</p>
<p>查看 Mbean 的信息</p>
</div>

<p>这个命令可以便捷的查看或监控 Mbean 的属性信息。</p>
<h2 id="参数说明-6"><a href="#参数说明-6" class="headerlink" title="参数说明"></a>参数说明</h2><hr>
<h1 id="mc-redefine-命令"><a href="#mc-redefine-命令" class="headerlink" title="mc-redefine 命令"></a>mc-redefine 命令</h1><h2 id="mc"><a href="#mc" class="headerlink" title="mc"></a>mc</h2><blockquote>
<p>Memory Compiler/内存编译器，编译<code>.java</code> 文件生成<code>.class</code> 。</p>
</blockquote>
<h2 id="使用参考-9"><a href="#使用参考-9" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc /tmp/Test.java</span><br></pre></td></tr></table></figure>

<p>可以通过<code>-c</code>参数指定 classloader：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc -c 327a647b /tmp/Test.java</span><br></pre></td></tr></table></figure>

<p>也可以通过<code>--classLoaderClass</code>参数指定 ClassLoader：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mc --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader /tmp/UserController.java -d /tmp</span><br><span class="line">Memory compiler output:</span><br><span class="line">/tmp/com/example/demo/arthas/user/UserController.class</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 346 ms</span><br></pre></td></tr></table></figure>

<p>可以通过<code>-d</code>命令指定输出目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc -d /tmp/output /tmp/ClassA.java /tmp/ClassB.java</span><br></pre></td></tr></table></figure>

<p>编译生成<code>.class</code>文件之后，可以结合<a href="https://arthas.aliyun.com/doc/retransform.html">retransform</a>命令实现热更新代码。</p>
<details class="note "><summary><p>warn no-icon</p>
</summary>
<p>注意</p>
<p>注意，mc 命令有可能失败。如果编译失败可以在本地编译好 .class 文件，再上传到服务器。具体参考<a href="https://arthas.aliyun.com/doc/retransform.html">retransform</a>命令说明。</p>

</details>

<h2 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h2><div class="note info no-icon"><p>提示</p>
<p>推荐使用 retransform 命令</p>
</div>

<ul>
<li>redefine 的 class 不能修改、添加、删除类的 field 和 method，包括方法参数、方法名称及返回值</li>
<li>如果 mc 失败，可以在本地开发环境编译好 class 文件，上传到目标系统，使用 redefine 热加载 class</li>
<li>目前 redefine 和 watch/trace/jad/tt 等命令冲突，以后重新实现 redefine 功能会解决此问题</li>
</ul>
<details class="note "><summary><p>warn no-icon</p>
</summary>
<p>注意</p>
<p>注意， redefine 后的原来的类不能恢复，redefine 有可能失败（比如增加了新的 field），参考 jdk 本身的文档。</p>

</details>

<div class="note info no-icon"><p>提示</p>
<p><code>reset</code>命令对<code>redefine</code>的类无效。如果想重置，需要<code>redefine</code>原始的字节码。</p>
</div>

<div class="note info no-icon"><p>提示</p>
<p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是 jdk 本身 redefine 和 Retransform 是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p>
</div>

<hr>
<h1 id="retransform-命令"><a href="#retransform-命令" class="headerlink" title="retransform 命令"></a>retransform 命令</h1><div class="note info no-icon"><p>提示</p>
<p>加载外部的 .class 文件，retransform jvm 已加载的类。</p>
</div>

<h2 id="使用参考-10"><a href="#使用参考-10" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">retransform /tmp/Test.class</span><br><span class="line">retransform -l</span><br><span class="line">retransform -d 1                    <span class="comment"># delete retransform entry</span></span><br><span class="line">retransform --deleteAll             <span class="comment"># delete all retransform entries</span></span><br><span class="line">retransform --classPattern demo.*   <span class="comment"># triger retransform classes</span></span><br><span class="line">retransform -c 327a647b /tmp/Test.class /tmp/Test\<span class="variable">$Inner</span>.class</span><br><span class="line">retransform --classLoaderClass <span class="string">&#x27;sun.misc.Launcher$AppClassLoader&#x27;</span> /tmp/Test.class</span><br></pre></td></tr></table></figure>

<h2 id="retransform-指定的-class-文件"><a href="#retransform-指定的-class-文件" class="headerlink" title="retransform 指定的 .class 文件"></a>retransform 指定的 .class 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ retransform /tmp/MathGame.class</span><br><span class="line">retransform success, size: 1, classes:</span><br><span class="line">demo.MathGame</span><br></pre></td></tr></table></figure>

<p>加载指定的 .class 文件，然后解析出 class name，再 retransform jvm 中已加载的对应的类。每加载一个 <code>.class</code> 文件，则会记录一个 retransform entry.</p>
<div class="note info no-icon"><p>提示</p>
<p>如果多次执行 retransform 加载同一个 class 文件，则会有多条 retransform entry.</p>
</div>

<h2 id="查看-retransform-entry"><a href="#查看-retransform-entry" class="headerlink" title="查看 retransform entry"></a>查看 retransform entry</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ retransform -l</span><br><span class="line">Id              ClassName       TransformCount  LoaderHash      LoaderClassName</span><br><span class="line">1               demo.MathGame   1               null            null</span><br></pre></td></tr></table></figure>

<ul>
<li>TransformCount 统计在 ClassFileTransformer#transform 函数里尝试返回 entry 对应的 .class 文件的次数，但并不表明 transform 一定成功。</li>
</ul>
<h2 id="删除指定-retransform-entry"><a href="#删除指定-retransform-entry" class="headerlink" title="删除指定 retransform entry"></a>删除指定 retransform entry</h2><p>需要指定 id：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">retransform -d 1</span><br></pre></td></tr></table></figure>

<h2 id="删除所有-retransform-entry"><a href="#删除所有-retransform-entry" class="headerlink" title="删除所有 retransform entry"></a>删除所有 retransform entry</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">retransform --deleteAll</span><br></pre></td></tr></table></figure>

<h2 id="显式触发-retransform"><a href="#显式触发-retransform" class="headerlink" title="显式触发 retransform"></a>显式触发 retransform</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ retransform --classPattern demo.MathGame</span><br><span class="line">retransform success, size: 1, classes:</span><br><span class="line">demo.MathGame</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：对于同一个类，当存在多个 retransform entry 时，如果显式触发 retransform ，则最后添加的 entry 生效(id 最大的)。</p>
</blockquote>
<h2 id="消除-retransform-的影响"><a href="#消除-retransform-的影响" class="headerlink" title="消除 retransform 的影响"></a>消除 retransform 的影响</h2><p>如果对某个类执行 retransform 之后，想消除影响，则需要：</p>
<ul>
<li>删除这个类对应的 retransform entry</li>
<li>重新触发 retransform</li>
</ul>
<div class="note info no-icon"><p>提示</p>
<p>如果不清除掉所有的 retransform entry，并重新触发 retransform ，则 arthas stop 时，retransform 过的类仍然生效。</p>
</div>

<h2 id="结合-jad-mc-命令使用"><a href="#结合-jad-mc-命令使用" class="headerlink" title="结合 jad/mc 命令使用"></a>结合 jad/mc 命令使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java</span><br><span class="line"></span><br><span class="line">mc /tmp/UserController.java -d /tmp</span><br><span class="line"></span><br><span class="line">retransform /tmp/com/example/demo/arthas/user/UserController.class</span><br></pre></td></tr></table></figure>

<ul>
<li>jad 命令反编译，然后可以用其它编译器，比如 vim 来修改源码</li>
<li>mc 命令来内存编译修改过的代码</li>
<li>用 retransform 命令加载新的字节码</li>
</ul>
<h2 id="上传-class-文件到服务器的技巧"><a href="#上传-class-文件到服务器的技巧" class="headerlink" title="上传 .class 文件到服务器的技巧"></a>上传 .class 文件到服务器的技巧</h2><p>使用<code>mc</code>命令来编译<code>jad</code>的反编译的代码有可能失败。可以在本地修改代码，编译好后再上传到服务器上。有的服务器不允许直接上传文件，可以使用<code>base64</code>命令来绕过。</p>
<ol>
<li><p>在本地先转换<code>.class</code>文件为 base64，再保存为 result.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base64 &lt; Test.class &gt; result.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>到服务器上，新建并编辑<code>result.txt</code>，复制本地的内容，粘贴再保存</p>
</li>
<li><p>把服务器上的 <code>result.txt</code>还原为<code>.class</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">base64 -d &lt; result.txt &gt; Test.class</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 md5 命令计算哈希值，校验是否一致</p>
</li>
</ol>
<h2 id="retransform-的限制"><a href="#retransform-的限制" class="headerlink" title="retransform 的限制"></a>retransform 的限制</h2><ul>
<li>不允许新增加 field/method</li>
<li>正在跑的函数，没有退出不能生效，比如下面新增加的<code>System.out.println</code>，只有<code>run()</code>函数里的会生效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MathGame game = <span class="keyword">new</span> MathGame();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            game.run();</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 这个不生效，因为代码一直跑在 while里</span></span><br><span class="line">            System.out.println(<span class="string">&quot;in loop&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 这个生效，因为run()函数每次都可以完整结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;call run()&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> number = random.nextInt();</span><br><span class="line">            List&lt;Integer&gt; primeFactors = primeFactors(number);</span><br><span class="line">            print(number, primeFactors);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;illegalArgumentCount:%3d, &quot;</span>, illegalArgumentCount) + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Monitor-命令"><a href="#Monitor-命令" class="headerlink" title="Monitor 命令"></a>Monitor 命令</h1><div class="note info no-icon"><p>提示</p>
<p>方法执行监控</p>
</div>

<p>对匹配 <code>class-pattern</code>／<code>method-pattern</code>／<code>condition-express</code>的类、方法的调用进行监控。</p>
<p><code>monitor</code> 命令是一个非实时返回命令.</p>
<p>实时返回命令是输入之后立即返回，而非实时返回的命令，则是不断的等待目标 Java 进程返回信息，直到用户输入 <code>Ctrl+C</code> 为止。</p>
<p>服务端是以任务的形式在后台跑任务，植入的代码随着任务的中止而不会被执行，所以任务关闭后，不会对原有性能产生太大影响，而且原则上，任何 Arthas 命令不会引起原有业务逻辑的改变。</p>
<h2 id="监控的维度说明"><a href="#监控的维度说明" class="headerlink" title="监控的维度说明"></a>监控的维度说明</h2><table>
<thead>
<tr>
<th align="right">监控项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">timestamp</td>
<td align="left">时间戳</td>
</tr>
<tr>
<td align="right">class</td>
<td align="left">Java 类</td>
</tr>
<tr>
<td align="right">method</td>
<td align="left">方法（构造方法、普通方法）</td>
</tr>
<tr>
<td align="right">total</td>
<td align="left">调用次数</td>
</tr>
<tr>
<td align="right">success</td>
<td align="left">成功次数</td>
</tr>
<tr>
<td align="right">fail</td>
<td align="left">失败次数</td>
</tr>
<tr>
<td align="right">rt</td>
<td align="left">平均 RT</td>
</tr>
<tr>
<td align="right">fail-rate</td>
<td align="left">失败率</td>
</tr>
</tbody></table>
<h2 id="参数说明-7"><a href="#参数说明-7" class="headerlink" title="参数说明"></a>参数说明</h2><p>方法拥有一个命名参数 <code>[c:]</code>，意思是统计周期（cycle of output），拥有一个整型的参数值</p>
<table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>condition-express</em></td>
<td align="left">条件表达式</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">统计周期，默认值为 120 秒</td>
</tr>
<tr>
<td align="right">[b]</td>
<td align="left">在<strong>方法调用之前</strong>计算 condition-express</td>
</tr>
<tr>
<td align="right"><code>[m &lt;arg&gt;]</code></td>
<td align="left">指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td>
</tr>
</tbody></table>
<h2 id="使用参考-11"><a href="#使用参考-11" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ monitor -c 5 demo.MathGame primeFactors</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 94 ms.</span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:06:38  demo.MathGame  primeFactors  5      1        4     1.15        80.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:06:43  demo.MathGame  primeFactors  5      3        2     42.29       40.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:06:48  demo.MathGame  primeFactors  5      3        2     67.92       40.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:06:53  demo.MathGame  primeFactors  5      2        3     0.25        60.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:06:58  demo.MathGame  primeFactors  1      1        0     0.45        0.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2018-12-03 19:07:03  demo.MathGame  primeFactors  2      2        0     3182.72     0.00%</span><br></pre></td></tr></table></figure>

<h3 id="指定-Class-最大匹配数量"><a href="#指定-Class-最大匹配数量" class="headerlink" title="指定 Class 最大匹配数量"></a>指定 Class 最大匹配数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ monitor -c 1 -m 1 demo.MathGame primeFactors</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count:1 , method count:1) cost <span class="keyword">in</span> 384 ms, listenerId: 6.</span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2022-12-25 21:12:58  demo.MathGame  primeFactors  1      1        0     0.18        0.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method        total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2022-12-25 21:12:59  demo.MathGame  primeFactors  0      0        0     0.00       0.00%</span><br></pre></td></tr></table></figure>

<h3 id="计算条件表达式过滤统计结果-方法执行完毕之后"><a href="#计算条件表达式过滤统计结果-方法执行完毕之后" class="headerlink" title="计算条件表达式过滤统计结果(方法执行完毕之后)"></a>计算条件表达式过滤统计结果(方法执行完毕之后)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">monitor -c 5 demo.MathGame primeFactors <span class="string">&quot;params[0] &lt;= 2&quot;</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 19 ms, listenerId: 5</span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:36  demo.MathGame  primeFactors    5       3       2      0.09       40.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:41  demo.MathGame  primeFactors    5       2       3      0.11       60.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:46  demo.MathGame  primeFactors    5       1       4      0.06       80.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:51  demo.MathGame  primeFactors    5       1       4      0.12       80.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:56  demo.MathGame  primeFactors    5       3       2      0.15       40.00%</span><br></pre></td></tr></table></figure>

<h3 id="计算条件表达式过滤统计结果-方法执行完毕之前"><a href="#计算条件表达式过滤统计结果-方法执行完毕之前" class="headerlink" title="#计算条件表达式过滤统计结果(方法执行完毕之前)"></a><a href="https://arthas.aliyun.com/doc/monitor.html#%E8%AE%A1%E7%AE%97%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%87%E6%BB%A4%E7%BB%9F%E8%AE%A1%E7%BB%93%E6%9E%9C-%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%89%8D">#</a>计算条件表达式过滤统计结果(方法执行完毕之前)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">monitor -b -c 5 com.test.testes.MathGame primeFactors <span class="string">&quot;params[0] &lt;= 2&quot;</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 21 ms, listenerId: 4</span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:41:57  demo.MathGame  primeFactors    1       0        1      0.10      100.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:02  demo.MathGame  primeFactors    3       0        3      0.06      100.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:07  demo.MathGame  primeFactors    2       0        2      0.06      100.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:12  demo.MathGame  primeFactors    1       0        1      0.05      100.00%</span><br><span class="line"></span><br><span class="line"> timestamp            class          method         total  success  fail  avg-rt(ms)  fail-rate</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line"> 2020-09-02 09:42:17  demo.MathGame  primeFactors    2       0        2      0.10      100.00%</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="ognl-命令"><a href="#ognl-命令" class="headerlink" title="ognl 命令"></a>ognl 命令</h1><p>在 Arthas 里，有一个单独的 ognl 命令，可以动态执行代码。</p>
<p>查看用法：<code>ognl --help</code></p>
<h2 id="参数说明-8"><a href="#参数说明-8" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>express</em></td>
<td align="left">执行的表达式</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">执行表达式的 ClassLoader 的 hashcode，默认值是 SystemClassLoader</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right">[x]</td>
<td align="left">结果对象的展开层次，默认值 1</td>
</tr>
</tbody></table>
<h2 id="使用参考-12"><a href="#使用参考-12" class="headerlink" title="使用参考"></a>使用参考</h2><ul>
<li>OGNL 特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71在新窗口打开</a></li>
<li>OGNL 表达式官方指南：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html在新窗口打开</a></li>
</ul>
<p>调用静态函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ognl <span class="string">&#x27;@java.lang.System@out.println(&quot;hello&quot;)&#x27;</span></span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>获取静态类的静态字段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ognl <span class="string">&#x27;@demo.MathGame@random&#x27;</span></span><br><span class="line">@Random[</span><br><span class="line">    serialVersionUID=@Long[3905348978240129619],</span><br><span class="line">    seed=@AtomicLong[125451474443703],</span><br><span class="line">    multiplier=@Long[25214903917],</span><br><span class="line">    addend=@Long[11],</span><br><span class="line">    mask=@Long[281474976710655],</span><br><span class="line">    DOUBLE_UNIT=@Double[1.1102230246251565E-16],</span><br><span class="line">    BadBound=@String[bound must be positive],</span><br><span class="line">    BadRange=@String[bound must be greater than origin],</span><br><span class="line">    BadSize=@String[size must be non-negative],</span><br><span class="line">    seedUniquifier=@AtomicLong[-3282039941672302964],</span><br><span class="line">    nextNextGaussian=@Double[0.0],</span><br><span class="line">    haveNextNextGaussian=@Boolean[<span class="literal">false</span>],</span><br><span class="line">    serialPersistentFields=@ObjectStreamField[][isEmpty=<span class="literal">false</span>;size=3],</span><br><span class="line">    unsafe=@Unsafe[sun.misc.Unsafe@28ea5898],</span><br><span class="line">    seedOffset=@Long[24],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>通过 hashcode 指定 ClassLoader：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ classloader -t</span><br><span class="line">+-BootstrapClassLoader</span><br><span class="line">+-jdk.internal.loader.ClassLoaders<span class="variable">$PlatformClassLoader</span>@301ec38b</span><br><span class="line">  +-com.taobao.arthas.agent.ArthasClassloader@472067c7</span><br><span class="line">  +-jdk.internal.loader.ClassLoaders<span class="variable">$AppClassLoader</span>@4b85612c</span><br><span class="line">    +-org.springframework.boot.loader.LaunchedURLClassLoader@7f9a81e8</span><br><span class="line"></span><br><span class="line">$ ognl -c 7f9a81e8 @org.springframework.boot.SpringApplication@logger</span><br><span class="line">@Slf4jLocationAwareLog[</span><br><span class="line">    FQCN=@String[org.apache.commons.logging.LogAdapter<span class="variable">$Slf4jLocationAwareLog</span>],</span><br><span class="line">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class="line">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class="line">]</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。</p>
<p>对于只有唯一实例的 ClassLoader 可以通过 class name 指定，使用起来更加方便：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ognl --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader  @org.springframework.boot.SpringApplication@logger</span><br><span class="line">@Slf4jLocationAwareLog[</span><br><span class="line">    FQCN=@String[org.apache.commons.logging.LogAdapter<span class="variable">$Slf4jLocationAwareLog</span>],</span><br><span class="line">    name=@String[org.springframework.boot.SpringApplication],</span><br><span class="line">    logger=@Logger[Logger[org.springframework.boot.SpringApplication]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>执行多行表达式，赋值给临时变量，返回一个 List：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ognl <span class="string">&#x27;#value1=@System@getProperty(&quot;java.home&quot;), #value2=@System@getProperty(&quot;java.runtime.name&quot;), &#123;#value1, #value2&#125;&#x27;</span></span><br><span class="line">@ArrayList[</span><br><span class="line">    @String[/opt/java/8.0.181-zulu/jre],</span><br><span class="line">    @String[OpenJDK Runtime Environment],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="Options-命令"><a href="#Options-命令" class="headerlink" title="Options 命令"></a>Options 命令</h1><blockquote>
<p>全局开关</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>unsafe</td>
<td>false</td>
<td>是否支持对系统级别的类进行增强，打开该开关可能导致把 JVM 搞挂，请慎重选择！</td>
</tr>
<tr>
<td>dump</td>
<td>false</td>
<td>是否支持被增强了的类 dump 到外部文件中，如果打开开关，class 文件会被 dump 到<code>/$&#123;application working dir&#125;/arthas-class-dump/</code> 目录下，具体位置详见控制台输出</td>
</tr>
<tr>
<td>batch-re-transform</td>
<td>true</td>
<td>是否支持批量对匹配到的类执行 retransform 操作</td>
</tr>
<tr>
<td>json-format</td>
<td>false</td>
<td>是否支持 json 化的输出</td>
</tr>
<tr>
<td>disable-sub-class</td>
<td>false</td>
<td>是否禁用子类匹配，默认在匹配目标类的时候会默认匹配到其子类，如果想精确匹配，可以关闭此开关</td>
</tr>
<tr>
<td>support-default-method</td>
<td>true</td>
<td>是否支持匹配到 default method，默认会查找 interface，匹配里面的 default method。参考 <a href="https://github.com/alibaba/arthas/issues/1105">#1105</a></td>
</tr>
<tr>
<td>save-result</td>
<td>false</td>
<td>是否打开执行结果存日志功能，打开之后所有命令的运行结果都将保存到<code>~/logs/arthas-cache/result.log</code> 中</td>
</tr>
<tr>
<td>job-timeout</td>
<td>1d</td>
<td>异步后台任务的默认超时时间，超过这个时间，任务自动停止；比如设置 1d, 2h, 3m, 25s，分别代表天、小时、分、秒</td>
</tr>
<tr>
<td>print-parent-fields</td>
<td>true</td>
<td>是否打印在 parent class 里的 filed</td>
</tr>
</tbody></table>
<h2 id="查看所有的-options"><a href="#查看所有的-options" class="headerlink" title="查看所有的 options"></a>查看所有的 options</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options</span><br></pre></td></tr></table></figure>

<h2 id="获取-option-的值"><a href="#获取-option-的值" class="headerlink" title="获取 option 的值"></a>获取 option 的值</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options json-format</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下<code>json-format</code> 为 false，如果希望<code>watch</code> /<code>tt</code> 等命令结果以 json 格式输出，则可以设置<code>json-format</code> 为 true。</p>
</blockquote>
<h2 id="设置指定的-option"><a href="#设置指定的-option" class="headerlink" title="设置指定的 option"></a>设置指定的 option</h2><p>例如，想打开执行结果存日志功能首先查看日志，发现无记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;root&#x2F;logs&#x2F;arthas-cache&#x2F;result.log</span><br></pre></td></tr></table></figure>

<p>输入如下命令即可激活记录日志功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options save-result true</span><br></pre></td></tr></table></figure>

<p>稍候片刻，再次查看，发现出现记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;root&#x2F;logs&#x2F;arthas-cache&#x2F;result.log</span><br></pre></td></tr></table></figure>

<h1 id="Perfcounter-命令"><a href="#Perfcounter-命令" class="headerlink" title="Perfcounter 命令"></a>Perfcounter 命令</h1><p>查看当前 JVM 的 Perf Counter 信息</p>
<h2 id="使用参考-13"><a href="#使用参考-13" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ perfcounter</span><br><span class="line"> java.ci.totalTime                            2325637411</span><br><span class="line"> java.cls.loadedClasses                       3403</span><br><span class="line"> java.cls.sharedLoadedClasses                 0</span><br><span class="line"> java.cls.sharedUnloadedClasses               0</span><br><span class="line"> java.cls.unloadedClasses                     0</span><br><span class="line"> java.property.java.version                   11.0.4</span><br><span class="line"> java.property.java.vm.info                   mixed mode</span><br><span class="line"> java.property.java.vm.name                   OpenJDK 64-Bit Server VM</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>可以用<code>-d</code>参数打印更多信息：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ perfcounter -d</span><br><span class="line"> Name                                   Variability   Units        Value</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"> java.ci.totalTime                      Monotonic     Ticks        3242526906</span><br><span class="line"> java.cls.loadedClasses                 Monotonic     Events       3404</span><br><span class="line"> java.cls.sharedLoadedClasses           Monotonic     Events       0</span><br><span class="line"> java.cls.sharedUnloadedClasses         Monotonic     Events       0</span><br><span class="line"> java.cls.unloadedClasses               Monotonic     Events       0</span><br></pre></td></tr></table></figure>

<h2 id="jdk9-以上的应用"><a href="#jdk9-以上的应用" class="headerlink" title="jdk9 以上的应用"></a>jdk9 以上的应用</h2><p>如果没有打印出信息，应用在启动时，加下面的参数：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--add-opens java.base/jdk.internal.perf=ALL-UNNAMED --add-exports java.base/jdk.internal.perf=ALL-UNNAMED --add-opens java.management/sun.management.counter.perf=ALL-UNNAMED --add-opens java.management/sun.management.counter=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<h1 id="Plaintext-命令"><a href="#Plaintext-命令" class="headerlink" title="Plaintext 命令"></a>Plaintext 命令</h1><p>将输出结果去除 ANSI 颜色</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jad demo.MathGame main</span><br><span class="line">jad demo.MathGame main | plaintext</span><br></pre></td></tr></table></figure>

<h1 id="Profiler-命令"><a href="#Profiler-命令" class="headerlink" title="Profiler 命令"></a>Profiler 命令</h1><blockquote>
<p>使用<a href="https://github.com/jvm-profiling-tools/async-profiler">async-profiler</a>生成火焰图</p>
</blockquote>
<p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。</p>
<p><code>profiler</code> 命令基本运行结构是 <code>profiler action [actionArg]</code></p>
<h2 id="参数说明-9"><a href="#参数说明-9" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>action</em></td>
<td align="left">要执行的操作</td>
</tr>
<tr>
<td align="right"><em>actionArg</em></td>
<td align="left">属性名模式</td>
</tr>
<tr>
<td align="right">[i:]</td>
<td align="left">采样间隔（单位：ns）（默认值：10’000’000，即 10 ms）</td>
</tr>
<tr>
<td align="right">[f:]</td>
<td align="left">将输出转储到指定路径</td>
</tr>
<tr>
<td align="right">[d:]</td>
<td align="left">运行评测指定秒</td>
</tr>
<tr>
<td align="right">[e:]</td>
<td align="left">要跟踪哪个事件（cpu, alloc, lock, cache-misses 等），默认是 cpu</td>
</tr>
</tbody></table>
<h2 id="启动-profiler"><a href="#启动-profiler" class="headerlink" title="启动 profiler"></a>启动 profiler</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ profiler start</span><br><span class="line">Started [cpu] profiling</span><br></pre></td></tr></table></figure>

<p>提示</p>
<p>默认情况下，生成的是 cpu 的火焰图，即 event 为<code>cpu</code>。可以用<code>--event</code>参数来指定。</p>
<h2 id="获取已采集的-sample-的数量"><a href="#获取已采集的-sample-的数量" class="headerlink" title="获取已采集的 sample 的数量"></a>获取已采集的 sample 的数量</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ profiler getSamples</span><br><span class="line">23</span><br></pre></td></tr></table></figure>

<h2 id="查看-profiler-状态"><a href="#查看-profiler-状态" class="headerlink" title="查看 profiler 状态"></a>查看 profiler 状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler status</span><br><span class="line">[cpu] profiling is running <span class="keyword">for</span> 4 seconds</span><br></pre></td></tr></table></figure>

<p>可以查看当前 profiler 在采样哪种<code>event</code>和采样时间。</p>
<h2 id="停止-profiler"><a href="#停止-profiler" class="headerlink" title="停止 profiler"></a>停止 profiler</h2><h3 id="生成-html-格式结果"><a href="#生成-html-格式结果" class="headerlink" title="生成 html 格式结果"></a>生成 html 格式结果</h3><p>默认情况下，结果文件是<code>html</code>格式，也可以用<code>--format</code>参数指定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler stop --format html</span><br><span class="line">profiler output file: /tmp/<span class="built_in">test</span>/arthas-output/20211207-111550.html</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>或者在<code>--file</code>参数里用文件名指名格式。比如<code>--file /tmp/result.html</code> 。</p>
<h2 id="通过浏览器查看-arthas-output-下面的-profiler-结果"><a href="#通过浏览器查看-arthas-output-下面的-profiler-结果" class="headerlink" title="通过浏览器查看 arthas-output 下面的 profiler 结果"></a>通过浏览器查看 arthas-output 下面的 profiler 结果</h2><p>默认情况下，arthas 使用 3658 端口，则可以打开： <a href="http://localhost:3658/arthas-output/">http://localhost:3658/arthas-output/在新窗口打开</a> 查看到<code>arthas-output</code>目录下面的 profiler 结果：</p>
<p><img src="https://arthas.aliyun.com/images/arthas-output.jpg" alt="img"></p>
<p>点击可以查看具体的结果：</p>
<p><img src="https://arthas.aliyun.com/images/arthas-output-svg.jpg" alt="img"></p>
<p>提示</p>
<p>如果是 chrome 浏览器，可能需要多次刷新。</p>
<h2 id="profiler-支持的-events"><a href="#profiler-支持的-events" class="headerlink" title="profiler 支持的 events"></a>profiler 支持的 events</h2><p>在不同的平台，不同的 OS 下面，支持的 events 各有不同。比如在 macos 下面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler list</span><br><span class="line">Basic events:</span><br><span class="line">  cpu</span><br><span class="line">  alloc</span><br><span class="line">  lock</span><br><span class="line">  wall</span><br><span class="line">  itimer</span><br></pre></td></tr></table></figure>

<p>在 linux 下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler list</span><br><span class="line">Basic events:</span><br><span class="line">  cpu</span><br><span class="line">  alloc</span><br><span class="line">  lock</span><br><span class="line">  wall</span><br><span class="line">  itimer</span><br><span class="line">Perf events:</span><br><span class="line">  page-faults</span><br><span class="line">  context-switches</span><br><span class="line">  cycles</span><br><span class="line">  instructions</span><br><span class="line">  cache-references</span><br><span class="line">  cache-misses</span><br><span class="line">  branches</span><br><span class="line">  branch-misses</span><br><span class="line">  bus-cycles</span><br><span class="line">  L1-dcache-load-misses</span><br><span class="line">  LLC-load-misses</span><br><span class="line">  dTLB-load-misses</span><br><span class="line">  mem:breakpoint</span><br><span class="line">  trace:tracepoint</span><br></pre></td></tr></table></figure>

<p>如果遇到 OS 本身的权限/配置问题，然后  缺少部分 event，可以参考<code>async-profiler</code>本身文档：<a href="https://github.com/jvm-profiling-tools/async-profiler">async-profiler在新窗口打开</a></p>
<p>可以用<code>--event</code>参数指定要采样的事件，比如对<code>alloc</code>事件进入采样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler start --event alloc</span><br></pre></td></tr></table></figure>

<h2 id="恢复采样"><a href="#恢复采样" class="headerlink" title="恢复采样"></a>恢复采样</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler resume</span><br><span class="line">Started [cpu] profiling</span><br></pre></td></tr></table></figure>

<p><code>start</code>和<code>resume</code>的区别是：<code>start</code>是新开始采样，<code>resume</code>会保留上次<code>stop</code>时的数据。</p>
<p>通过执行<code>profiler getSamples</code>可以查看 samples 的数量来验证。</p>
<h2 id="使用execute来执行复杂的命令"><a href="#使用execute来执行复杂的命令" class="headerlink" title="使用execute来执行复杂的命令"></a>使用<code>execute</code>来执行复杂的命令</h2><p>比如开始采样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler execute <span class="string">&#x27;start,framebuf=5000000&#x27;</span></span><br></pre></td></tr></table></figure>

<p>停止采样，并保存到指定文件里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler execute <span class="string">&#x27;stop,file=/tmp/result.html&#x27;</span></span><br></pre></td></tr></table></figure>

<p>具体的格式参考： <a href="https://github.com/jvm-profiling-tools/async-profiler/blob/v2.5/src/arguments.cpp#L50">arguments.cpp在新窗口打开</a></p>
<h2 id="查看所有支持的-action"><a href="#查看所有支持的-action" class="headerlink" title="查看所有支持的 action"></a>查看所有支持的 action</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler actions</span><br><span class="line">Supported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]</span><br></pre></td></tr></table></figure>

<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ profiler version</span><br><span class="line">Async-profiler 1.6 built on Sep  9 2019</span><br><span class="line">Copyright 2019 Andrei Pangin</span><br></pre></td></tr></table></figure>

<h2 id="配置-framebuf-参数"><a href="#配置-framebuf-参数" class="headerlink" title="配置 framebuf 参数"></a>配置 framebuf 参数</h2><blockquote>
<p>如果遇到生成的火焰图有 <code>[frame_buffer_overflow]</code>，则需要增大 framebuf（默认值是 1’000’000），可以显式配置，比如：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler start --framebuf 5000000</span><br></pre></td></tr></table></figure>

<h2 id="配置-include-exclude-来过滤数据"><a href="#配置-include-exclude-来过滤数据" class="headerlink" title="配置 include/exclude 来过滤数据"></a>配置 include/exclude 来过滤数据</h2><p>如果应用比较复杂，生成的内容很多，想只关注部分数据，可以通过 include/exclude 来过滤。比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler start --include <span class="string">&#x27;java/*&#x27;</span> --include <span class="string">&#x27;demo/*&#x27;</span> --exclude <span class="string">&#x27;*Unsafe.park*&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>include/exclude 都支持设置多个值 ，但是需要配置在命令行的最后。</p>
</blockquote>
<h2 id="指定执行时间"><a href="#指定执行时间" class="headerlink" title="指定执行时间"></a>指定执行时间</h2><p>比如，希望 profiler 执行 300 秒自动结束，可以用 <code>-d</code>/<code>--duration</code> 参数指定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler start --duration 300</span><br></pre></td></tr></table></figure>

<h2 id="生成-jfr-格式结果"><a href="#生成-jfr-格式结果" class="headerlink" title="生成 jfr 格式结果"></a>生成 jfr 格式结果</h2><blockquote>
<p>注意，jfr 只支持在 <code>start</code>时配置。如果是在<code>stop</code>时指定，则不会生效。</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">profiler start --file /tmp/test.jfr</span><br></pre></td></tr></table></figure>

<p><code>file</code>参数支持一些变量：</p>
<ul>
<li>时间戳： <code>--file /tmp/test-%t.jfr</code></li>
<li>进程 ID： <code>--file /tmp/test-%p.jfr</code></li>
</ul>
<p>生成的结果可以用支持 jfr 格式的工具来查看。比如：</p>
<ul>
<li>JDK Mission Control ： <a href="https://github.com/openjdk/jmc">https://github.com/openjdk/jmc</a></li>
<li>JProfiler ： <a href="https://github.com/alibaba/arthas/issues/1416">https://github.com/alibaba/arthas/issues/1416</a></li>
</ul>
<h2 id="生成的火焰图里的-unknown"><a href="#生成的火焰图里的-unknown" class="headerlink" title="生成的火焰图里的 unknown"></a>生成的火焰图里的 unknown</h2><ul>
<li><a href="https://github.com/jvm-profiling-tools/async-profiler/discussions/409">https://github.com/jvm-profiling-tools/async-profiler/discussions/409</a></li>
</ul>
<hr>
<h1 id="Pwd-命令"><a href="#Pwd-命令" class="headerlink" title="Pwd 命令"></a>Pwd 命令</h1><p>通过 pwd 命令可以获知当前的工作目录，和 linux 命令类似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<h1 id="Quit-stop-命令"><a href="#Quit-stop-命令" class="headerlink" title="Quit-stop 命令"></a>Quit-stop 命令</h1><h2 id="退出-Arthas"><a href="#退出-Arthas" class="headerlink" title="退出 Arthas"></a>退出 Arthas</h2><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出 Arthas。</p>
<p>退出 Arthas 之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>
<h2 id="彻底退出-Arthas"><a href="#彻底退出-Arthas" class="headerlink" title="彻底退出 Arthas"></a>彻底退出 Arthas</h2><p>exit/quit 命令 只是退出当前 session，arthas server 还在目标进程中运行。</p>
<p>想完全退出 Arthas，可以执行 <code>stop</code> 命令。</p>
<hr>
<h1 id="Reset-命令"><a href="#Reset-命令" class="headerlink" title="Reset 命令"></a>Reset 命令</h1><div class="note info no-icon"><p>提示</p>
<p>重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端<code>stop</code>时会重置所有增强过的类</p>
</div>

<h2 id="使用参考-14"><a href="#使用参考-14" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ reset -h</span><br><span class="line"> USAGE:</span><br><span class="line">   reset [-h] [-E] [class-pattern]</span><br><span class="line"></span><br><span class="line"> SUMMARY:</span><br><span class="line">   Reset all the enhanced classes</span><br><span class="line"></span><br><span class="line"> EXAMPLES:</span><br><span class="line">   reset</span><br><span class="line">   reset *List</span><br><span class="line">   reset -E .*List</span><br><span class="line"></span><br><span class="line"> OPTIONS:</span><br><span class="line"> -h, --help                                                         this help</span><br><span class="line"> -E, --regex                                                        Enable regular expression to match (wildcard matching by default)</span><br><span class="line"> &lt;class-pattern&gt;                                                    Path and classname of Pattern Matching</span><br></pre></td></tr></table></figure>

<h2 id="还原指定类"><a href="#还原指定类" class="headerlink" title="还原指定类"></a>还原指定类</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ trace Test test</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 57 ms.</span><br><span class="line">`---ts=2017-10-26 17:10:33;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">    `---[0.590102ms] Test:test()</span><br><span class="line"></span><br><span class="line">`---ts=2017-10-26 17:10:34;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">    `---[0.068692ms] Test:test()</span><br><span class="line"></span><br><span class="line">$ reset Test</span><br><span class="line">Affect(class-cnt:1 , method-cnt:0) cost in 11 ms.</span><br></pre></td></tr></table></figure>

<h2 id="还原所有类"><a href="#还原所有类" class="headerlink" title="还原所有类"></a>还原所有类</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ trace Test test</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 15 ms.</span><br><span class="line">`---ts=2017-10-26 17:12:06;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@14dad5dc</span><br><span class="line">    `---[0.128518ms] Test:test()</span><br><span class="line"></span><br><span class="line">$ reset</span><br><span class="line">Affect(class-cnt:1 , method-cnt:0) cost in 9 ms.</span><br></pre></td></tr></table></figure>

<h1 id="Sc-命令"><a href="#Sc-命令" class="headerlink" title="Sc 命令"></a>Sc 命令</h1><blockquote>
<p>查看 JVM 已加载的类信息</p>
</blockquote>
<p>“Search-Class”的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code> 、<code>[E]</code> 、<code>[f]</code> 和 <code>[x:]</code> 。</p>
<h2 id="参数说明-10"><a href="#参数说明-10" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td><em>class-pattern</em></td>
<td>类名表达式匹配</td>
</tr>
<tr>
<td><em>method-pattern</em></td>
<td>方法名表达式匹配</td>
</tr>
<tr>
<td>[d]</td>
<td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。 如果一个类被多个 ClassLoader 所加载，则会出现多次</td>
</tr>
<tr>
<td>[E]</td>
<td>开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td>[f]</td>
<td>输出当前类的成员变量信息（需要配合参数-d 一起使用）</td>
</tr>
<tr>
<td>[x:]</td>
<td>指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td>
</tr>
<tr>
<td><code>[c:]</code></td>
<td>指定 class 的 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td><code>[classLoaderClass:]</code></td>
<td>指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td><code>[n:]</code></td>
<td>具有详细信息的匹配类的最大数量（默认为 100）</td>
</tr>
</tbody></table>
<p><a href="https://arthas.aliyun.com/doc/sc.html">sc 命令文档</a></p>
<blockquote>
<p>class-pattern 支持全限定名，如 com.taobao.test.AAA，也支持 com/taobao/test/AAA 这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把<code>/</code> 替换为<code>.</code> 啦。</p>
</blockquote>
<blockquote>
<p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开<code>options disable-sub-class true</code> 开关</p>
</blockquote>
<h2 id="使用参考-15"><a href="#使用参考-15" class="headerlink" title="使用参考"></a>使用参考</h2><ul>
<li>模糊搜索 <code>sc demo.*</code></li>
<li>打印类的详细信息 <code>sc -d demo.MathGame</code></li>
</ul>
<h2 id="指定-classLoader"><a href="#指定-classLoader" class="headerlink" title="指定 classLoader"></a>指定 classLoader</h2><p>注意 hashcode 是变化的，需要先查看当前的 ClassLoader 信息，提取对应 ClassLoader 的 hashcode。<br>如果你使用<code>-c</code> ，你需要手动输入 hashcode：<code>-c &lt;hashcode&gt;</code><br>对于只有唯一实例的 ClassLoader 可以通过<code>--classLoaderClass</code> 指定 class name，使用起来更加方便：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc --classLoaderClass jdk.internal.loader.ClassLoaders$AppClassLoader -d demo*</span><br></pre></td></tr></table></figure>

<ul>
<li>注：这里 classLoaderClass 在 java 8 是 sun.misc.Launcher$AppClassLoader，而 java 11 的 classloader 是 jdk.internal.loader.ClassLoaders$AppClassLoader，killercoda 目前环境是 java11。</li>
</ul>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code> 是动态变化的。</p>
<ul>
<li>打印出类的 Field 信息 <code>sc -d -f demo.MathGame</code></li>
</ul>
<hr>
<h1 id="session-命令"><a href="#session-命令" class="headerlink" title="session 命令"></a>session 命令</h1><p>查看当前会话的信息，显示当前绑定的 pid 以及会话 id。</p>
<blockquote>
<p>提示</p>
<p>如果配置了 tunnel server，会追加打印 代理 id、tunnel 服务器的 url 以及连接状态。</p>
<p>如果使用了 staturl 做统计，会追加显示 statUrl 地址。</p>
</blockquote>
<h2 id="使用参考-16"><a href="#使用参考-16" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ session</span><br><span class="line">  Name        Value</span><br><span class="line">--------------------------------------------------</span><br><span class="line"> JAVA_PID    14584</span><br><span class="line"> SESSION_ID  c2073d3b-443a-4a9b-9249-0c5d24a5756c</span><br></pre></td></tr></table></figure>

<h1 id="Sm-命令"><a href="#Sm-命令" class="headerlink" title="Sm 命令"></a>Sm 命令</h1><blockquote>
<p>提示</p>
<p>查看已加载类的方法信息</p>
</blockquote>
<p>“Search-Method” 的简写，这个命令能搜索出所有已经加载了 Class 信息的方法信息。</p>
<p><code>sm</code> 命令只能看到由当前类所声明 (declaring) 的方法，父类则无法看到。</p>
<h2 id="参数说明-11"><a href="#参数说明-11" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right">[d]</td>
<td align="left">展示每个方法的详细信息</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">指定 class 的 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right"><code>[n:]</code></td>
<td align="left">具有详细信息的匹配类的最大数量（默认为 100）</td>
</tr>
</tbody></table>
<h2 id="使用参考-17"><a href="#使用参考-17" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sm java.lang.String</span><br><span class="line">java.lang.String-&gt;&lt;init&gt;</span><br><span class="line">java.lang.String-&gt;equals</span><br><span class="line">java.lang.String-&gt;toString</span><br><span class="line">java.lang.String-&gt;hashCode</span><br><span class="line">java.lang.String-&gt;compareTo</span><br><span class="line">java.lang.String-&gt;indexOf</span><br><span class="line">java.lang.String-&gt;valueOf</span><br><span class="line">java.lang.String-&gt;checkBounds</span><br><span class="line">java.lang.String-&gt;length</span><br><span class="line">java.lang.String-&gt;isEmpty</span><br><span class="line">java.lang.String-&gt;charAt</span><br><span class="line">java.lang.String-&gt;codePointAt</span><br><span class="line">java.lang.String-&gt;codePointBefore</span><br><span class="line">java.lang.String-&gt;codePointCount</span><br><span class="line">java.lang.String-&gt;offsetByCodePoints</span><br><span class="line">java.lang.String-&gt;getChars</span><br><span class="line">java.lang.String-&gt;getBytes</span><br><span class="line">java.lang.String-&gt;contentEquals</span><br><span class="line">java.lang.String-&gt;nonSyncContentEquals</span><br><span class="line">java.lang.String-&gt;equalsIgnoreCase</span><br><span class="line">java.lang.String-&gt;compareToIgnoreCase</span><br><span class="line">java.lang.String-&gt;regionMatches</span><br><span class="line">java.lang.String-&gt;startsWith</span><br><span class="line">java.lang.String-&gt;endsWith</span><br><span class="line">java.lang.String-&gt;indexOfSupplementary</span><br><span class="line">java.lang.String-&gt;lastIndexOf</span><br><span class="line">java.lang.String-&gt;lastIndexOfSupplementary</span><br><span class="line">java.lang.String-&gt;substring</span><br><span class="line">java.lang.String-&gt;subSequence</span><br><span class="line">java.lang.String-&gt;concat</span><br><span class="line">java.lang.String-&gt;replace</span><br><span class="line">java.lang.String-&gt;matches</span><br><span class="line">java.lang.String-&gt;contains</span><br><span class="line">java.lang.String-&gt;replaceFirst</span><br><span class="line">java.lang.String-&gt;replaceAll</span><br><span class="line">java.lang.String-&gt;split</span><br><span class="line">java.lang.String-&gt;join</span><br><span class="line">java.lang.String-&gt;toLowerCase</span><br><span class="line">java.lang.String-&gt;toUpperCase</span><br><span class="line">java.lang.String-&gt;trim</span><br><span class="line">java.lang.String-&gt;toCharArray</span><br><span class="line">java.lang.String-&gt;format</span><br><span class="line">java.lang.String-&gt;copyValueOf</span><br><span class="line">java.lang.String-&gt;intern</span><br><span class="line">Affect(row-cnt:44) cost <span class="keyword">in</span> 1342 ms.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sm -d java.lang.String toString</span><br><span class="line"> declaring-class  java.lang.String</span><br><span class="line"> method-name      toString</span><br><span class="line"> modifier         public</span><br><span class="line"> annotation</span><br><span class="line"> parameters</span><br><span class="line"> <span class="built_in">return</span>           java.lang.String</span><br><span class="line"> exceptions</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 3 ms.</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Stack-命令"><a href="#Stack-命令" class="headerlink" title="Stack 命令"></a>Stack 命令</h1><div class="note info no-icon"><p>提示</p>
<p>输出当前方法被调用的调用路径</p>
</div>

<p>很多时候我们都知道一个方法被执行，但这个方法被执行的路径非常多，或者你根本就不知道这个方法是从那里被执行了，此时你需要的是 stack 命令。</p>
<h2 id="参数说明-12"><a href="#参数说明-12" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>condition-express</em></td>
<td align="left">条件表达式</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[n:]</code></td>
<td align="left">执行次数限制</td>
</tr>
<tr>
<td align="right"><code>[m &lt;arg&gt;]</code></td>
<td align="left">指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td>
</tr>
</tbody></table>
<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>
<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。</p>
<p>请参考<a href="https://arthas.aliyun.com/doc/advice-class.html">表达式核心变量</a>中关于该节点的描述。</p>
<ul>
<li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71在新窗口打开</a></li>
<li>OGNL 表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html在新窗口打开</a></li>
</ul>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stack demo.MathGame primeFactors</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 36 ms.</span><br><span class="line">ts=2018-12-04 01:32:19;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    @demo.MathGame.run()</span><br><span class="line">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>

<h3 id="指定-Class-最大匹配数量-1"><a href="#指定-Class-最大匹配数量-1" class="headerlink" title="指定 Class 最大匹配数量"></a>指定 Class 最大匹配数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stack demo.MathGame primeFactors -m 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count:1 , method count:1) cost <span class="keyword">in</span> 561 ms, listenerId: 5.</span><br><span class="line">ts=2022-12-25 21:07:07;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@b4aac2</span><br><span class="line">    @demo.MathGame.primeFactors()</span><br><span class="line">        at demo.MathGame.run(MathGame.java:46)</span><br><span class="line">        at demo.MathGame.main(MathGame.java:38)</span><br></pre></td></tr></table></figure>

<h3 id="据条件表达式来过滤"><a href="#据条件表达式来过滤" class="headerlink" title="据条件表达式来过滤"></a>据条件表达式来过滤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stack demo.MathGame primeFactors <span class="string">&#x27;params[0]&lt;0&#x27;</span> -n 2</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 30 ms.</span><br><span class="line">ts=2018-12-04 01:34:27;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    @demo.MathGame.run()</span><br><span class="line">        at demo.MathGame.main(MathGame.java:16)</span><br><span class="line"></span><br><span class="line">ts=2018-12-04 01:34:30;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    @demo.MathGame.run()</span><br><span class="line">        at demo.MathGame.main(MathGame.java:16)</span><br><span class="line"></span><br><span class="line">Command execution <span class="built_in">times</span> exceed <span class="built_in">limit</span>: 2, so <span class="built_in">command</span> will <span class="built_in">exit</span>. You can <span class="built_in">set</span> it with -n option.</span><br></pre></td></tr></table></figure>

<h3 id="据执行时间来过滤"><a href="#据执行时间来过滤" class="headerlink" title="据执行时间来过滤"></a>据执行时间来过滤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ stack demo.MathGame primeFactors <span class="string">&#x27;#cost&gt;5&#x27;</span></span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 35 ms.</span><br><span class="line">ts=2018-12-04 01:35:58;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    @demo.MathGame.run()</span><br><span class="line">        at demo.MathGame.main(MathGame.java:16)</span><br></pre></td></tr></table></figure>

<h1 id="Sysenv-命令"><a href="#Sysenv-命令" class="headerlink" title="Sysenv 命令"></a>Sysenv 命令</h1><div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 的环境属性( System Environment Variables )</p>
</div>

<h2 id="使用参考-18"><a href="#使用参考-18" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  sysenv [-h] [env-name]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Display the system env.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">  sysenv</span><br><span class="line">  sysenv USER</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/sysenv</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                                                 this help</span><br><span class="line">&lt;env-name&gt;                                                 env name</span><br></pre></td></tr></table></figure>

<h3 id="查看所有环境变量"><a href="#查看所有环境变量" class="headerlink" title="查看所有环境变量"></a>查看所有环境变量</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysenv</span><br><span class="line"> KEY                      VALUE</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> PATH                     /Users/admin/.sdkman/candidates/visualvm/current/bin:/Users/admin/.sdkman/candidates/ja</span><br><span class="line">                          va/current/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Wireshark.app/Contents/</span><br><span class="line">                          MacOS</span><br><span class="line"> SDKMAN_VERSION           5.7.3+337</span><br><span class="line"> JAVA_HOME                /Users/admin/.sdkman/candidates/java/current</span><br><span class="line"> JAVA_MAIN_CLASS_65244    demo.MathGame</span><br><span class="line"> TERM                     xterm-256color</span><br><span class="line"> LANG                     zh_CN.UTF-8</span><br><span class="line"> AUTOJUMP_SOURCED         1</span><br><span class="line"> COLORTERM                truecolor</span><br><span class="line"> LOGNAME                  admin</span><br><span class="line"> XPC_SERVICE_NAME         0</span><br><span class="line"> PWD                      /Users/admin/code/ali/arthas/demo</span><br><span class="line"> TERM_PROGRAM_VERSION     3.2.5</span><br><span class="line"> _                        /Users/admin/.sdkman/candidates/java/current/bin/java</span><br><span class="line"> SHELL                    /bin/bash</span><br><span class="line"> TERM_PROGRAM             iTerm.app</span><br><span class="line"> SDKMAN_PLATFORM          Darwin</span><br><span class="line"> USER                     admin</span><br><span class="line"> ITERM_PROFILE            Default</span><br><span class="line"> TMPDIR                   /var/folders/0r/k561bkk917gg972stqclbz9h0000gn/T/</span><br><span class="line"> XPC_FLAGS                0x0</span><br><span class="line"> TERM_SESSION_ID          w0t4p0:60BC264D-9649-42AC-A7E4-AF85B69F93F8</span><br><span class="line"> __CF_USER_TEXT_ENCODING  0x1F5:0x19:0x34</span><br><span class="line"> Apple_PubSub_Socket_Ren  /private/tmp/com.apple.launchd.DwmmjSQsll/Render</span><br><span class="line"> der</span><br><span class="line"> COLORFGBG                7;0</span><br><span class="line"> HOME                     /Users/admin</span><br><span class="line"> SHLVL                    1</span><br><span class="line"> AUTOJUMP_ERROR_PATH      /Users/admin/Library/autojump/errors.log</span><br></pre></td></tr></table></figure>

<h3 id="查看单个环境变量"><a href="#查看单个环境变量" class="headerlink" title="查看单个环境变量"></a>查看单个环境变量</h3><blockquote>
<p>提示</p>
<p>支持通过<code>TAB</code>键自动补全</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysenv USER</span><br><span class="line">USER=admin</span><br></pre></td></tr></table></figure>

<h1 id="sysprop-命令"><a href="#sysprop-命令" class="headerlink" title="sysprop 命令"></a>sysprop 命令</h1><div class="note info no-icon"><p>提示</p>
<p>查看当前 JVM 的系统属性( System Property )</p>
</div>

<h2 id="使用参考-19"><a href="#使用参考-19" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">USAGE:</span><br><span class="line">  sysprop [-h] [property-name] [property-value]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Display, and change all the system properties.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">sysprop</span><br><span class="line">sysprop file.encoding</span><br><span class="line">sysprop production.mode true</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/sysprop</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                                  this help</span><br><span class="line">&lt;property-name&gt;                             property name</span><br><span class="line">&lt;property-value&gt;                            property value</span><br></pre></td></tr></table></figure>

<h3 id="查看所有属性"><a href="#查看所有属性" class="headerlink" title="查看所有属性"></a>查看所有属性</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop</span><br><span class="line"> KEY                                                  VALUE</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> java.runtime.name                                    Java(TM) SE Runtime Environment</span><br><span class="line"> sun.boot.library.path                                /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib</span><br><span class="line"> java.vm.version                                      25.51-b03</span><br><span class="line"> user.country.format                                  CN</span><br><span class="line"> gopherProxySet                                       false</span><br><span class="line"> java.vm.vendor                                       Oracle Corporation</span><br><span class="line"> java.vendor.url                                      http://java.oracle.com/</span><br><span class="line"> path.separator                                       :</span><br><span class="line"> java.vm.name                                         Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line"> file.encoding.pkg                                    sun.io</span><br><span class="line"> user.country                                         US</span><br><span class="line"> sun.java.launcher                                    SUN_STANDARD</span><br><span class="line"> sun.os.patch.level                                   unknown</span><br><span class="line"> java.vm.specification.name                           Java Virtual Machine Specification</span><br><span class="line"> user.dir                                             /private/var/tmp</span><br><span class="line"> java.runtime.version                                 1.8.0_51-b16</span><br><span class="line"> java.awt.graphicsenv                                 sun.awt.CGraphicsEnvironment</span><br><span class="line"> java.endorsed.dirs                                   /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/endors</span><br><span class="line">                                                      ed</span><br><span class="line"> os.arch                                              x86_64</span><br><span class="line"> java.io.tmpdir                                       /var/folders/2c/tbxwzs4s4sbcvh7frbcc7n000000gn/T/</span><br><span class="line"> line.separator</span><br><span class="line"></span><br><span class="line"> java.vm.specification.vendor                         Oracle Corporation</span><br><span class="line"> os.name                                              Mac OS X</span><br><span class="line"> sun.jnu.encoding                                     UTF-8</span><br><span class="line"> java.library.path                                    /Users/wangtao/Library/Java/Extensions:/Library/Java/Extensions:/Network/Libra</span><br><span class="line">                                                      ry/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.</span><br><span class="line"> sun.nio.ch.bugLevel</span><br><span class="line"> java.specification.name                              Java Platform API Specification</span><br><span class="line"> java.class.version                                   52.0</span><br><span class="line"> sun.management.compiler                              HotSpot 64-Bit Tiered Compilers</span><br><span class="line"> os.version                                           10.12.6</span><br><span class="line"> user.home                                            /Users/wangtao</span><br><span class="line"> user.timezone                                        Asia/Shanghai</span><br><span class="line"> java.awt.printerjob                                  sun.lwawt.macosx.CPrinterJob</span><br><span class="line"> file.encoding                                        UTF-8</span><br><span class="line"> java.specification.version                           1.8</span><br><span class="line"> user.name                                            wangtao</span><br><span class="line"> java.class.path                                      .</span><br><span class="line"> java.vm.specification.version                        1.8</span><br><span class="line"> sun.arch.data.model                                  64</span><br><span class="line"> java.home                                            /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre</span><br><span class="line"> sun.java.command                                     Test</span><br><span class="line"> java.specification.vendor                            Oracle Corporation</span><br><span class="line"> user.language                                        en</span><br><span class="line"> awt.toolkit                                          sun.lwawt.macosx.LWCToolkit</span><br><span class="line"> java.vm.info                                         mixed mode</span><br><span class="line"> java.version                                         1.8.0_51</span><br><span class="line"> java.ext.dirs                                        /Users/wangtao/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/jdk1.</span><br><span class="line">                                                      8.0_51.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library</span><br><span class="line">                                                      /Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java</span><br><span class="line"> sun.boot.class.path                                  /Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/lib/resour</span><br><span class="line">                                                      ces.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/li</span><br><span class="line">                                                      b/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/jre/l</span><br><span class="line">                                                      ib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/H</span><br><span class="line">                                                      ome/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Content</span><br><span class="line">                                                      s/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Conte</span><br><span class="line">                                                      nts/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jd</span><br><span class="line">                                                      k/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_51.</span><br><span class="line">                                                      jdk/Contents/Home/jre/classes</span><br><span class="line"> java.vendor                                          Oracle Corporation</span><br><span class="line"> file.separator                                       /</span><br><span class="line"> java.vendor.url.bug                                  http://bugreport.sun.com/bugreport/</span><br><span class="line"> sun.cpu.endian                                       little</span><br><span class="line"> sun.io.unicode.encoding                              UnicodeBig</span><br><span class="line"> sun.cpu.isalist</span><br></pre></td></tr></table></figure>

<h3 id="查看单个属性"><a href="#查看单个属性" class="headerlink" title="查看单个属性"></a>查看单个属性</h3><blockquote>
<p>提示</p>
<p>支持通过<code>TAB</code>键自动补全</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop java.version</span><br><span class="line">java.version=1.8.0_51</span><br></pre></td></tr></table></figure>

<h3 id="修改单个属性"><a href="#修改单个属性" class="headerlink" title="修改单个属性"></a>修改单个属性</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ sysprop user.country</span><br><span class="line">user.country=US</span><br><span class="line">$ sysprop user.country CN</span><br><span class="line">Successfully changed the system property.</span><br><span class="line">user.country=CN</span><br></pre></td></tr></table></figure>

<h1 id="tee-命令"><a href="#tee-命令" class="headerlink" title="tee 命令"></a>tee 命令</h1><p>类似传统的 <a href="https://arthas.aliyun.com/doc/tee.html">tee 命令</a> 用于读取标准输入的数据，并将其内容输出成文件。</p>
<p>tee 指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p>
<p>使用 <code>tee -h</code> 查看帮助信息</p>
<h2 id="命令示范"><a href="#命令示范" class="headerlink" title="命令示范"></a>命令示范</h2><h3 id="将-sysprop-命令执行结果另外存储在-tmp-logfile-中"><a href="#将-sysprop-命令执行结果另外存储在-tmp-logfile-中" class="headerlink" title="将 sysprop 命令执行结果另外存储在/tmp/logfile 中"></a>将 sysprop 命令执行结果另外存储在<code>/tmp/logfile</code> 中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysprop | tee &#x2F;tmp&#x2F;logfile</span><br></pre></td></tr></table></figure>

<p>查看<code>/tmp/logfile</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;logfile</span><br></pre></td></tr></table></figure>

<h3 id="将-sysprop-命令执行结果匹配java-后另外追加在-tmp-logfile-中"><a href="#将-sysprop-命令执行结果匹配java-后另外追加在-tmp-logfile-中" class="headerlink" title="将 sysprop 命令执行结果匹配java 后另外追加在/tmp/logfile 中"></a>将 sysprop 命令执行结果匹配<code>java</code> 后另外追加在<code>/tmp/logfile</code> 中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysprop | grep java | tee -a &#x2F;path&#x2F;to&#x2F;logfile</span><br></pre></td></tr></table></figure>

<p>查看<code>/tmp/logfile</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;tmp&#x2F;logfile</span><br></pre></td></tr></table></figure>

<h1 id="thread-命令"><a href="#thread-命令" class="headerlink" title="thread 命令"></a>thread 命令</h1><p>查看当前线程信息，查看线程的堆栈</p>
<h2 id="参数说明-13"><a href="#参数说明-13" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>线程 id</td>
</tr>
<tr>
<td>[n:]</td>
<td>指定最忙的前 N 个线程并打印堆栈</td>
</tr>
<tr>
<td>[b]</td>
<td>找出当前阻塞其他线程的线程</td>
</tr>
<tr>
<td>[i ]</td>
<td>指定 cpu 占比统计的采样间隔，单位为毫秒</td>
</tr>
<tr>
<td>[–all]</td>
<td>显示所有匹配的线程</td>
</tr>
</tbody></table>
<h2 id="Thread-用法"><a href="#Thread-用法" class="headerlink" title="Thread 用法"></a>Thread 用法</h2><h3 id="支持一键展示当前最忙的前-N-个线程并打印堆栈："><a href="#支持一键展示当前最忙的前-N-个线程并打印堆栈：" class="headerlink" title="支持一键展示当前最忙的前 N 个线程并打印堆栈："></a>支持一键展示当前最忙的前 N 个线程并打印堆栈：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -n 3</span><br></pre></td></tr></table></figure>

<ul>
<li>没有线程 ID，包含<code>[Internal]</code> 表示为 JVM 内部线程，参考<code>dashboard</code> 命令的介绍。</li>
<li><code>cpuUsage</code> 为采样间隔时间内线程的 CPU 使用率，与<code>dashboard</code> 命令的数据一致。</li>
<li><code>deltaTime</code> 为采样间隔时间内线程的增量 CPU 时间，小于 1ms 时被取整显示为 0ms。</li>
<li><code>time</code> 线程运行总 CPU 时间。</li>
</ul>
<p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。</p>
<h3 id="当没有参数时，显示第一页线程信息"><a href="#当没有参数时，显示第一页线程信息" class="headerlink" title="当没有参数时，显示第一页线程信息"></a>当没有参数时，显示第一页线程信息</h3><p>默认按照 CPU 增量时间降序排列，只显示第一页数据，避免滚屏。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread</span><br></pre></td></tr></table></figure>

<h3 id="thread-–all-显示所有匹配的线程"><a href="#thread-–all-显示所有匹配的线程" class="headerlink" title="thread –all, 显示所有匹配的线程"></a>thread –all, 显示所有匹配的线程</h3><p>显示所有匹配线程信息，有时需要获取全部 JVM 的线程数据进行分析。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread --all</span><br></pre></td></tr></table></figure>

<h3 id="thread-id，显示指定线程的运行堆栈"><a href="#thread-id，显示指定线程的运行堆栈" class="headerlink" title="thread id，显示指定线程的运行堆栈"></a>thread id，显示指定线程的运行堆栈</h3><p>查看线程 ID 16 的栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread 16</span><br></pre></td></tr></table></figure>

<h3 id="thread-b-找出当前阻塞其他线程的线程"><a href="#thread-b-找出当前阻塞其他线程的线程" class="headerlink" title="thread -b, 找出当前阻塞其他线程的线程"></a>thread -b, 找出当前阻塞其他线程的线程</h3><p>有时候我们发现应用卡住了，通常是由于某个线程拿住了某个锁，并且其他线程都在等待这把锁造成的。为了排查这类问题，arthas 提供了<code>thread -b</code> ，一键找出那个罪魁祸首。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -b</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>，目前只支持找出 synchronized 关键字阻塞住的线程，如果是<code>java.util.concurrent.Lock</code> ，目前还不支持。</p>
<h3 id="thread-i-指定采样时间间隔"><a href="#thread-i-指定采样时间间隔" class="headerlink" title="thread -i, 指定采样时间间隔"></a>thread -i, 指定采样时间间隔</h3><ul>
<li><code>thread -i 1000</code> : 统计最近 1000ms 内的线程 CPU 时间。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -i 1000</span><br></pre></td></tr></table></figure>

<ul>
<li><code>thread -n 3 -i 1000</code> : 列出 1000ms 内最忙的 3 个线程栈</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread -n 3 -i 1000</span><br></pre></td></tr></table></figure>

<h3 id="thread-–state，查看指定状态的线程"><a href="#thread-–state，查看指定状态的线程" class="headerlink" title="thread –state，查看指定状态的线程"></a>thread –state，查看指定状态的线程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread --state WAITING</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="trace-命令"><a href="#trace-命令" class="headerlink" title="trace 命令"></a>trace 命令</h1><div class="note info no-icon"><p>提示</p>
<p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p>
</div>

<p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p>
<h2 id="参数说明-14"><a href="#参数说明-14" class="headerlink" title="参数说明"></a>参数说明</h2><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>condition-express</em></td>
<td align="left">条件表达式</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[n:]</code></td>
<td align="left">命令执行次数</td>
</tr>
<tr>
<td align="right"><code>#cost</code></td>
<td align="left">方法执行耗时</td>
</tr>
<tr>
<td align="right"><code>[m &lt;arg&gt;]</code></td>
<td align="left">指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td>
</tr>
</tbody></table>
<p>这里重点要说明的是<code>条件表达式</code>，<code>条件表达式</code>的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;params[0]&lt;0&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>
<p>请参考<a href="https://arthas.aliyun.com/doc/advice-class.html">表达式核心变量</a>中关于该节点的描述。</p>
<ul>
<li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71在新窗口打开</a></li>
<li>OGNL 表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html在新窗口打开</a></li>
</ul>
<p>很多时候我们只想看到某个方法的 rt 大于某个时间之后的 trace 结果，现在 Arthas 可以按照方法执行的耗时来进行过滤了，例如<code>trace *StringUtils isBlank &#39;#cost&gt;100&#39;</code>表示当执行时间超过 100ms 的时候，才会输出 trace 的结果。</p>
<div class="note info no-icon"><p>提示</p>
<p>watch/stack/trace 这个三个命令都支持<code>#cost</code></p>
</div>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><p><code>trace</code> 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。</p>
<p>参考：<a href="https://github.com/alibaba/arthas/issues/597">Trace 命令的实现原理在新窗口打开</a></p>
</li>
<li><p>3.3.0 版本后，可以使用动态 Trace 功能，不断增加新的匹配类，参考下面的示例。</p>
</li>
<li><p>目前不支持 <code>trace java.lang.Thread getName</code>，参考 issue: <a href="https://github.com/alibaba/arthas/issues/1610">#1610在新窗口打开</a> ，考虑到不是非常必要场景，且修复有一定难度，因此当前暂不修复</p>
</li>
</ul>
<h2 id="使用参考-20"><a href="#使用参考-20" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="trace-函数"><a href="#trace-函数" class="headerlink" title="trace 函数"></a>trace 函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 28 ms.</span><br><span class="line">`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[0.617465ms] demo.MathGame:run()</span><br><span class="line">        `---[0.078946ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line"></span><br><span class="line">`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[1.276874ms] demo.MathGame:run()</span><br><span class="line">        `---[0.03752ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>结果里的 <code>#24</code>，表示在 run 函数里，在源文件的第<code>24</code>行调用了<code>primeFactors()</code>函数。</p>
</div>

<h3 id="指定-Class-匹配的最大数量"><a href="#指定-Class-匹配的最大数量" class="headerlink" title="指定 Class 匹配的最大数量"></a>指定 Class 匹配的最大数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run -m 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 412 ms, listenerId: 4</span><br><span class="line">`---ts=2022-12-25 21:00:00;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@b4aac2</span><br><span class="line">    `---[0.762093ms] demo.MathGame:run()</span><br><span class="line">        `---[30.21% 0.230241ms] demo.MathGame:primeFactors() <span class="comment">#46 [throws Exception]</span></span><br><span class="line"></span><br><span class="line">`---ts=2022-12-25 21:00:10;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@b4aac2</span><br><span class="line">    `---[0.315298ms] demo.MathGame:run()</span><br><span class="line">        `---[13.95% 0.043995ms] demo.MathGame:primeFactors() <span class="comment">#46 [throws Exception]</span></span><br></pre></td></tr></table></figure>

<h3 id="trace-次数限制"><a href="#trace-次数限制" class="headerlink" title="trace 次数限制"></a>trace 次数限制</h3><p>如果方法调用的次数很多，那么可以用<code>-n</code>参数指定捕捉结果的次数。比如下面的例子里，捕捉到一次调用就退出命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run -n 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 20 ms.</span><br><span class="line">`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[0.549379ms] demo.MathGame:run()</span><br><span class="line">        +---[0.059839ms] demo.MathGame:primeFactors() <span class="comment">#24</span></span><br><span class="line">        `---[0.232887ms] demo.MathGame:<span class="built_in">print</span>() <span class="comment">#25</span></span><br><span class="line"></span><br><span class="line">Command execution <span class="built_in">times</span> exceed <span class="built_in">limit</span>: 1, so <span class="built_in">command</span> will <span class="built_in">exit</span>. You can <span class="built_in">set</span> it with -n option.</span><br></pre></td></tr></table></figure>

<h3 id="包含-jdk-的函数"><a href="#包含-jdk-的函数" class="headerlink" title="包含 jdk 的函数"></a>包含 jdk 的函数</h3><ul>
<li><code>--skipJDKMethod &lt;value&gt; </code>skip jdk method trace, default value true.</li>
</ul>
<p>默认情况下，trace 不会包含 jdk 里的函数调用，如果希望 trace jdk 里的函数，需要显式设置<code>--skipJDKMethod false</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace --skipJDKMethod <span class="literal">false</span> demo.MathGame run</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 60 ms.</span><br><span class="line">`---ts=2019-12-04 00:44:41;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[1.357742ms] demo.MathGame:run()</span><br><span class="line">        +---[0.028624ms] java.util.Random:nextInt() <span class="comment">#23</span></span><br><span class="line">        +---[0.045534ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line">        +---[0.005372ms] java.lang.StringBuilder:&lt;init&gt;() <span class="comment">#28</span></span><br><span class="line">        +---[0.012257ms] java.lang.Integer:valueOf() <span class="comment">#28</span></span><br><span class="line">        +---[0.234537ms] java.lang.String:format() <span class="comment">#28</span></span><br><span class="line">        +---[min=0.004539ms,max=0.005778ms,total=0.010317ms,count=2] java.lang.StringBuilder:append() <span class="comment">#28</span></span><br><span class="line">        +---[0.013777ms] java.lang.Exception:getMessage() <span class="comment">#28</span></span><br><span class="line">        +---[0.004935ms] java.lang.StringBuilder:toString() <span class="comment">#28</span></span><br><span class="line">        `---[0.06941ms] java.io.PrintStream:println() <span class="comment">#28</span></span><br><span class="line"></span><br><span class="line">`---ts=2019-12-04 00:44:42;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[3.030432ms] demo.MathGame:run()</span><br><span class="line">        +---[0.010473ms] java.util.Random:nextInt() <span class="comment">#23</span></span><br><span class="line">        +---[0.023715ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line">        +---[0.005198ms] java.lang.StringBuilder:&lt;init&gt;() <span class="comment">#28</span></span><br><span class="line">        +---[0.006405ms] java.lang.Integer:valueOf() <span class="comment">#28</span></span><br><span class="line">        +---[0.178583ms] java.lang.String:format() <span class="comment">#28</span></span><br><span class="line">        +---[min=0.011636ms,max=0.838077ms,total=0.849713ms,count=2] java.lang.StringBuilder:append() <span class="comment">#28</span></span><br><span class="line">        +---[0.008747ms] java.lang.Exception:getMessage() <span class="comment">#28</span></span><br><span class="line">        +---[0.019768ms] java.lang.StringBuilder:toString() <span class="comment">#28</span></span><br><span class="line">        `---[0.076457ms] java.io.PrintStream:println() <span class="comment">#28</span></span><br></pre></td></tr></table></figure>

<h3 id="根据调用耗时过滤"><a href="#根据调用耗时过滤" class="headerlink" title="根据调用耗时过滤"></a>根据调用耗时过滤</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run <span class="string">&#x27;#cost &gt; 10&#x27;</span></span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 41 ms.</span><br><span class="line">`---ts=2018-12-04 01:12:02;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[12.033735ms] demo.MathGame:run()</span><br><span class="line">        +---[0.006783ms] java.util.Random:nextInt()</span><br><span class="line">        +---[11.852594ms] demo.MathGame:primeFactors()</span><br><span class="line">        `---[0.05447ms] demo.MathGame:<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>只会展示耗时大于 10ms 的调用路径，有助于在排查问题的时候，只关注异常情况</p>
</div>

<ul>
<li>是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，<code>trace</code> 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。</li>
<li>[12.033735ms] 的含义，<code>12.033735</code> 的含义是：当前节点在当前步骤的耗时，单位为毫秒</li>
<li>[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，<code>0,0,0ms,11</code> 表示方法调用耗时，<code>min,max,total,count</code>；<code>throws Exception</code> 表明该方法调用中存在异常返回</li>
<li>这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时</li>
</ul>
<h3 id="trace-多个类或者多个函数"><a href="#trace-多个类或者多个函数" class="headerlink" title="trace 多个类或者多个函数"></a>trace 多个类或者多个函数</h3><p>trace 命令只会 trace 匹配到的函数里的子调用，并不会向下 trace 多层。因为 trace 是代价比较贵的，多层 trace 可能会导致最终要 trace 的类和函数非常多。</p>
<p>可以用正则表匹配路径上的多个类和函数，一定程度上达到多层 trace 的效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trace -E com.test.ClassA|org.test.ClassB method1|method2|method3</span><br></pre></td></tr></table></figure>

<h3 id="排除掉指定的类"><a href="#排除掉指定的类" class="headerlink" title="排除掉指定的类"></a>排除掉指定的类</h3><p>使用 <code>--exclude-class-pattern</code> 参数可以排除掉指定的类，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trace javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter</span><br></pre></td></tr></table></figure>

<h2 id="动态-trace"><a href="#动态-trace" class="headerlink" title="动态 trace"></a>动态 trace</h2><div class="note info no-icon"><p>提示</p>
<p>3.3.0 版本后支持。</p>
</div>

<p>打开终端 1，trace 上面 demo 里的<code>run</code>函数，可以看到打印出 <code>listenerId: 1</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@59161]$ trace demo.MathGame run</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 112 ms, listenerId: 1</span><br><span class="line">`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[1.389634ms] demo.MathGame:run()</span><br><span class="line">        `---[0.123934ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line"></span><br><span class="line">`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[3.716391ms] demo.MathGame:run()</span><br><span class="line">        +---[3.182813ms] demo.MathGame:primeFactors() <span class="comment">#24</span></span><br><span class="line">        `---[0.167786ms] demo.MathGame:<span class="built_in">print</span>() <span class="comment">#25</span></span><br></pre></td></tr></table></figure>

<p>现在想要深入子函数<code>primeFactors</code>，可以打开一个新终端 2，使用<code>telnet localhost 3658</code>连接上 arthas，再 trace <code>primeFactors</code>时，指定<code>listenerId</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@59161]$ trace demo.MathGame primeFactors --listenerId 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 34 ms, listenerId: 1</span><br></pre></td></tr></table></figure>

<p>这时终端 2 打印的结果，说明已经增强了一个函数：<code>Affect(class count: 1 , method count: 1)</code>，但不再打印更多的结果。</p>
<p>再查看终端 1，可以发现 trace 的结果增加了一层，打印了<code>primeFactors</code>函数里的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[0.492551ms] demo.MathGame:run()</span><br><span class="line">        `---[0.113929ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line">            `---[0.061462ms] demo.MathGame:primeFactors()</span><br><span class="line">                `---[0.001018ms] throw:java.lang.IllegalArgumentException() <span class="comment">#46</span></span><br><span class="line"></span><br><span class="line">`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">    `---[0.409446ms] demo.MathGame:run()</span><br><span class="line">        +---[0.232606ms] demo.MathGame:primeFactors() <span class="comment">#24</span></span><br><span class="line">        |   `---[0.1294ms] demo.MathGame:primeFactors()</span><br><span class="line">        `---[0.084025ms] demo.MathGame:<span class="built_in">print</span>() <span class="comment">#25</span></span><br></pre></td></tr></table></figure>

<p>通过指定<code>listenerId</code>的方式动态 trace，可以不断深入。另外 <code>watch</code>/<code>tt</code>/<code>monitor</code>等命令也支持类似的功能。</p>
<h2 id="trace-结果时间不准确问题"><a href="#trace-结果时间不准确问题" class="headerlink" title="trace 结果时间不准确问题"></a>trace 结果时间不准确问题</h2><p>比如下面的结果里：<code>0.705196 &gt; (0.152743 + 0.145825)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run -n 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 66 ms, listenerId: 1</span><br><span class="line">`---ts=2021-02-08 11:27:36;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@232204a1</span><br><span class="line">    `---[0.705196ms] demo.MathGame:run()</span><br><span class="line">        +---[0.152743ms] demo.MathGame:primeFactors() <span class="comment">#24</span></span><br><span class="line">        `---[0.145825ms] demo.MathGame:<span class="built_in">print</span>() <span class="comment">#25</span></span><br></pre></td></tr></table></figure>

<p>那么其它的时间消耗在哪些地方？</p>
<ol>
<li><p>没有被 trace 到的函数。比如<code>java.*</code> 下的函数调用默认会忽略掉。通过增加<code>--skipJDKMethod false</code>参数可以打印出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ trace demo.MathGame run --skipJDKMethod <span class="literal">false</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 35 ms, listenerId: 2</span><br><span class="line">`---ts=2021-02-08 11:27:48;thread_name=main;id=1;is_daemon=<span class="literal">false</span>;priority=5;TCCL=sun.misc.Launcher<span class="variable">$AppClassLoader</span>@232204a1</span><br><span class="line">    `---[0.810591ms] demo.MathGame:run()</span><br><span class="line">        +---[0.034568ms] java.util.Random:nextInt() <span class="comment">#23</span></span><br><span class="line">        +---[0.119367ms] demo.MathGame:primeFactors() <span class="comment">#24 [throws Exception]</span></span><br><span class="line">        +---[0.017407ms] java.lang.StringBuilder:&lt;init&gt;() <span class="comment">#28</span></span><br><span class="line">        +---[0.127922ms] java.lang.String:format() <span class="comment">#57</span></span><br><span class="line">        +---[min=0.01419ms,max=0.020221ms,total=0.034411ms,count=2] java.lang.StringBuilder:append() <span class="comment">#57</span></span><br><span class="line">        +---[0.021911ms] java.lang.Exception:getMessage() <span class="comment">#57</span></span><br><span class="line">        +---[0.015643ms] java.lang.StringBuilder:toString() <span class="comment">#57</span></span><br><span class="line">        `---[0.086622ms] java.io.PrintStream:println() <span class="comment">#57</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>非函数调用的指令消耗。比如 <code>i++</code>, <code>getfield</code>等指令。</p>
</li>
<li><p>在代码执行过程中，JVM 可能出现停顿，比如 GC，进入同步块等。</p>
</li>
</ol>
<h3 id="使用-v-参数打印更多信息"><a href="#使用-v-参数打印更多信息" class="headerlink" title="使用 -v 参数打印更多信息"></a>使用 -v 参数打印更多信息</h3><div class="note info no-icon"><p>提示</p>
<p>watch/trace/monitor/stack/tt 命令都支持 <code>-v</code> 参数</p>
</div>

<p>当命令执行之后，没有输出结果。有两种可能：</p>
<ol>
<li>匹配到的函数没有被执行</li>
<li>条件表达式结果是 false</li>
</ol>
<p>但用户区分不出是哪种情况。</p>
<p>使用 <code>-v</code>选项，则会打印<code>Condition express</code>的具体值和执行结果，方便确认。</p>
<hr>
<h1 id="tt-命令"><a href="#tt-命令" class="headerlink" title="tt 命令"></a>tt 命令</h1><div class="note info no-icon"><p>提示</p>
<p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p>
</div>

<p><code>watch</code> 虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测。</p>
<p>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。</p>
<p>于是乎，TimeTunnel 命令就诞生了。</p>
<h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>tt 命令的实现是：把函数的入参/返回值等，保存到一个<code>Map&lt;Integer, TimeFragment&gt;</code>里，默认的大小是 100。</li>
<li>tt 相关功能在使用完之后，需要手动释放内存，否则长时间可能导致OOM。退出 arthas 不会自动清除 tt 的缓存 map。</li>
</ul>
<h2 id="使用参考-21"><a href="#使用参考-21" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="记录调用"><a href="#记录调用" class="headerlink" title="记录调用"></a>记录调用</h3><p>对于一个最基本的使用来说，就是记录下当前方法的每次调用环境现场。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -t demo.MathGame primeFactors</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 66 ms.</span><br><span class="line"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000    2018-12-04 11:15:38  1.096236  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1001    2018-12-04 11:15:39  0.191848  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1002    2018-12-04 11:15:40  0.069523  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1003    2018-12-04 11:15:41  0.186073  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1004    2018-12-04 11:15:42  17.76437  <span class="literal">true</span>    <span class="literal">false</span>    0x4b67cf4d     MathGame                       primeFactors</span><br></pre></td></tr></table></figure>

<h3 id="指定-Class-最大匹配数量-2"><a href="#指定-Class-最大匹配数量-2" class="headerlink" title="指定 Class 最大匹配数量"></a>指定 Class 最大匹配数量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -t -m 1 demo.MathGame primeFactors</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count:1 , method count:1) cost <span class="keyword">in</span> 130 ms, listenerId: 1.</span><br><span class="line"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000    2022-12-25 19:41:45  2.629929  <span class="literal">true</span>    <span class="literal">false</span>    0x3bf400       MathGame                       primeFactors</span><br><span class="line"> 1001    2022-12-25 19:41:55  0.146161  <span class="literal">false</span>   <span class="literal">true</span>     0x3bf400       MathGame                       primeFactors</span><br></pre></td></tr></table></figure>

<ul>
<li><p>命令参数解析</p>
<ul>
<li><p><code>-t</code></p>
<p>tt 命令有很多个主参数，<code>-t</code> 就是其中之一。这个参数的表明希望记录下类 <code>*Test</code> 的 <code>print</code> 方法的每次执行情况。</p>
</li>
<li><p><code>-n 3</code></p>
<p>当你执行一个调用量不高的方法时可能你还能有足够的时间用 <code>CTRL+C</code> 中断 tt 命令记录的过程，但如果遇到调用量非常大的方法，瞬间就能将你的 JVM 内存撑爆。</p>
<p>此时你可以通过 <code>-n</code> 参数指定你需要记录的次数，当达到记录次数时 Arthas 会主动中断 tt 命令的记录过程，避免人工操作无法停止的情况。</p>
</li>
<li><p><code>-m 1</code></p>
<p>通过 <code>-m</code> 参数指定 Class 匹配的最大数量，防止匹配到的 Class 数量太多导致 JVM 挂起，默认值是 50。</p>
</li>
</ul>
</li>
<li><p>表格字段说明</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>表格字段</th>
<th>字段解释</th>
</tr>
</thead>
<tbody><tr>
<td>INDEX</td>
<td>时间片段记录编号，每一个编号代表着一次调用，后续 tt 还有很多命令都是基于此编号指定记录操作，非常重要。</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>方法执行的本机时间，记录了这个时间片段所发生的本机时间</td>
</tr>
<tr>
<td>COST(ms)</td>
<td>方法执行的耗时</td>
</tr>
<tr>
<td>IS-RET</td>
<td>方法是否以正常返回的形式结束</td>
</tr>
<tr>
<td>IS-EXP</td>
<td>方法是否以抛异常的形式结束</td>
</tr>
<tr>
<td>OBJECT</td>
<td>执行对象的<code>hashCode()</code>，注意，曾经有人误认为是对象在 JVM 中的内存地址，但很遗憾他不是。但他能帮助你简单的标记当前执行方法的类实体</td>
</tr>
<tr>
<td>CLASS</td>
<td>执行的类名</td>
</tr>
<tr>
<td>METHOD</td>
<td>执行的方法名</td>
</tr>
</tbody></table>
<ul>
<li><p>条件表达式</p>
<p>不知道大家是否有在使用过程中遇到以下困惑</p>
<ul>
<li>Arthas 似乎很难区分出重载的方法</li>
<li>我只需要观察特定参数，但是 tt 却全部都给我记录了下来</li>
</ul>
<p>条件表达式也是用 <code>OGNL</code> 来编写，核心的判断对象依然是 <code>Advice</code> 对象。除了 <code>tt</code> 命令之外，<code>watch</code>、<code>trace</code>、<code>stack</code> 命令也都支持条件表达式。</p>
</li>
<li><p>解决方法重载</p>
<p><code>tt -t *Test print params.length==1</code></p>
<p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p>
<p><code>tt -t *Test print &#39;params[1] instanceof Integer&#39;</code></p>
</li>
<li><p>解决指定参数</p>
<p><code>tt -t *Test print params[0].mobile==&quot;13989838402&quot;</code></p>
</li>
<li><p>构成条件表达式的 <code>Advice</code> 对象</p>
<p>前边看到了很多条件表达式中，都使用了 <code>params[0]</code>，有关这个变量的介绍，请参考<a href="https://arthas.aliyun.com/doc/advice-class.html">表达式核心变量</a></p>
</li>
</ul>
<h3 id="检索调用记录"><a href="#检索调用记录" class="headerlink" title="检索调用记录"></a>检索调用记录</h3><p>当你用 <code>tt</code> 记录了一大片的时间片段之后，你希望能从中筛选出自己需要的时间片段，这个时候你就需要对现有记录进行检索。</p>
<p>假设我们有这些记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -l</span><br><span class="line"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000    2018-12-04 11:15:38  1.096236  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1001    2018-12-04 11:15:39  0.191848  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1002    2018-12-04 11:15:40  0.069523  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1003    2018-12-04 11:15:41  0.186073  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1004    2018-12-04 11:15:42  17.76437  <span class="literal">true</span>    <span class="literal">false</span>    0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line">                              9</span><br><span class="line"> 1005    2018-12-04 11:15:43  0.4776    <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line">Affect(row-cnt:6) cost <span class="keyword">in</span> 4 ms.</span><br></pre></td></tr></table></figure>

<p>我需要筛选出 <code>primeFactors</code> 方法的调用信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -s <span class="string">&#x27;method.name==&quot;primeFactors&quot;&#x27;</span></span><br><span class="line"> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000    2018-12-04 11:15:38  1.096236  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1001    2018-12-04 11:15:39  0.191848  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1002    2018-12-04 11:15:40  0.069523  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1003    2018-12-04 11:15:41  0.186073  <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line"> 1004    2018-12-04 11:15:42  17.76437  <span class="literal">true</span>    <span class="literal">false</span>    0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line">                              9</span><br><span class="line"> 1005    2018-12-04 11:15:43  0.4776    <span class="literal">false</span>   <span class="literal">true</span>     0x4b67cf4d     MathGame                       primeFactors</span><br><span class="line">Affect(row-cnt:6) cost <span class="keyword">in</span> 607 ms.</span><br></pre></td></tr></table></figure>

<p>你需要一个 <code>-s</code> 参数。同样的，搜索表达式的核心对象依旧是 <code>Advice</code> 对象。</p>
<h3 id="查看调用信息"><a href="#查看调用信息" class="headerlink" title="查看调用信息"></a>查看调用信息</h3><p>对于具体一个时间片的信息而言，你可以通过 <code>-i</code> 参数后边跟着对应的 <code>INDEX</code> 编号查看到他的详细信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -i 1003</span><br><span class="line"> INDEX            1003</span><br><span class="line"> GMT-CREATE       2018-12-04 11:15:41</span><br><span class="line"> COST(ms)         0.186073</span><br><span class="line"> OBJECT           0x4b67cf4d</span><br><span class="line"> CLASS            demo.MathGame</span><br><span class="line"> METHOD           primeFactors</span><br><span class="line"> IS-RETURN        <span class="literal">false</span></span><br><span class="line"> IS-EXCEPTION     <span class="literal">true</span></span><br><span class="line"> PARAMETERS[0]    @Integer[-564322413]</span><br><span class="line"> THROW-EXCEPTION  java.lang.IllegalArgumentException: number is: -564322413, need &gt;= 2</span><br><span class="line">                      at demo.MathGame.primeFactors(MathGame.java:46)</span><br><span class="line">                      at demo.MathGame.run(MathGame.java:24)</span><br><span class="line">                      at demo.MathGame.main(MathGame.java:16)</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 11 ms.</span><br></pre></td></tr></table></figure>

<h3 id="重做一次调用"><a href="#重做一次调用" class="headerlink" title="重做一次调用"></a>重做一次调用</h3><p>当你稍稍做了一些调整之后，你可能需要前端系统重新触发一次你的调用，此时得求爷爷告奶奶的需要前端配合联调的同学再次发起一次调用。而有些场景下，这个调用不是这么好触发的。</p>
<p><code>tt</code> 命令由于保存了当时调用的所有现场信息，所以我们可以自己主动对一个 <code>INDEX</code> 编号的时间片自主发起一次调用，从而解放你的沟通成本。此时你需要 <code>-p</code> 参数。通过 <code>--replay-times</code> 指定 调用次数，通过 <code>--replay-interval</code> 指定多次调用间隔(单位 ms, 默认 1000ms)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tt -i 1004 -p</span><br><span class="line"> RE-INDEX       1004</span><br><span class="line"> GMT-REPLAY     2018-12-04 11:26:00</span><br><span class="line"> OBJECT         0x4b67cf4d</span><br><span class="line"> CLASS          demo.MathGame</span><br><span class="line"> METHOD         primeFactors</span><br><span class="line"> PARAMETERS[0]  @Integer[946738738]</span><br><span class="line"> IS-RETURN      <span class="literal">true</span></span><br><span class="line"> IS-EXCEPTION   <span class="literal">false</span></span><br><span class="line"> COST(ms)         0.186073</span><br><span class="line"> RETURN-OBJ     @ArrayList[</span><br><span class="line">                    @Integer[2],</span><br><span class="line">                    @Integer[11],</span><br><span class="line">                    @Integer[17],</span><br><span class="line">                    @Integer[2531387],</span><br><span class="line">                ]</span><br><span class="line">Time fragment[1004] successfully replayed.</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 14 ms.</span><br></pre></td></tr></table></figure>

<p>你会发现结果虽然一样，但调用的路径发生了变化，由原来的程序发起变成了 Arthas 自己的内部线程发起的调用了。</p>
<h3 id="观察表达式"><a href="#观察表达式" class="headerlink" title="观察表达式"></a>观察表达式</h3><p><code>-w, --watch-express</code> 观察时空隧道使用<code>ognl</code> 表达式</p>
<ul>
<li>使用<a href="https://arthas.aliyun.com/doc/advice-class.html">表达式核心变量</a>中所有变量作为已知条件编写表达式。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10718]$ tt -t demo.MathGame run -n 5</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 56 ms, listenerId: 1</span><br><span class="line"> INDEX      TIMESTAMP                   COST(ms)     IS-RET     IS-EXP      OBJECT              CLASS                                     METHOD</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000       2021-01-08 21:54:17         0.901091     <span class="literal">true</span>       <span class="literal">false</span>       0x7699a589          MathGame                                  run</span><br><span class="line">[arthas@10718]$ tt -w <span class="string">&#x27;target.illegalArgumentCount&#x27;</span>  -x 1 -i 1000</span><br><span class="line">@Integer[60]</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 7 ms.</span><br></pre></td></tr></table></figure>

<ul>
<li>获取类的静态字段、调用类的静态方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@10718]$ tt -t demo.MathGame run -n 5</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 56 ms, listenerId: 1</span><br><span class="line"> INDEX      TIMESTAMP                   COST(ms)     IS-RET     IS-EXP      OBJECT              CLASS                                     METHOD</span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1000       2021-01-08 21:54:17         0.901091     <span class="literal">true</span>       <span class="literal">false</span>       0x7699a589          MathGame                                  run</span><br><span class="line">[arthas@10718]$ tt -w <span class="string">&#x27;@demo.MathGame@random.nextInt(100)&#x27;</span>  -x 1 -i 1000</span><br><span class="line">@Integer[46]</span><br></pre></td></tr></table></figure>

<p>注意这里使用 <code>com.taobao.arthas.core.advisor.Advice#getLoader</code>加载,使用精确<code>classloader</code> <a href="https://arthas.aliyun.com/doc/ognl.html">ognl</a>更好。</p>
<p>高级用法 <a href="https://github.com/alibaba/arthas/issues/482">获取 spring context 调用 bean 方法在新窗口打开</a></p>
<ul>
<li><p>需要强调的点</p>
<ol>
<li><p><strong>ThreadLocal 信息丢失</strong></p>
<p>很多框架偷偷的将一些环境变量信息塞到了发起调用线程的 ThreadLocal 中，由于调用线程发生了变化，这些 ThreadLocal 线程信息无法通过 Arthas 保存，所以这些信息将会丢失。</p>
<p>一些常见的 CASE 比如：鹰眼的 TraceId 等。</p>
</li>
<li><p><strong>引用的对象</strong></p>
<p>需要强调的是，<code>tt</code> 命令是将当前环境的对象引用保存起来，但仅仅也只能保存一个引用而已。如果方法内部对入参进行了变更，或者返回的对象经过了后续的处理，那么在 <code>tt</code> 查看的时候将无法看到当时最准确的值。这也是为什么 <code>watch</code> 命令存在的意义。</p>
</li>
</ol>
</li>
</ul>
<h3 id="通过索引删除指定的-tt-记录"><a href="#通过索引删除指定的-tt-记录" class="headerlink" title="通过索引删除指定的 tt 记录"></a>通过索引删除指定的 tt 记录</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tt -d 1001</span><br></pre></td></tr></table></figure>

<h3 id="清除所有的-tt-记录"><a href="#清除所有的-tt-记录" class="headerlink" title="清除所有的 tt 记录"></a>清除所有的 tt 记录</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tt --delete-all</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="version-命令"><a href="#version-命令" class="headerlink" title="version 命令"></a>version 命令</h1><p>输出当前目标 Java 进程所加载的 Arthas 版本号</p>
<h2 id="使用参考-22"><a href="#使用参考-22" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ version</span><br><span class="line"> 3.5.1</span><br></pre></td></tr></table></figure>

<h1 id="Vmoption-命令"><a href="#Vmoption-命令" class="headerlink" title="Vmoption 命令"></a>Vmoption 命令</h1><h2 id="使用参考-23"><a href="#使用参考-23" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="查看所有的-option"><a href="#查看所有的-option" class="headerlink" title="查看所有的 option"></a>查看所有的 option</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@56963]$ vmoption</span><br><span class="line"> KEY                    VALUE                   ORIGIN                 WRITEABLE</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line"> HeapDumpBeforeFullGC   <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> HeapDumpAfterFullGC    <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> HeapDumpOnOutOfMemory  <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> Error</span><br><span class="line"> HeapDumpPath                                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> CMSAbortablePrecleanW  100                     DEFAULT                <span class="literal">true</span></span><br><span class="line"> aitMillis</span><br><span class="line"> CMSWaitDuration        2000                    DEFAULT                <span class="literal">true</span></span><br><span class="line"> CMSTriggerInterval     -1                      DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintGC                <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintGCDetails         <span class="literal">true</span>                    MANAGEMENT             <span class="literal">true</span></span><br><span class="line"> PrintGCDateStamps      <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintGCTimeStamps      <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintGCID              <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintClassHistogramBe  <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> foreFullGC</span><br><span class="line"> PrintClassHistogramAf  <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> terFullGC</span><br><span class="line"> PrintClassHistogram    <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br><span class="line"> MinHeapFreeRatio       0                       DEFAULT                <span class="literal">true</span></span><br><span class="line"> MaxHeapFreeRatio       100                     DEFAULT                <span class="literal">true</span></span><br><span class="line"> PrintConcurrentLocks   <span class="literal">false</span>                   DEFAULT                <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="查看指定的-option"><a href="#查看指定的-option" class="headerlink" title="查看指定的 option"></a>查看指定的 option</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vmoption PrintGC</span><br><span class="line"> KEY                 VALUE                ORIGIN              WRITEABLE</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"> PrintGC             <span class="literal">false</span>                MANAGEMENT          <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="更新指定的-option"><a href="#更新指定的-option" class="headerlink" title="更新指定的 option"></a>更新指定的 option</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vmoption PrintGC <span class="literal">true</span></span><br><span class="line">Successfully updated the vm option.</span><br><span class="line"> NAME     BEFORE-VALUE  AFTER-VALUE</span><br><span class="line">------------------------------------</span><br><span class="line"> PrintGC  <span class="literal">false</span>         <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>再使用<code>vmtool</code> 命令执行强制 GC，则可以在<code>Tab 1</code> 看到打印出 GC 日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action forceGc</span><br></pre></td></tr></table></figure>

<h3 id="配置打印-GC-详情"><a href="#配置打印-GC-详情" class="headerlink" title="配置打印 GC 详情"></a>配置打印 GC 详情</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmoption PrintGCDetails true</span><br></pre></td></tr></table></figure>

<p>再使用<code>vmtool</code> 命令执行强制 GC，则可以在<code>Tab 1</code> 看到打印出 GC 详情：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action forceGc</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="vmtool-命令"><a href="#vmtool-命令" class="headerlink" title="vmtool 命令"></a>vmtool 命令</h1><div class="note info no-icon"><p>提示</p>
<p>@since 3.5.1</p>
</div>

<p><code>vmtool</code> 利用<code>JVMTI</code>接口，实现查询内存对象，强制 GC 等功能。</p>
<h2 id="查找-jvm-里的字符串对象"><a href="#查找-jvm-里的字符串对象" class="headerlink" title="查找 jvm 里的字符串对象"></a>查找 jvm 里的字符串对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className java.lang.String</span><br></pre></td></tr></table></figure>

<h2 id="limit-参数"><a href="#limit-参数" class="headerlink" title="limit 参数"></a>limit 参数</h2><blockquote>
<p>通过 <code>--limit</code> 参数，可以限制返回值数量，避免获取超大数据时对 JVM 造成压力。默认值是 10。</p>
</blockquote>
<p>所以上面的命令实际上等值于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className java.lang.String --limit 10</span><br></pre></td></tr></table></figure>

<p>如果设置<code>--limit</code> 为负数，则遍历所有对象。</p>
<p>下面使用<code>vmtool</code> 命令查找 spring 里的对象。</p>
<h2 id="查找-spring-context"><a href="#查找-spring-context" class="headerlink" title="查找 spring context"></a>查找 spring context</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className org.springframework.context.ApplicationContext</span><br></pre></td></tr></table></figure>

<h2 id="指定返回结果展开层数"><a href="#指定返回结果展开层数" class="headerlink" title="指定返回结果展开层数"></a>指定返回结果展开层数</h2><blockquote>
<p><code>getInstances</code> action 返回结果绑定到<code>instances</code> 变量上，它是数组。</p>
</blockquote>
<blockquote>
<p>通过 <code>-x</code> /<code>--expand</code> 参数可以指定结果的展开层次，默认值是 1。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className org.springframework.context.ApplicationContext -x 2</span><br></pre></td></tr></table></figure>

<h2 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h2><blockquote>
<p><code>getInstances</code> action 返回结果绑定到<code>instances</code> 变量上，它是数组。可以通过<code>--express</code> 参数执行指定的表达式。</p>
</blockquote>
<p>查找所有的 spring beans 名字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className org.springframework.context.ApplicationContext --express &#39;instances[0].getBeanDefinitionNames()&#39;</span><br></pre></td></tr></table></figure>

<p>调用<code>userController.findUserById(1)</code> 函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className org.springframework.context.ApplicationContext --express &#39;instances[0].getBean(&quot;userController&quot;).findUserById(1)&#39;</span><br></pre></td></tr></table></figure>

<h2 id="直接获取-UserController-并调用方法"><a href="#直接获取-UserController-并调用方法" class="headerlink" title="直接获取 UserController 并调用方法"></a>直接获取 UserController 并调用方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --className com.example.demo.arthas.user.UserController --express &#39;instances[0].findUserById(1)&#39;</span><br></pre></td></tr></table></figure>

<h2 id="指定-classloader"><a href="#指定-classloader" class="headerlink" title="指定 classloader"></a>指定 classloader</h2><p>可以通过<code>sc</code> 命令查找到加载 class 的 classloader。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc -d org.springframework.context.ApplicationContext</span><br></pre></td></tr></table></figure>

<p>通过上面命令得到 <code>org.springframework.boot.loader.LaunchedURLClassLoader</code> hashcode 之后用<code>-c</code> / <code>--classloader</code> 参数指定，这里使用 <code>--classLoaderClass </code>来指定 classloader</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action getInstances --classLoaderClass org.springframework.boot.loader.LaunchedURLClassLoader --className org.springframework.context.ApplicationContext</span><br></pre></td></tr></table></figure>

<h2 id="强制-GC"><a href="#强制-GC" class="headerlink" title="强制 GC"></a>强制 GC</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vmtool --action forceGc</span><br></pre></td></tr></table></figure>

<h2 id="interrupt-指定线程"><a href="#interrupt-指定线程" class="headerlink" title="interrupt 指定线程"></a>interrupt 指定线程</h2><p>thread id 通过<code>-t</code>参数指定，可以使用 <code>thread</code>命令获取。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vmtool --action interruptThread -t 1</span><br></pre></td></tr></table></figure>

<h1 id="watch-命令"><a href="#watch-命令" class="headerlink" title="watch 命令"></a>watch 命令</h1><blockquote>
<p>方法执行数据观测</p>
</blockquote>
<p>让你能方便的观察到指定方法的调用情况。能观察到的范围为：<code>返回值</code> 、<code>抛出异常</code> 、<code>入参</code> ，通过编写 OGNL 表达式进行对应变量的查看。</p>
<h2 id="参数说明-15"><a href="#参数说明-15" class="headerlink" title="参数说明"></a>参数说明</h2><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td><em>class-pattern</em></td>
<td>类名表达式匹配</td>
</tr>
<tr>
<td><em>method-pattern</em></td>
<td>方法名表达式匹配</td>
</tr>
<tr>
<td><em>express</em></td>
<td>观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code></td>
</tr>
<tr>
<td><em>condition-express</em></td>
<td>条件表达式</td>
</tr>
<tr>
<td>[b]</td>
<td>在<strong>方法调用之前</strong>观察</td>
</tr>
<tr>
<td>[e]</td>
<td>在<strong>方法异常之后</strong>观察</td>
</tr>
<tr>
<td>[s]</td>
<td>在<strong>方法返回之后</strong>观察</td>
</tr>
<tr>
<td>[f]</td>
<td>在<strong>方法结束之后</strong>(正常返回和异常返回) 观察</td>
</tr>
<tr>
<td>[E]</td>
<td>开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td>[x:]</td>
<td>指定输出结果的属性遍历深度，默认为 1</td>
</tr>
</tbody></table>
<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code> ，只要是一个合法的 ognl 表达式，都能被正常支持。</p>
<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。请参考<a href="https://killercoda.com/arthas/course/arthas-tutorials-cn/advice-class.md">表达式核心变量</a>中关于该节点的描述。</p>
<ul>
<li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71</a></li>
<li>OGNL 表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>
</ul>
<p><strong>特别说明</strong>：</p>
<ul>
<li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 方法调用前，<code>-e</code> 方法异常后，<code>-s</code> 方法返回后，<code>-f</code> 方法结束后</li>
<li>4 个观察事件点 <code>-b</code> 、<code>-e</code> 、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li>
<li>这里要注意<code>方法入参</code> 和<code>方法出参</code> 的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表方法入参外，其余事件都代表方法出参</li>
<li>当使用 <code>-b</code> 时，由于观察事件点是在方法调用前，此时返回值或异常均不存在</li>
</ul>
<h2 id="使用参考-24"><a href="#使用参考-24" class="headerlink" title="使用参考"></a>使用参考</h2><h3 id="观察方法出参、this-对象和返回值"><a href="#观察方法出参、this-对象和返回值" class="headerlink" title="观察方法出参、this 对象和返回值"></a>观察方法出参、this 对象和返回值</h3><blockquote>
<p>观察表达式，默认值是<code>&#123;params, target, returnObj&#125;</code> 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors -x 2</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li>从运行结果里，说明函数被执行了两次，第一次结果是<code>location=AtExceptionExit</code> ，说明函数抛出异常了，因此<code>returnObj</code> 是 null</li>
<li>在第二次结果里是<code>location=AtExit</code> ，说明函数正常返回，因此可以看到<code>returnObj</code> 结果是一个 ArrayList</li>
</ul>
<h3 id="观察方法入参"><a href="#观察方法入参" class="headerlink" title="观察方法入参"></a>观察方法入参</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &quot;&#123;params,returnObj&#125;&quot; -x 2 -b</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li>对比前一个例子，返回值为空（事件点为方法执行前，因此获取不到返回值）</li>
</ul>
<h3 id="同时观察方法调用前和方法返回后"><a href="#同时观察方法调用前和方法返回后" class="headerlink" title="同时观察方法调用前和方法返回后"></a>同时观察方法调用前和方法返回后</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &quot;&#123;params,target,returnObj&#125;&quot; -x 2 -b -s -n 2</span><br></pre></td></tr></table></figure>

<ul>
<li>参数里<code>-n 2</code> ，表示只执行两次</li>
<li>这里输出结果中，第一次输出的是方法调用前的观察表达式的结果，第二次输出的是方法返回后的表达式的结果</li>
<li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li>
</ul>
<h3 id="调整-x-的值，观察具体的方法参数值"><a href="#调整-x-的值，观察具体的方法参数值" class="headerlink" title="调整-x 的值，观察具体的方法参数值"></a>调整<code>-x</code> 的值，观察具体的方法参数值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &quot;&#123;params,target&#125;&quot; -x 3</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li><code>-x</code> 表示遍历深度，可以调整来打印具体的参数和结果内容，默认值是 1。</li>
</ul>
<h3 id="条件表达式的例子"><a href="#条件表达式的例子" class="headerlink" title="条件表达式的例子"></a>条件表达式的例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &quot;&#123;params[0],target&#125;&quot; &quot;params[0]&lt;0&quot;</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li>只有满足条件的调用，才会有响应。</li>
<li><code>watch-express</code> 单个值可以不加’{}’，多个值需要加’{a,b,c}’。</li>
<li><code>condition-express</code> 不能加’{}’，可以使用逗号分隔子表达式，取表达式最后一个值来判断。</li>
<li>如果 watch 的方法存在同名的其它重载方法，可以通过下面的办法进行过滤：</li>
<li>根据参数类型进行过滤</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;&#123;params, params[0].class.name&#125;&#39; &#39;params[0].class.name &#x3D;&#x3D; &quot;java.lang.Integer&quot;&#39;</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li>根据参数个数进行过滤</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;&#123;params, params.length&#125;&#39; &#39;params.length&#x3D;&#x3D;1&#39;</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<h3 id="观察异常信息的例子"><a href="#观察异常信息的例子" class="headerlink" title="观察异常信息的例子"></a>观察异常信息的例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &quot;&#123;params[0],throwExp&#125;&quot; -e -x 2</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li><code>-e</code> 表示抛出异常时才触发</li>
<li>express 中，表示异常信息的变量是<code>throwExp</code></li>
</ul>
<p>根据异常类型或者 message 进行过滤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;&#123;params, throwExp&#125;&#39; &#39;#msg&#x3D;throwExp.toString(), #msg.contains(&quot;IllegalArgumentException&quot;)&#39; -e -x 2</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<h3 id="按照耗时进行过滤"><a href="#按照耗时进行过滤" class="headerlink" title="按照耗时进行过滤"></a>按照耗时进行过滤</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;&#123;params, returnObj&#125;&#39; &#39;#cost&gt;200&#39; -x 2</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<ul>
<li><code>#cost&gt;200</code> (单位是<code>ms</code> ) 表示只有当耗时大于 200ms 时才会输出，过滤掉执行时间小于 200ms 的调用</li>
</ul>
<h3 id="观察当前对象中的属性"><a href="#观察当前对象中的属性" class="headerlink" title="观察当前对象中的属性"></a>观察当前对象中的属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;target&#39;</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<p>如果想查看方法运行前后，当前对象中的属性，可以使用<code>target</code> 关键字，代表当前对象<br>然后使用<code>target.field_name</code> 访问当前对象的某个属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch demo.MathGame primeFactors &#39;target.illegalArgumentCount&#39;</span><br></pre></td></tr></table></figure>

<p>按 <code>Q</code> 或者 <code>Ctrl+c</code> 退出</p>
<h1 id="wc-命令"><a href="#wc-命令" class="headerlink" title="wc 命令"></a>wc 命令</h1><p>按行统计输出结果</p>
<p>通过 <code>jad demo.MathGame main</code> 输出 <code>demo.MathGame</code> 类的 <code>main</code> 方法</p>
<p>计算输出结果行数 <code>jad demo.MathGame main | wc -l</code></p>
<h1 id="memory-命令"><a href="#memory-命令" class="headerlink" title="memory 命令"></a>memory 命令</h1><p>查看 JVM 内存信息。</p>
<h2 id="使用参考-25"><a href="#使用参考-25" class="headerlink" title="使用参考"></a>使用参考</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ memory</span><br><span class="line">Memory                           used      total      max        usage</span><br><span class="line">heap                             32M       256M       4096M      0.79%</span><br><span class="line">g1_eden_space                    11M       68M        -1         16.18%</span><br><span class="line">g1_old_gen                       17M       184M       4096M      0.43%</span><br><span class="line">g1_survivor_space                4M        4M         -1         100.00%</span><br><span class="line">nonheap                          35M       39M        -1         89.55%</span><br><span class="line">codeheap_&#x27;non-nmethods&#x27;          1M        2M         5M         20.53%</span><br><span class="line">metaspace                        26M       27M        -1         96.88%</span><br><span class="line">codeheap_&#x27;profiled_nmethods&#x27;     4M        4M         117M       3.57%</span><br><span class="line">compressed_class_space           2M        3M         1024M      0.29%</span><br><span class="line">codeheap_&#x27;non-profiled_nmethods&#x27; 685K      2496K      120032K    0.57%</span><br><span class="line">mapped                           0K        0K         -          0.00%</span><br><span class="line">direct                           48M       48M        -          100.00%</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="auth-命令"><a href="#auth-命令" class="headerlink" title="auth 命令"></a>auth 命令</h1><blockquote>
<p>提示</p>
<p>验证当前会话</p>
</blockquote>
<h2 id="配置用户名和密码"><a href="#配置用户名和密码" class="headerlink" title="配置用户名和密码"></a>配置用户名和密码</h2><p>在 attach 时，可以在命令行指定密码。比如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar --password ppp</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过 <code>--username</code> 选项来指定用户，默认值是<code>arthas</code>。</p>
</li>
<li><p>也可以在 <code>arthas.properties</code> 里中配置 username/password。命令行的优先级大于配置文件。</p>
</li>
<li><p>如果只配置<code>username</code>，没有配置<code>password</code>，则会生成随机密码，打印在<code>~/logs/arthas/arthas.log</code>中</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Using generated security password: 0vUBJpRIppkKuZ7dYzYqOKtranj4unGh</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="本地连接不鉴权"><a href="#本地连接不鉴权" class="headerlink" title="本地连接不鉴权"></a>本地连接不鉴权</h2><p>默认情况下，在<code>arthas.properties</code>文件里有配置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">arthas.localConnectionNonAuth=true</span><br></pre></td></tr></table></figure>

<p>当配置密码时，使用本地连接，也不需要鉴权。默认配置值是 true，方便本地连接使用。只有远程连接时，才需要鉴权。</p>
<h2 id="在-telnet-console-里鉴权"><a href="#在-telnet-console-里鉴权" class="headerlink" title="在 telnet console 里鉴权"></a>在 telnet console 里鉴权</h2><p>连接到 arthas 后，直接执行命令会提示需要鉴权：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@37430]$ <span class="built_in">help</span></span><br><span class="line">Error! <span class="built_in">command</span> not permitted, try to use <span class="string">&#x27;auth&#x27;</span> <span class="built_in">command</span> to authenticates.</span><br></pre></td></tr></table></figure>

<p>使用<code>auth</code>命令来鉴权，成功之后可以执行其它命令。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[arthas@37430]$ auth ppp</span><br><span class="line">Authentication result: true</span><br></pre></td></tr></table></figure>

<ul>
<li>可以通过 <code>--username</code> 选项来指定用户，默认值是<code>arthas</code>。</li>
</ul>
<h2 id="Web-console-密码验证"><a href="#Web-console-密码验证" class="headerlink" title="Web console 密码验证"></a>Web console 密码验证</h2><p>打开浏览器，会有弹窗提示需要输入 用户名 和 密码。</p>
<p>成功之后，则可以直接连接上 web console。</p>
<h2 id="HTTP-API-验证"><a href="#HTTP-API-验证" class="headerlink" title="HTTP API 验证"></a>HTTP API 验证</h2><h3 id="Authorization-Header-方式（推荐）"><a href="#Authorization-Header-方式（推荐）" class="headerlink" title="Authorization Header 方式（推荐）"></a>Authorization Header 方式（推荐）</h3><p>Arthas 采用的是 HTTP 标准的 Basic Authorization，客户端请求时增加对应的 header 即可。</p>
<ul>
<li>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication">https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication在新窗口打开</a></li>
</ul>
<p>例如，用户名是：<code>admin</code>，密码是 <code>admin</code>，则组合为字符串： <code>admin:admin</code>，base64 结果是： <code>YWRtaW46YWRtaW4=</code>，则 HTTP 请求增加<code>Authorization</code> header：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://localhost:8563/api&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;Authorization: Basic YWRtaW46YWRtaW4=&#x27;</span> \</span><br><span class="line">  --data-raw <span class="string">&#x27;&#123;&quot;action&quot;:&quot;exec&quot;,&quot;command&quot;:&quot;version&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="URL-参数传递方式"><a href="#URL-参数传递方式" class="headerlink" title="URL 参数传递方式"></a>URL 参数传递方式</h3><p>为了方便各种特殊情况，支持了以 parameters 方式传递 username 和 password。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://localhost:8563/api?password=admin&#x27;</span> \</span><br><span class="line">  --data-raw <span class="string">&#x27;&#123;&quot;action&quot;:&quot;exec&quot;,&quot;command&quot;:&quot;version&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java诊断工具</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
        <tag>Java诊断工具</tag>
        <tag>线上问题排查</tag>
        <tag>JVM</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeMarker</title>
    <url>/2021/07/12/FreeMarker/</url>
    <content><![CDATA[<h1 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="FreeMarker-1"><a href="#FreeMarker-1" class="headerlink" title="FreeMarker"></a>FreeMarker</h3><p>FreeMarker 是一款 <em>模板引擎</em>： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
<p>模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， <em>不是</em> 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/FreeMarker/overview.png"  />

<p>这种方式通常被称为 MVC (模型 视图 控制器) 模式，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。</p>
<p>而FreeMarker最初的设计，是被用来在MVC模式的Web开发框架中生成HTML页面的，它没有被绑定到 Servlet或HTML或任意Web相关的东西上。它也可以用于非Web应用环境中。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/FreeMarker/template.png"></p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>假设在一个在线商店的应用系统中需要一个HTML页面，和下面这个页面类似：</p>
<p><code>output</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome Big Doe!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our latest product:</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;products/greenmouse.html&quot;</span>&gt;</span>green mouse<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的用户名(上面的”Big Joe”)，应该是登录这个网页的访问者的名字， 并且最新产品的数据应该来自于数据库，这样它才能随时更新。那么不能直接在HTML页面中输入它们， 不能使用静态的HTML代码。此时，可以使用要求输出的 <strong>模板</strong>。 模板和静态HTML是相同的，只是它会包含一些 FreeMarker 将它们变成动态内容的指令：</p>
<p><code>template</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome $&#123;user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our latest product:</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;latestProduct.url&#125;&quot;</span>&gt;</span>$&#123;latestProduct.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模板文件存放在Web服务器上，就像通常存放静态HTML页面那样。当有人来访问这个页面， FreeMarker将会介入执行，然后动态转换模板，用最新的数据内容替换模板中 <code>$&#123;...&#125;</code> 的部分， 之后将结果发送到访问者的Web浏览器中。访问者的Web浏览器就会接收到例如第一个HTML示例那样的内容 (也就是没有FreeMarker指令的HTML代码)，访问者也不会察觉到服务器端使用的FreeMarker。 (当然，存储在Web服务器端的模板文件是不会被修改的；替换也仅仅出现在Web服务器的响应中。)</p>
<p>请注意，模板并没有包含程序逻辑来查找当前的访问者是谁，或者去查询数据库获取最新的产品。 显示的数据是在 FreeMarker 之外准备的，通常是一些 “真正的” 编程语言(比如Java) 所编写的代码。模板作者无需知道这些值是如何计算出的。事实上，这些值的计算方式可以完全被修改， 而模板可以保持不变，而且页面的样式也可以完全被修改而无需改动模板。 当模板作者(设计师)和程序员不是同一人时，显示逻辑和业务逻辑相分离的做法是非常有用的， 即便模板作者和程序员是一个人，这么来做也会帮助管理应用程序的复杂性。 保证模板专注于显示问题(视觉设计，布局和格式化)是高效使用模板引擎的关键。</p>
<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>为模板准备的数据整体被称作为 <strong>数据模型</strong>。 模板作者要关心的是，数据模型是树形结构(就像硬盘上的文件夹和文件)，在视觉效果上， 数据模型可以是：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/FreeMarker/datamodal.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">上面只是一个形象化显示；数据模型不是文本格式，它来自于Java对象。 对于Java程序员来说，root就像一个有 getUser() 和 getLatestProduct() 方法的Java对象， 也可以有 &quot;user&quot; 和 &quot;latestProducts&quot; 键值的Java Map对象。相似地，latestProduct 就像是有 getUrl() 和 getName() 方法的Java对象。</span><br></pre></td></tr></table></figure>

<p>正如已经看到的，数据模型的基本结构是树状的。 这棵树可以很复杂，并且可以有很大的深度，比如：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/FreeMarker/modaltree.png"></p>
<p>上图中的变量扮演目录的角色(比如 root, <code>animals</code>, <code>mouse</code>, <code>elephant</code>, <code>python</code>, <code>misc</code>) 被称为 <strong>hashes</strong> (哈希表或哈希，译者注)。哈希表存储其他变量(被称为 <em>子变量</em>)， 它们可以通过名称来查找(比如 “animals”, “mouse” 或 “price”)。</p>
<p>存储单值的变量 (<code>size</code>, <code>price</code>, <code>message</code> 和 <code>foo</code>) 称为 <strong>scalars</strong> (标量，译者注)。</p>
<p>如果要在模板中使用子变量， 那应该从根root开始指定它的路径，每级之间用点来分隔开。要访问 <code>mouse</code> 的 <code>price</code> ，要从root开始，首先进入到 <code>animals</code> ，之后访问 <code>mouse</code> ，最后访问 <code>price</code> 。就可以这样来写 <code>animals.mouse.price</code>。</p>
<p>另外一种很重要的变量是 <strong>sequences</strong> (序列，译者注)。 它们像哈希表那样存储子变量，但是子变量没有名字，它们只是列表中的项。 比如，在下面这个数据模型中， <code>animals</code> 和 <code>misc.fruits</code> 就是序列：</p>
<p><code>Data Model</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(root)</span><br><span class="line">  |</span><br><span class="line">  +- animals</span><br><span class="line">  |   |</span><br><span class="line">  |   +- (1st)</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- name &#x3D; &quot;mouse&quot;</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- size &#x3D; &quot;small&quot;</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- price &#x3D; 50</span><br><span class="line">  |   |</span><br><span class="line">  |   +- (2nd)</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- name &#x3D; &quot;elephant&quot;</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- size &#x3D; &quot;large&quot;</span><br><span class="line">  |   |   |</span><br><span class="line">  |   |   +- price &#x3D; 5000</span><br><span class="line">  |   |</span><br><span class="line">  |   +- (3rd)</span><br><span class="line">  |       |</span><br><span class="line">  |       +- name &#x3D; &quot;python&quot;</span><br><span class="line">  |       |</span><br><span class="line">  |       +- size &#x3D; &quot;medium&quot;</span><br><span class="line">  |       |</span><br><span class="line">  |       +- price &#x3D; 4999</span><br><span class="line">  |</span><br><span class="line">  +- misc</span><br><span class="line">      |</span><br><span class="line">      +- fruits</span><br><span class="line">          |</span><br><span class="line">          +- (1st) &#x3D; &quot;orange&quot;</span><br><span class="line">          |</span><br><span class="line">          +- (2nd) &#x3D; &quot;banana&quot;</span><br></pre></td></tr></table></figure>

<p>要访问序列的子变量，可以使用方括号形式的数字索引下标。 索引下标从0开始(从0开始也是程序员的传统)，那么第一项的索引就是0， 第二项的索引就是1等等。要得到第一个动物的名称的话，可以这么来写代码 <code>animals[0].name</code>。要得到 <code>misc.fruits</code> 中的第二项(字符串<code>&quot;banana&quot;</code>)可以这么来写 <code>misc.fruits[1]</code>。(实践中，通常按顺序遍历序列，而不用关心索引， 这点会在 <a href="http://freemarker.foofun.cn/dgui_quickstart_template.html#topic.tutorial.list">后续介绍</a>。)</p>
<p>标量类型可以分为如下的类别：</p>
<ul>
<li>字符串：就是文本，也就是任意的字符序列，比如上面提到的 ‘’m’’, ‘’o’’, ‘’u’’, ‘’s’’, ‘’e’’。比如 <code>name</code> 和 <code>size</code> 也是字符串。</li>
<li>数字：这是数值类型，就像上面的 <code>price</code>。 在FreeMarker中，字符串 <code>&quot;50&quot;</code> 和数字 <code>50</code> 是两种完全不同的东西。前者是两个字符的序列 (这恰好是人们可以读的一个数字)，而后者则是可以在数学运算中直接被使用的数值。</li>
<li>日期/时间: 可以是日期-时间格式(存储某一天的日期和时间)， 或者是日期(只有日期，没有时间)，或者是时间(只有时间，没有日期)。</li>
<li>布尔值：对应着对/错(是/否，开/关等值)类似的值。 比如动物可以有一个 <code>protected</code> (受保护的，译者注) 的子变量， 该变量存储这个动物是否被保护起来的值。</li>
</ul>
<p>总结：</p>
<ul>
<li>数据模型可以被看成是树形结构。</li>
<li>标量用于存储单一的值。这种类型的值可以是字符串，数字，日期/时间或者是布尔值。</li>
<li>哈希表是一种存储变量及其相关且有唯一标识名称的容器。</li>
<li>序列是存储有序变量的容器。存储的变量可以通过数字索引来检索，索引通常从0开始。</li>
</ul>
<hr>
<h2 id="模板一览"><a href="#模板一览" class="headerlink" title="模板一览"></a>模板一览</h2><h3 id="interpolation-插值"><a href="#interpolation-插值" class="headerlink" title="interpolation 插值"></a>interpolation 插值</h3><p><code>$&#123;...&#125;</code>： FreeMarker将会输出真实的值来替换大括号内的表达式，这样的表达式被称为 <strong>interpolation</strong>插值</p>
<h3 id="FTL标签"><a href="#FTL标签" class="headerlink" title="FTL标签"></a>FTL标签</h3><ul>
<li><strong>FTL 标签</strong> (FreeMarker模板的语言标签)： FTL标签和HTML标签有一些相似之处，但是它们是FreeMarker的指令，是不会在输出中打印的。 这些标签的名字以 <code>#</code> 开头。(用户自定义的FTL标签则需要使用 <code>@</code> 来代替 <code>#</code>，但这属于更高级的话题了。</li>
<li>FTL标签也被称为 <strong>指令</strong>。 这些指令在HTML的标签 (比如： <code>&lt;table&gt;</code> 和 <code>&lt;/table&gt;</code>) 和HTML元素 (比如： <code>table</code> 元素) 中的关系是相同的。(如果现在还没有感觉到它们的不同， 那么把“FTL标签”和“指令”看做是同义词即可。)</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li><strong>注释：</strong> 注释和HTML的注释也很相似， 但是它们使用 <code>&lt;#--</code> and <code>--&gt;</code> 来标识。 不像HTML注释那样，FTL注释不会出现在输出中(不出现在访问者的页面中)， 因为 FreeMarker会跳过它们。</li>
</ul>
<h3 id="if-指令"><a href="#if-指令" class="headerlink" title="if 指令"></a>if 指令</h3><p>使用 <code>if</code> 指令可以有条件地跳过模板的一些片段, 比如，假设在 最初的示例中， 想向你的老板Big Joe特别地问好，可其他人不同：</p>
<p><code>Template</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    Welcome $&#123;user&#125;<span class="tag">&lt;<span class="name">#if</span> <span class="attr">user</span> == <span class="string">&quot;Big Joe&quot;</span>&gt;</span>, our beloved leader<span class="tag">&lt;/<span class="name">#if</span>&gt;</span>!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Our latest product:</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;latestProduct.url&#125;&quot;</span>&gt;</span>$&#123;latestProduct.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，告诉 FreeMarker，当和 <code>&quot;Big Joe&quot;</code> 相同时 “, our beloved leader” (我们最尊敬的领导，译者注) 才是if条件中那唯一的 <code>user</code> 变量的值。 通常来讲，如果 <code>*condition*</code> 是false(布尔值)，那么介于 <code>&lt;#if *condition*&gt;</code> 和 <code>&lt;/#if&gt;</code> 标签中的内容会被略过。</p>
<p>我们来详细说说 <code>*condition*</code> 的使用： <code>==</code> 是用来判断它两侧的值是否相等的操作符， 比较的结果是布尔值，也就是true或者false。在 <code>==</code> 的左侧，是被引用的变量， 我们很熟悉这样的语法结构；最终它会被变量的值所替代。通常来说， 在指令或插值中没有被引号标注的内容都被视为变量的引用。右侧则是指定的字符串， 在模板中的字符串 <em>只能</em> 放在引号内。</p>
<p>if-else if-else示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#if animals.python.price &lt; animals.elephant.price&gt;</span><br><span class="line">  Pythons are cheaper than elephants today.</span><br><span class="line">&lt;#elseif animals.elephant.price &lt; animals.python.price&gt;</span><br><span class="line">  Elephants are cheaper than pythons today.</span><br><span class="line"><span class="tag">&lt;<span class="name">#else</span>&gt;</span></span><br><span class="line">  Elephants and pythons cost the same today.</span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="list-指令"><a href="#list-指令" class="headerlink" title="list 指令"></a>list 指令</h3><p>当需要列表显示内容时，list指令是必须的。</p>
<p><code>TEMPLATE</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>We have these animals:</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">#list</span> <span class="attr">animals</span> <span class="attr">as</span> <span class="attr">animal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;animal.name&#125;<span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;animal.price&#125; Euros</span><br><span class="line">  <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么输出结果将会是这样的：</p>
<p><code>OUTPUT</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>We have these animals:</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>mouse<span class="tag">&lt;<span class="name">td</span>&gt;</span>50 Euros</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>elephant<span class="tag">&lt;<span class="name">td</span>&gt;</span>5000 Euros</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>python<span class="tag">&lt;<span class="name">td</span>&gt;</span>4999 Euros</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>list</code> 指令的一般格式为： <code>&lt;#list sequence as loopVariable*repeatThis&lt;/#list&gt;</code>。 <code>repeatThis</code> 部分将会在给定的 <code>sequence</code> 遍历时在每一项中重复， 从第一项开始，一个接着一个。在所有的重复中， <code>loopVariable</code> 将持有当前遍历项的值。 这个变量仅存在于 <code>&lt;#list ...&gt;</code> 和 <code>&lt;/#list&gt;</code> 标签内。</p>
<h3 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h3><p>使用 <code>include</code> 指令， 我们可以在模板中插入其他文件的内容。</p>
<p>假设要在一些页面中显示版权声明的信息。那么可以创建一个文件来单独包含这些版权声明， 之后在需要它的地方插入即可。比方说，我们可以将版权信息单独存放在页面文件 <code>copyright_footer.html</code> 中：</p>
<p><code>TEMPLATE</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">Copyright (c) 2000 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.acmee.com&quot;</span>&gt;</span>Acmee Inc<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">All Rights Reserved.</span><br><span class="line"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当需要用到这个文件时，可以使用 <code>include</code> 指令来插入：</p>
<p><code>TEMPLATE</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Blah blah...</span><br><span class="line">  <span class="tag">&lt;<span class="name">#include</span> &quot;/<span class="attr">copyright_footer.html</span>&quot;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时，输出的内容为：</p>
<p><code>OUTPUT</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Blah blah...</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">Copyright (c) 2000 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.acmee.com&quot;</span>&gt;</span>Acmee Inc<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">All Rights Reserved.</span><br><span class="line"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用内建函数"><a href="#使用内建函数" class="headerlink" title="使用内建函数"></a>使用内建函数</h3><p>内建函数很像子变量(如果了解Java术语的话，也可以说像方法)， 它们并不是数据模型中的东西，是 FreeMarker 在数值上添加的。 为了清晰子变量是哪部分，使用 <code>?</code>(问号)代替 <code>.</code>(点)来访问它们。常用内建函数的示例：</p>
<ul>
<li><code>user?html</code> 给出 <code>user</code> 的HTML转义版本， 比如 <code>&amp;</code> 会由 <code>&amp;</code> 来代替。</li>
<li><code>user?upper_case</code> 给出 <code>user</code> 值的大写版本 (比如 “JOHN DOE” 来替代 “John Doe”)</li>
<li><code>animal.name?cap_first</code> 给出 <code>animal.name</code> 的首字母大写版本(比如 “Mouse” 来替代 “mouse”)</li>
<li><code>user?length</code> 给出 <code>user</code> 值中 <em>字符</em>的数量(对于 “John Doe” 来说就是8)</li>
<li><code>animals?size</code> 给出 <code>animals</code> 序列中 <em>项目</em> 的个数(我们示例数据模型中是3个)</li>
<li>如果在 <code>&lt;#list animals as animal&gt;</code> 和对应的 <code>&lt;/#list&gt;</code> 标签中：<ul>
<li><code>animal?index</code> 给出了在 <code>animals</code> 中基于0开始的 <code>animal</code>的索引值</li>
<li><code>animal?counter</code> 也像 <code>index</code>， 但是给出的是基于1的索引值</li>
<li><code>animal?item_parity</code> 基于当前计数的奇偶性，给出字符串 “odd” 或 “even”。在给不同行着色时非常有用，比如在 <code>&lt;td class=&quot;$&#123;animal?item_parity&#125;Row&quot;&gt;</code>中。</li>
</ul>
</li>
</ul>
<p>一些内建函数需要参数来指定行为，比如：</p>
<ul>
<li><code>animal.protected?string(&quot;Y&quot;, &quot;N&quot;)</code> 基于 <code>animal.protected</code> 的布尔值来返回字符串 “Y” 或 “N”。</li>
<li><code>animal?item_cycle(&#39;lightRow&#39;,&#39;darkRow&#39;)</code> 是之前介绍的 <code>item_parity</code> 更为常用的变体形式。</li>
<li><code>fruits?join(&quot;, &quot;)</code> 通过连接所有项，将列表转换为字符串， 在每个项之间插入参数分隔符(比如 “orange,banana”)</li>
<li><code>user?starts_with(&quot;J&quot;)</code> 根据 <code>user</code> 的首字母是否是 “J” 返回布尔值true或false。</li>
</ul>
<p>内建函数应用可以链式操作，比如<code>user?upper_case?html</code> 会先转换用户名到大写形式，之后再进行HTML转义。(这就像可以链式使用 <code>.</code>(点)一样)</p>
<p>可以阅读 <a href="http://freemarker.foofun.cn/ref_builtins.html">全部内建函数参考</a>。</p>
<h3 id="处理不存在的变量"><a href="#处理不存在的变量" class="headerlink" title="处理不存在的变量"></a>处理不存在的变量</h3><p>数据模型中经常会有可选的变量(也就是说有时并不存在)。 除了一些典型的人为原因导致失误外，FreeMarker 绝不能容忍引用不存在的变量， 除非明确地告诉它当变量不存在时如何处理。这里来介绍两种典型的处理方法。</p>
<p><em>这部分对程序员而言: 一个不存在的变量和一个是 <code>null</code> 值的变量， 对于FreeMarker来说是一样的，所以这里所指的”丢失”包含这两种情况。</em></p>
<p>不论在哪里引用变量，都可以指定一个默认值来避免变量丢失这种情况， 通过在变量名后面跟着一个 <code>!</code>(叹号，译者注)和默认值。 就像下面的这个例子，当 <code>user</code> 不存在于数据模型时, 模板将会将 <code>user</code> 的值表示为字符串 <code>&quot;visitor&quot;</code>。(当 <code>user</code> 存在时， 模板就会表现出 <code>$&#123;user&#125;</code> 的值)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome $&#123;user!&quot;visitor&quot;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在变量名后面通过放置 <code>??</code> 来询问一个变量是否存在。将它和 <code>if</code> 指令合并， 那么如果 <code>user</code> 变量不存在的话将会忽略整个问候的代码段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">user</span>??&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome $&#123;user&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于多级访问的变量，比如 <code>animals.python.price</code>， 书写代码：<code>animals.python.price!0</code> 当且仅当 <code>animals.python</code> 永远存在， 而仅仅最后一个子变量 <code>price</code> 可能不存在时是正确的 (这种情况下我们假设价格是 <code>0</code>)。 如果 <code>animals</code> 或 <code>python</code> 不存在， 那么模板处理过程将会以”未定义的变量”错误而停止。为了防止这种情况的发生， 可以如下这样来编写代码 <code>(animals.python.price)!0</code>。 这种情况就是说 <code>animals</code> 或 <code>python</code> 不存在时， 表达式的结果是 <code>0</code>。对于 <code>??</code> 也是同样用来的处理这种逻辑的; 将 <code>animals.python.price??</code> 对比 <code>(animals.python.price)??</code>来看。</p>
<hr>
<h2 id="快速浏览-备忘单"><a href="#快速浏览-备忘单" class="headerlink" title="快速浏览(备忘单)"></a>快速浏览(备忘单)</h2><p>这里给已经了解 FreeMarker 的人或有经验的程序员的提个醒：</p>
<ul>
<li><p>直接指定值</p>
<ul>
<li>字符串： <code>&quot;Foo&quot;</code> 或者 <code>&#39;Foo&#39;</code> 或者 <code>&quot;It&#39;s \&quot;quoted\&quot;&quot;</code> 或者 <code>&#39;It\&#39;s &quot;quoted&quot;&#39;</code> 或者 <code>r&quot;C:\raw\string&quot;</code></li>
<li>数字： <code>123.45</code></li>
<li>布尔值： <code>true</code>， <code>false</code></li>
<li>序列： <code>[&quot;foo&quot;, &quot;bar&quot;, 123.45]</code>； 值域： <code>0..9</code>, <code>0..&lt;10</code> (或 <code>0..!10</code>), <code>0..</code></li>
<li>哈希表： <code>&#123;&quot;name&quot;:&quot;green mouse&quot;, &quot;price&quot;:150&#125;</code></li>
</ul>
</li>
<li><p>检索变量</p>
<ul>
<li>顶层变量： <code>user</code></li>
<li>从哈希表中检索数据： <code>user.name</code>， <code>user[&quot;name&quot;]</code></li>
<li>从序列中检索数据： <code>products[5]</code></li>
<li>特殊变量： <code>.main</code></li>
</ul>
</li>
<li><p>字符串操作</p>
<ul>
<li>插值(或连接)： <code>&quot;Hello $&#123;user&#125;!&quot;</code> (或 <code>&quot;Hello &quot; + user + &quot;!&quot;</code>)</li>
<li>获取一个字符： <code>name[0]</code></li>
<li>字符串切分： 包含结尾： <code>name[0..4]</code>，不包含结尾： <code>name[0..&lt;5]</code>，基于长度(宽容处理)： <code>name[0..*5]</code>，去除开头： <code>name[5..]</code></li>
</ul>
</li>
<li><p>序列操作</p>
<ul>
<li>连接： <code>users + [&quot;guest&quot;]</code></li>
<li>序列切分：包含结尾： <code>products[20..29]</code>， 不包含结尾： <code>products[20..&lt;30]</code>，基于长度(宽容处理)： <code>products[20..*10]</code>，去除开头： <code>products[20..]</code></li>
</ul>
</li>
<li><p>哈希表操作</p>
<ul>
<li>连接： <code>passwords + &#123; &quot;joe&quot;: &quot;secret42&quot; &#125;</code></li>
</ul>
</li>
<li><p>算术运算： <code>(x * 1.5 + 10) / 2 - y % 100</code></p>
</li>
<li><p>比较运算： <code>x == y</code>， <code>x != y</code>， <code>x &lt; y</code>， <code>x &gt; y</code>， <code>x &gt;= y</code>， <code>x &lt;= y</code>， <code>x lt y</code>， <code>x lte y</code>， <code>x gt y</code>， <code>x gte y</code>， 等等。。。。。。</p>
</li>
<li><p>逻辑操作： <code>!registered &amp;&amp; (firstVisit || fromEurope)</code></p>
</li>
<li><p>内建函数： <code>name?upper_case</code>, <code>path?ensure_starts_with(&#39;/&#39;)</code></p>
</li>
<li><p>方法调用： <code>repeat(&quot;What&quot;, 3)</code></p>
</li>
<li><p>处理不存在的值</p>
<p>：</p>
<ul>
<li>默认值： <code>name!&quot;unknown&quot;</code> 或者 <code>(user.name)!&quot;unknown&quot;</code> 或者 <code>name!</code> 或者 <code>(user.name)!</code></li>
<li>检测不存在的值： <code>name??</code> 或者 <code>(user.name)??</code></li>
</ul>
</li>
<li><p>赋值操作： <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>++</code>, <code>--</code></p>
</li>
</ul>
<p>请参考： <a href="http://freemarker.foofun.cn/dgui_template_exp.html#dgui_template_exp_precedence">运算符优先级</a></p>
<hr>
<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><table>
<thead>
<tr>
<th align="left">转义序列</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>\&quot;</code></td>
<td align="left">引号 (u0022)</td>
</tr>
<tr>
<td align="left"><code>\&#39;</code></td>
<td align="left">单引号(又称为撇号) (u0027)</td>
</tr>
<tr>
<td align="left"><code>\&#123;</code></td>
<td align="left">起始花括号：<code>&#123;</code></td>
</tr>
<tr>
<td align="left"><code>\\</code></td>
<td align="left">反斜杠 (u005C)</td>
</tr>
<tr>
<td align="left"><code>\n</code></td>
<td align="left">换行符 (u000A)</td>
</tr>
<tr>
<td align="left"><code>\r</code></td>
<td align="left">回车 (u000D)</td>
</tr>
<tr>
<td align="left"><code>\t</code></td>
<td align="left">水平制表符(又称为tab) (u0009)</td>
</tr>
<tr>
<td align="left"><code>\b</code></td>
<td align="left">退格 (u0008)</td>
</tr>
<tr>
<td align="left"><code>\f</code></td>
<td align="left">换页 (u000C)</td>
</tr>
<tr>
<td align="left"><code>\l</code></td>
<td align="left">小于号：<code>&lt;</code></td>
</tr>
<tr>
<td align="left"><code>\g</code></td>
<td align="left">大于号：<code>&gt;</code></td>
</tr>
<tr>
<td align="left"><code>\a</code></td>
<td align="left">&amp;符：<code>&amp;</code></td>
</tr>
<tr>
<td align="left"><code>\xCode</code></td>
<td align="left">字符的16进制 Unicode 码 (UCS码)</td>
</tr>
</tbody></table>
<p>在 <code>\x</code> 之后的 <code>*Code*</code> 是1-4位的16进制码。下面这个示例中都是在字符串中放置版权符号： <code>&quot;\xA9 1999-2001&quot;</code>， <code>&quot;\x0A9 1999-2001&quot;</code>， <code>&quot;\x00A9 1999-2001&quot;</code>。 如果紧跟16进制码后一位的字符也能解释成16进制码时， 就必须把4位补全，否则FreeMarker就会误解你的意图。</p>
<p>原生字符串是一种特殊的字符串。在原生字符串中， 反斜杠和 <code>$&#123;</code> 没有特殊含义， 它们被视为普通的字符。为了表明字符串是原生字符串， 在开始的引号或单引号之前放置字母<code>r</code>，例如：\</p>
<p><code>TEMPLATE</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;r&quot;$&#123;foo&#125;&quot;&#125;</span><br><span class="line">$&#123;r&quot;C:\foo\bar&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>将会输出：</p>
<p><code>OUTPUT</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;foo&#125;</span></span><br><span class="line">C:\foo\bar</span><br></pre></td></tr></table></figure>

<h2 id="值域"><a href="#值域" class="headerlink" title="值域"></a>值域</h2><p>值域也是序列，但它们由指定包含的数字范围所创建， 而不需指定序列中每一项。比如： <code>0..&lt;m</code>，这里假定 <code>m</code> 变量的值是5，那么这个序列就包含 <code>[0, 1, 2, 3, 4]</code>。值域的主要作用有：使用 <code>&lt;#list...&gt;</code> 来迭代一定范围内的数字，序列切分和 字符串切分。</p>
<p>值域表达式的通用形式是( <code>start</code> 和 <code>end</code> 可以是任意的结果为数字表达式)：</p>
<ul>
<li><p><code>start..end</code>： 包含结尾的值域。比如 <code>1..4</code> 就是 <code>[1, 2, 3, 4]</code>， 而 <code>4..1</code> 就是 <code>[4, 3, 2, 1]</code>。当心一点， 包含结尾的值域不会是一个空序列，所以 <code>0..length-1</code> 就是 <em>错误的</em>，因为当长度是 <code>0</code> 时， 序列就成了 <code>[0, -1]</code>。</p>
</li>
<li><p><code>start..&lt;end</code> 或 <code>start..!end</code>： 不包含结尾的值域。比如 <code>1..&lt;4</code> 就是 <code>[1, 2, 3]</code>，<code>4..&lt;1</code> 就是 <code>[4, 3, 2]</code>, 而 <code>1..&lt;1</code> 表示 <code>[]</code>。请注意最后一个示例； 结果可以是空序列，和 <code>..&lt;</code> 和 <code>..!</code> 没有区别; 最后这种形式在应用程序中使用了 <code>&lt;</code> 字符而引发问题(如HTML编辑器等)。</p>
</li>
<li><p><code>start..length</code>： 限定长度的值域，比如 <code>10..4</code> 就是 <code>[10, 11, 12, 13]</code>，<code>10..-4</code> 就是 <code>[10, 9, 8, 7]</code>，而 <code>10..0</code> 表示 <code>[]</code>。当这些值域被用来切分时， 如果切分后的序列或者字符串结尾在指定值域长度之前，则切分不会有问题；请参考 <a href="http://freemarker.foofun.cn/dgui_template_exp.html#dgui_template_exp_seqenceop_slice">序列切分</a> 来获取更多信息。</p>
</li>
<li><p><code>start..</code>： 无右边界值域。这和限制长度的值域很像，只是长度是无限的。 比如 <code>1..</code> 就是 <code>[1, 2, 3, 4, 5, 6, ... ]</code>，直到无穷大。 但是处理(比如列表显示)这种值域时要万分小心，处理所有项时， 会花费很长时间，直到内存溢出应用程序崩溃。 和限定长度的值域一样，当它们被切分时， 遇到切分后的序列或字符串结尾时，切分就结束了。</p>
<p><strong>Warning!</strong></p>
<p>无右边界值域在 FreeMarker 2.3.21 版本以前只能用于切分， 若用于其它用途，它就像空序列一样了。要使用新的特性， 使用 FreeMarker 2.3.21 版本是不够的，程序员要设置 <code>incompatible_improvements</code> 至少到2.3.21版本。</p>
</li>
</ul>
<p>值域的进一步注意事项：</p>
<ul>
<li>值域表达式本身并没有方括号，比如这样编写代码 <code>&lt;#assign myRange = 0..&lt;x&gt;</code>， 而不是 <code>&lt;#assign myRange = [0..&lt;x]&gt;</code>。 后者会创建一个包含值域的序列。方括号是切分语法的一部分，就像 <code>seq[myRange]</code>。</li>
<li>可以在 <code>..</code> 的两侧编写算术表达式而不需要圆括号， 就像 <code>n + 1 ..&lt; m / 2 - 1</code>。</li>
<li><code>..</code>，<code>..&lt;</code>， <code>..!</code> 和 <code>..</code> 是运算符， 所以它们中间不能有空格。就像 <code>n .. &lt;m</code> 这样是错误的，但是 <code>n ..&lt; m</code> 这样就可以。</li>
<li>无右边界值域的定义大小是2147483647 (如果 <code>incompatible_improvements</code> 低于2.3.21版本，那么就是0)， 这是由于技术上的限制(32位)。但当列表显示它们的时候，实际的长度是无穷大。</li>
<li>值域并不存储它们包含的数字，那么对于 <code>0..1</code> 和 <code>0..100000000</code> 来说，创建速度都是一样的， 并且占用的内存也是一样的。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA使用技巧一</title>
    <url>/2021/08/16/IntelliJ-IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="IDEA查看一个类所有的方法"><a href="#IDEA查看一个类所有的方法" class="headerlink" title="IDEA查看一个类所有的方法"></a>IDEA查看一个类所有的方法</h1><h2 id="快捷键Ctrl-F12"><a href="#快捷键Ctrl-F12" class="headerlink" title="快捷键Ctrl+F12"></a>快捷键Ctrl+F12</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ctrlf12.png"></p>
<hr>
<h1 id="IDEA查看一个类的继承关系"><a href="#IDEA查看一个类的继承关系" class="headerlink" title="IDEA查看一个类的继承关系"></a>IDEA查看一个类的继承关系</h1><h2 id="方式一-以图的方式显示"><a href="#方式一-以图的方式显示" class="headerlink" title="方式一 以图的方式显示"></a>方式一 以图的方式显示</h2><p>1、找到当前类所在的位置，右键选择Diagrams，然后选择Show Diagrams……</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/diagram1.png"></p>
<p>2、在弹出的框中选择Java Class Diagrams：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/diagrams2.png"></p>
<p>3、可以看到如下的结果，所有的父类继承关系：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/digrams3.png"></p>
<p>4、在页面点击右键，选择 show categories，根据需要可以展开类中的属性、方法、构造方法等等。当然，第二种方法也可以直接使用上面的工具栏：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/diagrams4.png"></p>
<p>然后你就会得到：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/EasSaveFacadeServiceImpl.png"></p>
<h2 id="方式二-通过hierarchy面板"><a href="#方式二-通过hierarchy面板" class="headerlink" title="方式二 通过hierarchy面板"></a>方式二 通过hierarchy面板</h2><p>可以点击编辑器最上端的Navigate，下拉选择Type Hierarchy，或者使用快捷键<strong>Ctrl + H（mac对应的是Ctrl+H）</strong>，就会出现一个有层级关系的关系列表，如下图所示，展示所有的父类或子类：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/hierarchy.png"></p>
<hr>
<h1 id="代码提示不区分大小写"><a href="#代码提示不区分大小写" class="headerlink" title="代码提示不区分大小写"></a>代码提示不区分大小写</h1><p>settings -&gt; Editor -&gt; General -&gt; Code Completion</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/codecompletion.png"></p>
<ul>
<li>IntelliJ IDEA 的代码提示和补充功能有一个特性：区分大小写。如上图标注所示，默认就是 First letter 区分大小写的。</li>
<li>区分大小写的情况是这样的：比如我们在 Java 代码文件中输入 stringBuffer，IntelliJ IDEA 默认是不会帮我们提示或是代码补充的，但是如果我们输入StringBuffer 就可以进行代码提示和补充。</li>
<li>如果想不区分大小写的话，取消勾选<code>Match case</code>选项即可。</li>
</ul>
<hr>
<h1 id="tab-多行显示"><a href="#tab-多行显示" class="headerlink" title="tab 多行显示"></a>tab 多行显示</h1><p>settings -&gt; Editor Tabs -&gt; Configure Editor Tabs…，取消勾选 Show Tabs In Single Row选项。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/editortabs.png"></p>
<p>效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/canclesinglerow.png"></p>
<hr>
<h1 id="代码块包裹功能-Surround-With"><a href="#代码块包裹功能-Surround-With" class="headerlink" title="代码块包裹功能 - Surround With"></a>代码块包裹功能 - Surround With</h1><p><strong>Ctrl + Alt + T</strong> 提供的是代码块包裹功能 -<code> Surround With</code>。可以快速将选中的代码块，包裹到选择的语句块中。</p>
<p>（mac对应的是<strong>Command+Option+T</strong>)</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/surroundwith.png"></p>
<hr>
<h1 id="设置文件头"><a href="#设置文件头" class="headerlink" title="设置文件头"></a>设置文件头</h1><p>File–&gt; Settings–&gt; Editor–&gt; File and Code Templates–&gt; Includes–&gt; File Header–&gt; 添加以下代码</p>
<p>${USER}会读取当前电脑的用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @Author $&#123;USER&#125;</span><br><span class="line"> * @Date $&#123;DATE&#125;</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/fileHeader.png"></p>
<p>新建一个文件效果如下:</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/newfile.png"></p>
<hr>
<h1 id="设置方法注释模板"><a href="#设置方法注释模板" class="headerlink" title="设置方法注释模板"></a>设置方法注释模板</h1><p>先看效果</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate1.png"></p>
<p>IDEA还没有智能到自动为我们创建方法注释，这就是要我们手动为方法添加注释，使用Eclipse时我们生成注释的习惯是</p>
<p><strong>/</strong>+Enter**，这里我们也按照这种习惯来设置IDEA的方法注释</p>
<p>1、File–&gt;Settings–&gt;Editor–&gt;Live Templates</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate2.png"></p>
<p>2、点+号新建一个组或模板，选择Live template</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate3.png"></p>
<p>3、新建模板：命名为*，修改生成注释的快捷键为Enter</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate4.png"></p>
<p>4、设置模板：模板内容如下<strong>，注意第一行，只有一个*而不是/*</strong>，在设置参数名时必须用${参数名}$的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line"> * <span class="meta">@author</span> $USER$</span><br><span class="line"> * <span class="meta">@Description</span> $description$</span><br><span class="line"> $param$ </span><br><span class="line"> $<span class="keyword">return</span>$</span><br><span class="line"> * <span class="meta">@Date</span> $date$ $time$</span><br><span class="line"> **/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate5.png"></p>
<p>5、设置参数的获取方式，选择右侧的Edit variables按钮</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate6.png"></p>
<p>让params 多行显示，而非数组显示</p>
<p>其中params变量的内容一定要放在Default value中！！！内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groovyScript(&quot;if(\&quot;$&#123;_1&#125;\&quot;.length() &#x3D;&#x3D; 2) &#123;return &#39;&#39;;&#125; else &#123;def result&#x3D;&#39;&#39;; def params&#x3D;\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#39;[\\\\[|\\\\]|\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList();for(i &#x3D; 0; i &lt; params.size(); i++) &#123;if(i&#x3D;&#x3D;0)&#123;result+&#x3D;&#39;* @param &#39; + params[i] + &#39;: &#39;&#125;else&#123;result+&#x3D;&#39;\\n&#39; + &#39; * @param &#39; + params[i] + &#39;: &#39;&#125;&#125;; return result;&#125;&quot;, methodParameters());</span><br></pre></td></tr></table></figure>

<p>其中return变量的内容也一定要放在Default value中！！！内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groovyScript(&quot;def returnType &#x3D; \&quot;$&#123;_1&#125;\&quot;; def result &#x3D; &#39;* @return: &#39; + returnType; return result;&quot;, methodReturnType());</span><br></pre></td></tr></table></figure>

<p>6、设置模板的应用场景，点击模板页面最下方的警告，来设置将模板应用于那些场景，一般选择EveryWhere–&gt;Java即可（如果曾经修改过，则显示为change而不是define）</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/methodtemplate7.png"></p>
<hr>
<h1 id="全屏显示"><a href="#全屏显示" class="headerlink" title="全屏显示"></a>全屏显示</h1><p>我们可以使用【Presentation Mode】，将IDEA弄到最大，可以让你只关注一个类里面的代码，进行毫无干扰的coding。</p>
<p>可以使用<strong>Alt+V</strong>快捷键（mac对应的快捷键是<strong>option+v</strong>），弹出View视图，然后选择Appearance-&gt;Enter Presentation Mode。效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/mode1.png"></p>
<p>退出进入全屏模式 ，点击 View—&gt;Appearance —&gt; Exit Persenetation Mode。</p>
<hr>
<h1 id="分屏操作"><a href="#分屏操作" class="headerlink" title="分屏操作"></a>分屏操作</h1><p>在某一个类上面右键</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/splitvertically.png"></p>
<p>效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/splitvertically1.png"></p>
<p>屏幕太多了，一直用鼠标也比较麻烦，这里我们可以直接 <code>Ctrl+E</code>进行页面切换</p>
<p>除了 <code>Ctrl+E</code>(mac对应的是<code>command+E</code>) 还可以只用 ，<code>Ctrl+Alt+ 方向键进行切换视图</code></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/splitvertically2.png"></p>
<hr>
<h1 id="快速的开发常见操作-："><a href="#快速的开发常见操作-：" class="headerlink" title="快速的开发常见操作 ："></a>快速的开发常见操作 ：</h1><h2 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h2><p>如图，通过<code>字符串.null</code>，然后点回车</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ifempty.png"></p>
<p>效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/ifempty1.png"></p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>通过<code>.fori</code>遍历集合或数组</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/fori.png"></p>
<p>效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/fori1.png"></p>
<hr>
<h2 id="变量抽取"><a href="#变量抽取" class="headerlink" title="变量抽取"></a>变量抽取</h2><p> <img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/extractVariable1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/extractVariable2.png"></p>
<h2 id="代码抽取"><a href="#代码抽取" class="headerlink" title="代码抽取"></a>代码抽取</h2><p><strong>抽取方法</strong>，很多时候，在俺们开发当中，经常会方法调用方法，有时候一段代码过于的冗余，所以需要进行抽取。</p>
<p>选中代码，然后快捷键<code>Ctrl+Alt+M</code>（mac对应的快捷键是<code>command+option+M</code>），就会自动抽取成方法</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/extractMethod.png"></p>
<p>效果如下</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/extractMethod1.png"></p>
<hr>
<h2 id="快速完成声明-if-while-等语句"><a href="#快速完成声明-if-while-等语句" class="headerlink" title="快速完成声明 if while 等语句"></a>快速完成声明 if while 等语句</h2><p>智能提示，该功能可以基于上下文环境，智能帮你过滤可以使用方法，推导出最适合的方法。该快捷键为 <strong>Ctrl+Shift+Space</strong>(mac对应的快捷键是<strong>ctrl+option+space</strong>)。</p>
<p>快速完成语句在 IDEA 中，可以使用快捷键 <code>Ctrl+Shift+Enter</code>（mac对应的是<strong>Command+shift+enter</strong>）快速完成声明 if while 等语句。在下面的例子中，我们输入 while ，接着我们输入快捷键，我们可以看到 IDEA 自动帮我们完整这个结构，然后只需要输入判断条件即可。</p>
<hr>
<h1 id="IDEA-光标操作"><a href="#IDEA-光标操作" class="headerlink" title="IDEA 光标操作"></a>IDEA 光标操作</h1><p>快捷键<strong>alt+j</strong>在相同的字符后生成光标，mac对应的快捷键是<strong>option+G</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/guangbiao1.png"></p>
<p>快捷键<strong>ctrl+alt+shift+j</strong>在相同的字符后生成光标，mac对应的快捷键是<strong>command+option+G</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/guangbiao.png"></p>
<h1 id="折叠代码"><a href="#折叠代码" class="headerlink" title="折叠代码"></a>折叠代码</h1><p>折叠代码，<code>ctrl+'-'</code>，mac对应的快捷键是<code>command+&#39;-&#39;</code></p>
<p>展开代码，<code>ctrl+'+'</code>，mac对应的快捷键是<code>command+&#39;+&#39;</code></p>
<p>折叠所有代码，<code>ctrl+shift+'-'</code>，mac对应的快捷键是<code>command+shift+&#39;-&#39;</code></p>
<p>展开所有代码，<code>ctrl+shift+'+'</code>，mac对应的快捷键是<code>command+shift+&#39;+&#39;</code></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/folding.png"></p>
]]></content>
      <categories>
        <category>IDEA使用技巧</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA使用技巧之Debug</title>
    <url>/2021/08/20/IntelliJ-IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8BDebug/</url>
    <content><![CDATA[<h1 id="Debug常用断点调试快捷键"><a href="#Debug常用断点调试快捷键" class="headerlink" title="Debug常用断点调试快捷键"></a>Debug常用断点调试快捷键</h1><table>
<thead>
<tr>
<th align="center">图标</th>
<th align="center">快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/stepOver.png"></td>
<td align="center"><strong>F8</strong></td>
<td><strong>Step Over：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/stepInto.png"></td>
<td align="center"><strong>F7</strong></td>
<td><strong>Step Into：步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/forceStepInto.png"></td>
<td align="center"><strong>Alt+Shift+F7</strong></td>
<td><strong>Force Step Into：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/stepOut.png"></td>
<td align="center"><strong>Shift+F8</strong></td>
<td><strong>Step Out：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/runtoCursor.png"></td>
<td align="center"><strong>Alt+F9</strong></td>
<td><strong>Run to Cursor：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/cursorstop.png"></td>
<td align="center"><strong>Ctrl+F2</strong></td>
<td><strong>Stop ‘xxx’：停止运行</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/viewbreakpoints.png"></td>
<td align="center"><strong>Ctrl+Shift+F8</strong></td>
<td><strong>View Breakpoints：查看所有断点</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/mutebreakpoints.png"></td>
<td align="center"></td>
<td><strong>Mute Breakpoints：选择这个后，所有断点变为灰色，断点失效，按F9则可以直接运行完程序。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/resume.png"></td>
<td align="center"><strong>F9</strong></td>
<td><strong>Resume Program：恢复程序，如果下面还有断点则运行到下一个断点。</strong></td>
</tr>
<tr>
<td align="center"><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/dropframe.png"></td>
<td align="center"></td>
<td><strong>Drop Frame：断点回退，断点会回退到我们打断点的位置。</strong></td>
</tr>
</tbody></table>
<hr>
<h1 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h1><p>在我们打断点的地方鼠标右击，然后在condition输入框里面输入条件</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/conditionbreakpoint1.png"></p>
<hr>
<h1 id="求值表达式Evaluate-Expression"><a href="#求值表达式Evaluate-Expression" class="headerlink" title="求值表达式Evaluate Expression"></a>求值表达式Evaluate Expression</h1><p>在断点调试过程中，我们想查看某些变量或某些对象的属性值，我们可以通过快捷键<strong>Alt+F8</strong>打开<strong>表达式求值</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/evaluateExpression1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/evaluateExpression2.png"></p>
<hr>
<h1 id="setValue"><a href="#setValue" class="headerlink" title="setValue"></a>setValue</h1><p>Intellij IDEA在debug模式下可以改变变量的值，下面这段代码为例，比如我们想看看i=12时会输出什么</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/debugsetvalue1.png"></p>
<p>此时<strong>i==5</strong>，我们把<strong>i</strong>设置成12</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/debugsetvalue2.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/debugsetvalue3.png"></p>
<p>按快捷键<strong>F8</strong>看看i是否会进入<strong>if条件</strong>里面</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/debugsetvalue4.png"></p>
<hr>
<hr>
<h1 id="异常断点"><a href="#异常断点" class="headerlink" title="异常断点"></a>异常断点</h1><p><strong>Java Exception Breakpoints可以使当程序遇见被选择的异常时，自动停在相应异常的位置处。</strong></p>
<p>如下面这段代码</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint1.png"></p>
<p>加上条件断点，使用快捷键<strong>Ctrl+Shift+F8</strong>或者点击图标<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/viewbreakpoints.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint2.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint3.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint4.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint5.png"></p>
<p>再使用Debug模式来运行程序，当程序出现异常，会之间停留在我们出现异常的代码处</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/exceptionBreakpoint6.png"></p>
<hr>
<h1 id="避免操作资源"><a href="#避免操作资源" class="headerlink" title="避免操作资源"></a>避免操作资源</h1><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource1.png"></p>
<p>如上图所示，我们在断点调试时，后续的一些操作可能会涉及操作一些资源，我们又不想后面的代码执行，直接让代码终止。通常我们想到的是点击终止按钮<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/cursorstop.png"></p>
<p>但是点击这个按钮之后后续的操作还会执行，如下图所示</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource2.png"></p>
<hr>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource3.png"></p>
<p>Debug调试界面，选择正在运行的Stack，鼠标右键选择Force Return，如下图所示</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource4.png"></p>
<p>上面的操作完成之后，代码会跑到<strong>Thread.java</strong>类中的<strong>exit（）</strong>方法里。再点击<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/resume.png"></p>
<p>程序就运行结束。我们就会看到后续的操作并没有执行</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource5.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%B9%8Bdebug%E8%B0%83%E8%AF%95/releaseSource6.png"></p>
]]></content>
      <categories>
        <category>IDEA使用技巧</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6新特性</title>
    <url>/2021/05/24/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><p>let关键字来声明变量</p>
<h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p>const 关键字用来声明常量， const声明有以下特点</p>
<ol>
<li>声明必须赋初始值</li>
<li>标识符一般为大写</li>
<li>不允许重复声明</li>
<li>值不允许修改</li>
<li>块儿级作用域<br>注意 : 对象属性修改和数组元素变化不会触发const错误</li>
</ol>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;张学友&#x27;</span>, <span class="string">&#x27;刘德华&#x27;</span>, <span class="string">&#x27;黎明&#x27;</span>, <span class="string">&#x27;郭富城&#x27;</span>]; </span><br><span class="line"><span class="keyword">let</span> [zhang, liu, li, guo] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(zhang,liu,li,guo)</span><br><span class="line"><span class="comment">// console.log: 张学友 刘德华 黎明 郭富城</span></span><br></pre></td></tr></table></figure>

<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    hobbies: [<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span><br><span class="line">    selfIntroduction: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;大家好，我是法外狂徒张三&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,hobbies,selfIntroduction&#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//console.log: zhangsan</span></span><br><span class="line"><span class="built_in">console</span>.log(hobbies) <span class="comment">//console.log: [&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;]</span></span><br><span class="line">selfIntroduction()  <span class="comment">//console.log: 大家好，我是法外狂徒张三</span></span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`Carpe diem. </span></span><br><span class="line"><span class="string">           Seize the day, boys. </span></span><br><span class="line"><span class="string">           Make your lives extraordinary.`</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串中嵌入变量"><a href="#字符串中嵌入变量" class="headerlink" title="字符串中嵌入变量"></a>字符串中嵌入变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;张三&#x27;</span>; </span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`法外狂徒<span class="subst">$&#123;star&#125;</span>`</span>; <span class="comment">//法外狂徒张三</span></span><br></pre></td></tr></table></figure>

<h2 id="对象的简化写法"><a href="#对象的简化写法" class="headerlink" title="对象的简化写法"></a>对象的简化写法</h2><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;大家好，我是法外狂徒张三&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Person = &#123;</span><br><span class="line">    name,</span><br><span class="line">    hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了属性简写，方法也可以简写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  <span class="function"><span class="title">method</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数提供了一种更加简洁的函数书写方式。基本语法是：</p>
<p><strong>参数 =&gt; 函数体</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 1. 通用写法 */</span> </span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123; <span class="keyword">return</span> arg1 + arg2 + arg3; &#125;</span><br></pre></td></tr></table></figure>

<p>函数体如果只有一条语句，则花括号可以省略的，返回值为该执行结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span>  num1 + num2</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// console.log: 3</span></span><br></pre></td></tr></table></figure>

<p>如果形参只有一个，则小括号可以省略</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> double = <span class="function"><span class="params">arg</span> =&gt;</span> arg * <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(double(<span class="number">3</span>)) <span class="comment">// console.log: 6</span></span><br></pre></td></tr></table></figure>

<p>箭头函数有几个使用注意点。</p>
<p>（1）箭头函数没有自己的<span style="color:#cc0000">this</span>对象，对于普通函数来说，内部的<span style="color:#cc0000"><strong>this</strong></span>指向函数运行时所在的对象，但是这一点对箭头函数不成立。它没有自己的<span style="color:#cc0000">this</span>对象，内部的<span style="color:#cc0000">this</span>就是定义时上层作用域中的<span style="color:#cc0000">this</span>。</p>
<p>（2）不可以当作构造函数，也就是说，不可以对箭头函数使用<span style="color:#cc0000">new</span>命令，否则会抛出一个错误。</p>
<p>（3）不可以使用<span style="color:#cc0000">arguments</span>对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用<span style="color:#cc0000">yield</span>命令，因此箭头函数不能用作 Generator 函数。</p>
<p><strong>不适用场合</strong></p>
<p>由于箭头函数使得<span style="color:#cc0000">this</span>从“动态”变成“静态”，下面两个场合不应该使用箭头函数。</p>
<p>第一个场合是定义对象的方法，且该方法内部包括<code>this</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  lives: <span class="number">9</span>,</span><br><span class="line">  jumps: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.lives--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>cat.jumps()</code>方法是一个箭头函数，这是错误的。调用<code>cat.jumps()</code>时，如果是普通函数，该方法内部的<code>this</code>指向<code>cat</code>；如果写成上面那样的箭头函数，使得<code>this</code>指向全局对象，因此不会得到预期结果。这是因为对象不构成单独的作用域，导致<code>jumps</code>箭头函数定义时的作用域就是全局作用域。</p>
<p>第二个场合是需要动态<code>this</code>的时候，也不应使用箭头函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;press&#x27;</span>);</span><br><span class="line">button.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.classList.toggle(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码运行时，点击按钮会报错，因为<code>button</code>的监听函数是一个箭头函数，导致里面的<code>this</code>就是全局对象。如果改成普通函数，<code>this</code>就会动态指向被点击的按钮对象。 </p>
<p>另外，如果函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值，这时也不应该使用箭头函数，而是要使用普通函数，这样可以提高代码可读性。</p>
<h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>ES6 引入 rest 参数（形式为<span style="color:#cc00ff">…变量名</span>），用于获取函数的多余参数，这样就不需要使用<span style="color:#cc00ff">arguments</span>对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 作用与 arguments 类似 */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...args</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125; </span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:red">rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</span></p>
</blockquote>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hobbies = [<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(...hobbies) <span class="comment">//[&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的合并"><a href="#数组的合并" class="headerlink" title="数组的合并"></a>数组的合并</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hobbies = [<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> interests = [<span class="string">&#x27;钓鱼&#x27;</span>,<span class="string">&#x27;摸鱼&#x27;</span>,<span class="string">&#x27;划水&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> like = [...hobbies, ...interests]</span><br><span class="line"><span class="built_in">console</span>.log(like) <span class="comment">// [&quot;抽烟&quot;, &quot;喝酒&quot;, &quot;烫头&quot;, &quot;钓鱼&quot;, &quot;摸鱼&quot;, &quot;划水&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的克隆"><a href="#数组的克隆" class="headerlink" title="数组的克隆"></a>数组的克隆</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hobbies = [<span class="string">&#x27;钓鱼&#x27;</span>,<span class="string">&#x27;摸鱼&#x27;</span>,<span class="string">&#x27;划水&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> interests = [...hobbies]</span><br><span class="line"><span class="built_in">console</span>.log(interests) <span class="comment">// [&quot;钓鱼&quot;, &quot;摸鱼&quot;, &quot;划水&quot;]</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p>
<p>ES6 引入了一种新的原始数据类型<code>Symbol</code>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<p>Symbol 值通过<code>Symbol</code>函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="comment">// &quot;symbol&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，变量<code>s</code>就是一个独一无二的值。<code>typeof</code>运算符的结果，表明变量<code>s</code>是 Symbol 数据类型，而不是字符串之类的其他类型。</p>
<p>注意，<code>Symbol</code>函数前不能使用<code>new</code>命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。</p>
<p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p>
<h2 id="Symbol内置值"><a href="#Symbol内置值" class="headerlink" title="Symbol内置值"></a>Symbol内置值</h2><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Symbol.hasInstance</td>
<td>当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用这个方法</td>
</tr>
<tr>
<td>Symbol.isConcatSpreadable</td>
<td>对象的<code>Symbol.isConcatSpreadable</code>属性等于一个布尔值，表示该对象用于<code>Array.prototype.concat()</code>时，是否可以展开。</td>
</tr>
<tr>
<td>Symbol.species</td>
<td>对象的<code>Symbol.species</code>属性，指向一个构造函数。创建衍生对象时，会使用该属性。</td>
</tr>
<tr>
<td>Symbol.match</td>
<td>对象的<code>Symbol.match</code>属性，指向一个函数。当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.replace</td>
<td>对象的<code>Symbol.replace</code>属性，指向一个方法，当该对象被<code>String.prototype.replace</code>方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.search</td>
<td>对象的<code>Symbol.search</code>属性，指向一个方法，当该对象被<code>String.prototype.search</code>方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.split</td>
<td>对象的<code>Symbol.split</code>属性，指向一个方法，当该对象被<code>String.prototype.split</code>方法调用时，会返回该方法的返回值。</td>
</tr>
<tr>
<td>Symbol.iterator</td>
<td>对象的<code>Symbol.iterator</code>属性，指向该对象的默认遍历器方法。</td>
</tr>
<tr>
<td>Symbol.toPrimitive</td>
<td>对象的<code>Symbol.toPrimitive</code>属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td>
</tr>
<tr>
<td>Symbol.toStringTag</td>
<td>对象的<code>Symbol.toStringTag</code>属性，指向一个方法。在该对象上面调用<code>Object.prototype.toString</code>方法时，如果这个属性存在，它的返回值会出现在<code>toString</code>方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制<code>[object Object]</code>或<code>[object Array]</code>中<code>object</code>后面的那个字符串。</td>
</tr>
<tr>
<td>Symbol.unscopables</td>
<td>对象的<code>Symbol.unscopables</code>属性，指向一个对象。该对象指定了使用<code>with</code>关键字时，哪些属性会被<code>with</code>环境排除。</td>
</tr>
</tbody></table>
<hr>
<h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><p>JavaScript 原有的表示“集合”的数据结构，主要是数组（<code>Array</code>）和对象（<code>Object</code>），ES6 又添加了<code>Map</code>和<code>Set</code>。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是<code>Map</code>，<code>Map</code>的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。</p>
<p>遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p>
<p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令<code>for...of</code>循环，Iterator 接口主要供<code>for...of</code>消费。</p>
<p>Iterator 的遍历过程是这样的。</p>
<p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p>
<p>（2）第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</p>
<p>（3）第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</p>
<p>（4）不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</p>
<p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。</p>
<p>下面是一个模拟<code>next</code>方法返回值的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;a&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: &quot;b&quot;, done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex &lt; array.length ?</span><br><span class="line">        &#123;<span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</span><br><span class="line">        &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个<code>makeIterator</code>函数，它是一个遍历器生成函数，作用就是返回一个遍历器对象。对数组<code>[&#39;a&#39;, &#39;b&#39;]</code>执行这个函数，就会返回该数组的遍历器对象（即指针对象）<code>it</code>。</p>
<p>指针对象的<code>next</code>方法，用来移动指针。开始时，指针指向数组的开始位置。然后，每次调用<code>next</code>方法，指针就会指向数组的下一个成员。第一次调用，指向<code>a</code>；第二次调用，指向<code>b</code>。</p>
<p><code>next</code>方法返回一个对象，表示当前数据成员的信息。这个对象具有<code>value</code>和<code>done</code>两个属性，<code>value</code>属性返回当前位置的成员，<code>done</code>属性是一个布尔值，表示遍历是否结束，即是否还有必要再一次调用<code>next</code>方法。</p>
<p>总之，调用指针对象的<code>next</code>方法，就可以遍历事先给定的数据结构。</p>
<h2 id="默认-Iterator-接口"><a href="#默认-Iterator-接口" class="headerlink" title="默认 Iterator 接口"></a>默认 Iterator 接口</h2><p>Iterator 接口的目的，就是为所有数据结构，提供了一种统一的访问机制，即<code>for...of</code>循环（详见下文）。当使用<code>for...of</code>循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。</p>
<p>一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。</p>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性，或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是“可遍历的”（iterable）。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名<code>Symbol.iterator</code>，它是一个表达式，返回<code>Symbol</code>对象的<code>iterator</code>属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内</p>
<p>原生具备 Iterator 接口的数据结构如下。</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<p>下面是另一个为对象添加 Iterator 接口的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    data: [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; self.data.length) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        value: self.data[index++],</span><br><span class="line">                        done: <span class="literal">false</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// world</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator 生成器"></a>Generator 生成器</h1><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p>
<p>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p>
<p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p>
<p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，<code>function</code>关键字与函数名之间有一个星号；二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态（<code>yield</code>在英语里的意思就是“产出”）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br><span class="line"><span class="keyword">let</span> next1 = hw.next()</span><br><span class="line"><span class="built_in">console</span>.log(next1) <span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> next2 = hw.next()</span><br><span class="line"><span class="built_in">console</span>.log(next2) <span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> next3 = hw.next()</span><br><span class="line"><span class="built_in">console</span>.log(next3) <span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> next4 = hw.next()</span><br><span class="line"><span class="built_in">console</span>.log(next4) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个 Generator 函数<code>helloWorldGenerator</code>，它内部有两个<code>yield</code>表达式（<code>hello</code>和<code>world</code>），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p>
<p>然后，Generator 函数的调用方法与普通函数一样，也是在函数名后面加上一对圆括号。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是上一章介绍的遍历器对象（Iterator Object）。</p>
<p>下一步，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式（或<code>return</code>语句）为止。换言之，Generator 函数是分段执行的，<code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行。</p>
<p>上面代码一共调用了四次<code>next</code>方法。</p>
<p>第一次调用，Generator 函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>hello</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第二次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到下一个<code>yield</code>表达式。<code>next</code>方法返回的对象的<code>value</code>属性就是当前<code>yield</code>表达式的值<code>world</code>，<code>done</code>属性的值<code>false</code>，表示遍历还没有结束。</p>
<p>第三次调用，Generator 函数从上次<code>yield</code>表达式停下的地方，一直执行到<code>return</code>语句（如果没有<code>return</code>语句，就执行到函数结束）。<code>next</code>方法返回的对象的<code>value</code>属性，就是紧跟在<code>return</code>语句后面的表达式的值（如果没有<code>return</code>语句，则<code>value</code>属性的值为<code>undefined</code>），<code>done</code>属性的值<code>true</code>，表示遍历已经结束。</p>
<p>第四次调用，此时 Generator 函数已经运行完毕，<code>next</code>方法返回对象的<code>value</code>属性为<code>undefined</code>，<code>done</code>属性为<code>true</code>。以后再调用<code>next</code>方法，返回的都是这个值。</p>
<p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p>
<h2 id="next-函数的参数"><a href="#next-函数的参数" class="headerlink" title="next()函数的参数"></a>next()函数的参数</h2><p>一般情况下，next 方法不传入参数的时候，yield 表达式的返回值是 undefined 。<strong>当 next 传入参数的时候，该参数会作为上一步yield的返回值。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sendParameter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;one:&quot;</span> + x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">yield</span> <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;two:&quot;</span> + y);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;total:&quot;</span> + (x + y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sendp = sendParameter();</span><br><span class="line">sendp.next(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;2&quot;, done: false&#125;</span></span><br><span class="line">sendp.next(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// one:20</span></span><br><span class="line"><span class="comment">// &#123;value: &quot;3&quot;, done: false&#125;</span></span><br><span class="line">sendp.next(<span class="number">30</span>);</span><br><span class="line"><span class="comment">// two:30</span></span><br><span class="line"><span class="comment">// total:50</span></span><br><span class="line"><span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Generator-函数的异步应用"><a href="#Generator-函数的异步应用" class="headerlink" title="Generator 函数的异步应用"></a>Generator 函数的异步应用</h2><p>异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。</p>
<h3 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h3><p>ES6 诞生以前，异步编程的方法，大概有下面四种。</p>
<ul>
<li>回调函数</li>
<li>事件监听</li>
<li>发布/订阅</li>
<li>Promise 对象</li>
</ul>
<p>Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>所谓”异步”，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。</p>
<p>比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。</p>
<p>相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。</p>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>JavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字<code>callback</code>，直译过来就是”重新调用”。</p>
<p>读取文件进行处理，是这样写的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>readFile</code>函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了<code>/etc/passwd</code>这个文件以后，回调函数才会执行。</p>
<p>一个有趣的问题是，为什么 Node 约定，回调函数的第一个参数，必须是错误对象<code>err</code>（如果没有错误，该参数就是<code>null</code>）？</p>
<p>原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。</p>
<h4 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h4><p>下面看看如何使用 Generator 函数，执行一个真实的异步任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&#x27;https://api.github.com/users/github&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">  <span class="built_in">console</span>.log(result.bio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了<code>yield</code>命令。</p>
<p>执行这段代码的方法如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"><span class="keyword">var</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  g.next(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用<code>next</code>方法（第二行），执行异步任务的第一阶段。由于<code>Fetch</code>模块返回的是一个 Promise 对象，因此要用<code>then</code>方法调用下一个<code>next</code>方法。</p>
<p>可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。</p>
<hr>
<h1 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h1><h2 id="Promise的含义"><a href="#Promise的含义" class="headerlink" title="Promise的含义"></a>Promise的含义</h2><p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p>
<p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise是一个对象，从它可以获取异步操作的消息。Promise提供统一的API，各种异步操作都可以用同样的方法进行处理。</p>
<p><code>Promise</code>对象有以下两个特点。</p>
<p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称Fulfilled）和<code>Rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>
<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<p>有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</p>
<p><code>Promise</code>也有一些缺点。首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。第三，当处于<code>Pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p>如果某些事件不断地反复发生，一般来说，使用stream模式是比部署<code>Promise</code>更好的选择。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p>
<p>下面代码创造了一个Promise实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>
<p><code>resolve</code>函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<p>Promise实例生成以后，可以用<code>then</code>方法分别指定<code>Resolved</code>状态和<code>Reject</code>状态的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>
<h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>Promise实例具有<code>then</code>方法，也就是说，<code>then</code>方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。前面说过，<code>then</code>方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。</p>
<p><code>then</code>方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON(<span class="string">&quot;/posts.json&quot;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面的代码使用<code>then</code>方法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>
<h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON(<span class="string">&quot;/posts.json&quot;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON(<span class="string">&quot;/post/1.json&quot;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(post.commentURL);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">comments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise产生的错误</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，一共有三个Promise对象：一个由<code>getJSON</code>产生，两个由<code>then</code>产生。它们之中任何一个抛出的错误，都会被最后一个<code>catch</code>捕获。</p>
<p>一般来说，不要在<code>then</code>方法里面定义Reject状态的回调函数（即<code>then</code>的第二个参数），总是使用<code>catch</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面<code>then</code>方法执行中的错误，也更接近同步的写法（<code>try/catch</code>）。因此，建议总是使用<code>catch</code>方法，而不使用<code>then</code>方法的第二个参数。</p>
<hr>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<p>Set本身是一个构造函数，用来生成Set数据结构。</p>
<h2 id="如何创建一个集合"><a href="#如何创建一个集合" class="headerlink" title="如何创建一个集合"></a>如何创建一个集合</h2><p>您可以通过以下方式创建 JavaScript 集：</p>
<ul>
<li>将数组传递给 <code>new Set()</code></li>
<li>创建一个新的 Set 并用于<code>add()</code>添加值</li>
<li>创建一个新的 Set 并用于<code>add()</code>添加变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a Set</span></span><br><span class="line"><span class="keyword">const</span> letters = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Set</span></span><br><span class="line"><span class="keyword">const</span> letters = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add Values to the Set</span></span><br><span class="line">letters.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">letters.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">letters.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create Variables</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a Set</span></span><br><span class="line"><span class="keyword">const</span> letters = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add Variables to the Set</span></span><br><span class="line">letters.add(a);</span><br><span class="line">letters.add(b);</span><br><span class="line">letters.add(c);</span><br></pre></td></tr></table></figure>

<h2 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h2><p>Set 结构的实例有以下属性。</p>
<p>Set 结构的实例有以下属性。</p>
<ul>
<li><span style="color:#dd0000"><code>Set.prototype.constructor</code></span>：构造函数，默认就是<span style="color:#dd0000"><code>Set</code></span>函数。</li>
<li><span style="color:#dd0000"><code>Set.prototype.size</code></span>：返回<code>Set</code>实例的成员总数。</li>
</ul>
<p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p>
<ul>
<li><span style="color:#dd0000"><code>add(value)</code></span>：添加某个值，返回<span style="color:#dd0000"> Set</span> 结构本身。</li>
<li><span style="color:#dd0000"><code>delete(value)</code></span>：删除某个值，返回一个布尔值，表示删除是否成功。</li>
<li><span style="color:#dd0000"><code>has(value)</code></span>：返回一个布尔值，表示该值是否为<span style="color:#dd0000"><code>Set</code></span>的成员。</li>
<li><span style="color:#dd0000"><code>clear()</code></span>：清除所有成员，没有返回值。</li>
</ul>
<p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p>
<ul>
<li><span style="color:#dd0000"><code>Set.prototype.keys()</code></span>：返回键名的遍历器</li>
<li><span style="color:#dd0000"><code>Set.prototype.values()</code></span>：返回键值的遍历器</li>
<li><span style="color:#dd0000"><code>Set.prototype.entries()</code></span>：返回键值对的遍历器</li>
<li><span style="color:#dd0000"><code>Set.prototype.forEach()</code></span>：使用回调函数遍历每个成员</li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>JavaScript的对象（Object），本质上是键值对的集合（Hash结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p>
<p>ES6提供了Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object结构</p>
<p>提供了“字符串—值”的对应，Map结构提供了“值—值”的对应，是一种更完善的Hash结构实现。如果你需要“键值对”的数据结构，Map比Object更合适。</p>
<p>您可以通过以下方式创建 JavaScript Map：</p>
<ul>
<li>将数组传递给 <span style="color:#dd0000"><code>new Map()</code></span></li>
<li>创建地图并使用 <span style="color:#dd0000"><code>Map.set()</code></span></li>
</ul>
<p>您可以通过将 Array 传递给<span style="color:#dd0000"><code>new Map()</code></span>构造函数来创建 Map ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a Map</span></span><br><span class="line"><span class="keyword">const</span> fruits = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;apples&quot;</span>, <span class="number">500</span>],</span><br><span class="line">  [<span class="string">&quot;bananas&quot;</span>, <span class="number">300</span>],</span><br><span class="line">  [<span class="string">&quot;oranges&quot;</span>, <span class="number">200</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<p>您可以使用以下<span style="color:#dd0000"><code>set()</code></span>方法向 Map 添加元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create a Map</span></span><br><span class="line"><span class="keyword">const</span> fruits = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set Map Values</span></span><br><span class="line">fruits.set(<span class="string">&quot;apples&quot;</span>, <span class="number">500</span>);</span><br><span class="line">fruits.set(<span class="string">&quot;bananas&quot;</span>, <span class="number">300</span>);</span><br><span class="line">fruits.set(<span class="string">&quot;oranges&quot;</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<p>该<span style="color:#dd0000"><code>set()</code></span>方法还可用于更改现有 Map 值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.set(<span class="string">&quot;apples&quot;</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Map-Methods"><a href="#Map-Methods" class="headerlink" title="Map Methods"></a>Map Methods</h2><table>
<thead>
<tr>
<th align="left">Method</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">new Map()</td>
<td align="left">创建一个新的 Map 对象</td>
</tr>
<tr>
<td align="left">set()</td>
<td align="left"><code>set</code>方法设置<code>key</code>所对应的键值，然后返回整个Map结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</td>
</tr>
<tr>
<td align="left">get()</td>
<td align="left"><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</td>
</tr>
<tr>
<td align="left">clear()</td>
<td align="left"><code>clear</code>方法清除所有成员，没有返回值。</td>
</tr>
<tr>
<td align="left">delete()</td>
<td align="left"><code>delete</code>方法删除某个键，返回true。如果删除失败，返回false。</td>
</tr>
<tr>
<td align="left">has()</td>
<td align="left"><code>has</code>方法返回一个布尔值，表示某个键是否在Map数据结构中。</td>
</tr>
<tr>
<td align="left">forEach()</td>
<td align="left">遍历Map的所有成员。</td>
</tr>
<tr>
<td align="left">entries()</td>
<td align="left">返回所有成员的遍历器。</td>
</tr>
<tr>
<td align="left">keys()</td>
<td align="left">返回键名的遍历器。</td>
</tr>
<tr>
<td align="left">values()</td>
<td align="left">返回键值的遍历器。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">size</td>
<td align="left"><code>size</code>属性返回Map结构的成员总数</td>
</tr>
</tbody></table>
<p>demo:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fruits.set(<span class="string">&quot;apples&quot;</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">fruits.get(<span class="string">&quot;apples&quot;</span>);    <span class="comment">// Returns 500</span></span><br><span class="line"></span><br><span class="line">fruits.size;</span><br><span class="line"></span><br><span class="line">fruits.delete(<span class="string">&quot;apples&quot;</span>);</span><br><span class="line"></span><br><span class="line">fruits.clear();</span><br><span class="line"></span><br><span class="line">fruits.has(<span class="string">&quot;apples&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> fruits.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> fruits.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> fruits.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reporter = &#123;</span><br><span class="line">  report: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.report(key, value);</span><br><span class="line">&#125;, reporter);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript语言的传统方法是通过构造函数，定义并生成新对象。下面是一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.x = x;</span><br><span class="line">  <span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.x + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.y + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>上面这种写法跟传统的面向对象语言（比如C++和Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p>
<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。基本上，ES6的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="built_in">this</span>.x + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">this</span>.y + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个“类”，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象。也就是说，ES5的构造函数<code>Point</code>，对应ES6的<code>Point</code>类的构造方法。</p>
<p><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p>
<p>ES6的类，完全可以看作构造函数的另一种写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> Point <span class="comment">// &quot;function&quot;</span></span><br><span class="line">Point === Point.prototype.constructor <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p>
<p>使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致。</p>
<h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.classMethod() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.classMethod()</span><br><span class="line"><span class="comment">// TypeError: foo.classMethod is not a function</span></span><br></pre></td></tr></table></figure>

<p>静态属性指的是Class本身的属性，即<code>Class.propname</code>，而不是定义在实例对象（<code>this</code>）上的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prop = <span class="number">1</span>;</span><br><span class="line">Foo.prop <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面的写法为<code>Foo</code>类定义了一个静态属性<code>prop</code>。</p>
<p>目前，只有这种写法可行，因为ES6明确规定，Class内部只有静态方法，没有静态属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两种写法都无效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 写法一</span></span><br><span class="line">  prop: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法二</span></span><br><span class="line">  <span class="keyword">static</span> prop: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prop <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h2><p>Class之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码定义了一个<code>ColorPoint</code>类，该类通过<code>extends</code>关键字，继承了<code>Point</code>类的所有属性和方法。但是由于没有部署任何代码，所以这两个类完全一样，等于复制了一个<code>Point</code>类。下面，我们在<code>ColorPoint</code>内部加上代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y, color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.color + <span class="string">&#x27; &#x27;</span> + <span class="built_in">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>constructor</code>方法和<code>toString</code>方法之中，都出现了<code>super</code>关键字，它在这里表示父类的构造函数，用来新建父类的<code>this</code>对象。</p>
<p>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。</p>
<h2 id="getter和setter"><a href="#getter和setter" class="headerlink" title="getter和setter"></a>getter和setter</h2><p>与ES5一样，在Class内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">inst.prop = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.prop</span><br><span class="line"><span class="comment">// &#x27;getter&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h1><h2 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h2><p>ES6在Number对象上面，新增一个极小的常量<code>Number.EPSILON</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON</span><br><span class="line"><span class="comment">// 2.220446049250313e-16</span></span><br><span class="line"><span class="built_in">Number</span>.EPSILON.toFixed(<span class="number">20</span>)</span><br><span class="line"><span class="comment">// &#x27;0.00000000000000022204&#x27;</span></span><br></pre></td></tr></table></figure>

<p>引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。</p>
<p>但是如果这个误差能够小于<code>Number.EPSILON</code>，我们就可以认为得到了正确结果。</p>
<p>因此，<code>Number.EPSILON</code>的实质是一个可以接受的误差范围。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withinErrorMargin</span> (<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(left - right) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line">withinErrorMargin(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">withinErrorMargin(<span class="number">0.2</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>上面的代码为浮点数运算，部署了一个误差检查函数。</p>
<h2 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h2><p>从ES5开始，在严格模式之中，八进制就不再允许使用前缀<code>0</code>表示，ES6进一步明确，要使用前缀<code>0o</code>表示。</p>
<p>如果要将<code>0b</code>和<code>0o</code>前缀的字符串数值转为十进制，要使用<code>Number</code>方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;0b111&#x27;</span>)  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;0o10&#x27;</span>)  <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h2 id="新Number-属性"><a href="#新Number-属性" class="headerlink" title="新Number 属性"></a>新Number 属性</h2><p>ES6 向 Number 对象添加了以下属性：</p>
<ul>
<li><span style="color:#dd0000"><code>EPSILON</code></span>   极小数</li>
<li><span style="color:#dd0000"><code>MIN_SAFE_INTEGER </code></span>      JavaScript 能够准确表示的整数的最小值</li>
<li><span style="color:#dd0000"><code>MAX_SAFE_INTEGER</code></span>       JavaScript 能够准确表示的整数的最大值</li>
</ul>
<p>JavaScript 能够准确表示的整数范围在<code>-2^53</code>到<code>2^53</code>之间（不含两个端点），超过这个范围，无法精确表示这个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER === <span class="number">9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === -<span class="built_in">Number</span>.MAX_SAFE_INTEGER</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER === -<span class="number">9007199254740991</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，可以看到 JavaScript 能够精确表示的极限。</p>
<h2 id="新Number-方法"><a href="#新Number-方法" class="headerlink" title="新Number 方法"></a>新Number 方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Number.isInteger()</code></td>
<td><code>Number.isInteger()</code>用来判断一个值是否为整数。需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。</td>
</tr>
<tr>
<td><code>Number.isSafeInteger()</code></td>
<td><code>Number.isSafeInteger()</code>则是用来判断一个整数是否落在Number.MAX_SAFE_INTEGER<code>和</code>Number.MIN_SAFE_INTEGER之内。即在<code>-2^53</code>到<code>2^53</code>之间</td>
</tr>
<tr>
<td><code>Number.isFinite()</code></td>
<td>用来检查一个数值是否为有限的（finite）。</td>
</tr>
<tr>
<td><code>Number.isNaN()</code></td>
<td>用来检查一个值是否为<code>NaN</code>。</td>
</tr>
<tr>
<td><code>parseInt()</code></td>
<td>转为Int类型</td>
</tr>
<tr>
<td><code>parseFloat()</code></td>
<td>转为Float类型</td>
</tr>
<tr>
<td><code>Math.trunc</code></td>
<td><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</td>
</tr>
<tr>
<td><code>Math.sign</code></td>
<td>方法用来判断一个数到底是正数、负数、还是零。它会返回五种值。参数为正数，返回+1； 参数为负数，返回-1； 参数为0，返回0； 参数为-0，返回-0; 其他值，返回NaN。</td>
</tr>
</tbody></table>
<hr>
<h1 id="对象方法的扩展"><a href="#对象方法的扩展" class="headerlink" title="对象方法的扩展"></a>对象方法的扩展</h1><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p>ES5比较两个值是否相等，只有两个运算符：相等运算符（<code>==</code>）和严格相等运算符（<code>===</code>）。它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。</p>
<p>ES6提出“Same-value equality”（同值相等）算法，用来解决这个问题。<code>Object.is</code>就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。</p>
<p>不同之处只有两个：一是<code>+0</code>不等于<code>-0</code>，二是<code>NaN</code>等于自身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Object.assign</code>方法的第一个参数是目标对象，后面的参数都是源对象。</p>
<p>注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = <span class="number">2</span>;</span><br><span class="line">obj2.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，源对象<code>obj1</code>的<code>a</code>属性的值是一个对象，<code>Object.assign</code>拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>
<p>对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; </span><br><span class="line">    a: &#123; </span><br><span class="line">        b: <span class="string">&#x27;c&#x27;</span>, </span><br><span class="line">        d: <span class="string">&#x27;e&#x27;</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> source = &#123; </span><br><span class="line">    a: &#123; </span><br><span class="line">        b: <span class="string">&#x27;hello&#x27;</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, source)</span><br><span class="line"><span class="comment">// &#123; a: &#123; b: &#x27;hello&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h3><p><code>Object.assign</code>方法有很多用处。</p>
<p><strong>（1）为对象添加属性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="built_in">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面方法通过<code>Object.assign</code>方法，将<code>x</code>属性和<code>y</code>属性添加到<code>Point</code>类的对象实例。</p>
<p><strong>（2）为对象添加方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  <span class="function"><span class="title">someMethod</span>(<span class="params">arg1, arg2</span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">anotherMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。</p>
<p><strong>（3）克隆对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（4）合并多个对象</strong></p>
<p>将多个对象合并到某个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>

<p>如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (...sources) =&gt; <span class="built_in">Object</span>.assign(&#123;&#125;, ...sources);</span><br></pre></td></tr></table></figure>

<p><strong>（5）为属性指定默认值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULTS = &#123;</span><br><span class="line">  logLevel: <span class="number">0</span>,</span><br><span class="line">  outputFormat: <span class="string">&#x27;html&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>DEFAULTS</code>对象是默认值，<code>options</code>对象是用户提供的参数。<code>Object.assign</code>方法将<code>DEFAULTS</code>和<code>options</code>合并成一个新对象，如果两者有同名属性，则<code>option</code>的属性值会覆盖<code>DEFAULTS</code>的属性值。</p>
<p>注意，由于存在深拷贝的问题，<code>DEFAULTS</code>对象和<code>options</code>对象的所有属性的值，都只能是简单类型，而不能指向另一个对象。否则，将导致<code>DEFAULTS</code>对象的该属性不起作用。</p>
<hr>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的<code>require</code>、Python 的<code>import</code>，甚至就连 CSS 都有<code>@import</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p>
<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代现有的 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>
<p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p>
<h2 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h2><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p>
<p>分别暴露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br></pre></td></tr></table></figure>

<p>统一暴露</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure>

<p>通常情况下，<code>export</code>输出的变量就是本来的名字，但是可以使用 <span style="color:#dd0000"><code>as</code></span> 关键字重命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><p>从前面的例子可以看出，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>
<p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p>
<p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line">customName(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>
<p><code>export default</code>命令用在非匿名函数前，也是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者写成</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>foo</code>函数的函数名<code>foo</code>，在模块外部是无效的。加载的时候，视同匿名函数加载。</p>
<p>下面比较一下默认输出和正常输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一组</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> crc32 <span class="keyword">from</span> <span class="string">&#x27;crc32&#x27;</span>; <span class="comment">// 输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二组</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;crc32&#125; <span class="keyword">from</span> <span class="string">&#x27;crc32&#x27;</span>; <span class="comment">// 输入</span></span><br></pre></td></tr></table></figure>

<p>上面代码的两组写法，第一组是使用<code>export default</code>时，对应的<code>import</code>语句不需要使用大括号；第二组是不使用<code>export default</code>时，对应的<code>import</code>语句需要使用大括号。</p>
<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，<code>import</code>命令后面才不用加大括号，因为只可能对应一个方法。</p>
<h2 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h2><h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（<code>*</code>）指定一个对象，所有输出值都加载在这个对象上面。</p>
<p>下面是一个<code>circle.js</code>文件，它输出两个方法<code>area</code>和<code>circumference</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，加载这个模块。</p>
<p>整体加载的写法如下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;圆面积：&#x27;</span> + circle.area(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;圆周长：&#x27;</span> + circle.circumference(<span class="number">14</span>));</span><br></pre></td></tr></table></figure>

<h3 id="模块的选择加载"><a href="#模块的选择加载" class="headerlink" title="模块的选择加载"></a>模块的选择加载</h3><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;firstName, lastName&#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的<code>import</code>命令，用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>profile.js</code>）对外接口的名称相同。</p>
<p>如果想为输入的变量重新取一个名字，<code>import</code>命令要使用<code>as</code>关键字，将输入的变量重命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; lastName <span class="keyword">as</span> surname &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器的模块加载"><a href="#浏览器的模块加载" class="headerlink" title="浏览器的模块加载"></a>浏览器的模块加载</h2><p>浏览器使用 ES6 模块的语法如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;foo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码在网页中插入一个模块<code>foo.js</code>，由于<code>type</code>属性设为<code>module</code>，所以浏览器知道这是一个 ES6 模块。</p>
<p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载外部脚本，不会造成堵塞浏览器。</p>
<p>然后把模块引入语句写在foo.js文件里</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA使用技巧二</title>
    <url>/2021/08/16/IntelliJ-IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="IDEA设置鼠标悬浮提示"><a href="#IDEA设置鼠标悬浮提示" class="headerlink" title="IDEA设置鼠标悬浮提示"></a>IDEA设置鼠标悬浮提示</h1><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/mousemovepng.png"  />

<p>效果如下：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/mousemoveshow.png"  />

<hr>
<h1 id="设置行号与方法的分隔符"><a href="#设置行号与方法的分隔符" class="headerlink" title="设置行号与方法的分隔符"></a>设置行号与方法的分隔符</h1><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/appearanceset.png"  />

<p>效果如下：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/appearancesetshow.png"  />

<hr>
<h1 id="设置自动编译"><a href="#设置自动编译" class="headerlink" title="设置自动编译"></a>设置自动编译</h1><p>Intellij Idea 默认状态为不自动编译状态，Eclipse 默认为自动编译。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/compileauto.png"  />

<hr>
<h1 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h1><p>IDEA中代码代码模板所在的位置(Editor – Live Templates 和 Editor – General – Postfix Completion)</p>
<p><strong>Live Templates(实时代码模板)功能介绍</strong></p>
<p>它的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固定模式的代码，使得开发效率大大提高，同时也可以增加个性化。最简单的例子<br>就是在Java中输入<code>sout</code>会出现<code>System.out.println()</code>;</p>
<p>已有的常用模板</p>
<p><strong>Postfix Completion 默认如下</strong></p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/postfixCompletion.png"  />

<p><strong>Live Templates默认如下</strong></p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/livetemplates.png"  />

<p>二者的区别：<code>Live Templates</code>可以自定义，而<code>Postfix Completion</code>不可以。</p>
<p><strong>常用模板</strong></p>
<p><strong>psvm</strong> : 可生成<code>main</code>方法</p>
<p><strong>sout</strong> : <code>System.out.println()</code>快捷输出</p>
<p>类似的：<strong>soutp</strong></p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutp.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutpshow.png"  />

<p><strong>soutv</strong>=<code>System.out.println("变量名 = " + 变量);</code></p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutv.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutvshow.png"  />

<p><strong>soutm</strong>=<code>System.out.println("当前类名.当前方法");</code></p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutm.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/soutmshow.png"  />

<p><strong>“abc”.sout</strong> =&gt;<code> System.out.println("abc");</code></p>
<p> <strong>list.for</strong> : 可生成集合 list 的 的 for 循环</p>
<p>输入: <strong>list.for</strong> 即可输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>又如：<strong>list.fori</strong> 或 <strong>list.forr</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>输入: <strong>list.for</strong> 即可输出</p>
<p>又如：<strong>list.fori</strong> 或 <strong>list.forr</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(String s:list)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>又如：<strong>list.fori</strong> 或 <strong>list.forr</strong></p>
<p><strong>ifn</strong> ：可生成 <code>if(xxx = null)</code><br>        类似的：<br>        <strong>inn</strong>：可生成<code>if(xxx != null)</code>或<code>xxx.nn</code>或<code>xxx.null</code></p>
<p><strong>prsf</strong> ：可生成<code>private static final</code><br>类似的：<br><strong>psf</strong>：可生成<code>public static final</code><br><strong>psfi</strong>：可生成<code>public static final int</code><br><strong>psfs</strong>：可生成<code>public static final String</code></p>
<hr>
<p><strong>自定义模板</strong></p>
<p>IDEA 提供了很多现成的 Templates。但你也可以根据自己的需要创建新的Template</p>
<ol>
<li><p>自定义模板组，并命名为CustomDefine</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/newtemplateGroup1.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/newtemplateGroup2.png"  />
</li>
<li><p>在自定义的模板组里点“+”号新建自定义模板</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/newTemplateLive1.png"  />

</li>
</ol>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/newTemplateLive2.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/newTemplateLive3.png"  />

<ol>
<li>Abbreviation:模板的缩略名称</li>
<li>Description:模板的描述</li>
<li>Template text:模板的代码片段</li>
<li>应用范围。Define</li>
</ol>
<hr>
<h1 id="生成-javadoc"><a href="#生成-javadoc" class="headerlink" title="生成 javadoc"></a>生成 javadoc</h1><p><strong>Tools</strong>—&gt;<strong>Generate JavaDoc…</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/generatejavadoc1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/generatejavadoc2.png"></p>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Locale：输入语言类型：zh_CN</span><br><span class="line">Other command line arguments：-encoding UTF-8 -charset UTF-8</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="IDEA常用快捷键Windows版"><a href="#IDEA常用快捷键Windows版" class="headerlink" title="IDEA常用快捷键Windows版"></a>IDEA常用快捷键Windows版</h1><table>
<thead>
<tr>
<th align="left"><strong>作用</strong></th>
<th align="left"><strong>快捷键</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>返回上次编辑位置（Last Edit Location)</strong></td>
<td align="left"><strong>Ctrl+Shift+Backspace</strong></td>
</tr>
<tr>
<td align="left"><strong>Back返回上次光标所在位置</strong></td>
<td align="left"><strong>Ctrl+Alt+向左箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>Forward前进到下次光标所在位置</strong></td>
<td align="left"><strong>Ctrl+Alt+向右箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索类Class</strong></td>
<td align="left"><strong>Ctrl+N</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索文件File</strong></td>
<td align="left"><strong>Ctrl+Shift+N</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索符号Symbol</strong></td>
<td align="left"><strong>Ctrl+Alt+Shift+N</strong></td>
</tr>
<tr>
<td align="left"><strong>全局搜索</strong></td>
<td align="left"><strong>Ctrl+Shift+F</strong></td>
</tr>
<tr>
<td align="left"><strong>当前文件搜索</strong></td>
<td align="left"><strong>Ctrl+F</strong></td>
</tr>
<tr>
<td align="left"><strong>执行（run)</strong></td>
<td align="left"><strong>Shift+F10</strong></td>
</tr>
<tr>
<td align="left"><strong>提示补全、导包、万能快捷键</strong></td>
<td align="left"><strong>Alt+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>单行注释</strong></td>
<td align="left"><strong>Ctrl+/</strong></td>
</tr>
<tr>
<td align="left"><strong>多行注释</strong></td>
<td align="left"><strong>Ctrl+Shift+/</strong></td>
</tr>
<tr>
<td align="left"><strong>向下复制一行(Duplicate Entire Lines）</strong></td>
<td align="left"><strong>Ctrl+D</strong></td>
</tr>
<tr>
<td align="left"><strong>删除一行或选中行</strong></td>
<td align="left"><strong>Ctrl+Y</strong></td>
</tr>
<tr>
<td align="left"><strong>向下移动行（move statement down）</strong></td>
<td align="left"><strong>Ctrl+Shift+向下箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>向上移动行（move statement up）</strong></td>
<td align="left"><strong>Ctrl+Shift+向上箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>向下开始新的一行</strong></td>
<td align="left"><strong>Shift+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>向上开始新的一行 (Start New Line before current)</strong></td>
<td align="left"><strong>Ctrl+Alt+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>查看继承关系(type hierarchy)</strong></td>
<td align="left"><strong>Ctrl+H</strong></td>
</tr>
<tr>
<td align="left"><strong>格式化代码(reformat code)</strong></td>
<td align="left"><strong>Ctrl+Alt+L</strong></td>
</tr>
<tr>
<td align="left"><strong>提示方法参数类型(Parameter Info)</strong></td>
<td align="left"><strong>Ctrl+P</strong></td>
</tr>
<tr>
<td align="left"><strong>反撤销</strong></td>
<td align="left"><strong>Ctrl+Shift+Z</strong></td>
</tr>
<tr>
<td align="left"><strong>选中数行，整体往后移动</strong></td>
<td align="left"><strong>Tab</strong></td>
</tr>
<tr>
<td align="left"><strong>选中数行，整体往前移动</strong></td>
<td align="left"><strong>Shift+Tab</strong></td>
</tr>
<tr>
<td align="left"><strong>查看类的结构：类的方法与变量</strong></td>
<td align="left"><strong>Alt+7</strong></td>
</tr>
<tr>
<td align="left"><strong>大写转小写/ 小写转大写(toggle case)</strong></td>
<td align="left"><strong>Ctrl+Shift+U</strong></td>
</tr>
<tr>
<td align="left"><strong>生成构造 器/get/set/toString</strong></td>
<td align="left"><strong>Alt+Insert</strong></td>
</tr>
<tr>
<td align="left"><strong>收起所有的方法(collapse all)</strong></td>
<td align="left"><strong>Ctrl+Shift+减号</strong></td>
</tr>
<tr>
<td align="left"><strong>打开所有方法(expand all)</strong></td>
<td align="left"><strong>Ctrl+Shift+加号</strong></td>
</tr>
<tr>
<td align="left"><strong>打开代码所在硬盘文件夹(show in explorer)</strong></td>
<td align="left"><strong>Ctrl+Shift+X（需要自己设置）</strong></td>
</tr>
<tr>
<td align="left"><strong>生成 try-catch 等(surround with)</strong></td>
<td align="left"><strong>Ctrl+Alt+T</strong></td>
</tr>
<tr>
<td align="left"><strong>查看方法的多层重写结构(method hierarchy)</strong></td>
<td align="left"><strong>Ctrl+Shift+H</strong></td>
</tr>
<tr>
<td align="left"><strong>抽取方法(Extract Method)</strong></td>
<td align="left"><strong>Ctrl+Alt+M</strong></td>
</tr>
<tr>
<td align="left"><strong>打开 最近 修改的文件(Recently Files)</strong></td>
<td align="left"><strong>Ctrl+E</strong></td>
</tr>
<tr>
<td align="left"><strong>关闭当前打开的代码栏(close)</strong></td>
<td align="left"><strong>Ctrl+F4</strong></td>
</tr>
<tr>
<td align="left"><strong>关闭其他所有代码栏(close others)</strong></td>
<td align="left"><strong>Ctrl+Shift+O（需要自己设置）</strong></td>
</tr>
<tr>
<td align="left"><strong>快速搜索类中的错误(next highlighted error)</strong></td>
<td align="left"><strong>F2</strong></td>
</tr>
<tr>
<td align="left"><strong>选择要粘贴的内容(Show in Explorer)</strong></td>
<td align="left"><strong>Ctrl+Shift+V</strong></td>
</tr>
<tr>
<td align="left"><strong>查找方法在哪里被调用(Call Hierarchy)</strong></td>
<td align="left"><strong>Ctrl+Alt+H</strong></td>
</tr>
</tbody></table>
<hr>
<h1 id="IDEA常用快捷键Mac版"><a href="#IDEA常用快捷键Mac版" class="headerlink" title="IDEA常用快捷键Mac版"></a>IDEA常用快捷键Mac版</h1><table>
<thead>
<tr>
<th align="left"><strong>作用</strong></th>
<th align="left"><strong>快捷键</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>返回上次编辑位置（Last Edit Location)</strong></td>
<td align="left"><strong>command+Shift+Delete</strong></td>
</tr>
<tr>
<td align="left"><strong>Back返回上次光标所在位置</strong></td>
<td align="left"><strong>Command+[</strong></td>
</tr>
<tr>
<td align="left"><strong>Forward前进到下次光标所在位置</strong></td>
<td align="left"><strong>Command+]</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索类Class</strong></td>
<td align="left"><strong>Command+O</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索文件File</strong></td>
<td align="left"><strong>Command+shift+O</strong></td>
</tr>
<tr>
<td align="left"><strong>搜索符号Symbol</strong></td>
<td align="left"><strong>Command+option+O</strong></td>
</tr>
<tr>
<td align="left"><strong>全局搜索</strong></td>
<td align="left"><strong>Command+option+F</strong></td>
</tr>
<tr>
<td align="left"><strong>当前文件搜索</strong></td>
<td align="left"><strong>Command+F</strong></td>
</tr>
<tr>
<td align="left"><strong>执行（run)</strong></td>
<td align="left"><strong>option+R</strong></td>
</tr>
<tr>
<td align="left"><strong>提示补全、导包、万能快捷键</strong></td>
<td align="left"><strong>option+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>单行注释</strong></td>
<td align="left"><strong>Command+/</strong></td>
</tr>
<tr>
<td align="left"><strong>多行注释</strong></td>
<td align="left"><strong>Command+Option+/</strong></td>
</tr>
<tr>
<td align="left"><strong>向下复制一行(Duplicate Entire Lines）</strong></td>
<td align="left"><strong>Command+D</strong></td>
</tr>
<tr>
<td align="left"><strong>删除一行或选中行</strong></td>
<td align="left"><strong>Ctrl+Y</strong></td>
</tr>
<tr>
<td align="left"><strong>向下移动行（move statement down）</strong></td>
<td align="left"><strong>Command+option+向下箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>向上移动行（move statement up）</strong></td>
<td align="left"><strong>command+option+向上箭头</strong></td>
</tr>
<tr>
<td align="left"><strong>向下开始新的一行</strong></td>
<td align="left"><strong>Shift+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>向上开始新的一行 (Start New Line before current)</strong></td>
<td align="left"><strong>Command+option+Enter</strong></td>
</tr>
<tr>
<td align="left"><strong>查看继承关系(type hierarchy)</strong></td>
<td align="left"><strong>Ctrl+H</strong></td>
</tr>
<tr>
<td align="left"><strong>格式化代码(reformat code)</strong></td>
<td align="left"><strong>Command+option+L</strong></td>
</tr>
<tr>
<td align="left"><strong>提示方法参数类型(Parameter Info)</strong></td>
<td align="left"><strong>Command+P</strong></td>
</tr>
<tr>
<td align="left"><strong>反撤销</strong></td>
<td align="left"><strong>Command+Shift+Z</strong></td>
</tr>
<tr>
<td align="left"><strong>选中数行，整体往后移动</strong></td>
<td align="left"><strong>Tab</strong></td>
</tr>
<tr>
<td align="left"><strong>选中数行，整体往前移动</strong></td>
<td align="left"><strong>Shift+Tab</strong></td>
</tr>
<tr>
<td align="left"><strong>查看类的结构：类的方法与变量</strong></td>
<td align="left"><strong>command+7</strong></td>
</tr>
<tr>
<td align="left"><strong>大写转小写/ 小写转大写(toggle case)</strong></td>
<td align="left"><strong>Command+Shift+U</strong></td>
</tr>
<tr>
<td align="left"><strong>生成构造 器/get/set/toString</strong></td>
<td align="left"><strong>Command+N</strong></td>
</tr>
<tr>
<td align="left"><strong>收起所有的方法(collapse all)</strong></td>
<td align="left"><strong>Command+Shift+减号</strong></td>
</tr>
<tr>
<td align="left"><strong>打开所有方法(expand all)</strong></td>
<td align="left"><strong>Command+Shift+加号</strong></td>
</tr>
<tr>
<td align="left"><strong>打开代码所在硬盘文件夹(show in explorer)</strong></td>
<td align="left"><strong>Command+Shift+X（需要自己设置）</strong></td>
</tr>
<tr>
<td align="left"><strong>生成 try-catch 等(surround with)</strong></td>
<td align="left"><strong>Command+option+T</strong></td>
</tr>
<tr>
<td align="left"><strong>查看方法的多层重写结构(method hierarchy)</strong></td>
<td align="left"><strong>Command+Shift+H</strong></td>
</tr>
<tr>
<td align="left"><strong>抽取方法(Extract Method)</strong></td>
<td align="left"><strong>Command+option+M</strong></td>
</tr>
<tr>
<td align="left"><strong>打开 最近 修改的文件(Recently Files)</strong></td>
<td align="left"><strong>Ctrl+E</strong></td>
</tr>
<tr>
<td align="left"><strong>关闭当前打开的代码栏(close)</strong></td>
<td align="left"><strong>Command+W</strong></td>
</tr>
<tr>
<td align="left"><strong>关闭其他所有代码栏(close others)</strong></td>
<td align="left"><strong>Ctrl+Shift+O（需要自己设置）</strong></td>
</tr>
<tr>
<td align="left"><strong>快速搜索类中的错误(next highlighted error)</strong></td>
<td align="left"><strong>F2</strong></td>
</tr>
<tr>
<td align="left"><strong>选择要粘贴的内容(Show in Explorer)</strong></td>
<td align="left"><strong>Ctrl+Shift+V</strong></td>
</tr>
<tr>
<td align="left"><strong>查找方法在哪里被调用(Call Hierarchy)</strong></td>
<td align="left"><strong>Ctrl+Alt+H</strong></td>
</tr>
</tbody></table>
<hr>
<h1 id="Alt-Enter快捷键功能"><a href="#Alt-Enter快捷键功能" class="headerlink" title="Alt+Enter快捷键功能"></a>Alt+Enter快捷键功能</h1><h2 id="自动创建函数"><a href="#自动创建函数" class="headerlink" title="自动创建函数"></a>自动创建函数</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter2.png"></p>
<hr>
<h2 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter3.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter4.png"></p>
<hr>
<h2 id="为接口创建实现类和方法"><a href="#为接口创建实现类和方法" class="headerlink" title="为接口创建实现类和方法"></a>为接口创建实现类和方法</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter5.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter6.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter7.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnter8.png"></p>
<hr>
<h2 id="单词拼写"><a href="#单词拼写" class="headerlink" title="单词拼写"></a>单词拼写</h2><p>如果idea检查到我们的单词拼错了会有下波浪线的提示，使用alt+enter的快捷键可以帮我们进行修正</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnterWord1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altEnterWord2.png"></p>
<hr>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altenterImport1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/altenterImport2.png"></p>
<hr>
<h1 id="寻找代码修改轨迹"><a href="#寻找代码修改轨迹" class="headerlink" title="寻找代码修改轨迹"></a>寻找代码修改轨迹</h1><h2 id="annotate"><a href="#annotate" class="headerlink" title="annotate"></a>annotate</h2><p>使用annotate，可以在某个文件内部查看哪一行代码是谁提交的，而且还有提交时间、提交备注信息、提交人姓名、提交的版本号、第几次提交等</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/annotate1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/annotate2.png"></p>
<hr>
<h2 id="Revert-Changes撤销修改"><a href="#Revert-Changes撤销修改" class="headerlink" title="Revert  Changes撤销修改"></a>Revert  Changes撤销修改</h2><p>想撤销对当前文件的修改，在空白处使用快捷键<strong>Ctrl+alt+Z</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/revert.png"></p>
<hr>
<h2 id="Local-History"><a href="#Local-History" class="headerlink" title="Local History"></a>Local History</h2><p>在IntelliJ IDEA中一不小心将你本地代码给覆盖了，或者忘记了修改某些地方，出现了一些无法修复的异常，这个时候可以通过历史记录回到以前未修改前，并且记录的机制是修改文件会触发记录的时间点，所以很多天以前的记录也能找到</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/localhistory1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/localhistory2.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E4%BA%8C/localhistory3.png"></p>
]]></content>
      <categories>
        <category>IDEA使用技巧</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Stream使用</title>
    <url>/2022/01/09/Java-8-Stream%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Stream简介"><a href="#Stream简介" class="headerlink" title="Stream简介"></a>Stream简介</h1><p>我们先来看看Java里面是怎么定义Stream的：</p>
<div class="note no-icon primary"><p>A sequence of elements supporting sequential and parallel aggregate operations.</p>
</div>

<p>我们来解读一下上面的那句话：</p>
<ol>
<li>Stream是元素的集合，这点让Stream看起来用些类似Iterator；</li>
<li>可以支持顺序和并行的对原Stream进行汇聚的操作；</li>
</ol>
<p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p>
<p>Stream有哪些特点：</p>
<ul>
<li><code>元素的序列</code>：与集合一样可以访问里面的元素，集合讲的是数据，而流讲的是操作，比如：filter、map</li>
<li><code>源</code>: 流也需要又一个提供数据的源，顺序和生成时的顺序一致</li>
<li><code>数据的操作</code>：流支持类似于数据库的操作，支持顺序或者并行处理数据；上面的例子用流来实现会更加的简洁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getGt5Data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>)</span><br><span class="line">            .filter(num -&gt; num &gt; <span class="number">5</span>)</span><br><span class="line">            .collect(toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>流水线操作</code>：很多流的方法本身也会返回一个流，这样可以把多个操作连接起来，形成流水线操作</p>
</li>
<li><p><code>内部迭代</code>：与以往的迭代不同，流使用的内部迭代，用户只需要专注于数据处理</p>
</li>
<li><p><code>只能遍历一次</code>： 遍历完成之后我们的流就已经消费完了，再次遍历的话会抛出异常</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/java8Stream/JavaStream.png"  />

</li>
</ul>
<hr>
<h2 id="使用Stream"><a href="#使用Stream" class="headerlink" title="使用Stream"></a>使用Stream</h2><p>Java8中的Stream定义了很多方法，基本可以把他们分为两类：中间操作、终端操作；要使用一个流一般都需要三个操作：</p>
<ol>
<li>定义一个数据源</li>
<li>定义中间操作形成流水线</li>
<li>定义终端操作，执行流水线，生成计算结果</li>
</ol>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>什么是操作符呢？操作符就是对数据进行的一种处理工作，一道加工程序；就好像工厂的工人对流水线上的产品进行一道加工程序一样。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/java8Stream/CoreStreamOperations.png"  />

<p><strong>Stream</strong>的操作符大体上分为两种：<strong>中间操作符</strong>和<strong>终止操作符</strong></p>
<h3 id="中间操作符"><a href="#中间操作符" class="headerlink" title="中间操作符"></a>中间操作符</h3><p>对于数据流来说，中间操作符在执行制定处理程序后，数据流依然可以传递给下一级的操作符。</p>
<p>中间操作符包含<code>8种</code>(排除了parallel,sequential,这两个操作并不涉及到对数据流的加工操作)：</p>
<blockquote>
<ol>
<li><code>map</code>(mapToInt,mapToLong,mapToDouble) 转换操作符，把比如<code>A->B</code>，这里默认提供了转int，long，double的操作符。</li>
<li><code>flatmap</code>(flatmapToInt,flatmapToLong,flatmapToDouble) 拍平操作比如把 int[]{2,3,4} 拍平 变成 2，3，4 也就是从原来的一个数据变成了3个数据，这里默认提供了拍平成int,long,double的操作符。</li>
<li><code>limit</code>限流操作，比如数据流中有10个 我只要出前3个就可以使用。</li>
<li><code>distint</code>去重操作，对重复元素去重，底层使用了equals方法。</li>
<li><code>filter</code>过滤操作，把不想要的数据过滤。</li>
<li><code>peek</code>挑出操作，如果想对数据进行某些操作，如：读取、编辑修改等。</li>
<li><code>skip</code>跳过操作，跳过某些元素。</li>
<li><code>sorted</code>(unordered)排序操作，对元素排序，前提是实现Comparable接口，当然也可以自定义比较器。</li>
</ol>
</blockquote>
<h3 id="终止操作符"><a href="#终止操作符" class="headerlink" title="终止操作符"></a>终止操作符</h3><p>数据经过中间加工操作，就轮到终止操作符上场了；终止操作符就是用来对数据进行收集或者消费的，数据到了终止操作这里就不会向下流动了，终止操作符只能使用一次。</p>
<blockquote>
<ol>
<li><code>collect</code>收集操作，将所有数据收集起来，这个操作非常重要，官方的提供的Collectors 提供了非常多收集器，可以说Stream 的核心在于Collectors。</li>
<li><code>count</code>统计操作，统计最终的数据个数。</li>
<li><code>findFirst</code>、<code>findAny</code>查找操作，查找第一个、查找任何一个 返回的类型为Optional。</li>
<li><code>noneMatch</code>、<code>allMatch</code>、<code>anyMatch</code>匹配操作，数据流中是否存在符合条件的元素 返回值为bool 值。</li>
<li><code>min</code>、<code>max</code>最值操作，需要自定义比较器，返回数据流中最大最小的值。</li>
<li><code>reduce </code>约操作，将整个数据流的值规约为一个值，count、min、max底层就是使用reduce。</li>
<li><code>forEach</code>、<code>forEachOrdered</code>遍历操作，这里就是对最终的数据进行消费了。</li>
<li><code>toArray</code>数组操作，将数据流的元素转换成数组。</li>
</ol>
</blockquote>
<p>这里只介绍了Stream，并没有涉及到<strong>IntStream</strong>、<strong>LongStream</strong>、<strong>DoubleStream</strong>，这三个流实现了一些特有的操作符，这里不做介绍。</p>
<hr>
<h1 id="创建流Stream"><a href="#创建流Stream" class="headerlink" title="创建流Stream"></a>创建流Stream</h1><h2 id="Stream-of"><a href="#Stream-of" class="headerlink" title="Stream.of()"></a>Stream.of()</h2><p>通过<code>Stream类</code>中的静态方法 <code>of()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">stream.forEach(p -&gt; System.out.println(p));</span><br></pre></td></tr></table></figure>

<h2 id="Stream-of-array"><a href="#Stream-of-array" class="headerlink" title="Stream.of(array)"></a>Stream.of(array)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of( <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125; );</span><br><span class="line">stream.forEach(p -&gt; System.out.println(p));</span><br></pre></td></tr></table></figure>

<h2 id="List-stream"><a href="#List-stream" class="headerlink" title="List.stream()"></a>List.stream()</h2><p>通过<code>Collection 系列集合</code>提供的<code>串行流：stream()</code>、<code>并行流： paralleStream()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">      list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">stream.forEach(p -&gt; System.out.println(p));</span><br></pre></td></tr></table></figure>

<h2 id="Stream-generate-or-Stream-iterate"><a href="#Stream-generate-or-Stream-iterate" class="headerlink" title="Stream.generate() or Stream.iterate()"></a>Stream.generate() or Stream.iterate()</h2><p><strong>使用Stream类的静态方法 iterate 创建无限流</strong><br>iterate方法：</p>
<p>Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</p>
<p>参数 seed 起始值，UnaryOperator 函数式接口 继承Function&lt;T,T&gt; 此时参数类型符合返回值类型一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream4 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream4.limit(<span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p><strong>使用<code>Stream</code>类的静态方法 <code>generate</code>创建<code>无限流</code></strong></p>
<p>generate方法参数为<code>Supplier&lt;T&gt;</code> <code>供给型接口</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; randomNumbers = Stream</span><br><span class="line">      .generate(() -&gt; (<span class="keyword">new</span> Random()).nextInt(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">randomNumbers.limit(<span class="number">20</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="Stream-of-String-chars-or-tokens"><a href="#Stream-of-String-chars-or-tokens" class="headerlink" title="Stream of String chars or tokens"></a>Stream of String chars or tokens</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream stream = <span class="string">&quot;12345_abcdefg&quot;</span>.chars();</span><br><span class="line">stream.forEach(p -&gt; System.out.println(p));</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Stream中间操作"><a href="#Stream中间操作" class="headerlink" title="Stream中间操作"></a>Stream中间操作</h1><p>中间操作会返回另外一个流，这样可以让多个操作连接起来形成一个流水线的操作，<mark class="label danger">只要不触发终端操作，那么这个中间操作都不会实际执行。</mark></p>
<p><strong>注意点</strong>：</p>
<ul>
<li>若只有中间操作，则<code>不会执行</code></li>
<li>只有终止操作执行后，所有的中间操作<code>一次执行</code>，此时就称为<code>延迟加载</code>或者<code>惰性求值</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取age&gt;30的Stu元素</span></span><br><span class="line">  <span class="comment">//若只有中间操作，则不会执行</span></span><br><span class="line">  Stream&lt;Stu&gt; stuStream = stuList.stream().filter((i) -&gt; &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;验证是否是延迟加载&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>  i.getAge() &gt; <span class="number">40</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<mark class="label danger">此时只有中间操作，无终止操作，无结果，控制台无输出。</mark>

<p>在继续之前，让我们先构建一个<code>List</code>字符串。我们将在此列表上构建我们的示例，以便于关联和理解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; memberNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">memberNames.add(<span class="string">&quot;Amitabh&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Shekhar&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Aman&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Rahul&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Shahrukh&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Salman&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Yana&quot;</span>);</span><br><span class="line">memberNames.add(<span class="string">&quot;Lokesh&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>该<code>filter()</code>方法接受一个Predicate来过滤流的所有元素。此操作是中间操作，它使我们能够对结果调用另一个流操作（例如forEach()）。</p>
<p>Lambda表达式写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memberNames.stream().filter((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">                    .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>非Lambda表达式写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memberNames.stream().filter((s) -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> s.startsWith(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Amitabh</span><br><span class="line">Aman</span><br></pre></td></tr></table></figure>

<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p><code>map()</code>中间操作的流中的每个元素转换成经由给定功能的另一个对象。</p>
<p>以下示例将每个字符串转换为大写字符串。但我们也可以使用<code>map()</code>将对象转换为另一种类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memberNames.stream().filter((s) -&gt; s.startsWith(<span class="string">&quot;A&quot;</span>))</span><br><span class="line">                  .map(String::toUpperCase)</span><br><span class="line">                  .forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AMITABH</span><br><span class="line">AMAN</span><br></pre></td></tr></table></figure>

<h2 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap()"></a>flatmap()</h2><p>flatMap()是两步过程，即<strong>map() + Flattening</strong>。它有助于转换<code>Collection&lt;Collection&lt;T&gt;&gt;</code>为<code>Collection&lt;T&gt;</code></p>
<ul>
<li>flatmap 作用就是将元素拍平拍扁 ，将拍扁的元素重新组成Stream，并将这些Stream 串行合并成一条Stream</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flatMap() 示例</span><br><span class="line">List&lt;Integer&gt; list1 = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">List&lt;Integer&gt; list3 = Arrays.asList(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"> </span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; listOfLists = Arrays.asList(list1, list2, list3);</span><br><span class="line"> </span><br><span class="line">List&lt;Integer&gt; listOfAllIntegers = listOfLists.stream()</span><br><span class="line">                            .flatMap(x -&gt; x.stream())</span><br><span class="line">                            .collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">System.out.println(listOfAllIntegers);      <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure>

<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h2><p>对Stream的排序通过<code>sorted</code>进行，它比数组的排序更强之处在于你可以首先对Stream进行各类map、filter、limit、skip甚至distinct来减少元素数量后再排序，这能帮助程序明显缩短执行时间。</p>
<p>该<code>sorted()</code>方法是返回流的排序视图的中间操作。除非我们传递自定义Comparator ，否则流中的元素按自然顺序排序。</p>
<h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;cc&quot;</span>,<span class="string">&quot;哈哈&quot;</span>,<span class="string">&quot;啊&quot;</span>);</span><br><span class="line"><span class="comment">//根据String类中Comparable方式进行默认排序，即compare to()方法</span></span><br><span class="line">stringList.stream()</span><br><span class="line">        .sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aa</span><br><span class="line">bb</span><br><span class="line">cc</span><br><span class="line">dd</span><br><span class="line">哈哈</span><br><span class="line">啊</span><br></pre></td></tr></table></figure>

<h3 id="指定排序"><a href="#指定排序" class="headerlink" title="指定排序"></a>指定排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sorted(Comparator com)</span><br></pre></td></tr></table></figure>

<ul>
<li>根据<code>实现Comparator接口的指定方法</code>进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stuList.stream().sorted(</span><br><span class="line">            (a,b) -&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (a.getAge().equals(b.getAge()))&#123;</span><br><span class="line">                    <span class="keyword">return</span> a.getName().compareTo(b.getName());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> a.getAge().compareTo(b.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="limit"><a href="#limit" class="headerlink" title="limit()"></a>limit()</h2><p><strong>语法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span></span><br></pre></td></tr></table></figure>

<p>这里<code>maxSize</code>应该限制流的元素数量；并且方法返回值是一个新的，<code>Stream</code>由从原始流中挑选的元素组成。</p>
<p><strong>示例 1：Java 程序从无限的偶数流中获取前 10 个偶数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; evenNumInfiniteStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; newList = evenNumInfiniteStream.limit(<span class="number">10</span>)</span><br><span class="line">                      .collect(Collectors.toList());</span><br><span class="line">    System.out.println(newList);</span><br></pre></td></tr></table></figure>

<p>程序输出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]</span><br></pre></td></tr></table></figure>

<h2 id="skip"><a href="#skip" class="headerlink" title="skip()"></a>skip()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法语法</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span></span><br></pre></td></tr></table></figure>

<p>返回一个<code>跳过前n个元素</code>的流，若流中<code>元素不足n个</code>，则返回一个<code>空流</code>。</p>
<p>如果为负，该方法可能会抛出<strong>IllegalArgumentException</strong><code>n</code>。</p>
<p><strong>示例：从无限的偶数流中跳过前 5 个偶数，然后将接下来的 10 个偶数收集到一个新的流中。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; evenNumInfiniteStream = Stream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>);</span><br><span class="line">         </span><br><span class="line">        List&lt;Integer&gt; newList = evenNumInfiniteStream</span><br><span class="line">                .skip(<span class="number">5</span>)</span><br><span class="line">                .limit(<span class="number">10</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br></pre></td></tr></table></figure>

<p>程序输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]</span><br></pre></td></tr></table></figure>

<h2 id="distinct"><a href="#distinct" class="headerlink" title="distinct()"></a>distinct()</h2><p><code>distinct()</code>去重原理为通过流所生成元素的<code>hashCode()</code>和<code>equals()</code>来去除<code>重复</code>元素</p>
<h3 id="字符串或包装类型去重"><a href="#字符串或包装类型去重" class="headerlink" title="字符串或包装类型去重"></a>字符串或包装类型去重</h3><p>很容易从一个字符串集合或包装类型集合中找到重复的元素，因为这些类型实现了<code>equals()</code>方法</p>
<p><strong>示例：使用 Stream 遍历所有<code>String</code>元素并使用终端操作将不同的<code>String</code>元素收集到另一个元素中。<code>List Stream.collect()</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找所有不同的字符串</span></span><br><span class="line">Collection&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Get collection without duplicate i.e. distinct only</span></span><br><span class="line">List&lt;String&gt; distinctElements = list.stream()</span><br><span class="line">                        .distinct()</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Let&#x27;s verify distinct elements</span></span><br><span class="line">System.out.println(distinctElements);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[A, B, C, D]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="重写equals-方法和hashCode-方法的复杂类型去重"><a href="#重写equals-方法和hashCode-方法的复杂类型去重" class="headerlink" title="重写equals() 方法和hashCode() 方法的复杂类型去重"></a>重写<code>equals()</code> 方法和<code>hashCode()</code> 方法的复杂类型去重</h3><p>让我们为我们的示例创建一个 Person 类。它有三个领域：<code>id</code>，<code>fname</code>和<code>lname</code>。如果两个人相同，则他们<code>id</code>是相等的。</p>
<div class="note primary no-icon"><p>不要忘记覆盖该类型的<code>equals()</code>和<code>hashCode()</code>方法</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String fname;</span><br><span class="line">    <span class="keyword">private</span> String lname;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.fname = fname;</span><br><span class="line">        <span class="keyword">this</span>.lname = lname;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFname</span><span class="params">(String fname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fname = fname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLname</span><span class="params">(String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lname = lname;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person other = (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, other.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [id=&quot;</span> + id + <span class="string">&quot;, fname=&quot;</span> + fname + <span class="string">&quot;, lname=&quot;</span> + lname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们测试一下代码。我们创建<code>List</code>. 然后我们将使用该<code>Stream.distinct()</code>方法查找具有唯一性的 Person 类的所有实例<code>id</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java 程序通过 id 查找不同的人</span></span><br><span class="line">Person lokeshOne = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person lokeshTwo = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person lokeshThree = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person brianOne = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Clooney&quot;</span>);</span><br><span class="line">Person brianTwo = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Clooney&quot;</span>);</span><br><span class="line">Person alex = <span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Kolen&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Add some random persons</span></span><br><span class="line">Collection&lt;Person&gt; list = Arrays.asList(alex, brianOne, brianTwo, lokeshOne, lokeshTwo, lokeshThree);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get distinct people by id</span></span><br><span class="line">List&lt;Person&gt; distinctElements = list.stream()</span><br><span class="line">            .distinct()</span><br><span class="line">            .collect( Collectors.toList() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let&#x27;s verify distinct people</span></span><br><span class="line">System.out.println( distinctElements );</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输出</span><br><span class="line">[</span><br><span class="line">Person [id=1, fname=Lokesh, lname=Gupta],</span><br><span class="line">Person [id=2, fname=Brian, lname=Clooney],</span><br><span class="line">Person [id=3, fname=Alex, lname=Kolen]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="自定义的复杂类型去重"><a href="#自定义的复杂类型去重" class="headerlink" title="自定义的复杂类型去重"></a>自定义的复杂类型去重</h3><p>有时，我们希望根据自定义逻辑找到不同的项目。</p>
<p>例如，我们可能需要找到所有可能有不同<code>id</code>但全名相同的人。在这种情况下，我们必须根据<code>Person</code>类<code>fname</code>和<code>lname</code>字段检查相等性。</p>
<p>Java 没有任何用于在使用提供的用户函数比较对象时查找不同对象的本机 API。因此，我们将创建自己的实用程序函数，然后使用它。</p>
<p><strong>distinctByKey()</strong></p>
<p>该<code>distinctByKey()</code>函数使用一个<code>ConcurrentHashMap</code>实例来确定是否存在具有相同值的现有键——其中键是从函数引用中获取的。</p>
<p>此函数的参数是一个lambda 表达式，用于生成映射键以进行比较。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">按类字段查找不同的实用函数<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Object&gt; keyExtractor)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以将任何字段 getter 方法作为方法参数传递，这将导致字段值充当映射的键。</p>
<p><strong>示例：</strong></p>
<p>检查我们<code>distinctByKey(p -> p.getFname() + " " + p.getLname())</code>在<code>filter()</code>方法中的使用方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java 程序按姓名查找不同的人Person lokeshOne = <span class="keyword">new</span> Person(<span class="number">1</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person lokeshTwo = <span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person lokeshThree = <span class="keyword">new</span> Person(<span class="number">3</span>, <span class="string">&quot;Lokesh&quot;</span>, <span class="string">&quot;Gupta&quot;</span>);</span><br><span class="line">Person brianOne = <span class="keyword">new</span> Person(<span class="number">4</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Clooney&quot;</span>);</span><br><span class="line">Person brianTwo = <span class="keyword">new</span> Person(<span class="number">5</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Clooney&quot;</span>);</span><br><span class="line">Person alex = <span class="keyword">new</span> Person(<span class="number">6</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Kolen&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Add some random persons</span></span><br><span class="line">Collection&lt;Person&gt; list = Arrays.asList(alex, brianOne, brianTwo, lokeshOne, lokeshTwo, lokeshThree);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get distinct objects by key</span></span><br><span class="line">List&lt;Person&gt; distinctElements = list.stream()</span><br><span class="line">            .filter( distinctByKey(p -&gt; p.getFname() + <span class="string">&quot; &quot;</span> + p.getLname()) )</span><br><span class="line">            .collect( Collectors.toList() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Again verify distinct people</span></span><br><span class="line">System.out.println( distinctElements );</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输出[</span><br><span class="line">Person [id=1, fname=Lokesh, lname=Gupta],</span><br><span class="line">Person [id=4, fname=Brian, lname=Clooney],</span><br><span class="line">Person [id=6, fname=Alex, lname=Kolen]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h2><p> <code>peek</code>：如同于map，能得到流中的每一个元素。但map接收的是一个Function表达式，有返回值；而peek接收的是Consumer表达式，没有返回值。</p>
<p><code>peek()</code>存在主要是为了支持<strong>调试</strong></p>
<p>我们看下debug用途的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>).filter(e -&gt; e.length() &gt; <span class="number">3</span>)</span><br><span class="line">                .peek(e -&gt; System.out.println(<span class="string">&quot;Filtered value: &quot;</span> + e))</span><br><span class="line">                .map(String::toUpperCase)</span><br><span class="line">                .peek(e -&gt; System.out.println(<span class="string">&quot;Mapped value: &quot;</span> + e))</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>上面的例子输出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Filtered value: three</span><br><span class="line">Mapped value: THREE</span><br><span class="line">Filtered value: four</span><br><span class="line">Mapped value: FOUR</span><br></pre></td></tr></table></figure>

<p>上面的例子我们输出了stream的中间值，方便我们的调试。</p>
<p>为什么只作为debug使用呢？我们再看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>).peek(u -&gt; u.toUpperCase()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>上面的例子我们使用peek将element转换成为upper case。然后输出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line">four</span><br></pre></td></tr></table></figure>

<p>可以看到stream中的元素并没有被转换成大写格式。</p>
<p>再看一个map的对比：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>,<span class="string">&quot;four&quot;</span>).map(u -&gt; u.toUpperCase()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">ONE</span><br><span class="line">TWO</span><br><span class="line">THREE</span><br><span class="line">FOUR</span><br></pre></td></tr></table></figure>

<p>可以看到map是真正的对元素进行了转换。</p>
<hr>
<h1 id="Stream终止操作"><a href="#Stream终止操作" class="headerlink" title="Stream终止操作"></a>Stream终止操作</h1><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h2><p><code>Stream forEach(Consumer action)</code>对流的每个元素执行一个操作。Stream forEach(Consumer action) 是一个终端操作，即它可以遍历流以产生结果或副作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memberNames.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p><strong>方法语法</strong></p>
<p>该<code>forEach()</code>方法的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span></span><br></pre></td></tr></table></figure>

<p><code>Consumer</code>是一个<a href="https://howtodoinjava.com/java8/functional-interface-tutorial/">功能接口</a>，<code>action</code>表示要对 Stream 中的每个元素执行的<a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/package-summary.html#NonInterference">非干扰操作</a>。</p>
<p><strong>特点：</strong></p>
<ul>
<li>该<code>forEach()</code>方法是<strong>终端操作</strong>。这意味着它不再返回<code>Stream</code>。</li>
<li>执行<code>forEach()</code>后，认为流管道已消耗，不能再使用 Stream。</li>
<li>如果我们需要再次遍历相同的数据源（支持 Stream 的集合），我们必须返回数据源以获取新的流。</li>
<li>对于<em>并行流</em>，该<code>forEach()</code>操作不保证流中元素的顺序，因为这样做会牺牲<a href="https://howtodoinjava.com/java/multi-threading/concurrency-vs-parallelism/">并行性</a>的好处。</li>
<li><strong>使用 Lambda 运算符：</strong>在stream().forEach() 中，使用了 lambda，因此不允许对循环外的变量进行操作。只能对相关集合进行操作。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; arr1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        arr1.add(<span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line">        arr1.add(<span class="string">&quot;For&quot;</span>);</span><br><span class="line">        arr1.add(<span class="string">&quot;Geeks&quot;</span>);</span><br><span class="line">        arr1.stream().forEach(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// this will cause an error</span></span><br><span class="line">            count++;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// print all elements</span></span><br><span class="line">            System.out.print(s);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream().forEach( System.out::println );</span><br></pre></td></tr></table></figure>

<h2 id="forEachOrdered"><a href="#forEachOrdered" class="headerlink" title="forEachOrdered()"></a>forEachOrdered()</h2><p>同forEach()</p>
<ul>
<li>forEachOrdered 适用用于并行流的情况下进行迭代，能保证迭代的有序性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list &#x3D; Arrays.asList(2, 4, 6, 8, 10);</span><br><span class="line">list.stream().parallel().forEach( System.out::println ); &#x2F;&#x2F;1 </span><br><span class="line">list.stream().parallel().forEachOrdered( System.out::println ); &#x2F;&#x2F;2</span><br></pre></td></tr></table></figure>

<p>In the above example, both statements guarantee that output will be 2, 4, 6, 8, 10.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;forEach()</span><br><span class="line">6</span><br><span class="line">10</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">2 </span><br><span class="line">&#x2F;&#x2F;forEachOrdered()</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><p>该<code>toArray()</code>方法返回一个包含给定流元素的数组。这是<strong>终端操作</strong>。</p>
<p><strong>示例 ：将字符串流转换为字符串数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">将字符串流转换为数组</span><br><span class="line">Stream&lt;String&gt; tokenStream = Arrays.asList(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>).stream();  <span class="comment">//stream</span></span><br><span class="line">         </span><br><span class="line">String[] tokenArray = tokenStream.toArray(String[]::<span class="keyword">new</span>);   <span class="comment">//array</span></span><br><span class="line"> </span><br><span class="line">System.out.println(Arrays.toString(tokenArray));    </span><br></pre></td></tr></table></figure>

<p>程序输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[A, B, C, D]</span><br></pre></td></tr></table></figure>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>很多时候，我们需要执行将流归约为单个结果值的操作，例如，最大值、最小值、总和、乘积等。reduce是组合所有元素的重复过程。</p>
<p><em>reduce</em>操作将二元运算符应用于流中的每个元素，其中运算符的第一个参数是前一个reduce操作的返回值，第二个参数是当前流元素。</p>
<p><code>Optional&lt;T> reduce(BinaryOperator&lt;T> accumulator)</code>：第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。<br><strong>示例 1：获取最长的字符串</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;GFG&quot;</span>, <span class="string">&quot;Geeks&quot;</span>, <span class="string">&quot;for&quot;</span>,<span class="string">&quot;GeeksQuiz&quot;</span>, <span class="string">&quot;GeeksforGeeks&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; longestString = words.stream().reduce((word1, word2) -&gt; word1.length() &gt; word2.length() ? word1 : word2);</span><br><span class="line">  </span><br><span class="line">longestString.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：求和</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; array = Arrays.asList(-<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">int</span> sum = array.stream().reduce(<span class="number">0</span>,(element1, element2) -&gt; element1 + element2);</span><br><span class="line">System.out.println(<span class="string">&quot;The sum of all elements is &quot;</span> + sum);</span><br></pre></td></tr></table></figure>

<h2 id="collect"><a href="#collect" class="headerlink" title="collect()"></a>collect()</h2><h3 id="collect-流式传输到-List"><a href="#collect-流式传输到-List" class="headerlink" title="collect() 流式传输到 List"></a>collect() 流式传输到 List</h3><p><code>collect()</code>方法用于从<code>stream</code>接收元素并将它们存储在集合中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; memNamesInUppercase = memberNames.stream().sorted()</span><br><span class="line">                            .map(String::toUpperCase)</span><br><span class="line">                            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.print(memNamesInUppercase);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[AMAN, AMITABH, LOKESH, RAHUL, SALMAN, SHAHRUKH, SHEKHAR, YANA]</span><br></pre></td></tr></table></figure>

<h3 id="collect-流式传输到-Set"><a href="#collect-流式传输到-Set" class="headerlink" title="collect() 流式传输到 Set"></a>collect() 流式传输到 Set</h3><p>我们可以使用<code>Collectors.toSet()</code>将流元素收集到一个新的 Set 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; oddNumbers = numbers.parallelStream().filter(x -&gt; x % <span class="number">2</span> != <span class="number">0</span>).collect(Collectors.toSet());</span><br><span class="line">System.out.println(oddNumbers); <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="collect-流式传输到-Map"><a href="#collect-流式传输到-Map" class="headerlink" title="collect() 流式传输到 Map"></a>collect() 流式传输到 Map</h3><p>我们可以使用<code>Collectors.toMap()</code>函数将流元素收集到<code>Map</code>。此方法接受映射键的两个参数和 Map 中的相应值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers &#x3D; List.of(1, 2, 3, 4, 5, 6);</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, String&gt; mapOddNumbers &#x3D; numbers.parallelStream().filter(x -&gt; x % 2 !&#x3D; 0)</span><br><span class="line">		.collect(Collectors.toMap(Function.identity(), x -&gt; String.valueOf(x)));</span><br><span class="line">System.out.println(mapOddNumbers); &#x2F;&#x2F; &#123;1&#x3D;1, 3&#x3D;3, 5&#x3D;5&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Collectors-joining"><a href="#Collectors-joining" class="headerlink" title="Collectors joining()"></a>Collectors joining()</h3><p>我们可以使用 Collectors join() 方法来获取一个 Collector，它将输入流 CharSequence 元素按照遇到的顺序连接起来。我们可以使用它来连接字符串流、StringBuffer或 StringBuilder。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String value = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).collect(Collectors.joining());</span><br><span class="line"><span class="comment">// &quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line">String valueCSV = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line"><span class="comment">// &quot;a,b,c&quot;</span></span><br><span class="line"></span><br><span class="line">String valueCSVLikeArray = Stream.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line"><span class="comment">// &quot;&#123;a,b,c&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">String valueObject = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="keyword">new</span> StringBuffer(<span class="string">&quot;2&quot;</span>), <span class="keyword">new</span> StringBuilder(<span class="string">&quot;3&quot;</span>)).collect(Collectors.joining());</span><br><span class="line"><span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Collectors类中的常用方法"><a href="#Collectors类中的常用方法" class="headerlink" title="Collectors类中的常用方法"></a>Collectors类中的常用方法</h3><ul>
<li><code>counting</code>-统计数量</li>
<li><code>averagingDouble</code>-求平均值并转换成Double类型</li>
<li><code>averagingInt</code>-求平均值并转换成Int类型</li>
<li><code>averagingLong</code>-求平均值并转换成Long类型</li>
<li><code>summingDouble</code>-求和并转换成Double类型</li>
<li><code>summingInt</code>-求和并转换成Int类型</li>
<li><code>summingLong</code>-求和并转换成Long类型</li>
<li><code>maxBy</code>-根据函数条件求最大值</li>
<li><code>groupingBy</code>-分组</li>
<li><code>partitioningBy</code>-分区</li>
<li><code>joining</code>-连接字符串</li>
</ul>
<p>示例 求年龄的平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Double ageAve = stuList.stream()</span><br><span class="line">            .collect(Collectors.averagingDouble(Stu::getAge));</span><br><span class="line">System.out.println(ageAve);<span class="comment">//37.0</span></span><br></pre></td></tr></table></figure>

<p>求年龄之和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Double ageSum = stuList.stream()</span><br><span class="line">        .collect(Collectors.summingDouble(Stu::getAge));</span><br><span class="line">System.out.println(ageSum);<span class="comment">//296.0</span></span><br></pre></td></tr></table></figure>

<p>根据年龄找出最大年龄值的stu对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据年龄找出最大年龄值的stu对象</span></span><br><span class="line">Optional&lt;Stu&gt; stuOptional = stuList.stream()</span><br><span class="line">        .collect(Collectors.maxBy((a, b) -&gt; Double.compare(a.getAge(), b.getAge())));</span><br><span class="line">System.out.println(stuOptional.get());<span class="comment">//Stu&#123;id=5, name=&#x27;dd&#x27;, age=52&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="min"><a href="#min" class="headerlink" title="min()"></a>min()</h2><p>返回流中的最小值</p>
<ul>
<li><p>这是<strong>终端操作</strong>。所以这个方法执行后就不能使用stream了。</p>
</li>
<li><p>根据提供的Comparator回此流的最小元素。</p>
</li>
<li><p>这是<strong>流缩减的</strong>一个特例，缩减到只有一个元素。</p>
</li>
<li><p>该方法返回一个描述此流的最小元素的Optional，<code>Optional</code>如果流为空，则返回一个空。</p>
</li>
</ul>
<p><strong>示例：查找最小数字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">Optional&lt;Integer&gt; minNumber = list.stream().min((i, j) -&gt; i.compareTo(j));</span><br><span class="line"> </span><br><span class="line">System.out.println(minNumber.get());</span><br></pre></td></tr></table></figure>

<p>程序输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="max"><a href="#max" class="headerlink" title="max()"></a>max()</h2><p>返回流中的最大值</p>
<ul>
<li><p>这是<strong>终端操作</strong>。所以这个方法执行后就不能使用stream了。</p>
</li>
<li><p>根据提供的Comparator回此流的最大元素。</p>
</li>
<li><p>这是<strong>流缩减的</strong>一个特例，缩减到只有一个元素。</p>
</li>
<li><p>该方法返回一个描述此流的最大元素的Optional，<code>Optional</code>如果流为空，则返回一个空。</p>
</li>
</ul>
<p><strong>示例：查找最大数字</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">Optional&lt;Integer&gt; maxNumber = list.stream().max((i, j) -&gt; i.compareTo(j));</span><br><span class="line"> </span><br><span class="line">System.out.println(maxNumber.get());</span><br></pre></td></tr></table></figure>

<p>程序输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>

<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2><p>返回流中元素的总个数</p>
<p><strong>示例 1：计算 List 中元素个数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;how&quot;</span>,<span class="string">&quot;to&quot;</span>,<span class="string">&quot;do&quot;</span>,<span class="string">&quot;in&quot;</span>,<span class="string">&quot;java&quot;</span>).count();</span><br><span class="line">System.out.printf(<span class="string">&quot;There are %d words in the stream %n&quot;</span>, count);</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：使用 Collectors.counting() 计算元素数量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> count = Stream.of(<span class="string">&quot;how&quot;</span>,<span class="string">&quot;to&quot;</span>,<span class="string">&quot;do&quot;</span>,<span class="string">&quot;in&quot;</span>,<span class="string">&quot;java&quot;</span>).collect(Collectors.counting());</span><br><span class="line">System.out.printf(<span class="string">&quot;There are %d words in the stream %n&quot;</span>, count);</span><br></pre></td></tr></table></figure>

<h2 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch()"></a>anyMatch()</h2><p>接收一个 Predicate 函数，只要流中有一个元素满足该断言则返回true，否则返回false</p>
<ul>
<li>这是一个短路终端操作。</li>
<li>它返回此流的任何元素是否与提供的谓词匹配。</li>
<li>如果不需要确定结果，则可能不会评估所有元素的谓词。<code>true</code>一旦遇到第一个匹配元素，方法就会返回。</li>
<li>如果流为空，则<code>false</code>返回并且不评估谓词。</li>
<li><strong>allMatch() 和 anyMatch() 之间</strong>的<strong>区别在于</strong>，如果流中的任何元素与给定的谓词匹配，则<code>anyMatch()</code>返回<code>true</code>。使用 时<code>allMatch()</code>，所有元素必须匹配给定的谓词。</li>
</ul>
<p><strong>示例 1：检查流是否包含特定元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> match = stream.anyMatch(s -&gt; s.contains(<span class="string">&quot;four&quot;</span>));</span><br><span class="line">System.out.println(match); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="anyMatch-与-contains-的区别"><a href="#anyMatch-与-contains-的区别" class="headerlink" title="anyMatch() 与 contains() 的区别"></a>anyMatch() 与 contains() 的区别</h3><p>对于集合List来说，<code>anyMatch()</code>和contains()没有区别</p>
<p><code>anyMatch()</code>在某些需要检查流中是否至少有一个元素的情况下，该方法很有用。</p>
<p>较短的版本<code>list.contains()</code>也做同样的事情，可以代替使用。</p>
<h2 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch()"></a>allMatch()</h2><p><code>allMatch</code>-检查是否<code>匹配所有</code>元素</p>
<p><strong>示例 1：<code>Stream.allMatch()</code>检查所有流元素是否不包含任何数字字符</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line">Predicate&lt;String&gt; containsDigit = s -&gt; s.contains(<span class="string">&quot;\\d+&quot;</span>) == <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = stream.allMatch(containsDigit);</span><br><span class="line">System.out.println(match); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch()"></a>noneMatch()</h2><p><strong>句法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">noneMatch</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span></span><br></pre></td></tr></table></figure>

<p>的<code>noneMatch()</code>回报：</p>
<ul>
<li><p><strong>true</strong> – 如果流中没有元素匹配给定的谓词，或者流为空。</p>
</li>
<li><p><strong>false</strong> – 如果至少一个元素与给定的谓词匹配。</p>
</li>
<li><p>它与方法allMatch() 完全相反。</p>
</li>
</ul>
<p><strong>示例 1：<code>Stream.noneMatch()</code>检查 Stream 中的元素是否包含任何数字/数字字符</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>);</span><br><span class="line">         </span><br><span class="line"><span class="keyword">boolean</span> match = stream.noneMatch( s -&gt; s.contains(<span class="string">&quot;\\d+&quot;</span>) );</span><br><span class="line">         </span><br><span class="line">System.out.println(match);      <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst()"></a>findFirst()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Optional&lt;T&gt; findFirst()</span><br></pre></td></tr></table></figure>

<p>此方法返回一个Optional描述<strong>此流</strong>的<strong>第一个匹配元素</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Customer&gt; optional = allCustomers.stream()</span><br><span class="line">        .filter(customer -&gt; customer.getAge() &gt; <span class="number">20</span>)</span><br><span class="line">        .findFirst();</span><br></pre></td></tr></table></figure>

<h2 id="findAny"><a href="#findAny" class="headerlink" title="findAny()"></a>findAny()</h2><p><code>findAny</code>-返回当前流中的<code>任意一个元素</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从集合中随便找个age&gt;30的Stu对象  可以使用串行流stream,也可以使用parallelStream 并行流</span></span><br><span class="line">Optional&lt;Stu&gt; any = stuList.parallelStream()</span><br><span class="line">    .filter((e) -&gt; e.getAge() &gt; <span class="number">30</span>).findAny();</span><br><span class="line">System.out.println(any.get());<span class="comment">//Stu&#123;id=4, name=&#x27;cc&#x27;, age=42&#125;</span></span><br><span class="line">Optional&lt;Stu&gt; any1 = stuList.stream()</span><br><span class="line">    .filter((e) -&gt; e.getAge() &gt; <span class="number">30</span>).findAny();</span><br><span class="line">System.out.println(any1.get());<span class="comment">//Stu&#123;id=3, name=&#x27;bb&#x27;, age=32&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="findFirst-与-findAny"><a href="#findFirst-与-findAny" class="headerlink" title="findFirst() 与 findAny()"></a>findFirst() 与 findAny()</h3><p>在非并行流中，大多数情况下两者都可能返回流的第一个元素，但不提供此行为的任何保证。<code>findAny()</code></p>
<p>用于<code>findAny()</code>在更快的时间内从任何并行流中获取任何元素。否则，我们总是可以<code>findFirst()</code>在大多数情况下使用。</p>
<hr>
<h1 id="Stream使用示例"><a href="#Stream使用示例" class="headerlink" title="Stream使用示例"></a>Stream使用示例</h1><h2 id="示例1-查找流的最后一个元素"><a href="#示例1-查找流的最后一个元素" class="headerlink" title="示例1:查找流的最后一个元素"></a>示例1:查找流的最后一个元素</h2><h3 id="Stream-reduce-API"><a href="#Stream-reduce-API" class="headerlink" title="Stream.reduce() API"></a>Stream.reduce() API</h3><p>该<code>reduce()</code>方法对流的元素使用归约技术。在这种情况下，它将选择流的两个元素并选择后者。这将一直持续到所有元素都用尽为止。</p>
<p>在归约过程结束时，我们将得到流的最后一个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 reduce() 方法获取最后一个元素</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>).stream();</span><br><span class="line"> </span><br><span class="line">Integer lastElement = stream.reduce((first, second) -&gt; second)</span><br><span class="line">                            .orElse(-<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(lastElement);    <span class="comment">// Prints 9</span></span><br></pre></td></tr></table></figure>

<p>如果流本身是空的，则lastElement为-1。</p>
<h2 id="示例2-查找和计算重复项并删除这些重复项"><a href="#示例2-查找和计算重复项并删除这些重复项" class="headerlink" title="示例2:查找和计算重复项并删除这些重复项"></a>示例2:查找和计算重复项并删除这些重复项</h2><h3 id="Stream-distinct-删除重复项"><a href="#Stream-distinct-删除重复项" class="headerlink" title="Stream.distinct() - 删除重复项"></a>Stream.distinct() - 删除重复项</h3><h4 id="删除重复的字符串"><a href="#删除重复的字符串" class="headerlink" title="删除重复的字符串"></a>删除重复的字符串</h4><p>distinct()方法根据对象的<code>equals()</code>方法检查对象是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; distinctItems = list.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">System.out.println(distinctItems); <span class="comment">// [A, B, C, D]</span></span><br></pre></td></tr></table></figure>

<h4 id="删除重复的自定义对象"><a href="#删除重复的自定义对象" class="headerlink" title="删除重复的自定义对象"></a>删除重复的自定义对象</h4><p>可以使用相同的语法从<em>List 中</em>删除重复的对象。为此，我们需要非常小心对象的<code>equals()</code>和<code>hashCode()</code>方法，因为它将决定对象是重复的还是唯一的。</p>
<p>考虑下面的例子，如果两个<em>Person</em>实例具有相同的<em>id</em>值，则它们被认为是相等的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String fname, String lname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.fname = fname;</span><br><span class="line">        <span class="keyword">this</span>.lname = lname;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String fname;</span><br><span class="line">    <span class="keyword">private</span> String lname;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Getters and Setters are hidden for brevity</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person other = (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(id, other.id);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [id=&quot;</span> + id + <span class="string">&quot;, fname=&quot;</span> + fname + <span class="string">&quot;, lname=&quot;</span> + lname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除重复的<em>Person</em>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;san&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;li&quot;</span>,<span class="string">&quot;si&quot;</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;wu&quot;</span>);</span><br><span class="line">Person p4 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;san&quot;</span>);</span><br><span class="line">Person p5 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;li&quot;</span>,<span class="string">&quot;si&quot;</span>);</span><br><span class="line">Collection&lt;Person&gt; list = Arrays.asList(p1, p2, p3, p4, p5);</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; distinctElements = list.stream().distinct().collect( Collectors.toList() );</span><br><span class="line">System.out.println(distinctElements); </span><br><span class="line"><span class="comment">//[Person [id=1, fname=zhang, lname=san], Person [id=2, fname=li, lname=si], Person [id=3, fname=wang, lname=wu]]</span></span><br></pre></td></tr></table></figure>

<h3 id="Collectors-toSet-删除重复项"><a href="#Collectors-toSet-删除重复项" class="headerlink" title="Collectors.toSet() - 删除重复项"></a>Collectors.toSet() - 删除重复项</h3><p>另一种简单且非常有用的方法是将所有元素存储在<code>Set</code>. <strong>根据定义，集合仅存储不同的元素。</strong>请注意，<em>Set</em>通过使用*equals()*方法比较对象来存储不同的项目。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; numbersList</span><br><span class="line">= <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>));</span><br><span class="line"> </span><br><span class="line">Set&lt;Integer&gt; setWithoutDuplicates = numbersList.stream().collect(Collectors.toSet());</span><br><span class="line"> </span><br><span class="line">System.out.println(setWithoutDuplicates);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Collectors-toMap-计算重复项"><a href="#Collectors-toMap-计算重复项" class="headerlink" title="Collectors.toMap() - 计算重复项"></a>Collectors.toMap() - 计算重复项</h3><p>有时，我们有兴趣找出哪些元素是重复的，以及它们在原始列表中出现的次数。我们可以使用 一个<code>Map</code>来存储这些信息。</p>
<p>我们必须遍历列表，将元素作为 Map 键，并将其所有出现在 Map 值中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ArrayList with duplicate elements</span></span><br><span class="line">ArrayList&lt;Integer&gt; numbersList</span><br><span class="line">= <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>));</span><br><span class="line"> </span><br><span class="line">Map&lt;Integer, Long&gt; elementCountMap = numbersList.stream()</span><br><span class="line">.collect(Collectors.toMap(Function.identity(), v -&gt; <span class="number">1L</span>, Long::sum));</span><br><span class="line"> </span><br><span class="line">System.out.println(elementCountMap);</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>=<span class="number">2</span>, <span class="number">2</span>=<span class="number">1</span>, <span class="number">3</span>=<span class="number">3</span>, <span class="number">4</span>=<span class="number">1</span>, <span class="number">5</span>=<span class="number">1</span>, <span class="number">6</span>=<span class="number">3</span>, <span class="number">7</span>=<span class="number">1</span>, <span class="number">8</span>=<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p>去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;san&quot;</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;li&quot;</span>,<span class="string">&quot;si&quot;</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;wu&quot;</span>);</span><br><span class="line">Person p4 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;zhang&quot;</span>,<span class="string">&quot;san&quot;</span>);</span><br><span class="line">Person p5 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;li&quot;</span>,<span class="string">&quot;si&quot;</span>);</span><br><span class="line">Collection&lt;Person&gt; list = Arrays.asList(p1, p2, p3, p4, p5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// key值重复时取第一个</span></span><br><span class="line"><span class="comment">// map: key:Person::getId,value:person -&gt; person,重复key处理(oldPerson, newPerson) -&gt; oldPerson</span></span><br><span class="line">Map&lt;Integer, Person&gt; distinctElements = list.stream().distinct().collect(Collectors.toMap(Person::getId, person -&gt; person, (oldPerson, newPerson) -&gt; oldPerson));</span><br><span class="line">System.out.println(distinctElements);</span><br><span class="line"><span class="comment">// &#123;1=Person [id=1, fname=zhang, lname=san], 2=Person [id=2, fname=li, lname=si], 3=Person [id=3, fname=wang, lname=wu]&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="示例3-图解Stream处理过程"><a href="#示例3-图解Stream处理过程" class="headerlink" title="示例3: 图解Stream处理过程"></a>示例3: 图解Stream处理过程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = </span><br><span class="line">    transactions.stream()</span><br><span class="line">                .filter(t -&gt; t.getType() == Transaction.GROCERY)</span><br><span class="line">                .sorted(comparing(Transaction::getValue).reversed())</span><br><span class="line">                .map(Transaction::getId)</span><br><span class="line">                .collect(toList());</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/java8Stream/transac1.png"  />

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/java8Stream/transac.png"  />
]]></content>
      <tags>
        <tag>Stream</tag>
        <tag>流</tag>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Supplier接口</title>
    <url>/2023/12/15/Java8-Supplier%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>Java <code>Supplier</code> 是一个代表结果提供者的函数式接口。 <code>Supplier</code>的函数方法是<code>get()</code>。 <code>Supplier</code> 可以使用 lambda 表达式或方法引用或默认构造函数进行实例化。 <code>Supplier</code> 已在 Java 8 中引入，属于 <code>java.util.function</code> 包。 <code>Supplier</code>函数式接口源码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets a result.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Supplier</code>是Java8配合Lambda表达式和函数式接口编程组合使用的一个接口。</p>
<p>接口<code>Supplier&lt;T&gt;</code> 最适合表示工厂。带有<code>Supplier&lt;T&gt;</code> 的方法，通常应该限制输入工厂的类型参数使用有限制的通配符类型，以便客户端可以传入工厂，来创建制定类型的任意子类。</p>
<p>简而言之，<code>Supplier&lt;T&gt;</code>就是来创建对象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Double&gt; doubleSupplier = Math::random;</span><br><span class="line">        Double random1 = doubleSupplier.get();</span><br><span class="line">        Double random2 = doubleSupplier.get();</span><br><span class="line">        Double random3 = doubleSupplier.get();</span><br><span class="line">        System.out.println(random1);</span><br><span class="line">        System.out.println(random2);</span><br><span class="line">        System.out.println(random3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<h4 id="使用Lambda表达式实例化Supplier"><a href="#使用Lambda表达式实例化Supplier" class="headerlink" title="使用Lambda表达式实例化Supplier"></a>使用Lambda表达式实例化Supplier</h4><p>函数式接口<code>Supplier</code>的<code>get()</code>仅仅返回值，而不接受任何参数，所以我们使用lambda表达式时其参数部分为空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Supplier&lt;String&gt; strSupplier = () -&gt; <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    System.out.println(strSupplier.get());</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Supplier&lt;Integer&gt; integerSupplier = () -&gt; random.nextInt(<span class="number">100</span>);</span><br><span class="line">    System.out.println(integerSupplier.get());</span><br><span class="line">    System.out.println(integerSupplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">65</span><br><span class="line">54</span><br></pre></td></tr></table></figure>

<h4 id="使用方法引用实例化Supplier"><a href="#使用方法引用实例化Supplier" class="headerlink" title="使用方法引用实例化Supplier"></a>使用方法引用实例化Supplier</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Supplier&lt;Person&gt; personSupplier = Person::<span class="keyword">new</span>;</span><br><span class="line">    Person person1 = personSupplier.get();</span><br><span class="line">    person1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    Person person2 = personSupplier.get();</span><br><span class="line">    person2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    System.out.println(person1);</span><br><span class="line">    System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    Supplier&lt;Integer&gt; randomSupplier = random::nextInt;</span><br><span class="line">    System.out.println(randomSupplier.get());</span><br><span class="line">    System.out.println(randomSupplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.design.patterns.factory.Person&#123;name&#x3D;&#39;张三&#39;, sex&#x3D;&#39;null&#39;, age&#x3D;&#39;null&#39;&#125;</span><br><span class="line">com.design.patterns.factory.Person&#123;name&#x3D;&#39;李四&#39;, sex&#x3D;&#39;null&#39;, age&#x3D;&#39;null&#39;&#125;</span><br><span class="line">-1841962637</span><br><span class="line">567349876</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Supplier</tag>
        <tag>函数式接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript闭包（Closure）</title>
    <url>/2021/10/09/Javascript%E9%97%AD%E5%8C%85%EF%BC%88Closure%EF%BC%89/</url>
    <content><![CDATA[<h1 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h1><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p>
<p>变量的作用域无非就是两种：全局变量和局部变量。</p>
<p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　alert(n);</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　f1(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure>

<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　alert(n); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　n=<span class="number">999</span>;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　f1();</span><br><span class="line"></span><br><span class="line">　　alert(n); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure>

<h2 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h2><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>
<p>那就是在函数的内部，再定义一个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(n); <span class="comment">// 999</span></span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line"></span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure>

<p>专业的讲，一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p>
<p>我的理解是，闭包就是能够读取其他函数内部变量的函数。</p>
<p>上一节代码中的f2函数，就是闭包。</p>
<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h1 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h1><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<p>怎么来理解这句话呢？请看下面的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line"></span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br><span class="line"></span><br><span class="line">　　nAdd();</span><br><span class="line"></span><br><span class="line">　　result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure>

<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>
<p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h1 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h1><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaBean</title>
    <url>/2021/07/12/JavaBean/</url>
    <content><![CDATA[<h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>​    首先明确的是JavaBean是一种Java类，而且是一种特殊的、可重用的类。</p>
<p>​    JavaBean的种类按照功能可以划分为可视化和不可视化两类。可视化的JavaBean就是拥有GUI图形用户界面的，对最终用户是可见的。不可视化的JavaBean不要求继承，它更多的被使用在JSP中，通常情况下用来<strong>封装业务逻辑</strong>、<strong>数据分页逻辑</strong>、<strong>数据库操作</strong>和<strong>事物逻辑</strong>等，这样可以实现业务逻辑和前台程序的分离，提高了代码的可读性和易维护性，使系统更健壮和灵活。随着JSP的发展，JavaBean更多的应用在非可视化领域，并且在服务器端应用方面表现出了越来越强的生命力。–form 百度百科</p>
<p>　JavaBeans是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。名称中的“Bean”是用于Java的可重用软件组件的惯用叫法。 –from 维基百科</p>
<p>​    我们都知道，Java面向对象的基本特性有一个是封装，其具体作用就是当我们在设计Java类的时候，不希望外部可以直接调用类的成员变量，这样不利于程序的安全性，所以我们定义成员函数去调用这些成员变量，即get和set方法规范诞生了。<br>​    那么根据实体类中我们想要的这些get和set相关成员函数，就可以设计一个公共类，基于Java反射机制，来使用这些函数。<br>​    这就是Java bean最初的用处。Java bean也是一种类，只不过是调用其他对象内部成员函数的类。<br>​    但是同样需要强调一点，Java bean 在概念上并不是一种技术，而是一种规范。大量的技术人员根据这种规范，开发总结了很多技巧，便于封装使用，便于开发人员快捷开发。</p>
<h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><p>​    由于Java bean是Java公共的类，所以为了使编译工具或集成开发环境识别这种规范，那么我们需要在设计实体类的时候至少应该满足三个条件：</p>
<p>​    1、类中有一个<code>public</code>无参构造器，默认即可。<br>​    2、属性使用public 的<code>get</code>，<code>set</code>方法访问，也就是说设置成<code>private</code>，同时get，set方法与属性名的大小也需要对应。例如年龄属性age，get方法就要写成，<code>public int getAge()&#123;return this.age&#125;</code>，其中很明显A要大写。同理，set方法就要写成<code>public void setAge(int age)&#123;this.age = age ;&#125;</code>。<br>​    3、继承序列化接口，能够实现序列化功能。当然不一定需要直接实现序列化接口，简介继承了实现序列化接口的类也可以。这个是框架，工具跨平台反映状态必须具备的。<br>​    如下图设计原则所示。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/JavaBean/javabean.png"></p>
<p>JavaBean代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> com.wotzc.javaBean;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"> <span class="number">4</span>    <span class="keyword">private</span> String firstName = <span class="keyword">null</span>;</span><br><span class="line"> <span class="number">5</span>    <span class="keyword">private</span> String lastName = <span class="keyword">null</span>;</span><br><span class="line"> <span class="number">6</span>    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>    <span class="function"><span class="keyword">public</span> <span class="title">StudentsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">9</span>    &#125;</span><br><span class="line"><span class="number">10</span>    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">11</span>       <span class="keyword">return</span> firstName;</span><br><span class="line"><span class="number">12</span>    &#125;</span><br><span class="line"><span class="number">13</span>    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">14</span>       <span class="keyword">return</span> lastName;</span><br><span class="line"><span class="number">15</span>    &#125;</span><br><span class="line"><span class="number">16</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">17</span>       <span class="keyword">return</span> age;</span><br><span class="line"><span class="number">18</span>    &#125;</span><br><span class="line"><span class="number">19</span> </span><br><span class="line"><span class="number">20</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line"><span class="number">21</span>       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line"><span class="number">22</span>    &#125;</span><br><span class="line"><span class="number">23</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line"><span class="number">24</span>       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line"><span class="number">25</span>    &#125;</span><br><span class="line"><span class="number">26</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="number">27</span>       <span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="number">28</span>    &#125;</span><br><span class="line"><span class="number">29</span> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用Java-bean的优点"><a href="#使用Java-bean的优点" class="headerlink" title="使用Java bean的优点"></a>使用Java bean的优点</h2><p>1、提高代码的可复用性：对于通用的事务处理逻辑，数据库操作等都可以封装在Java bean中，通过调用Java bean的属性和方法可快速进行程序设计。<br>2、程序易于开发维护：实现逻辑的封装，使事务处理和显示互不干扰。<br>3、支持分布式运用：多用Java bean，尽量减少java代码和HTML代码的混编。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaBean</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出 Java 8 Lambda 表达式</title>
    <url>/2021/10/23/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Java世界里面，面向对象还是主流思想，对于习惯了面向对象编程的开发者来说，抽象的概念并不陌生。面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p>
<p>这种新的抽象方式还有其他好处。很多人不总是在编写性能优先的代码，对于这些人来说，函数式编程带来的好处尤为明显。程序员能编写出更容易阅读的代码——这种代码更多地表达了业务逻辑，而不是从机制上如何实现。易读的代码也易于维护、更可靠、更不容易出错。</p>
<p>在写回调函数和事件处理器时，程序员不必再纠缠于匿名内部类的冗繁和可读性，函数式编程让事件处理系统变得更加简单。能将函数方便地传递也让编写惰性代码变得容易，只有在真正需要的时候，才初始化变量的值。</p>
<p>Java <em>Lambda表达式</em>的一个重要用法是简化某些<em>匿名内部类</em>（<code>Anonymous Classes</code>）的写法。实际上Lambda表达式并不仅仅是匿名内部类的语法糖，JVM内部是通过<em>invokedynamic</em>指令来实现Lambda表达式的。</p>
<p>Lambda表达式（也称闭包），是Java8中最受期待和欢迎的新特性之一。Lambda表达式本质是一个匿名函数，但是它并不是匿名类的语法糖，它让 Java 开始走向函数式编程，其实现原理区别于一般的匿名类中的匿名函数。在Java语法层面Lambda表达式允许函数作为一个方法的参数（函数作为参数传递到方法中），或者把代码看成数据。Lambda表达式可以简化函数式接口的使用。函数式接口就是一个只有一个抽象方法的普通接口，像这样的接口就可以使用Lambda表达式来简化代码的编写。</p>
<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda 表达式为 Java 添加了缺失的函数式编程特点，使我们能将函数当做一等公民看待。尽管不完全正确，我们很快就会见识到 Lambda 与闭包的不同之处，但是又无限地接近闭包。在支持一类函数的语言中，Lambda 表达式的类型将是函数。但是，在 Java 中，Lambda 表达式是对象，他们必须依附于一类特别的对象类型——函数式接口(functional interface)。函数式接口在java中是指:<strong>有且仅有一个抽象方法的接口</strong>，<strong>只有函数式接口，才可以转换为lambda表达式</strong>，<strong>函数式接口可以显式的被@FunctionalInterface所表示，当被标识的接口不满足规定时，编译器会提示报错</strong>。我们会在后文详细介绍函数式接口。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/java-lambda-expression.png"></p>
<p>在认识Lambda表达式基础语法之前，先来看一段用两种方式创建线程的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line"><span class="comment">// 匿名类</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda 表达式</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;Hello!&quot;</span>)).start();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/javalambdaexpression.png"></p>
<p>Lambda 表达式的基础语法：Java8中引入了一个新的操作符 <code>-></code>该操作符称为箭头操作符或 Lambda 操作符</p>
<p>箭头操作符将 Lambda 表达式拆分成两部分：</p>
<p>左侧：Lambda 表达式的参数列表</p>
<p>右侧：Lambda 表达式中所需实现的功能， 即 Lambda 体</p>
<p>Java 中的 Lambda 表达式通常使用<code>(argument) -> (body)</code>语法书写，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(arg1, arg2...) -&gt; &#123; body &#125;</span><br><span class="line"></span><br><span class="line">(type1 arg1, type2 arg2...) -&gt; &#123; body &#125;</span><br></pre></td></tr></table></figure>

<p>以下是一些 Lambda 表达式的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; &#123;  <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"></span><br><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">(String s) -&gt; &#123; System.out.println(s); &#125;</span><br><span class="line"></span><br><span class="line">() -&gt; <span class="number">42</span></span><br><span class="line"></span><br><span class="line">() -&gt; &#123; <span class="keyword">return</span> <span class="number">3.1415</span> &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="什么是函数式接口"><a href="#什么是函数式接口" class="headerlink" title="什么是函数式接口"></a>什么是函数式接口</h1><p>在 Java 中，Marker（标记）类型的接口是一种没有方法或属性声明的接口，简单地说，marker 接口是空接口。相似地，函数式接口是只包含一个抽象方法声明的接口。</p>
<p><code>java.lang.Runnable </code>就是一种函数式接口，在 Runnable 接口中只声明了一个方法<code>void run()</code>，相似地，ActionListener 接口也是一种函数式接口，我们使用匿名内部类来实例化函数式接口的对象，有了 Lambda 表达式，这一方式可以得到简化。</p>
<p>每个 Lambda 表达式都能隐式地赋值给函数式接口，例如，我们可以通过 Lambda 表达式创建 Runnable 接口的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable r = () -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当不指明函数式接口时，编译器会自动解释这种转化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">   () -&gt; System.out.println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure>

<p>因此，在上面的代码中，编译器会自动推断：根据线程类的构造函数签名 <span style="color:red"><code>public Thread(Runnable r) &#123; &#125;</code></span>，将该 Lambda 表达式赋给 Runnable 接口。</p>
<p>以下是一些 Lambda 表达式及其函数式接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;Integer&gt;  c = (<span class="keyword">int</span> x) -&gt; &#123; System.out.println(x) &#125;;</span><br><span class="line"></span><br><span class="line">BiConsumer&lt;Integer, String&gt; b = (Integer x, String y) -&gt; System.out.println(x + <span class="string">&quot; : &quot;</span> + y);</span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; p = (String s) -&gt; &#123; s == <span class="keyword">null</span> &#125;;</span><br></pre></td></tr></table></figure>

<p><a href="http://download.java.net/jdk8/docs/api/java/lang/FunctionalInterface.html">@FunctionalInterface</a> 是 Java 8 新加入的一种接口，用于指明该接口类型声明是根据 Java 语言规范定义的函数式接口。Java 8 还声明了一些 Lambda 表达式可以使用的函数式接口，当你注释的接口不是有效的函数式接口时，可以使用 @FunctionalInterface 解决编译层面的错误。</p>
<p>以下是一种自定义的函数式接口： @FunctionalInterface public interface WorkerInterface {</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据定义，函数式接口只能有一个抽象方法，如果你尝试添加第二个抽象方法，将抛出编译时错误。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeMoreWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Unexpected <span class="meta">@FunctionalInterface</span> annotation </span><br><span class="line">    <span class="meta">@FunctionalInterface</span> ^ WorkerInterface is not a functional <span class="class"><span class="keyword">interface</span> <span class="title">multiple</span> </span></span><br><span class="line"><span class="class">    <span class="title">non</span>-<span class="title">overriding</span> <span class="title">abstract</span> <span class="title">methods</span> <span class="title">found</span> <span class="title">in</span> <span class="title">interface</span> <span class="title">WorkerInterface</span> 1 <span class="title">error</span></span></span><br></pre></td></tr></table></figure>

<p>函数式接口定义好后，我们可以在 API 中使用它，同时利用 Lambda 表达式。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//定义一个函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerInterfaceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkerInterface worker)</span> </span>&#123;</span><br><span class="line">    worker.doSomeWork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//invoke doSomeWork using Annonymous class</span></span><br><span class="line">    execute(<span class="keyword">new</span> WorkerInterface() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Worker invoked using Anonymous class&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//invoke doSomeWork using Lambda expression </span></span><br><span class="line">    execute( () -&gt; System.out.println(<span class="string">&quot;Worker invoked using Lambda expression&quot;</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Worker invoked using Anonymous <span class="class"><span class="keyword">class</span> </span></span><br><span class="line"><span class="class"><span class="title">Worker</span> <span class="title">invoked</span> <span class="title">using</span> <span class="title">Lambda</span> <span class="title">expression</span></span></span><br></pre></td></tr></table></figure>

<p>这上面的例子里，我们创建了自定义的函数式接口并与 Lambda 表达式一起使用。execute() 方法现在可以将 Lambda 表达式作为参数。</p>
<h1 id="Lambda-表达式的结构"><a href="#Lambda-表达式的结构" class="headerlink" title="Lambda 表达式的结构"></a>Lambda 表达式的结构</h1><p>让我们了解一下 Lambda 表达式的结构。</p>
<ul>
<li>一个 Lambda 表达式可以有<code>零个</code>或<code>多个</code>参数</li>
<li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：<code>(int a)</code>与<code>(a)</code>效果相同</li>
<li>当只有一个参数，且其类型可推导时，圆括号<code>()</code>可省略。例如：<code>a -> return a*a</code></li>
<li>当参数大于一个时，所有参数需包含在圆括号内，参数之间用逗号相隔。例如：<code>(a, b)</code> 或 <code>(int a, int b)</code>或 <code>(String a, int b, float c)</code></li>
<li>空圆括号代表没有参数。例如：<code>() -> 42</code></li>
<li>Lambda 表达式的主体可包含<code>零条</code>或<code>多条</code>语句</li>
<li>如果 Lambda 表达式的主体只有一条语句，花括号<code>&#123;&#125;</code>可省略，如果Lambda体不加<code>&#123;&#125;</code>就不用写<code>return</code>。</li>
<li>如果 Lambda 表达式的主体包含一条以上语句，则表达式必须包含在花括号<code>&#123;&#125;中</code>（形成代码块）Lambda体加上<code>&#123;&#125;</code>就需要添加<code>return</code>。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li>
</ul>
<h1 id="Lambda表达式和内部类区别一"><a href="#Lambda表达式和内部类区别一" class="headerlink" title="Lambda表达式和内部类区别一"></a>Lambda表达式和内部类区别一</h1><p>读过上一篇之后，相信对Lambda表达式的语法以及基本原理有了一定了解。对于编写代码，有这些知识已经够用。本文将进一步区分Lambda表达式和匿名内部类在JVM层面的区别。</p>
<p>经过第一篇的的介绍，我们看到Lambda表达式似乎只是为了简化匿名内部类书写，这看起来仅仅通过语法糖在编译阶段把所有的Lambda表达式替换成匿名内部类就可以了。但实时并非如此。在JVM层面，Lambda表达式和匿名内部类有着明显的差别。</p>
<h3 id="匿名内部类实现"><a href="#匿名内部类实现" class="headerlink" title="匿名内部类实现"></a>匿名内部类实现</h3><p><strong>匿名内部类仍然是一个类，只是不需要程序员显示指定类名，编译器会自动为该类取名</strong>。因此如果有如下形式的代码，编译之后将会产生两个class文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAnonymousClass</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Anonymous Class Thread run()&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;).start();;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译之后文件分布如下，两个class文件分别是主类和匿名内部类产生的：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2-AnonymousClass.png"></p>
<p>进一步分析主类MainAnonymousClass.class的字节码，可发现其创建了匿名内部类的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javap -c MainAnonymousClass.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAnonymousClass</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class java/lang/Thread</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: new           #3                  // class MainAnonymousClass$1 /*创建内部类对象*/</span><br><span class="line">       <span class="number">7</span>: dup</span><br><span class="line">       8: invokespecial #4                  // Method MainAnonymousClass$1.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      11: invokespecial #5                  // Method java/lang/Thread.&quot;&lt;init&gt;&quot;:(Ljava/lang/Runnable;)V</span><br><span class="line">      14: invokevirtual #6                  // Method java/lang/Thread.start:()V</span><br><span class="line">      <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda表达式实现"><a href="#Lambda表达式实现" class="headerlink" title="Lambda表达式实现"></a>Lambda表达式实现</h3><p><strong>Lambda表达式通过invokedynamic指令实现，书写Lambda表达式不会产生新的类</strong>。如果有如下代码，编译之后只有一个class文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainLambda</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(</span><br><span class="line">				() -&gt; System.out.println(<span class="string">&quot;Lambda Thread run()&quot;</span>)</span><br><span class="line">			).start();;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译之后的结果：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/2-Lambda.png"></p>
<p>通过javap反编译命名，我们更能看出Lambda表达式内部表示的不同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; javap -c -p MainLambda.class</span><br><span class="line">public class MainLambda &#123;</span><br><span class="line">  ...</span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Thread</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokedynamic #3,  0              &#x2F;&#x2F; InvokeDynamic #0:run:()Ljava&#x2F;lang&#x2F;Runnable; &#x2F;*使用invokedynamic指令调用*&#x2F;</span><br><span class="line">       9: invokespecial #4                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.&quot;&lt;init&gt;&quot;:(Ljava&#x2F;lang&#x2F;Runnable;)V</span><br><span class="line">      12: invokevirtual #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.start:()V</span><br><span class="line">      15: return</span><br><span class="line"></span><br><span class="line">  private static void lambda$main$0();  &#x2F;*Lambda表达式被封装成主类的私有方法*&#x2F;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #6                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">       3: ldc           #7                  &#x2F;&#x2F; String Lambda Thread run()</span><br><span class="line">       5: invokevirtual #8                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">       8: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反编译之后我们发现Lambda表达式被封装成了主类的一个私有方法，并通过<code>invokedynamic</code>指令进行调用。</p>
<p>它没有创建将包装 Lambda 函数的新对象，而是使用Java 7 中添加的新<code>invokeDynamic</code>指令将此调用站点动态链接到实际的 Lambda 函数。</p>
<div class="note no-icon success"><p>看到 Java，最“严格”的现代语言现在如何使用动态链接来支持其新的 Lambda 表达式，真是令人着迷。这也是一种有效的方法，因为不需要额外的类加载和编译——Lambda 方法只是我们类中的另一个私有方法。</p>
</div>

<hr>
<h1 id="Lambda表达式和内部类区别二"><a href="#Lambda表达式和内部类区别二" class="headerlink" title="Lambda表达式和内部类区别二"></a>Lambda表达式和内部类区别二</h1><p>尽管在实际开发中基本上用 lambda 表达式替换了内部类，但这两个概念在一个重要方面是不同的：作用域。</p>
<p>既然Lambda表达式不是内部类的简写，那么Lambda内部的<code>this</code>引用也就跟内部类对象没什么关系了。在Lambda表达式中<code>this</code>的意义跟在表达式外部完全一样。因此下列代码将输出两遍<code>Hello Hoolee</code>，而不是两个引用地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	Runnable r1 = () -&gt; &#123; System.out.println(<span class="keyword">this</span>); &#125;;</span><br><span class="line">	Runnable r2 = () -&gt; &#123; System.out.println(toString()); &#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Hello().r1.run();</span><br><span class="line">		<span class="keyword">new</span> Hello().r2.run();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Hello Hoolee&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而对于匿名类，关键词 <code>this</code> 解读为匿名类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    String name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name); <span class="comment">//zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Lambda-and-Collections"><a href="#Lambda-and-Collections" class="headerlink" title="Lambda and Collections"></a>Lambda and Collections</h1><p>我们先从最熟悉的*Java集合框架(Java Collections Framework, JCF)*开始说起。</p>
<p>为引入Lambda表达式，Java8新增了<code>java.util.funcion</code>包，里面包含常用的<strong>函数接口</strong>，这是Lambda表达式的基础，Java集合框架也新增部分接口，以便与Lambda表达式对接。</p>
<p>首先回顾一下Java集合框架的接口继承结构：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/JCF_Collection_Interfaces.png"></p>
<p>上图中绿色标注的接口类，表示在Java8中加入了新的接口方法，当然由于继承关系，他们相应的子类也都会继承这些新方法。下表详细列举了这些方法。</p>
<table>
<thead>
<tr>
<th align="left">接口名</th>
<th align="left">Java8新加入的方法</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Collection</code></td>
<td align="left"><code>removeIf() spliterator() stream() parallelStream() forEach()</code></td>
</tr>
<tr>
<td align="left"><code>List</code></td>
<td align="left"><code>replaceAll() sort()</code></td>
</tr>
<tr>
<td align="left"><code>Map</code></td>
<td align="left"><code>getOrDefault() forEach() replaceAll() putIfAbsent() remove() replace() computeIfAbsent() computeIfPresent() compute() merge()</code></td>
</tr>
</tbody></table>
<p>这些新加入的方法大部分要用到<code>java.util.function</code>包下的接口，这意味着这些方法大部分都跟Lambda表达式相关。我们将逐一学习这些方法。</p>
<h3 id="Collection中的新方法"><a href="#Collection中的新方法" class="headerlink" title="Collection中的新方法"></a>Collection中的新方法</h3><p>如上所示，接口<code>Collection</code>和<code>List</code>新加入了一些方法，我们以<code>List</code>的子类<code>ArrayList</code>为例来说明。了解<a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/2-ArrayList.md">Java7<code>ArrayList</code>实现原理</a>，将有助于理解下文。</p>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p>该方法的签名为<code>void forEach(Consumer<? super E> action)</code>，作用是对容器中的每个元素执行<code>action</code>指定的动作，其中<code>Consumer</code>是个函数接口，里面只有一个待实现方法<code>void accept(T t)</code>（后面我们会看到，这个方法叫什么根本不重要，你甚至不需要记忆它的名字）。</p>
<p>需求：<em>假设有一个字符串列表，需要打印出其中所有长度大于3的字符串.</em></p>
<p>Java7及以前我们可以用<code>增强的for循环</code>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用曾强for循环迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">        System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在使用<code>forEach()</code>方法结合匿名内部类，可以这样实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合匿名内部类迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.forEach(<span class="keyword">new</span> Consumer&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码调用<code>forEach()</code>方法，并使用匿名内部类实现<code>Comsumer</code>接口。到目前为止我们没看到这种设计有什么好处，但是不要忘记Lambda表达式，使用Lambda表达式实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合Lambda表达式迭代</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.forEach( str -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码给<code>forEach()</code>方法传入一个Lambda表达式，我们不需要知道<code>accept()</code>方法，也不需要知道<code>Consumer</code>接口，类型推导帮我们做了一切。</p>
<h4 id="removeIf"><a href="#removeIf" class="headerlink" title="removeIf()"></a>removeIf()</h4><p>该方法签名为<code>boolean removeIf(Predicate<? super E> filter)</code>，作用是<strong>删除容器中所有满足<code>filter</code>指定条件的元素</strong>，其中<code>Predicate</code>是一个函数接口，里面只有一个待实现方法<code>boolean test(T t)</code>，同样的这个方法的名字根本不重要，因为用的时候不需要书写这个名字。</p>
<p>需求：<em>假设有一个字符串列表，需要删除其中所有长度大于3的字符串。</em></p>
<p>我们知道如果需要在迭代过程冲对容器进行删除操作必须使用迭代器，否则会抛出<code>ConcurrentModificationException</code>，所以上述任务传统的写法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用迭代器删除列表元素</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="keyword">if</span>(it.next().length()&gt;<span class="number">3</span>) <span class="comment">// 删除长度大于3的元素</span></span><br><span class="line">        it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在使用<code>removeIf()</code>方法结合匿名内部类，我们可是这样实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用removeIf()结合匿名名内部类实现</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.removeIf(<span class="keyword">new</span> Predicate&lt;String&gt;()&#123; <span class="comment">// 删除长度大于3的元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.length()&gt;<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码使用<code>removeIf()</code>方法，并使用匿名内部类实现<code>Precicate</code>接口。相信你已经想到用Lambda表达式该怎么写了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用removeIf()结合Lambda表达式实现</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.removeIf(str -&gt; str.length()&gt;<span class="number">3</span>); <span class="comment">// 删除长度大于3的元素</span></span><br></pre></td></tr></table></figure>

<p>使用Lambda表达式不需要记忆<code>Predicate</code>接口名，也不需要记忆<code>test()</code>方法名，只需要知道此处需要一个返回布尔类型的Lambda表达式就行了。</p>
<h4 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h4><p>该方法签名为<code>void replaceAll(UnaryOperator&lt;E> operator)</code>，作用是<strong>对每个元素执行<code>operator</code>指定的操作，并用操作结果来替换原来的元素</strong>。其中<code>UnaryOperator</code>是一个函数接口，里面只有一个待实现函数<code>T apply(T t)</code>。</p>
<p>需求：<em>假设有一个字符串列表，将其中所有长度大于3的元素转换成大写，其余元素不变。</em></p>
<p>Java7及之前似乎没有优雅的办法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用下标实现元素替换</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">    String str = list.get(i);</span><br><span class="line">    <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">        list.set(i, str.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>replaceAll()</code>方法结合匿名内部类可以实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用匿名内部类实现</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.replaceAll(<span class="keyword">new</span> UnaryOperator&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码调用<code>replaceAll()</code>方法，并使用匿名内部类实现<code>UnaryOperator</code>接口。我们知道可以用更为简洁的Lambda表达式实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Lambda表达式实现</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.replaceAll(str -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(str.length()&gt;<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>该方法定义在<code>List</code>接口中，方法签名为<code>void sort(Comparator<? super E> c)</code>，该方法<strong>根据<code>c</code>指定的比较规则对容器元素进行排序</strong>。<code>Comparator</code>接口我们并不陌生，其中有一个方法<code>int compare(T o1, T o2)</code>需要实现，显然该接口是个函数接口。</p>
<p>需求：<em>假设有一个字符串列表，按照字符串长度增序对元素排序。</em></p>
<p>由于Java7以及之前<code>sort()</code>方法在<code>Collections</code>工具类中，所以代码要这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Collections.sort()方法</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String str1, String str2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str1.length()-str2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>现在可以直接使用<code>List.sort()方法</code>，结合Lambda表达式，可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// List.sort()方法结合Lambda表达式</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;love&quot;</span>, <span class="string">&quot;you&quot;</span>, <span class="string">&quot;too&quot;</span>));</span><br><span class="line">list.sort((str1, str2) -&gt; str1.length()-str2.length());</span><br></pre></td></tr></table></figure>

<h4 id="spliterator"><a href="#spliterator" class="headerlink" title="spliterator()"></a>spliterator()</h4><p>方法签名为<code>Spliterator&lt;E> spliterator()</code>，该方法返回容器的<strong>可拆分迭代器</strong>。从名字来看该方法跟<code>iterator()</code>方法有点像，我们知道<code>iterator()</code>是用来迭代容器的，<code>Spliterator</code>也有类似作用，但二者有如下不同：</p>
<ol>
<li><code>Spliterator</code>既可以像<code>iterator()</code>那样逐个迭代，也可以批量迭代。批量迭代可以降低迭代的开销。</li>
<li><code>Spliterator</code>是可拆分的，一个<code>Spliterator</code>可以通过调用<code>Spliterator&lt;T> trySplit()</code>方法来尝试分成两个。一个是<code>this</code>，另一个是新返回的那个，这两个迭代器代表的元素没有重叠。</li>
</ol>
<p>可通过（多次）调用<code>Spliterator.trySplit()</code>方法来分解负载，以便多线程处理。</p>
<h4 id="stream-和parallelStream"><a href="#stream-和parallelStream" class="headerlink" title="stream()和parallelStream()"></a>stream()和parallelStream()</h4><p><code>stream()</code>和<code>parallelStream()</code>分别<strong>返回该容器的<code>Stream</code>视图表示</strong>，不同之处在于<code>parallelStream()</code>返回并行的<code>stream()</code>。<code>stream()</code><strong>是Java函数式编程的核心类</strong>，我们会在后面章节中学习。</p>
<hr>
<h3 id="Map中的新方法"><a href="#Map中的新方法" class="headerlink" title="Map中的新方法"></a>Map中的新方法</h3><p>相比<code>Collection</code>，Map<code>中加入了更多的方法，我们以</code>HashMap<code>为例来逐一探秘。了解[Java7</code>HashMap`实现原理](<a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet">https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet</a> and HashMap.md)，将有助于理解下文。</p>
<h4 id="forEach-1"><a href="#forEach-1" class="headerlink" title="forEach()"></a>forEach()</h4><p>该方法签名为<code>void forEach(BiConsumer<? super K,? super V> action)</code>，作用是<strong>对<code>Map</code>中的每个映射执行<code>action</code>指定的操作</strong>，其中<code>BiConsumer</code>是一个函数接口，里面有一个待实现方法<code>void accept(T t, U u)</code>。<code>BinConsumer</code>接口名字和<code>accept()</code>方法名字都不重要，请不要记忆他们。</p>
<p>需求：<em>假设有一个数字到对应英文单词的Map，请输出Map中的所有映射关系．</em></p>
<p>Java7以及之前经典的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java7以及之前迭代Map</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>Map.forEach()</code>方法，结合匿名内部类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合匿名内部类迭代Map</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">map.forEach(<span class="keyword">new</span> BiConsumer&lt;Integer, String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer k, String v)</span></span>&#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;=&quot;</span> + v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码调用<code>forEach()</code>方法，并使用匿名内部类实现<code>BiConsumer</code>接口。当然，实际场景中没人使用匿名内部类写法，因为有Lambda表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用forEach()结合Lambda表达式迭代Map</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">map.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;=&quot;</span> + v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="getOrDefault"><a href="#getOrDefault" class="headerlink" title="getOrDefault()"></a>getOrDefault()</h4><p>该方法跟Lambda表达式没关系，但是很有用。方法签名为<code>V getOrDefault(Object key, V defaultValue)</code>，作用是按照给定的<code>key</code>查询<code>Map</code>中对应的<code>value</code>，如果没有找到则返回<code>defaultValue</code>。使用该方法程序员可以省去查询指定键值是否存在的麻烦．</p>
<p>需求；<em>假设有一个数字到对应英文单词的Map，输出4对应的英文单词，如果不存在则输出NoValue</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询Map中指定的值，不存在时使用默认值</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line"><span class="comment">// Java7以及之前做法</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(<span class="number">4</span>))&#123; <span class="comment">// 1</span></span><br><span class="line">    System.out.println(map.get(<span class="number">4</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;NoValue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Java8使用Map.getOrDefault()</span></span><br><span class="line">System.out.println(map.getOrDefault(<span class="number">4</span>, <span class="string">&quot;NoValue&quot;</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="putIfAbsent"><a href="#putIfAbsent" class="headerlink" title="putIfAbsent()"></a>putIfAbsent()</h4><p>该方法跟Lambda表达式没关系，但是很有用。方法签名为<code>V putIfAbsent(K key, V value)</code>，作用是只有在<strong>不存在<code>key</code>值的映射或映射值为<code>null</code>时</strong>，才将<code>value</code>指定的值放入到<code>Map</code>中，否则不对<code>Map</code>做更改．该方法将条件判断和赋值合二为一，使用起来更加方便．</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>我们都知道<code>Map</code>中有一个<code>remove(Object key)</code>方法，来根据指定<code>key</code>值删除<code>Map</code>中的映射关系；Java8新增了<code>remove(Object key, Object value)</code>方法，只有在当前<code>Map</code>中**<code>key</code>正好映射到<code>value</code>时**才删除该映射，否则什么也不做．</p>
<h4 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h4><p>在Java7及以前，要想替换<code>Map</code>中的映射关系可通过<code>put(K key, V value)</code>方法实现，该方法总是会用新值替换原来的值．为了更精确的控制替换行为，Java8在<code>Map</code>中加入了两个<code>replace()</code>方法，分别如下：</p>
<ul>
<li><code>replace(K key, V value)</code>，只有在当前<code>Map</code>中**<code>key</code>的映射存在时**才用<code>value</code>去替换原来的值，否则什么也不做．</li>
<li><code>replace(K key, V oldValue, V newValue)</code>，只有在当前<code>Map</code>中**<code>key</code>的映射存在且等于<code>oldValue</code>时**才用<code>newValue</code>去替换原来的值，否则什么也不做．</li>
</ul>
<h4 id="replaceAll-1"><a href="#replaceAll-1" class="headerlink" title="replaceAll()"></a>replaceAll()</h4><p>该方法签名为<code>replaceAll(BiFunction<? super K,? super V,? extends V> function)</code>，作用是对<code>Map</code>中的每个映射执行<code>function</code>指定的操作，并用<code>function</code>的执行结果替换原来的<code>value</code>，其中<code>BiFunction</code>是一个函数接口，里面有一个待实现方法<code>R apply(T t, U u)</code>．不要被如此多的函数接口吓到，因为使用的时候根本不需要知道他们的名字．</p>
<p>需求：<em>假设有一个数字到对应英文单词的Map，请将原来映射关系中的单词都转换成大写．</em></p>
<p>Java7以及之前经典的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java7以及之前替换所有Map中所有映射关系</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">    entry.setValue(entry.getValue().toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>replaceAll()</code>方法结合匿名内部类，实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用replaceAll()结合匿名内部类实现</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">map.replaceAll(<span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer k, String v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述代码调用<code>replaceAll()</code>方法，并使用匿名内部类实现<code>BiFunction</code>接口。更进一步的，使用Lambda表达式实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用replaceAll()结合Lambda表达式实现</span></span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">map.replaceAll((k, v) -&gt; v.toUpperCase());</span><br></pre></td></tr></table></figure>

<p>简洁到让人难以置信．</p>
<h4 id="merge"><a href="#merge" class="headerlink" title="merge()"></a>merge()</h4><p>该方法签名为<code>merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)</code>，作用是：</p>
<ol>
<li>如果<code>Map</code>中<code>key</code>对应的映射不存在或者为<code>null</code>，则将<code>value</code>（不能是<code>null</code>）关联到<code>key</code>上；</li>
<li>否则执行<code>remappingFunction</code>，如果执行结果非<code>null</code>则用该结果跟<code>key</code>关联，否则在<code>Map</code>中删除<code>key</code>的映射．</li>
</ol>
<p>参数中<code>BiFunction</code>函数接口前面已经介绍过，里面有一个待实现方法<code>R apply(T t, U u)</code>．</p>
<p><code>merge()</code>方法虽然语义有些复杂，但该方法的用方式很明确，一个比较常见的场景是将新的错误信息拼接到原来的信息上，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.merge(key, newMsg, (v1, v2) -&gt; v1+v2);</span><br></pre></td></tr></table></figure>

<h4 id="compute"><a href="#compute" class="headerlink" title="compute()"></a>compute()</h4><p>该方法签名为<code>compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)</code>，作用是把<code>remappingFunction</code>的计算结果关联到<code>key</code>上，如果计算结果为<code>null</code>，则在<code>Map</code>中删除<code>key</code>的映射．</p>
<p>要实现上述<code>merge()</code>方法中错误信息拼接的例子，使用<code>compute()</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.compute(key, (k,v) -&gt; v==<span class="keyword">null</span> ? newMsg : v.concat(newMsg));</span><br></pre></td></tr></table></figure>

<h4 id="computeIfAbsent"><a href="#computeIfAbsent" class="headerlink" title="computeIfAbsent()"></a>computeIfAbsent()</h4><p>该方法签名为<code>V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)</code>，作用是：只有在当前<code>Map</code>中<strong>不存在<code>key</code>值的映射或映射值为<code>null</code>时</strong>，才调用<code>mappingFunction</code>，并在<code>mappingFunction</code>执行结果非<code>null</code>时，将结果跟<code>key</code>关联．</p>
<p><code>Function</code>是一个函数接口，里面有一个待实现方法<code>R apply(T t)</code>．</p>
<p><code>computeIfAbsent()</code>常用来对<code>Map</code>的某个<code>key</code>值建立初始化映射．比如我们要实现一个多值映射，<code>Map</code>的定义可能是<code>Map<K,Set&lt;V>></code>，要向<code>Map</code>中放入新值，可通过如下代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, Set&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// Java7及以前的实现方式</span></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(<span class="number">1</span>))&#123;</span><br><span class="line">    map.get(<span class="number">1</span>).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Set&lt;String&gt; valueSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    valueSet.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    map.put(<span class="number">1</span>, valueSet);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Java8的实现方式</span></span><br><span class="line">map.computeIfAbsent(<span class="number">1</span>, v -&gt; <span class="keyword">new</span> HashSet&lt;String&gt;()).add(<span class="string">&quot;yi&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用<code>computeIfAbsent()</code>将条件判断和添加操作合二为一，使代码更加简洁．</p>
<h4 id="computeIfPresent"><a href="#computeIfPresent" class="headerlink" title="computeIfPresent()"></a>computeIfPresent()</h4><p>该方法签名为<code>V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)</code>，作用跟<code>computeIfAbsent()</code>相反，即，只有在当前<code>Map</code>中<strong>存在<code>key</code>值的映射且非<code>null</code>时</strong>，才调用<code>remappingFunction</code>，如果<code>remappingFunction</code>执行结果为<code>null</code>，则删除<code>key</code>的映射，否则使用该结果替换<code>key</code>原来的映射．</p>
<p>这个函数的功能跟如下代码是等效的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java7及以前跟computeIfPresent()等效的代码</span></span><br><span class="line"><span class="keyword">if</span> (map.get(key) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    V oldValue = map.get(key);</span><br><span class="line">    V newValue = remappingFunction.apply(key, oldValue);</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="keyword">null</span>)</span><br><span class="line">        map.put(key, newValue);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map.remove(key);</span><br><span class="line">    <span class="keyword">return</span> newValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>Java8为容器新增一些有用的方法，这些方法有些是为<strong>完善原有功能</strong>，有些是为<strong>引入函数式编程</strong>，学习和使用这些方法有助于我们写出更加简洁有效的代码．</li>
<li><strong>函数接口</strong>虽然很多，但绝大多数时候我们根本不需要知道它们的名字，书写Lambda表达式时类型推断帮我们做了一切．</li>
</ol>
<hr>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用（<code>Method Reference</code>）是用来直接访问类或者实例已经存在的方法或者构造方法。方法引用提供了一种引用而不执行方法的方式，它需要由兼容的函数式接口构成的目标类型上下文。计算时，方法引用会创建函数式接口的一个实例。</p>
<p>当Lambda表达式中只是执行一个方法调用时，不用Lambda表达式，直接通过方法引用的形式可读性更高一些。</p>
<p>作用</p>
<ul>
<li>方法引用的唯一用途是支持Lambda的简写。</li>
<li>方法引用提高了代码的可读性，也使逻辑更加清晰。</li>
</ul>
<p>组成</p>
<ul>
<li>使用<code>::</code>操作符将方法名和对象或类的名字分隔开。<code>::</code>是域操作符（也可以称作定界符、分隔符）。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法引用</strong></th>
<th>等价的Lambda表达式</th>
</tr>
</thead>
<tbody><tr>
<td><code>String::valueOf</code></td>
<td><code>x -> String.valueOf(x)</code></td>
</tr>
<tr>
<td><code>Object::toString</code></td>
<td><code>x -> x.toString()</code></td>
</tr>
<tr>
<td><code>x::toString</code></td>
<td><code>() -> x.toString()</code></td>
</tr>
<tr>
<td><code>ArrayList::new</code></td>
<td><code>() -> new ArrayList<>()</code></td>
</tr>
</tbody></table>
<p>方法引用的类型归结如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>静态方法引用</td>
<td><code>ClassName::methodName</code></td>
</tr>
<tr>
<td>指定对象实例方法引用</td>
<td><code>instanceRef::methodName</code></td>
</tr>
<tr>
<td>特定类型任意对象方法引用</td>
<td><code>ContainingType::methodName</code></td>
</tr>
<tr>
<td>超类方法引用</td>
<td><code>supper::methodName</code></td>
</tr>
<tr>
<td>构造器方法引用</td>
<td><code>ClassName::new</code></td>
</tr>
<tr>
<td>数组构造器方法引用</td>
<td><code>TypeName[]::new</code></td>
</tr>
</tbody></table>
<p>可见其基本形式是：<code>方法容器::方法名称或者关键字</code>。</p>
<p>举一些基本的使用例子：</p>
<h2 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticMethodRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function&lt;String, Integer&gt; function = StaticMethodRef::staticMethod;</span><br><span class="line">        <span class="comment">// 等同于</span></span><br><span class="line">        <span class="comment">// Function&lt;String, Integer&gt; function1 = (String s) -&gt; StaticMethodRef.staticMethod(s);</span></span><br><span class="line">        Integer result = function.apply(<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">        <span class="comment">// 10086</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">staticMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指定对象实例方法引用"><a href="#指定对象实例方法引用" class="headerlink" title="指定对象实例方法引用"></a>指定对象实例方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticularInstanceRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">refMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParticularInstanceRef ref = <span class="keyword">new</span> ParticularInstanceRef();</span><br><span class="line">        Function&lt;String, Integer&gt; function = ref::refMethod;</span><br><span class="line">        <span class="comment">// 等同于</span></span><br><span class="line">        <span class="comment">// Function&lt;String,Integer&gt; function1 = (String s) -&gt; ref.refMethod(s);</span></span><br><span class="line">        Integer result = function.apply(<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">        <span class="comment">// 10086</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特定类型任意对象方法引用"><a href="#特定类型任意对象方法引用" class="headerlink" title="特定类型任意对象方法引用"></a>特定类型任意对象方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] stringArray = &#123;<span class="string">&quot;C&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;B&quot;</span>&#125;;</span><br><span class="line">Arrays.sort(stringArray, String::compareToIgnoreCase);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// Arrays.sort(stringArray, (String s1, String s2) -&gt; s1.compareToIgnoreCase(s2));</span></span><br><span class="line"><span class="comment">// [a, B, C]</span></span><br><span class="line">System.out.println(Arrays.toString(stringArray));</span><br></pre></td></tr></table></figure>

<h2 id="超类方法引用"><a href="#超类方法引用" class="headerlink" title="超类方法引用"></a>超类方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupperRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Sub sub = <span class="keyword">new</span> Sub();</span><br><span class="line">        <span class="comment">// 10086</span></span><br><span class="line">        System.out.println(sub.refMethod(<span class="string">&quot;10086&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Supper</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Integer <span class="title">supperRefMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Supper</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Integer <span class="title">refMethod</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            Function&lt;String, Integer&gt; function = <span class="keyword">super</span>::supperRefMethod;</span><br><span class="line">            <span class="comment">// 等同于</span></span><br><span class="line">            <span class="comment">// Function&lt;String,Integer&gt; function1 = (String s) -&gt; super.supperRefMethod(s);</span></span><br><span class="line">            <span class="keyword">return</span> function.apply(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造器方法引用"><a href="#构造器方法引用" class="headerlink" title="构造器方法引用"></a>构造器方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Function&lt;String, Person&gt; function = Person::<span class="keyword">new</span>;</span><br><span class="line">        <span class="comment">// 等同于</span></span><br><span class="line">        <span class="comment">// Function&lt;String,Person&gt; function1 = (String s) -&gt; new Person(s);</span></span><br><span class="line">        Person person = function.apply(<span class="string">&quot;thinkwon&quot;</span>);</span><br><span class="line">        <span class="comment">// doge</span></span><br><span class="line">        System.out.println(person.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组构造器方法引用"><a href="#数组构造器方法引用" class="headerlink" title="数组构造器方法引用"></a>数组构造器方法引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer, Integer[]&gt; function = Integer[]::<span class="keyword">new</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// Function&lt;Integer, Integer[]&gt; function1 = (Integer i) -&gt; new Integer[i];</span></span><br><span class="line">Integer[] array = function.apply(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// [null, null, null, null, null, null, null, null, null, null]</span></span><br><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Filter-amp-Predicate"><a href="#Filter-amp-Predicate" class="headerlink" title="Filter &amp; Predicate"></a>Filter &amp; Predicate</h1><p>常规用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(args[])</span></span>&#123;</span><br><span class="line">    List languages = Arrays.asList(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Scala&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Haskell&quot;</span>, <span class="string">&quot;Lisp&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Languages which starts with J :&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.startsWith(<span class="string">&quot;J&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Languages which ends with a &quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.endsWith(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Print all languages :&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Print no language : &quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;<span class="keyword">false</span>);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;Print language whose length greater than 4:&quot;</span>);</span><br><span class="line">    filter(languages, (str)-&gt;str.length() &gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List names, Predicate condition)</span> </span>&#123;</span><br><span class="line">    names.stream().filter((name) -&gt; (condition.test(name))).forEach((name) -&gt; &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>多个Predicate组合filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以用and()、or()和xor()逻辑函数来合并Predicate，</span></span><br><span class="line"><span class="comment">// 例如要找到所有以J开始，长度为四个字母的名字，你可以合并两个Predicate并传入</span></span><br><span class="line">Predicate&lt;String&gt; startsWithJ = (n) -&gt; n.startsWith(<span class="string">&quot;J&quot;</span>);</span><br><span class="line">Predicate&lt;String&gt; fourLetterLong = (n) -&gt; n.length() == <span class="number">4</span>;</span><br><span class="line">names.stream()</span><br><span class="line">    .filter(startsWithJ.and(fourLetterLong))</span><br><span class="line">    .forEach((n) -&gt; System.out.print(<span class="string">&quot;nName, which starts with &#x27;J&#x27; and four letter long is : &quot;</span> + n));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Lambda</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbook使用技巧</title>
    <url>/2021/10/19/Macbook%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="批量更改文件名称"><a href="#批量更改文件名称" class="headerlink" title="批量更改文件名称"></a>批量更改文件名称</h1><p>对我而言这个功能最好用的是批量更改时替换功能，在截了一堆图需要改名字的时候就可以派上用场。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/batchRename1.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/batchRename2.png"></p>
<h1 id="聚焦Spotlight"><a href="#聚焦Spotlight" class="headerlink" title="聚焦Spotlight"></a>聚焦<strong>Spotlight</strong></h1><p>“聚焦”可以帮助您快速找到 Mac 上的 App、文稿和其他文件。借助 Siri 建议，您还可以获取最新新闻、体育赛事比分、天气状况等信息。“聚焦”甚至可以为您进行计算和转换。</p>
<h2 id="搜索内容"><a href="#搜索内容" class="headerlink" title="搜索内容"></a>搜索内容</h2><ol>
<li><p>在 Mac 上，点按<a href="https://support.apple.com/zh-cn/guide/mac-help/aside/glos33eb8abd/11.0/mac/11.0">菜单栏</a>中的“聚焦”图标 <img src="https://help.apple.com/assets/605932B4A1B7A93F492858E8/605932C0A1B7A93F492858FF/zh_CN/bb4de0babc81c7fedb3e9663d00d7a3a.png" alt="img" style="zoom:25%;" />（如果显示），或者按下 Command-空格键或按下键盘上功能键行中的 <img src="https://help.apple.com/assets/605932B4A1B7A93F492858E8/605932C0A1B7A93F492858FF/zh_CN/bb4de0babc81c7fedb3e9663d00d7a3a.png" alt="聚焦键" style="zoom:25%;" />（如果可用）。</p>
<p>您可以将“聚焦”窗口拖到桌面上的任意位置。</p>
<p><strong>【提示】</strong>如果“聚焦”图标未显示在菜单栏中，请<a href="https://support.apple.com/zh-cn/guide/mac-help/mchlp1119/11.0/mac/11.0">使用“程序坞与菜单栏”偏好设置</a>进行添加。</p>
</li>
<li><p>在搜索栏中，键入要查找的内容，键入时结果会随之出现。</p>
<p>“聚焦”首先列出最常点选，点按一个最常点选以进行预览或打开。“聚焦”还会建议搜索的各种变体；您可以在“聚焦”或网上查看这些结果。</p>
<p><img src="https://help.apple.com/assets/605932B4A1B7A93F492858E8/605932C0A1B7A93F492858FF/zh_CN/5026e0adf32c51825c1daf163ec73501.png" alt="“聚焦”窗口顶部显示了搜索栏中的搜索文本，下方是结果。"></p>
</li>
<li><p>在结果中，执行以下任一项操作：</p>
<ul>
<li><em>显示预览：</em>按下 Tab 键。根据结果中所选的项目类型，您可以与之交互。例如，选择 App 以查看最近打开文件的列表，然后点按以打开文件。或者点按“播放”按钮来聆听歌曲。</li>
</ul>
</li>
</ol>
<h2 id="在“聚焦”中进行计算和转换"><a href="#在“聚焦”中进行计算和转换" class="headerlink" title="在“聚焦”中进行计算和转换"></a>在“聚焦”中进行计算和转换</h2><p>您可以在“聚焦”搜索栏中输入数学表达式、金额、温度或单位，搜索栏中会立即显示转换或计算结果。</p>
<p><img src="https://help.apple.com/assets/605932B4A1B7A93F492858E8/605932C0A1B7A93F492858FF/zh_CN/6136d2d5c08bb8b6ebf10fc3c3248f48.png" alt="“聚焦”窗口，显示搜索栏中从码到米的转换。左侧是搜索结果列表。右侧预览中显示更多转换。"></p>
<ul>
<li><em>计算：</em>输入数学表达式，如 956*23.94 或 2020/15。</li>
<li><em>货币转换：</em>输入金额，如 100 美元、100 日元或“300 克朗转换成欧元”。</li>
<li><em>温度转换：</em>输入温度，如 98.8F、32C 或“340K 转换成华氏度”。</li>
<li><em>单位转换：</em>输入度量单位，例如 25 磅、54 码、23 英石或“32 英尺转换成米”。</li>
</ul>
<p><strong>【提示】</strong>按下 Tab 键以在预览区域中显示更多转换。</p>
<h1 id="快速添加emoji表情"><a href="#快速添加emoji表情" class="headerlink" title="快速添加emoji表情"></a>快速添加emoji表情</h1><p>按住键盘Control+Command+空格键，此时你的输入栏中，就会跳出所有表情了。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/emoji.png"></p>
<p>​                </p>
<h1 id="快速锁屏"><a href="#快速锁屏" class="headerlink" title="快速锁屏"></a>快速锁屏</h1><p>只需按住control+command+Q，此时你的MacBook就会马上锁屏</p>
<hr>
<h1 id="向后删除"><a href="#向后删除" class="headerlink" title="向后删除"></a>向后删除</h1><p>文本编辑时按 Fn + Delete 键可向后删除内容</p>
<hr>
<h1 id="切换应用程序"><a href="#切换应用程序" class="headerlink" title="切换应用程序"></a>切换应用程序</h1><p>按住command键再按tab键，可从左往右切换已打开的应用程序；command+shift+tab，可从右往左切换</p>
<hr>
<h1 id="触控板手势"><a href="#触控板手势" class="headerlink" title="触控板手势"></a>触控板手势</h1><p>Mac触控板强大无比，掌握触控板使用技能，对提高学习工作效率大有帮助，打开Mac系统偏好设置中的触控板，选择相应手势，右边会有动画教程。</p>
<p>还有一个比较特殊的手势，三指拖动，需在系统偏好设置下的辅助功能中设置。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/split.png"></p>
<hr>
<h1 id="设置文件默认打开方式"><a href="#设置文件默认打开方式" class="headerlink" title="设置文件默认打开方式"></a>设置文件默认打开方式</h1><p>不同格式的文件有不同的默认打开方式，比如视频文件会默认用QuickTime Player打开，如果你想更改系统默认的打开方式，按照如下步骤设置即可，</p>
<p>单击你想要改变默认打开方式的文件，右键单击选择显示简介，或者按快捷键Command+i 显示简介；</p>
<p>在打开方式的下拉菜单中选择你需要的默认打开方式，点击全部更改，在弹出的窗口中选择继续即可。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/softopentype.png" style="zoom: 50%;" />

<hr>
<h1 id="自带截屏"><a href="#自带截屏" class="headerlink" title="自带截屏"></a>自带截屏</h1><ul>
<li><p>cmd+shift+3：对整个屏幕进行截图；</p>
</li>
<li><p>cmd+shift+4：对自行选择的区域进行截图；</p>
</li>
<li><p>cmd+shift+4+space（空格键）：对选定的某个应用程序界面窗口进行截图。</p>
</li>
</ul>
<hr>
<h1 id="Command（或-Cmd）⌘键"><a href="#Command（或-Cmd）⌘键" class="headerlink" title="Command（或 Cmd）⌘键"></a>Command（或 Cmd）⌘键</h1><p>以下是常用的12个快捷键：</p>
<ul>
<li>Command + X: 剪切</li>
<li>Command + C: 拷贝</li>
<li>Command + V: 原格式粘贴</li>
<li>Command + Shift +Option +V: 合并格式粘贴</li>
<li>Command + Z: 撤销上一个操作（Shift + Command + Z: 反向执行撤销命令）</li>
<li>Command + W: 关闭但不退出应用</li>
<li>Command + Q: 退出应用</li>
<li>Command + Option + Esc: 强制退出应用</li>
<li>Command + Tab: 切换应用</li>
<li>Command + 空格: “聚焦”查找</li>
<li>Command + Shift + 5（MacOS Mojave系统）: 截屏或录屏（其他MacOS: Command + Shift +3: 捕捉整个屏幕；Command + Shift +4: 自选截屏区域）</li>
<li>Command + Control + 空格: 添加emoji</li>
</ul>
<p>Command键除了上面 提到的常用组合快捷键外，还有很多其他功能，这里介绍四个关于Command的隐藏功能</p>
<ul>
<li>按住Command，可以选择并移动菜单栏图标</li>
</ul>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/top.png"></p>
<ul>
<li>在“聚焦”中搜索文件，按住Command就可以显示文件路径，按住Command打开文件可以打开所在的文件夹</li>
</ul>
<h1 id="Option（或-Alt）⌥键"><a href="#Option（或-Alt）⌥键" class="headerlink" title="Option（或 Alt）⌥键"></a>Option（或 Alt）⌥键</h1><ul>
<li><p>按住Option，可以同时关闭同个程序的多个窗口</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/MacBook/optioncloaseall.png" style="zoom:67%;" />
</li>
<li><p>按住Option，单击右侧翻页条任何位置，就可以快速跳到指定位置</p>
</li>
<li><p>『移动文件』CMD+C 复制文件，在目标目录 CMD+Option+V，就把原文件移动过来了，相当于剪切粘贴。</p>
</li>
<li><p>按住Option+拖到文件，可快速复制一份原文件</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Macbook</tag>
      </tags>
  </entry>
  <entry>
    <title>Java日志系统Logback+SLf4J</title>
    <url>/2023/08/19/Java%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9FLogback-SLf4J/</url>
    <content><![CDATA[<h1 id="Java中常用日志框架"><a href="#Java中常用日志框架" class="headerlink" title="Java中常用日志框架"></a>Java中常用日志框架</h1><h2 id="日志框架的演化"><a href="#日志框架的演化" class="headerlink" title="日志框架的演化"></a>日志框架的演化</h2><blockquote>
<ul>
<li>1996 年初，欧洲安全电子市场 (EU SEMPER) 项目组决定编写它自己的程序跟踪 API(Tracing API)。经过不断的完善，这个 API 终于成为一个十分受欢迎的 Java 日志软件包，即 Log4j。后来 Log4j 成为 Apache 基金会项目中的一员。</li>
<li>Log4j 发布后近乎成了 Java 社区的日志标准。据说 Apache 基金会还曾经建议 sun 引入 Log4j 到 java 的标准库中，但 Sun 拒绝了。</li>
<li>2002年 Java1.4 发布，Sun 推出了自己的日志库 JUL(Java Util Logging),其实现基本模仿了 Log4j 的实现。在 JUL 出来以前，log4j 就已经成为一项成熟的技术，使得 log4j 在选择上占据了一定的优势。</li>
<li>2005年，Apache 推出了 JCL(Jakarta Commons Logging)，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用 Commons Logging 的接口，底层实现可以是log4j，也可以是Java Util Logging。</li>
<li>2006年，Ceki Gülcü (Log4j最初由他编写) 开发了 SLF4J(The Simple Logging Facade for Java) 作为 JCL(Jakarta Commons Logging) 的更可靠替代方案。之后又开发了 Logback 框架 (Slf4j 的实现)，并回瑞典创建了 QOS 公司，QOS 官网上是这样描述 Logback 的：The Generic，Reliable Fast&amp;Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。</li>
<li>之后，Java 日志领域被划分为两大阵营：Commons Logging 阵营和 SLF4J 阵营。 Commons Logging 在 Apache 大树的笼罩下，有很大的用户基数。但有证据表明，形式正在发生变化。2013 年底有人分析了 GitHub 上30000个项目，统计出了最流行的100个 Libraries，可以看出 slf4j 的发展趋势更好</li>
<li>2012-07 Apache 重写了 log4j 1.x，成立了新的项目 Log4j2。Log4j2 具有 Logback 的所有特性。</li>
</ul>
</blockquote>
<p>现在，SLF4J + Logback 是 Spring Boot 的默认日志框架。</p>
<h2 id="日志框架的分类"><a href="#日志框架的分类" class="headerlink" title="日志框架的分类"></a>日志框架的分类</h2><p>日志框架分为<strong>日志门面框架</strong>和<strong>日志实现框架</strong>，那什么是<strong>日志门面框架</strong>和<strong>日志实现框架</strong>呢</p>
<ul>
<li><strong>日志门面框架</strong>指的是：无具体实现的抽象门面框架，如：Commons Logging、SLF4J</li>
<li><strong>日志实现框架</strong>：具体实现的框架，如：Log4j，Log4j2，Logback，Jul(java.util.logging)</li>
</ul>
<h3 id="日志门面框架"><a href="#日志门面框架" class="headerlink" title="日志门面框架"></a>日志门面框架</h3><p>日志门面:是门面模式的一个典型的应用,门面模式，也称外观模式。日志门面框架就使一套提供了日志相关功能的接口而无具体实现的框架，其调用具体的实现框架来进行日志记录。也就是说日志门面天然的兼容日志实现框架。</p>
<p>在java 生态中国日志门面框架主要有两个 Commons Logging 和 SLF4J</p>
<h4 id="Commons-Logging"><a href="#Commons-Logging" class="headerlink" title="Commons Logging"></a><strong>Commons Logging</strong></h4><p>common-logging 是 apache 提供的一个通用的日志接口， 在 common-logging 中，有一个 Simple logger 的简单实现，但是它功能很弱，所以使用 common-logging，通常都是配合着 log4j 来使用。</p>
<h4 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h4><p>SLF4J(Simple Logging Facade for Java），是一套包装 Logging 框架的界面程式，以外观模式实现。可以在软件部署的时候决定要使用的 Logging 框架，目前主要支援的有Java Logging API、Log4j及logback等框架。以MIT 授权方式发布。SLF4J 的作者就是 Log4j和Logback 的作者 Ceki Gülcü。</p>
<h3 id="日志实现框架"><a href="#日志实现框架" class="headerlink" title="日志实现框架"></a>日志实现框架</h3><h4 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h4><p>最早的日志实现框架，早期由 Ceki Gülcü 开发，现在则是Apache软件基金会的一个项目。</p>
<h4 id="JUL-Java-Util-Logging"><a href="#JUL-Java-Util-Logging" class="headerlink" title="JUL(Java Util Logging)"></a>JUL(Java Util Logging)</h4><p>Java 1.4 以来的官方日志实现,主要参考自 Log4j</p>
<h4 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h4><p>Log4j 的早期作者 Ceki Gülcü 开发的新一代日志框架</p>
<h4 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h4><p>Apache Log4j2 是 Apache Log4j 的升级产品,并且不兼容 Log4j，主要参考自 Logback</p>
<h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><ul>
<li><strong>成本考虑</strong>：Logback 的所有文档是全面免费提供，Apache Log4J 只提供部分免费文档,其余部分需要付费购买。</li>
<li><strong>资源开销</strong>：Commons Logging 相比较与 SLF4J 开销更高.</li>
<li><strong>性能</strong>：Logback 相比 Log4j、Log4j2 拥有更好的性能。Logback声称：某些关键操作，比如判定是否记录一条日志语句的操作，其性能得到了显著的提高。这个操作在Logback中需要3纳秒，而在Log4J中则需要30纳秒。LogBack创建记录器（logger）的速度也更快：13毫秒，而在Log4J中需要23毫秒。更重要的是，它获取已存在的记录器只需94纳秒，而Log4J需要2234纳秒，时间减少到了1/23。跟JUL相比的性能提高也是显著的。</li>
</ul>
<p>SLF4J + Logback 成为了实际开发中的最佳选择。</p>
<hr>
<h1 id="SpringBoot项目中配置SLF4J-Logback"><a href="#SpringBoot项目中配置SLF4J-Logback" class="headerlink" title="SpringBoot项目中配置SLF4J+Logback"></a>SpringBoot项目中配置SLF4J+Logback</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>要开始使用 <code>Logback</code>，首先需要将<code>logback-classic</code>依赖项添加到类路径中。让我们用 <code>Maven</code> 来做到这一点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入这个单一依赖项就足够了，因为它将间接引入<code>logback-core</code>和<code>slf4j-api</code>这两个依赖项。</p>
<p><strong>如果没有定义自定义配置，Logback 会自行提供简单的自动配置。</strong>默认情况下，这可确保日志语句以 <code>DEBUG</code> 级别打印到控制台。</p>
<p>因此，您现在可以获得*<code>Logger</code>*实例并开始使用默认的基本配置写入日志消息。</p>
<p>首先，您可以使用<code>slf4j LoggerFactory</code>类创建<code>Logger</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(LogbackTestApplication.class);</span><br></pre></td></tr></table></figure>

<p>接下来，您可以简单地使用你想要的日志级别并打印日志：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOGGER.info(<span class="string">&quot;LogbackTestApplication running...&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Logback配置文件"><a href="#Logback配置文件" class="headerlink" title="Logback配置文件"></a>Logback配置文件</h2><p><strong>要为 Logback 创建配置，您可以使用 XML 以及 Groovy</strong>。只要您遵守命名约定，系统就会自动选择并使用配置。</p>
<p>您可以选择三个有效的标准文件名：</p>
<ul>
<li><em>logback-test.xml</em></li>
<li><em>logback.groovy</em></li>
<li><em>logback.xml</em></li>
</ul>
<p>这里值得注意的是，<code>Logback</code> 将按照这个确切的顺序搜索这些文件。</p>
<p>展望未来，本教程中的示例将依赖于基于 <code>XML</code> 的 <code>logback.xml</code>文件。</p>
<p>让我们看看默认配置的基本配置是什么样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此配置定义了一个<code>ConsoleAppender</code>。控制台上的日志消息将使用<code>&lt;pattern&gt;</code>中配置的样式显示在打印控制台。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2023-08-19 15:57:13.086  INFO 72780 --- [           main] c.g.logbacktest.LogbackTestApplication   : LogbackTestApplication running...</span><br></pre></td></tr></table></figure>

<h2 id="Logback-配置文件结构"><a href="#Logback-配置文件结构" class="headerlink" title="Logback 配置文件结构"></a>Logback 配置文件结构</h2><p>Logback 配置文件的基本结构如下:</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/logback/23144709_brxi.webp"></p>
<p>如上，根节点为<code>&lt;configuration></code>元素，包含零个或多个<code>&lt;appender></code>元素，然后是零个或多个<code>&lt;logger></code>元素，然后是<strong>最多一个</strong><code>&lt;root></code><strong>元素</strong>。</p>
<p><code>logger</code>、<code>root</code> 作为日志的记录器，把它关联到应用的对应的 <code>context</code> 上后，主要用于存放日志对象，也可以定义日志类型、级别。</p>
<p><code>appender</code> 主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 <code>MySQL</code>、<code>PostreSQL</code>、 <code>Oracle</code> 和其他数据库、 <code>JMS</code> 和远程 <code>UNIX Syslog</code> 守护进程等。</p>
<h3 id="根节点-lt-configuration-gt"><a href="#根节点-lt-configuration-gt" class="headerlink" title="根节点&lt;configuration&gt;"></a>根节点&lt;configuration&gt;</h3><p>根节点 <code>&lt;configuration></code> 常用的属性包含<code>scan</code>、<code>scanPeriod</code>、<code>debug</code>三个属性。</p>
<ol>
<li><strong>scan</strong>：当此属性设置为 <code>true</code> 时，如果配置文件发生改变，会自动重新加载配置文件，默认值为 <code>true</code>.</li>
<li><strong>scanPeriod</strong>：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟.</li>
<li><strong>debug</strong>：当此属性设置为 <code>true</code> 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false.</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 second&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意 <code>scanPeriod</code> 值的写法，<code>数值英文空格时间单位</code> 。 如果未指定时间单位，则默认时间单位为毫秒</p>
<h3 id="变量-lt-property-gt"><a href="#变量-lt-property-gt" class="headerlink" title="变量 &lt;property&gt;"></a>变量 &lt;property&gt;</h3><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><p>在<code>&lt;configuration> </code>中，可以通过<code>&lt;property> </code> 来定义一个变量，属性 <strong>name</strong> 是变量的名称，属性 <strong>value</strong> 是变量的值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date %level [%thread] %logger&#123;10&#125; [%file : %line] %msg%n&quot;</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用自定义变量"><a href="#使用自定义变量" class="headerlink" title="使用自定义变量"></a>使用自定义变量</h4><p>通过 <code>$&#123;变量名&#125;</code> 来引用变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date %level [%thread] %logger&#123;10&#125; [%file : %line] %msg%n&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用配置文件中的属性"><a href="#使用配置文件中的属性" class="headerlink" title="使用配置文件中的属性"></a>使用配置文件中的属性</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取spring.application.name中的属性来生成日志文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;localhost.log&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;springProperty> </code>标签允许我们从<code>Spring</code>中显示属性，<code>Environment</code> 以便在<code>Logback</code>中使用。如果你想将读取<code>application.properties</code>文件中的值，这将非常有用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取spring.application.name中的属性来生成日志文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;localhost.log&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="日志输出器-lt-appender-gt"><a href="#日志输出器-lt-appender-gt" class="headerlink" title="日志输出器 &lt;appender&gt;"></a>日志输出器 &lt;appender&gt;</h3><p><code>&lt;appender></code> (日志输出器)，用于将日志按照<strong>一定的格式</strong>输出到控制台、文件、数据库等地方，<strong>logger(日志记录器)</strong> 需要使用 <strong>appender(日志输出器)</strong> 将记录器中的日志输出。</p>
<p><strong>appender</strong> 有两个<strong>必填属性</strong></p>
<ul>
<li><strong>name</strong> ：<code>appender</code> 的名称，任意填写，不要重名就行</li>
<li><strong>calss</strong>：某个具体的 <code>appender</code> 的完全类名，它是 <code>appender</code> 的具体实现，<code>Logback</code> 自带常用的几个 <code>appender</code>。<ul>
<li>ch.qos.logback.core.ConsoleAppender ：将日志输出到控制台的 <code>appender</code></li>
<li>ch.qos.logback.core.rolling.RollingFileAppender ：将日志输出到文件，并按照条件切换输出到新建文件(滚动输出，自动切割)</li>
</ul>
</li>
</ul>
<p><code>&lt;encoder></code> 负责将事件(日志)转换为字节数组，并将该字节数组写出为 <code>OutputStream</code>。</p>
<p><code>&lt;encoder></code> 是<code>&lt;appender></code> 的子节点，在 <code>&lt;encoder></code> 节点中，最重要的是配置 <code>&lt;pattern></code>，它是用来定义日志输出格式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span><span class="tag">&lt;/<span class="name">charset</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-pattern-gt"><a href="#lt-pattern-gt" class="headerlink" title="&lt;pattern&gt;"></a>&lt;pattern&gt;</h4><p> <code>&lt;pattern></code>用于定义日志的输出格式，通过 <code>Logback</code> 中的转换说明符(Conversion specifier)（其实就是一些预定义变量），可以方便的组合出我们想要的日志格式</p>
<p>在这里我只列举出常用的转换说明符(Conversion specifier)，更多请参考<a href="https://link.juejin.cn/?target=http://logback.qos.ch/manual/layouts.html">官方文档</a></p>
<h5 id="日期、时间"><a href="#日期、时间" class="headerlink" title="日期、时间"></a>日期、时间</h5><p>假设系统时间是 2006-10-20 14:06:49,812</p>
<table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>2006-10-20 14:06:49,812</td>
</tr>
<tr>
<td>%date</td>
<td>2006-10-20 14:06:49,812</td>
</tr>
<tr>
<td>%date{ISO8601}</td>
<td>2006-10-20 14:06:49,812</td>
</tr>
<tr>
<td>%date{HH:mm:ss.SSS}</td>
<td>14:06:49.812</td>
</tr>
<tr>
<td>%date{yyyy-MM-dd HH:mm:ss.SSS, Asia/Shanghai}</td>
<td>2006-10-20 14:06:49,812</td>
</tr>
</tbody></table>
<h5 id="日志记录器"><a href="#日志记录器" class="headerlink" title="日志记录器"></a>日志记录器</h5><p>输出日志记录事件源处的记录器名称，下表提供了缩写算法的实际应用示例。</p>
<table>
<thead>
<tr>
<th>转换说明符</th>
<th>记录器名称</th>
<th>输出结果</th>
</tr>
</thead>
<tbody><tr>
<td>%logger</td>
<td>mainPackage.sub.sample.Bar</td>
<td>mainPackage.sub.sample.Bar</td>
</tr>
<tr>
<td>%logger{0}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>Bar</td>
</tr>
<tr>
<td>%logger{5}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>m.s.s.Bar</td>
</tr>
<tr>
<td>%logger{10}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>m.s.s.Bar</td>
</tr>
<tr>
<td>%logger{15}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>m.s.sample.Bar</td>
</tr>
<tr>
<td>%logger{16}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>m.sub.sample.Bar</td>
</tr>
<tr>
<td>%logger{26}</td>
<td>mainPackage.sub.sample.Bar</td>
<td>mainPackage.sub.sample.Bar</td>
</tr>
</tbody></table>
<h5 id="类名、方法名、行号"><a href="#类名、方法名、行号" class="headerlink" title="类名、方法名、行号"></a>类名、方法名、行号</h5><table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%C、%class</td>
<td>输出log的类的完整类名,获取类名的效率一般,只建议在需要时使用</td>
</tr>
<tr>
<td>%M 、%method</td>
<td>输出log的方法</td>
</tr>
<tr>
<td>%L 、%line</td>
<td>输出log的行号。获取行号的效率一般，只建议在需要时使用</td>
</tr>
</tbody></table>
<h5 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h5><table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%t 、%thread</td>
<td>输出日志的线程</td>
</tr>
</tbody></table>
<h5 id="消息请求级别"><a href="#消息请求级别" class="headerlink" title="消息请求级别"></a>消息请求级别</h5><table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%p、%le、 %level</td>
<td>消息请求级别</td>
</tr>
</tbody></table>
<h5 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h5><table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%m 、%msg 、%message</td>
<td>日志信息</td>
</tr>
</tbody></table>
<h5 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h5><table>
<thead>
<tr>
<th>Conversion Pattern</th>
<th>Result</th>
</tr>
</thead>
<tbody><tr>
<td>%n</td>
<td>换行</td>
</tr>
</tbody></table>
<p>组合示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss.SSS, Asia/Shanghai&#125; %red(%-5level) --- [%thread] %cyan(%class.%method/%line) : %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h5><p>对于控制台的输出，Logback 支持填充颜色，支持的颜色如下</p>
<ul>
<li>%black()</li>
<li>%red()</li>
<li>%green()</li>
<li>%yellow()</li>
<li>%blue()</li>
<li>%magenta()</li>
<li>%cyan()</li>
<li>%white()</li>
<li>%gray()</li>
<li>%boldRed()</li>
<li>%boldGreen()</li>
<li>%boldYellow()</li>
<li>%boldBlue()</li>
<li>%boldMagenta()</li>
<li>%boldCyan()</li>
<li>%boldWhite()</li>
<li>%highlight()</li>
</ul>
<p>使用方法是用颜色的代码把消息包起来，比如想将日志级别设置成红色 <code>%red(%-5level)</code></p>
<h4 id="设置字符集-lt-charset-gt"><a href="#设置字符集-lt-charset-gt" class="headerlink" title="设置字符集 &lt;charset&gt;"></a>设置字符集 &lt;charset&gt;</h4><p><code>&lt;charset></code> 是 <code>&lt;encoder></code> 的子节点，用于设置输出字符集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss.SSS, Asia/Shanghai&#125; %red(%-5level) --- [%thread] %cyan(%class.%method/%line) : %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="ConsoleAppender"><a href="#ConsoleAppender" class="headerlink" title="ConsoleAppender"></a>ConsoleAppender</h4><p><code>ch.qos.logback.core.ConsoleAppender</code> 是 <code>Logback</code> 自带的 <code>appender</code>，用于将日志输出到控制台。</p>
<p>对应控制台，只需要重点配置 <code>&lt;encoder></code>节点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %red(%-5level) --- [%thread] %cyan(%class.%method/%line) : %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="RollingFileAppender"><a href="#RollingFileAppender" class="headerlink" title="RollingFileAppender"></a>RollingFileAppender</h4><p><code>ch.qos.logback.core.rolling.RollingFileAppender</code> 是 <code>Logback</code> 自带的 <code>Appender</code>，用于将日志输出到文件，并按照条件切换输出到新建文件(滚动输出，自动切割)</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>file</td>
<td>String</td>
<td>文件名，如果文件不存在，则创建。注意文件路径</td>
</tr>
<tr>
<td>append</td>
<td>boolean</td>
<td>true 在文件末尾追加，false 覆盖，默认 true</td>
</tr>
<tr>
<td>encoder</td>
<td>Encoder</td>
<td>编码器，设置日志输出格式和编码</td>
</tr>
<tr>
<td>rollingPolicy</td>
<td>RollingPolicy</td>
<td>滚动策略，描述该如何滚动</td>
</tr>
<tr>
<td>triggeringPolicy</td>
<td>TriggeringPolicy</td>
<td>触发策略，什么条件下触发滚动</td>
</tr>
</tbody></table>
<p>要使用 <code>RollingFileAppender RollingPolicy</code> (滚动策略)和 <code>TriggeringPolicy</code>(触发策略)必不可少。但是，如果 <code>RollingPolicy</code> 实现了 <code>TriggeringPolicy</code> 接口，则仅需要指定 <code>RollingPolicy</code>。</p>
<p><code>rollingPolicy</code>(滚动策略) 里面有一个属性叫 <code>fileNamePattern</code>，它和 <code>file</code> 属性一样都表示日志文件名。</p>
<h4 id="滚动策略-——-RollingPolicy"><a href="#滚动策略-——-RollingPolicy" class="headerlink" title="滚动策略 —— RollingPolicy"></a>滚动策略 —— RollingPolicy</h4><p><code>RollingPolicy</code> 负责日志文件的移动和重命名的过程。<br> <code>Logback</code> 提供了多种 <code>RollingPolicy</code> 的实现</p>
<ul>
<li><code>TimeBasedRollingPolicy</code> ：按时间滚动，比如按天或按月</li>
<li><code>SizeAndTimeBasedRollingPolicy</code> ：按时间和大小滚动，比如说在按天滚动的基础上设置大小，防止某天的日志文件过大！</li>
</ul>
<h4 id="TimeBasedRollingPolicy"><a href="#TimeBasedRollingPolicy" class="headerlink" title="TimeBasedRollingPolicy"></a>TimeBasedRollingPolicy</h4><p><code>TimeBasedRollingPolicy</code>可能是最受欢迎的滚动政策。它定义了基于时间的展期策略，例如按天或按月。 </p>
<p><code>ch.qos.logback.core.rolling.TimeBasedRollingPolicy</code> 滚动策略同时也实现了 <code>TriggeringPolicy</code>(触发策略)</p>
<p>因此配置好 <code>TimeBasedRollingPolicy</code> 后，就不需要配置 <code>TriggeringPolicy</code>。</p>
<p><code>TimeBasedRollingPolicy</code>的配置包含一个必选的<code>fileNamePattern</code>属性和几个可选属性。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>fileNamePattern</td>
<td>String</td>
<td>fileNamePattern 是最为复杂也最为重要的属性，同时也是必填项，将在下文中详细介绍</td>
</tr>
<tr>
<td>maxHistory</td>
<td>Int</td>
<td>可选的 maxHistory 属性控制要保留的归档文件的最大数量，异步删除旧文件。 例如，如果您指定每月滚动，并将 maxHistory 设置为 6，则将保留近 6 个月的存档文件，并删除超过 6 个月的文件。 请注意，当旧的存档日志文件被删除时，为日志文件存档而创建的任何文件夹都将根据需要删除。<br/><br/>将 maxHistory 设置为0会禁用存档删除。 默认情况下，maxHistory 设置为0，即默认情况下不删除存档。</td>
</tr>
<tr>
<td>totalSizeCap</td>
<td>Int</td>
<td>可选的totalSizeCap属性控制所有归档文件的总大小，在 maxHistory 限制的基础上，进一步限制 所有存档文件的总大小。当超过总大小上限时，最旧的存档将被异步删除。totalSizeCap 依赖于 maxHistory ，如果没有 maxHistory ，单独设置 totalSizeCap 是不生效的。<br/><br/>TotalSizeCap 属性可以通过在数值后分别添加 KB、MB 和 GB 来指定为字节、千字节、兆字节或千兆字节的单位。 例如，5000000、5000KB、5MB 和 2GB 都是有效值，前三个是等效的。 没有后缀的数值以字节为单位。<br/><br/>默认情况下，totalSizeCap 设置为零，这意味着没有总大小上限。</td>
</tr>
<tr>
<td>cleanHistoryOnStart</td>
<td>boolean</td>
<td>如果设置为 true，则存档文件将在appender启动时删除。 默认情况下，此属性设置为 false。<br/><br/>存档删除通常在滚动期间执行。 但是，某些应用程序的生存时间可能不够长，无法触发滚动。 因此，对于此类短暂的应用程序，存档删除可能永远没有机会执行。 通过将 cleanHistoryOnStart 设置为 true，存档删除将在appender启动时执行。</td>
</tr>
</tbody></table>
<h4 id="fileNamePattern-属性"><a href="#fileNamePattern-属性" class="headerlink" title="fileNamePattern 属性"></a>fileNamePattern 属性</h4><p><code>fileNamePattern</code> 的值包含文件名以及支持绝对和相对路径和日期转换符——<code>%d</code>。</p>
<p><code>% d</code>转换符可以包含由 <code>java.text.SimpleDateFormat</code>类指定的日期和时间模式。如果省略日期和时间模式，则 采用默认模式<code>yyyy-MM-dd</code> 。滚动周期是根据<code>fileNamePattern</code>的值推断出来的。</p>
<p><code>%d</code> 表示系统当前的时间，默认格式为 %d{yyyy-MM-dd}，通过 <code>%d</code>{日期格式} 来自定义。</p>
<p><code>fileNamePattern</code> 属性内或日期和时间模式内任意位置的 正斜杠“/”或反斜杠“\”字符将被解释为目录分隔符。</p>
<p><strong>时区</strong></p>
<p>%d 默认采用主机时区，也可以自定义%d{yyyy-MM-dd,UTC+8}</p>
<p><strong>多个%d</strong></p>
<p>可以指定多个 <code>%d</code> 转换符，但只有其中一个可以是主要的，即用于推断滚动周期。</p>
<p>多个 <code>%d</code>转换符允许您以不同于滚动周期的文件夹结构来组织存档文件。 例如，下面显示的文件名模式按年和月组织日志文件夹，但每天午夜滚动更新日志文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/var/log/%d&#123;yyyy/MM, aux&#125;/myapplication.%d&#123;yyyy-MM-dd&#125;.log</span><br></pre></td></tr></table></figure>

<p><strong>自动文件压缩</strong><br><code>TimeBasedRollingPolicy</code>支持自动文件压缩。如果<code>fileNamePattern</code>选项的值 以<code style="color: green; font-weight: bold">.gz</code>或.<code style="color: green; font-weight: bold">zip</code>结尾，则启用此功能。</p>
<table>
<thead>
<tr>
<th>fileNamePattern</th>
<th><strong>Rollover schedule</strong></th>
<th><strong>Example</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>/wombat/foo.%d.gz</code></td>
<td>每日滚动（午夜），自动对存档文件进行 <code>GZIP</code> 压缩。</td>
<td>如果没有设置<code><file></code>，2009 年 11 月 23 日期间，日志将输出到文件 <code>/wombat/foo.2009-11-23</code>。但是，在午夜该文件将被压缩为 <code>/wombat/foo.2009-11-23.gz</code>。11 月 24 日，日志记录输出将定向到 <code>/wombat/folder/foo.2009-11-24</code>，以此类推。<br> 如果设置<code><file></code>为<code>/wombat/foo.txt</code>，2009 年 11 月 23 日期间，日志输出将转到文件<code>/wombat/foo.txt</code>。午夜该文件将被压缩并重命名为 <code>/wombat/foo.2009-11-23.gz</code>。并将创建一个新的 <code>/wombat/foo.tx</code>t文件，并将11月24日期间的日志记录到该文件。在11月24日午夜，<code>/wombat/foo.txt</code>将被压缩并重命名为<code>/wombat/foo.2009-11-24.gz</code>。</td>
</tr>
</tbody></table>
<p><code>fileNamePattern</code>有双重用途。首先，logback通过研究模式 计算请求的滚动周期。其次，它计算每个存档文件的名称。请注意，两种不同的模式可以指定相同的周期。模式yyyy-MM和 yyyy@MM都指定每月滚动，尽管生成的存档文件将带有不同的名称。</p>
<p>通过设置<code>&lt;file></code>属性，您可以分离活动日志文件的位置和归档日志文件的位置。日志输出将定位到文件属性指定的文件中 。由此可见，活动日志文件的名称不会随时间而改变。但是，如果您选择忽略file属性，则将根据fileNamePattern的值在每个周期重新计算活动文件名称。通过保留<code>&lt;file></code>属性未设置，您可以避免在滚动期间存在引用日志文件的外部文件句柄时发生的 文件重命名错误。</p>
<p>由于各种技术原因，滚动不是时钟驱动的，而是取决于日志记录事件的到达。例如，在 2002 年 3 月 8 日，假设 fileNamePattern设置为yyyy-MM-dd （每日滚动），则午夜后第一个事件的到达将触发滚动。如果在午夜后 23 分 47 秒期间没有记录事件，则滚动实际上将发生在 3 月 9 日上午 00:23’47，而不是上午 0:00。因此，根据事件的到达率，可能会以一定的延迟触发滚动。然而，无论延迟如何，滚动算法都已知是正确的，从某种意义上说，在特定时间段内生成的所有日志记录事件都将输出到界定该时间段的正确文件中。</p>
<h4 id="SizeAndTimeBasedRollingPolicy"><a href="#SizeAndTimeBasedRollingPolicy" class="headerlink" title="SizeAndTimeBasedRollingPolicy"></a>SizeAndTimeBasedRollingPolicy</h4><p>有时您可能希望基本上按日期归档文件，但同时限制每个日志文件的大小，特别是日志文件处理工具对大小有着明确的限制。为了满足这一要求，<code>logback</code> 附带了 <code>SizeAndTimeBasedRollingPolicy</code>.</p>
<p>请注意，<code>TimeBasedRollingPolicy</code>已经允许限制归档日志文件的组合大小。如果您只想限制日志归档的组合大小，那么 <code>TimeBasedRollingPolicy</code>上面描述的和设置<code>totalSizeCap</code>属性应该足够了。</p>
<p><code>maxFileSize</code> 属性表示单个归档日志文件的大小，单位有 <code>KB</code>、<code>MB</code>、<code>GB</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;SizeAndTimeFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>logs/app1/app1.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logs/app1/backup/app1_%d_%i.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--单个日志文件最大10MB--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--删除n个滚动周期之前的日志文件(最多保留前n个滚动周期的历史记录)件--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--在 maxHistory 限制的基础上，进一步限制所有存档文件的总大小--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %-5level --- [%thread] %class.%method/%line : %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;SizeAndTimeFile&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>%i</code> 是一个滚动周期内的归档序列号，从0开始</p>
<p>注意：<code>maxHistory</code> 是表了 <code>n</code> 个滚动周期的日志文件，而不是 <code>n</code> 个的日志文件，在设置了 maxFileSize 后，一个滚动周期内可能有多个日志文件。</p>
<hr>
<h3 id="日志记录器-lt-logger-gt"><a href="#日志记录器-lt-logger-gt" class="headerlink" title="日志记录器 &lt;logger&gt;"></a>日志记录器 &lt;logger&gt;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">level</span>=<span class="string">&quot;&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;logger></code> 有三个属性</p>
<ul>
<li><strong>name</strong> : 包名或类名。即，将该记录器作用于哪个类或包下。必填</li>
<li><strong>level</strong> : 该记录器的级别，低于该级别的日志消息不记录。可选级别从小到大为 <strong>TRACE、DEBUG、INFO、WARN、ERROR、ALL、OFF</strong>(不区分大小写)。选填，不填则默认从父记录器继承<strong>level</strong></li>
<li><strong>additivity</strong> : 是否追加父 Logger 的输出源(appender),默认为true，选填。如果只想输出到自己的输出源(appender)，需要设置为 false</li>
</ul>
<p><code>logger</code> 还可以包含 0 或多个 <code>&lt;appender-ref&gt;</code> 元素, 将记录的日志使用 <code>appender</code> 进行输出</p>
<h4 id="level-的继承"><a href="#level-的继承" class="headerlink" title="level 的继承"></a>level 的继承</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125; [%file : %line] %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wqlm.boot.user.controller.UserController&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wqlm.boot.user.controller&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上，<code>&quot;com.wqlm.boot.user.controller.UserController&quot;</code>的 <code>logger</code> 没有定义 <code>level</code>，因此它会继承父 logger 的 level。</p>
<p>那它的父 logger 是谁呢？ 其实就是下面的 <code>&quot;com.wqlm.boot.user.controller&quot;</code>的 <code>logger</code>!</p>
<div class="note success no-icon"><p>Logback 是根据包或类的层次结构来确定 logger 的父子关系的</p>
</div>

<p><code>&quot;com.wqlm.boot.user.controller&quot;</code>的 <code>logger</code> 也没有定义 <code>level</code>，因此它也会继承它的父 <code>logger</code> 的 <code>level</code>。但是，在该 xml 中，已经没有比它层次还“浅”的 <code>logger</code> 了，因此，它的父 <code>logger</code> 为 <strong>root</strong>。也就是说它会继承 <strong>root</strong> <code>logger</code> 的 <code>level</code>，也就是 <code>info</code>。</p>
<h4 id="additivity-的追加策略"><a href="#additivity-的追加策略" class="headerlink" title="additivity 的追加策略"></a>additivity 的追加策略</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date %level [%thread] %logger&#123;10&#125; [%file : %line] %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wqlm.boot.user.controller.UserController&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wqlm.boot.user.controller&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上，<code>&quot;com.wqlm.boot.user.controller.UserController&quot;</code>的 <code>logger</code> 没有设置 <code>additivity</code>，因此 <code>additivity</code> 采用默认值 <code>true</code>，即，追加它父 <code>logger</code> 中的 <strong>appender</strong> 到自己的 <code>logger</code> 中。</p>
<p>在看它的父 <code>logger</code> —— <code>&quot;com.wqlm.boot.user.controller&quot;</code> <code>logger</code>， <code>additivity</code> 也采用默认值，因此，它也会追加它父 <code>logger</code> 中的 <strong>appender</strong> 到自己的 <code>logger</code> 中。<br> 在该 <code>xml</code> 中 <code>&quot;com.wqlm.boot.user.controller&quot;</code> <code>logger</code> 的父 <code>logger</code> 为 <code>root logger</code>！，因此，它会追加 名为 STDOUT 的 <code>appender</code> 到自己的 <code>logger</code> 中</p>
<p>刚才是从上层往下层走，直到找到显示标注 <code>appender=&quot;false&quot;</code> 的 <code>logger</code> 或 <code>root logger</code> 才停止追加。<br> 现在要从下层往上层走，把层层追加的 <code>appender</code> 往上传，直到遇到显示标注  <code>appender=&quot;false&quot;</code> 的 <code>logger</code> 才停止</p>
<p>因此，<code>&quot;com.wqlm.boot.user.controller.UserController&quot;</code>的 <code>logger</code> 中，也有一个名为 STDOUT 的 <code>appender</code>，这个 <code>appender</code> 是从它的父 <code>logger</code> 中来的</p>
<p>所以，一般情况下，只需要给 <code>root logger</code> 添加 <code>appender</code> 即可！！！其他 <code>logger</code> 都会直接或间接获取到 <code>root logger</code> 的 <code>appender</code>。</p>
<h3 id="根记录器-lt-root-gt"><a href="#根记录器-lt-root-gt" class="headerlink" title="根记录器 &lt;root&gt;"></a>根记录器 &lt;root&gt;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>该<code>&lt;root></code>元素配置根记录器。它支持单一属性，即<code>level</code>属性。它不允许任何其他属性，因为可加性标志不适用于根记录器。此外，由于根记录器已被命名为“ROOT”，因此它也不允许使用名称属性。<code>level</code> 属性的值可以是不区分大小写的字符串 <code>TRACE</code>、<code>DEBUG</code>、<code>INFO</code>、<code>WARN</code>、<code>ERROR</code>、<code>ALL</code> 或 <code>OFF</code> 之一。请注意，根记录器的级别不能设置为 <code>INHERITED</code> 或 <code>NULL</code>。</p>
<p>与元素<code>&lt;logger></code>类似，<code>&lt;root></code>元素可以包含零个或多个 <code>&lt;appender-ref></code>元素；这样引用的每个日志记录器都会添加到根记录器中。请注意，与 <code>log4j</code> 不同，<code>logback-classic</code>在配置根记录器时 不会关闭或删除任何先前引用的日志记录器。</p>
<hr>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p><code>Filter</code>：过滤器，过滤满足条件或者不满足条件的日志<br>允许组合使用，可配置多个过滤器有很多，只介绍两种常用的<code>LevelFilter</code>、<code>ThresholdFilter</code></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>值说明</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>LevelFilter</td>
<td>级别过滤器</td>
<td>精确匹配指定的日志级别</td>
<td></td>
</tr>
<tr>
<td>ThresholdFilter</td>
<td>阈值过滤</td>
<td>匹配等于或高于指定级别</td>
<td></td>
</tr>
</tbody></table>
<p>使用示例如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- deny all events with a level below INFO, that is TRACE and DEBUG --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拒绝所有级别低于 INFO 的, 也就是 TRACE 和 DEBUG --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>LevelFilter属性如下:</p>
<p><code>onMatch</code>、<code>onMismatch</code>的取值类型有三种:</p>
<ul>
<li><code>DENY</code>：拒绝，不再执行后续的过滤器</li>
<li><code>NEUTRAL</code>：中性，继续执行后面的过滤器</li>
<li><code>ACCEPT</code>：接受，记录日志，不再执行后续过滤器</li>
</ul>
<hr>
<h3 id="日志有效级别"><a href="#日志有效级别" class="headerlink" title="日志有效级别"></a>日志有效级别</h3><p>记录器可以被分配级别。在类中定义 <code>ch.qos.logback.classic.Level</code>了可能的级别集（<strong>TRACE</strong>、<strong>DEBUG</strong>、<strong>INFO</strong>、<strong>WARN</strong> 和 <strong>ERROR</strong>）。</p>
<p>如果给定的记录器没有分配级别，那么它会从其最接近的祖先那里继承一个已分配级别的级别。</p>
<p>为了确保所有记录器最终都能继承级别，根记录器始终具有指定的级别。默认情况下，该级别为 <strong>DEBUG</strong>。</p>
<p>根据定义，打印方法决定日志记录请求的级别。例如，如果<code>L</code>是一个记录器实例，则该语句<code>L.info(&quot;..&quot;)</code>是 <strong>INFO</strong> 级别的日志记录语句。</p>
<p>如果日志请求的级别高于或等于其记录器的有效级别，则称该日志请求已<em>启用。</em>否则，该请求被称为被<em>禁用</em>。</p>
<div class="note success no-icon"><p><em>基本选择规则：</em></p>
<p><em>如果<code>p &gt;= q</code>，则启用 向有效级别q的记录器发出级别p的日志打印请求。</em></p>
</div>



<p>这条规则是 <code>logback</code> 的核心。它假设级别按如下顺序排序： <code>TRACE &lt; DEBUG &lt; INFO &lt;  WARN &lt; ERROR</code>。</p>
<p>以更形象的方式，以下是选择规则的工作原理。在下表中，垂直标头显示日志记录请求的级别，由<code>p</code>指定，而水平标头显示记录器的有效级别，由<code>q</code>指定。行（级别请求）和列（有效级别）的交集是由基本选择规则产生的布尔值。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/logback/effectivelevel.png"></p>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="comment">// get a logger instance named &quot;com.foo&quot;. Let us further assume that the</span></span><br><span class="line"><span class="comment">// logger is of type  ch.qos.logback.classic.Logger so that we can</span></span><br><span class="line"><span class="comment">// set its level</span></span><br><span class="line">ch.qos.logback.classic.Logger logger = </span><br><span class="line">        (ch.qos.logback.classic.Logger) LoggerFactory.getLogger(<span class="string">&quot;com.foo&quot;</span>);</span><br><span class="line"><span class="comment">//set its Level to INFO. The setLevel() method requires a logback logger</span></span><br><span class="line">logger.setLevel(Level. INFO);</span><br><span class="line"></span><br><span class="line">Logger barlogger = LoggerFactory.getLogger(<span class="string">&quot;com.foo.Bar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This request is enabled, because WARN &gt;= INFO</span></span><br><span class="line">logger.warn(<span class="string">&quot;Low fuel level.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This request is disabled, because DEBUG &lt; INFO. </span></span><br><span class="line">logger.debug(<span class="string">&quot;Starting search for nearest gas station.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The logger instance barlogger, named &quot;com.foo.Bar&quot;, </span></span><br><span class="line"><span class="comment">// will inherit its level from the logger named </span></span><br><span class="line"><span class="comment">// &quot;com.foo&quot; Thus, the following request is enabled </span></span><br><span class="line"><span class="comment">// because INFO &gt;= INFO. </span></span><br><span class="line">barlogger.info(<span class="string">&quot;Located nearest gas station.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This request is disabled, because DEBUG &lt; INFO. </span></span><br><span class="line">barlogger.debug(<span class="string">&quot;Exiting gas station search&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>SpringBoot</tag>
        <tag>Logback</tag>
        <tag>SLF4J</tag>
      </tags>
  </entry>
  <entry>
    <title>Arthas基础教程</title>
    <url>/2024/01/03/Java%E5%BA%94%E7%94%A8%E8%AF%8A%E6%96%AD%E5%88%A9%E5%99%A8Arthas/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>通常，本地开发环境无法访问生产环境。如果在生产环境中遇到问题，则无法使用 IDE 远程调试。更糟糕的是，在生产环境中调试是不可接受的，因为它会暂停所有线程，导致服务暂停。</p>
<p>开发人员可以尝试在测试环境或者预发环境中复现生产环境中的问题。但是，某些问题无法在不同的环境中轻松复现，甚至在重新启动后就消失了。</p>
<p>如果您正在考虑在代码中添加一些日志以帮助解决问题，您将必须经历以下阶段：测试、预发，然后生产。这种方法效率低下，更糟糕的是，该问题可能无法解决，因为一旦 JVM 重新启动，它可能无法复现，如上文所述。</p>
<p>Arthas 旨在解决这些问题。开发人员可以在线解决生产问题。无需 JVM 重启，无需代码更改。 Arthas 作为观察者永远不会暂停正在运行的线程。</p>
<h1 id="Arthas（阿尔萨斯）能为你做什么？"><a href="#Arthas（阿尔萨斯）能为你做什么？" class="headerlink" title="Arthas（阿尔萨斯）能为你做什么？"></a>Arthas（阿尔萨斯）能为你做什么？</h1><p><code>Arthas</code> 是 Alibaba 开源的 Java 诊断工具，深受开发者喜爱。</p>
<p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p>
<ol>
<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>
<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况？</li>
<li>有什么办法可以监控到 JVM 的实时运行状态？</li>
<li>怎么快速定位应用的热点，生成火焰图？</li>
<li>怎样直接从 JVM 内查找某个类的实例？</li>
</ol>
<p><code>Arthas</code> 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p>
<h1 id="安装启动Arthas"><a href="#安装启动Arthas" class="headerlink" title="安装启动Arthas"></a>安装启动Arthas</h1><p>在命令行下面执行（使用和目标进程一致的用户启动，否则可能 attach 失败）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>

<p>如果下载速度比较慢，可以使用 aliyun 的镜像：<code>java -jar arthas-boot.jar --repo-mirror aliyun --use-http</code></p>
<p>选择应用 java 进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ $ java -jar arthas-boot.jar</span><br><span class="line">* [1]: 35542</span><br><span class="line">  [2]: 71560 math-game.jar</span><br></pre></td></tr></table></figure>

<p><code>math-game</code>进程是第 2 个，则输入 2，再输入<code>回车/enter</code>。Arthas 会 attach 到目标进程上，并输出日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[INFO] Try to attach process 71560</span><br><span class="line">[INFO] Attach process 71560 success.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.</span><br><span class="line"> /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">|  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.</span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">`--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wiki: https://arthas.aliyun.com/doc</span><br><span class="line">version: 3.0.5.20181127201536</span><br><span class="line">pid: 71560</span><br><span class="line">time: 2018-11-28 19:16:24</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="表达式核心变量"><a href="#表达式核心变量" class="headerlink" title="表达式核心变量"></a>表达式核心变量</h1><p>无论是匹配表达式也好、观察表达式也罢，他们核心判断变量都是围绕着一个 Arthas 中的通用通知对象 <code>Advice</code> 进行。</p>
<p>它的简略代码结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArthasMethod method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] params;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object returnObj;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Throwable throwExp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isBefore;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isThrow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isReturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里列一个表格来说明不同变量的含义</p>
<table>
<thead>
<tr>
<th align="right">变量名</th>
<th align="left">变量解释</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><code>loader</code></td>
<td align="left">本次调用类所在的 <code>ClassLoader</code></td>
</tr>
<tr>
<td align="right"><code>clazz</code></td>
<td align="left">本次调用类的 <code>Class</code> 引用</td>
</tr>
<tr>
<td align="right"><code>method</code></td>
<td align="left">本次调用方法反射引用</td>
</tr>
<tr>
<td align="right"><code>target</code></td>
<td align="left">本次调用类的实例</td>
</tr>
<tr>
<td align="right"><code>params</code></td>
<td align="left">本次调用参数列表，这是一个数组，如果方法是无参方法则为空数组</td>
</tr>
<tr>
<td align="right"><code>returnObj</code></td>
<td align="left">本次调用返回的对象。当且仅当 <code>isReturn==true</code> 成立时候有效，表明方法调用是以正常返回的方式结束。如果当前方法无返回值 <code>void</code>，则值为 null</td>
</tr>
<tr>
<td align="right"><code>throwExp</code></td>
<td align="left">本次调用抛出的异常。当且仅当 <code>isThrow==true</code> 成立时有效，表明方法调用是以抛出异常的方式结束。</td>
</tr>
<tr>
<td align="right"><code>isBefore</code></td>
<td align="left">辅助判断标记，当前的通知节点有可能是在方法一开始就通知，此时 <code>isBefore==true</code> 成立，同时 <code>isThrow==false</code> 和 <code>isReturn==false</code>，因为在方法刚开始时，还无法确定方法调用将会如何结束。</td>
</tr>
<tr>
<td align="right"><code>isThrow</code></td>
<td align="left">辅助判断标记，当前的方法调用以抛异常的形式结束。</td>
</tr>
<tr>
<td align="right"><code>isReturn</code></td>
<td align="left">辅助判断标记，当前的方法调用以正常返回的形式结束。</td>
</tr>
</tbody></table>
<p>所有变量都可以在表达式中直接使用，如果在表达式中编写了不符合 OGNL 脚本语法或者引入了不在表格中的变量，则退出命令的执行；用户可以根据当前的异常信息修正<code>条件表达式</code>或<code>观察表达式</code>。</p>
<ul>
<li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71在新窗口打开</a></li>
<li>OGNL 表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html</a></li>
</ul>
<h1 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h1><h2 id="jvm-相关"><a href="#jvm-相关" class="headerlink" title="jvm 相关"></a>jvm 相关</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/dashboard.html"><code>dashboard</code></a> - 当前系统的实时数据面板</li>
<li><a href="https://arthas.aliyun.com/doc/getstatic.html"><code>getstatic</code></a> - 查看类的静态属性</li>
<li><a href="https://arthas.aliyun.com/doc/heapdump.html"><code>heapdump</code></a> - dump java heap, 类似 jmap 命令的 heap dump 功能</li>
<li><a href="https://arthas.aliyun.com/doc/jvm.html"><code>jvm</code></a> - 查看当前 JVM 的信息</li>
<li><a href="https://arthas.aliyun.com/doc/logger.html"><code>logger</code></a> - 查看和修改 logger</li>
<li><a href="https://arthas.aliyun.com/doc/mbean.html"><code>mbean</code></a> - 查看 Mbean 的信息</li>
<li><a href="https://arthas.aliyun.com/doc/memory.html"><code>memory</code></a> - 查看 JVM 的内存信息</li>
<li><a href="https://arthas.aliyun.com/doc/ognl.html"><code>ognl</code></a> - 执行 ognl 表达式</li>
<li><a href="https://arthas.aliyun.com/doc/perfcounter.html"><code>perfcounter</code></a> - 查看当前 JVM 的 Perf Counter 信息</li>
<li><a href="https://arthas.aliyun.com/doc/sysenv.html"><code>sysenv</code></a> - 查看 JVM 的环境变量</li>
<li><a href="https://arthas.aliyun.com/doc/sysprop.html"><code>sysprop</code></a> - 查看和修改 JVM 的系统属性</li>
<li><a href="https://arthas.aliyun.com/doc/thread.html"><code>thread</code></a> - 查看当前 JVM 的线程堆栈信息</li>
<li><a href="https://arthas.aliyun.com/doc/vmoption.html"><code>vmoption</code></a> - 查看和修改 JVM 里诊断相关的 option</li>
<li><a href="https://arthas.aliyun.com/doc/vmtool.html"><code>vmtool</code></a> - 从 jvm 里查询对象，执行 forceGc</li>
</ul>
<h2 id="class-classloader-相关"><a href="#class-classloader-相关" class="headerlink" title="class/classloader 相关"></a>class/classloader 相关</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/classloader.html"><code>classloader</code></a> - 查看 classloader 的继承树，urls，类加载信息，使用 classloader 去 getResource</li>
<li><a href="https://arthas.aliyun.com/doc/dump.html"><code>dump</code></a> - dump 已加载类的 byte code 到特定目录</li>
<li><a href="https://arthas.aliyun.com/doc/jad.html"><code>jad</code></a> - 反编译指定已加载类的源码</li>
<li><a href="https://arthas.aliyun.com/doc/mc.html"><code>mc</code></a> - 内存编译器，内存编译<code>.java</code>文件为<code>.class</code>文件</li>
<li><a href="https://arthas.aliyun.com/doc/redefine.html"><code>redefine</code></a> - 加载外部的<code>.class</code>文件，redefine 到 JVM 里</li>
<li><a href="https://arthas.aliyun.com/doc/retransform.html"><code>retransform</code></a> - 加载外部的<code>.class</code>文件，retransform 到 JVM 里</li>
<li><a href="https://arthas.aliyun.com/doc/sc.html"><code>sc</code></a> - 查看 JVM 已加载的类信息</li>
<li><a href="https://arthas.aliyun.com/doc/sm.html"><code>sm</code></a> - 查看已加载类的方法信息</li>
</ul>
<h2 id="monitor-watch-trace-相关"><a href="#monitor-watch-trace-相关" class="headerlink" title="monitor/watch/trace 相关"></a>monitor/watch/trace 相关</h2><details class="note warning no-icon"><summary><p>注意</p>
</summary>
<p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 <code>stop</code> 或将增强过的类执行 <code>reset</code> 命令。</p>

</details>

<ul>
<li><a href="https://arthas.aliyun.com/doc/monitor.html"><code>monitor</code></a> - 方法执行监控</li>
<li><a href="https://arthas.aliyun.com/doc/stack.html"><code>stack</code></a> - 输出当前方法被调用的调用路径</li>
<li><a href="https://arthas.aliyun.com/doc/trace.html"><code>trace</code></a> - 方法内部调用路径，并输出方法路径上的每个节点上耗时</li>
<li><a href="https://arthas.aliyun.com/doc/tt.html"><code>tt</code></a> - 方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li>
<li><a href="https://arthas.aliyun.com/doc/watch.html"><code>watch</code></a> - 方法执行数据观测</li>
</ul>
<h2 id="profiler-火焰图"><a href="#profiler-火焰图" class="headerlink" title="profiler/火焰图"></a>profiler/火焰图</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/profiler.html"><code>profiler</code></a> - 使用<a href="https://github.com/jvm-profiling-tools/async-profiler">async-profiler在新窗口打开</a>对应用采样，生成火焰图</li>
<li><a href="https://arthas.aliyun.com/doc/jfr.html"><code>jfr</code></a> - 动态开启关闭 JFR 记录</li>
</ul>
<h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/auth.html"><code>auth</code></a> - 鉴权</li>
</ul>
<h2 id="options"><a href="#options" class="headerlink" title="options"></a>options</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/options.html"><code>options</code></a> - 查看或设置 Arthas 全局开关</li>
</ul>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>Arthas 支持使用管道对上述命令的结果进行进一步的处理，如<code>sm java.lang.String * | grep &#39;index&#39;</code></p>
<ul>
<li><a href="https://arthas.aliyun.com/doc/grep.html"><code>grep</code></a> - 搜索满足条件的结果</li>
<li>plaintext - 将命令的结果去除 ANSI 颜色</li>
<li>wc - 按行统计输出结果</li>
</ul>
<h2 id="后台异步任务"><a href="#后台异步任务" class="headerlink" title="后台异步任务"></a>后台异步任务</h2><p>当线上出现偶发的问题，比如需要 watch 某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考<a href="https://arthas.aliyun.com/doc/async.html">这里</a></p>
<ul>
<li>使用 <code>&gt;</code> 将结果重写向到日志文件，使用 <code>&amp;</code> 指定命令是后台运行，session 断开不影响任务执行（生命周期默认为 1 天）</li>
<li><code>jobs</code> - 列出所有 job</li>
<li><code>kill</code> - 强制终止任务</li>
<li><code>fg</code> - 将暂停的任务拉到前台执行</li>
<li><code>bg</code> - 将暂停的任务放到后台执行</li>
</ul>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/base64.html"><code>base64</code></a> - base64 编码转换，和 linux 里的 base64 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/cat.html"><code>cat</code></a> - 打印文件内容，和 linux 里的 cat 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/cls.html"><code>cls</code></a> - 清空当前屏幕区域</li>
<li><a href="https://arthas.aliyun.com/doc/echo.html"><code>echo</code></a> - 打印参数，和 linux 里的 echo 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/grep.html"><code>grep</code></a> - 匹配查找，和 linux 里的 grep 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/help.html"><code>help</code></a> - 查看命令帮助信息</li>
<li><a href="https://arthas.aliyun.com/doc/history.html"><code>history</code></a> - 打印命令历史</li>
<li><a href="https://arthas.aliyun.com/doc/keymap.html"><code>keymap</code></a> - Arthas 快捷键列表及自定义快捷键</li>
<li><a href="https://arthas.aliyun.com/doc/pwd.html"><code>pwd</code></a> - 返回当前的工作目录，和 linux 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/quit.html"><code>quit</code></a> - 退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li>
<li><a href="https://arthas.aliyun.com/doc/reset.html"><code>reset</code></a> - 重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li>
<li><a href="https://arthas.aliyun.com/doc/session.html"><code>session</code></a> - 查看当前会话的信息</li>
<li><a href="https://arthas.aliyun.com/doc/stop.html"><code>stop</code></a> - 关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li>
<li><a href="https://arthas.aliyun.com/doc/tee.html"><code>tee</code></a> - 复制标准输入到标准输出和指定的文件，和 linux 里的 tee 命令类似</li>
<li><a href="https://arthas.aliyun.com/doc/version.html"><code>version</code></a> - 输出当前目标 Java 进程所加载的 Arthas 版本号</li>
</ul>
<hr>
<h1 id="Arthas-基础教程"><a href="#Arthas-基础教程" class="headerlink" title="Arthas 基础教程"></a>Arthas 基础教程</h1><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p><code>dashboard</code> 命令可以查看当前系统的实时数据面板，<code>dashboard</code> 命令可以查看当前系统的实时数据面板。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dashboard</span><br><span class="line">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class="line">-1   C2 CompilerThread0             -               -1         -         1.55      0.077      0:8.684   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">53   Timer-for-arthas-dashboard-07b system          5          RUNNABLE  0.08      0.004      0:0.004   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">22   scheduling-1                   main            5          TIMED_WAI 0.06      0.003      0:0.287   <span class="literal">false</span>      <span class="literal">false</span></span><br><span class="line">-1   C1 CompilerThread0             -               -1         -         0.06      0.003      0:2.171   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">-1   VM Periodic Task Thread        -               -1         -         0.03      0.001      0:0.092   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">49   arthas-NettyHttpTelnetBootstra system          5          RUNNABLE  0.02      0.001      0:0.156   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">16   Catalina-utility-1             main            1          TIMED_WAI 0.0       0.000      0:0.029   <span class="literal">false</span>      <span class="literal">false</span></span><br><span class="line">-1   G1 Young RemSet Sampling       -               -1         -         0.0       0.000      0:0.019   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">17   Catalina-utility-2             main            1          WAITING   0.0       0.000      0:0.025   <span class="literal">false</span>      <span class="literal">false</span></span><br><span class="line">34   http-nio-8080-ClientPoller     main            5          RUNNABLE  0.0       0.000      0:0.016   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">23   http-nio-8080-BlockPoller      main            5          RUNNABLE  0.0       0.000      0:0.011   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">-1   VM Thread                      -               -1         -         0.0       0.000      0:0.032   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">-1   Service Thread                 -               -1         -         0.0       0.000      0:0.006   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">-1   GC Thread<span class="comment">#5                    -               -1         -         0.0       0.000      0:0.043   false      true</span></span><br><span class="line">Memory                     used     total    max      usage    GC</span><br><span class="line">heap                       36M      70M      4096M    0.90%    gc.g1_young_generation.count   12</span><br><span class="line">g1_eden_space              6M       18M      -1       33.33%                                  86</span><br><span class="line">g1_old_gen                 30M      50M      4096M    0.74%    gc.g1_old_generation.count     0</span><br><span class="line">g1_survivor_space          491K     2048K    -1       24.01%   gc.g1_old_generation.time(ms)  0</span><br><span class="line">nonheap                    66M      69M      -1       96.56%</span><br><span class="line">codeheap_<span class="string">&#x27;non-nmethods&#x27;</span>    1M       2M       5M       22.39%</span><br><span class="line">metaspace                  46M      47M      -1       98.01%</span><br><span class="line">Runtime</span><br><span class="line">os.name                                                        Mac OS X</span><br><span class="line">os.version                                                     10.15.4</span><br><span class="line">java.version                                                   15</span><br><span class="line">java.home                                                      /Library/Java/JavaVirtualMachines/jdk-15.jdk/Contents/Home</span><br><span class="line">systemload.average                                             10.68</span><br><span class="line">processors                                                     8</span><br><span class="line">uptime                                                         272s </span><br></pre></td></tr></table></figure>

<p>当运行在 Ali-tomcat 时，会显示当前 tomcat 的实时信息，如 HTTP 请求的 qps, rt, 错误数, 线程池信息等等。</p>
<h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><ul>
<li><code>ID</code>: Java 级别的线程 ID，注意这个 ID 不能跟 jstack 中的 nativeID 一一对应。</li>
<li><code>NAME</code>: 线程名</li>
<li><code>GROUP</code>: 线程组名</li>
<li><code>PRIORITY</code>: 线程优先级，1~10 之间的数字，越大表示优先级越高</li>
<li><code>STATE</code>: 线程的状态</li>
<li><code>CPU%</code>: 线程的 cpu 使用率。比如采样间隔 1000ms，某个线程的增量 cpu 时间为 100ms，则 cpu 使用率=100/1000=10%</li>
<li><code>DELTA_TIME</code>: 上次采样之后线程运行增量 CPU 时间，数据格式为<code>秒</code></li>
<li><code>TIME</code>: 线程运行总 CPU 时间，数据格式为<code>分:秒</code></li>
<li><code>INTERRUPTED</code>: 线程当前的中断位状态</li>
<li><code>DAEMON</code>: 是否是 daemon 线程</li>
</ul>
<h3 id="JVM-内部线程"><a href="#JVM-内部线程" class="headerlink" title="JVM 内部线程"></a>JVM 内部线程</h3><p>Java 8 之后支持获取 JVM 内部线程 CPU 时间，这些线程只有名称和 CPU 时间，没有 ID 及状态等信息（显示 ID 为 -1）。 通过内部线程可以观测到 JVM 活动，如 GC、JIT 编译等占用 CPU 情况，方便了解 JVM 整体运行状况。</p>
<ul>
<li>当 JVM 堆 (heap)/元数据 (metaspace) 空间不足或 OOM 时，可以看到 GC 线程的 CPU 占用率明显高于其他的线程。</li>
<li>当执行<code>trace/watch/tt/redefine</code> 等命令后，可以看到 JIT 线程活动变得更频繁。因为 JVM 热更新 class 字节码时清除了此 class 相关的 JIT 编译结果，需要重新编译。</li>
</ul>
<p>JVM 内部线程包括下面几种：</p>
<ul>
<li>JIT 编译线程：如 <code>C1 CompilerThread0</code> , <code>C2 CompilerThread0</code></li>
<li>GC 线程：如<code>GC Thread0</code> , <code>G1 Young RemSet Sampling</code></li>
<li>其它内部线程：如<code>VM Periodic Task Thread</code> , <code>VM Thread</code> , <code>Service Thread</code></li>
</ul>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">[i:]</td>
<td align="left">刷新实时数据的时间间隔 (ms)，默认 5000ms</td>
</tr>
<tr>
<td align="right">[n:]</td>
<td align="left">刷新实时数据的次数</td>
</tr>
</tbody></table>
<h4 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考:"></a>使用参考:</h4><p>每隔5000毫秒进行刷新一次，总共刷新3次</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dashboard -i 5000 -n 3</span><br></pre></td></tr></table></figure>

<h3 id="截图展示"><a href="#截图展示" class="headerlink" title="截图展示"></a>截图展示</h3><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2024/arthas/dashboard.png"></p>
<hr>
<h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><div class="note info no-icon"><p>提示</p>
<p>[help 指令]的等同于[指令 -help]，都是查看具体指令的使用说明。</p>
</div>

<h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right">不接参数</td>
<td align="left">查询当前 arthas 版本支持的指令以及指令描述</td>
</tr>
<tr>
<td align="right">[name:]</td>
<td align="left">查询具体指令的使用说明</td>
</tr>
</tbody></table>
<h3 id="使用参考-1"><a href="#使用参考-1" class="headerlink" title="使用参考"></a>使用参考</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ help</span><br><span class="line"> NAME         DESCRIPTION</span><br><span class="line"> help         Display Arthas Help</span><br><span class="line"> auth         Authenticates the current session</span><br><span class="line"> keymap       Display all the available keymap for the specified connection.</span><br><span class="line"> sc           Search all the classes loaded by JVM</span><br><span class="line"> sm           Search the method of classes loaded by JVM</span><br><span class="line"> classloader  Show classloader info</span><br><span class="line"> jad          Decompile class</span><br><span class="line"> getstatic    Show the static field of a class</span><br><span class="line"> monitor      Monitor method execution statistics, e.g. total/success/failure count, average rt, fail rate, etc.</span><br><span class="line"> stack        Display the stack trace for the specified class and method</span><br><span class="line"> thread       Display thread info, thread stack</span><br><span class="line"> trace        Trace the execution time of specified method invocation.</span><br><span class="line"> watch        Display the input/output parameter, return object, and thrown exception of specified method invocation</span><br><span class="line"> tt           Time Tunnel</span><br><span class="line"> jvm          Display the target JVM information</span><br><span class="line"> perfcounter  Display the perf counter information.</span><br><span class="line"> ognl         Execute ognl expression.</span><br><span class="line"> mc           Memory compiler, compiles java files into bytecode and class files in memory.</span><br><span class="line"> redefine     Redefine classes. @see Instrumentation#redefineClasses(ClassDefinition...)</span><br><span class="line"> retransform  Retransform classes. @see Instrumentation#retransformClasses(Class...)</span><br><span class="line"> dashboard    Overview of target jvm&#x27;s thread, memory, gc, vm, tomcat info.</span><br><span class="line"> dump         Dump class byte array from JVM</span><br><span class="line"> heapdump     Heap dump</span><br><span class="line"> options      View and change various Arthas options</span><br><span class="line"> cls          Clear the screen</span><br><span class="line"> reset        Reset all the enhanced classes</span><br><span class="line"> version      Display Arthas version</span><br><span class="line"> session      Display current session information</span><br><span class="line"> sysprop      Display, and change the system properties.</span><br><span class="line"> sysenv       Display the system env.</span><br><span class="line"> vmoption     Display, and update the vm diagnostic options.</span><br><span class="line"> logger       Print logger info, and update the logger level</span><br><span class="line"> history      Display command history</span><br><span class="line"> cat          Concatenate and print files</span><br><span class="line"> base64       Encode and decode using Base64 representation</span><br><span class="line"> echo         write arguments to the standard output</span><br><span class="line"> pwd          Return working directory name</span><br><span class="line"> mbean        Display the mbean information</span><br><span class="line"> grep         grep command for pipes.</span><br><span class="line"> tee          tee command for pipes.</span><br><span class="line"> profiler     Async Profiler. https://github.com/jvm-profiling-tools/async-profiler</span><br><span class="line"> stop         Stop/Shutdown Arthas server and exit the console.</span><br></pre></td></tr></table></figure>



<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ help dashboard</span><br><span class="line"> USAGE:</span><br><span class="line">  dashboard [-h] [-i &lt;value&gt;] [-n &lt;value&gt;]</span><br><span class="line"></span><br><span class="line">SUMMARY:</span><br><span class="line">  Overview of target jvm&#x27;s thread, memory, gc, vm, tomcat info.</span><br><span class="line"></span><br><span class="line">EXAMPLES:</span><br><span class="line">  dashboard</span><br><span class="line">  dashboard -n 10</span><br><span class="line">  dashboard -i 2000</span><br><span class="line"></span><br><span class="line">WIKI:</span><br><span class="line">  https://arthas.aliyun.com/doc/dashboard</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">-h, --help                              this help</span><br><span class="line">-i, --interval &lt;value&gt;                  The interval (in ms) between two executions, default is 5000 ms.</span><br><span class="line">-n, --number-of-execution &lt;value&gt;       The number of times this command will be executed.</span><br></pre></td></tr></table></figure>

<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p><code>thread 1</code> 命令会打印线程 ID 1 的栈。</p>
<p>Arthas 支持管道，可以用 <code>thread 1 | grep &#39;main(&#39;</code> 查找到<code>main class</code> 。</p>
<p>可以看到<code>main class</code> 是<code>demo.MathGame</code> ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> thread 1 | grep <span class="string">&#x27;main(&#x27;</span></span></span><br><span class="line">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>查看当前线程信息，查看线程的堆栈。</p>
</div>

<h3 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>id</em></td>
<td align="left">线程 id</td>
</tr>
<tr>
<td align="right">[n:]</td>
<td align="left">指定最忙的前 N 个线程并打印堆栈</td>
</tr>
<tr>
<td align="right">[b]</td>
<td align="left">找出当前阻塞其他线程的线程</td>
</tr>
<tr>
<td align="right">[i <code>&lt;value&gt;</code>]</td>
<td align="left">指定 cpu 使用率统计的采样间隔，单位为毫秒，默认值为 200</td>
</tr>
<tr>
<td align="right">[–all]</td>
<td align="left">显示所有匹配的线程</td>
</tr>
</tbody></table>
<h3 id="使用参考-2"><a href="#使用参考-2" class="headerlink" title="使用参考"></a>使用参考</h3><h4 id="支持一键展示当前最忙的前-N-个线程并打印堆栈："><a href="#支持一键展示当前最忙的前-N-个线程并打印堆栈：" class="headerlink" title="支持一键展示当前最忙的前 N 个线程并打印堆栈："></a>支持一键展示当前最忙的前 N 个线程并打印堆栈：</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Reference Handler&quot;</span> Id=2 cpuUsage=0.0% deltaTime=0ms time=0ms WAITING on java.lang.ref.Reference<span class="variable">$Lock</span>@2718d45c</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    -  waiting on java.lang.ref.Reference<span class="variable">$Lock</span>@2718d45c</span><br><span class="line">    at java.lang.Object.wait(Unknown Source)</span><br><span class="line">    at java.lang.ref.Reference.tryHandlePending(Unknown Source)</span><br><span class="line">    at java.lang.ref.Reference<span class="variable">$ReferenceHandler</span>.run(Unknown Source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Finalizer&quot;</span> Id=3 cpuUsage=0.0% deltaTime=0ms time=0ms WAITING on java.lang.ref.ReferenceQueue<span class="variable">$Lock</span>@6ce75d0d</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    -  waiting on java.lang.ref.ReferenceQueue<span class="variable">$Lock</span>@6ce75d0d</span><br><span class="line">    at java.lang.ref.ReferenceQueue.remove(Unknown Source)</span><br><span class="line">    at java.lang.ref.ReferenceQueue.remove(Unknown Source)</span><br><span class="line">    at java.lang.ref.Finalizer<span class="variable">$FinalizerThread</span>.run(Unknown Source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Signal Dispatcher&quot;</span> Id=4 cpuUsage=0.0% deltaTime=0ms time=0ms RUNNABLE</span><br></pre></td></tr></table></figure>

<ul>
<li>没有线程 ID，包含<code>[Internal]</code>表示为 JVM 内部线程，参考dashboard命令的介绍。</li>
<li><code>cpuUsage</code>为采样间隔时间内线程的 CPU 使用率，与dashboard命令的数据一致。</li>
<li><code>deltaTime</code>为采样间隔时间内线程的增量 CPU 时间，小于 1ms 时被取整显示为 0ms。</li>
<li><code>time</code> 线程运行总 CPU 时间。</li>
</ul>
<p>注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。</p>
<h4 id="当没有参数时，显示第一页线程的信息"><a href="#当没有参数时，显示第一页线程的信息" class="headerlink" title="当没有参数时，显示第一页线程的信息"></a>当没有参数时，显示第一页线程的信息</h4><p>默认按照 CPU 增量时间降序排列，只显示第一页数据。</p>
<h4 id="thread-–all-显示所有匹配的线程"><a href="#thread-–all-显示所有匹配的线程" class="headerlink" title="thread –all, 显示所有匹配的线程"></a>thread –all, 显示所有匹配的线程</h4><p>显示所有匹配线程信息，有时需要获取全部 JVM 的线程数据进行分析。</p>
<h4 id="thread-id-显示指定线程的运行堆栈"><a href="#thread-id-显示指定线程的运行堆栈" class="headerlink" title="thread id, 显示指定线程的运行堆栈"></a>thread id, 显示指定线程的运行堆栈</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ thread 1</span><br><span class="line"><span class="string">&quot;main&quot;</span> Id=1 TIMED_WAITING</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at java.lang.Thread.sleep(Unknown Source)</span><br><span class="line">    at java.util.concurrent.TimeUnit.sleep(Unknown Source)</span><br><span class="line">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure>

<h4 id="thread-b-找出当前阻塞其他线程的线程"><a href="#thread-b-找出当前阻塞其他线程的线程" class="headerlink" title="thread -b, 找出当前阻塞其他线程的线程"></a>thread -b, 找出当前阻塞其他线程的线程</h4><p>有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas 提供了<code>thread -b</code>， 一键找出那个罪魁祸首。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ thread -b</span><br><span class="line"><span class="string">&quot;http-bio-8080-exec-4&quot;</span> Id=27 TIMED_WAITING</span><br><span class="line">    at java.lang.Thread.sleep(Native Method)</span><br><span class="line">    at test.arthas.TestThreadBlocking.doGet(TestThreadBlocking.java:22)</span><br><span class="line">    -  locked java.lang.Object@725be470 &lt;---- but blocks 4 other threads!</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class="line">    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class="line">    at test.filter.TestDurexFilter.doFilter(TestDurexFilter.java:46)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</span><br><span class="line">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</span><br><span class="line">    at com.taobao.tomcat.valves.ContextLoadFilterValve<span class="variable">$FilterChainAdapter</span>.doFilter(ContextLoadFilterValve.java:191)</span><br><span class="line">    at com.taobao.eagleeye.EagleEyeFilter.doFilter(EagleEyeFilter.java:81)</span><br><span class="line">    at com.taobao.tomcat.valves.ContextLoadFilterValve.invoke(ContextLoadFilterValve.java:150)</span><br><span class="line">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</span><br><span class="line">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span><br><span class="line">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span><br><span class="line">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:429)</span><br><span class="line">    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085)</span><br><span class="line">    at org.apache.coyote.AbstractProtocol<span class="variable">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:625)</span><br><span class="line">    at org.apache.tomcat.util.net.JIoEndpoint<span class="variable">$SocketProcessor</span>.run(JIoEndpoint.java:318)</span><br><span class="line">    -  locked org.apache.tomcat.util.net.SocketWrapper@7127ee12</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:617)</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"></span><br><span class="line">    Number of locked synchronizers = 1</span><br><span class="line">    - java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>@31a6493e</span><br></pre></td></tr></table></figure>

<details class="note "><summary><p>warn no-icon</p>
</summary>
<p>注意</p>
<p>注意， 目前只支持找出 synchronized 关键字阻塞住的线程， 如果是<code>java.util.concurrent.Lock</code>， 目前还不支持。</p>

</details>

<h4 id="thread-i-指定采样时间间隔"><a href="#thread-i-指定采样时间间隔" class="headerlink" title="thread -i, 指定采样时间间隔"></a>thread -i, 指定采样时间间隔</h4><ul>
<li><code>thread -i 1000</code> : 统计最近 1000ms 内的线程 CPU 时间。</li>
<li><code>thread -n 3 -i 1000</code> : 列出 1000ms 内最忙的 3 个线程栈</li>
</ul>
<h4 id="thread-–state-，查看指定状态的线程"><a href="#thread-–state-，查看指定状态的线程" class="headerlink" title="thread –state ，查看指定状态的线程"></a>thread –state ，查看指定状态的线程</h4><h3 id="thread-–state-，查看指定状态的线程-1"><a href="#thread-–state-，查看指定状态的线程-1" class="headerlink" title="thread –state ，查看指定状态的线程"></a>thread –state ，查看指定状态的线程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[arthas@28114]$ thread --state WAITING</span><br><span class="line">Threads Total: 16, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0</span><br><span class="line">ID   NAME                           GROUP           PRIORITY   STATE     %CPU      DELTA_TIME TIME      INTERRUPTE DAEMON</span><br><span class="line">3    Finalizer                      system          8          WAITING   0.0       0.000      0:0.000   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">20   arthas-UserStat                system          9          WAITING   0.0       0.000      0:0.001   <span class="literal">false</span>      <span class="literal">true</span></span><br><span class="line">14   arthas-timer                   system          9          WAITING   0.0       0.000      0:0.000   <span class="literal">false</span>      <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Sc"><a href="#Sc" class="headerlink" title="Sc"></a>Sc</h2><p>可以通过 <code>sc</code> 命令 来查找 JVM 里已加载的类：</p>
<p>“Search-Class” 的简写，这个命令能搜索出所有已经加载到 JVM 中的 Class 信息，这个命令支持的参数有 <code>[d]</code>、<code>[E]</code>、<code>[f]</code> 和 <code>[x:]</code>。</p>
<h3 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">方法名表达式匹配</td>
</tr>
<tr>
<td align="right"><code>[d]</code></td>
<td align="left">输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。 如果一个类被多个 ClassLoader 所加载，则会出现多次</td>
</tr>
<tr>
<td align="right"><code>[E]</code></td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right"><code>[f]</code></td>
<td align="left">输出当前类的成员变量信息（需要配合参数-d 一起使用）</td>
</tr>
<tr>
<td align="right"><code>[x:]</code></td>
<td align="left">指定输出静态变量时属性的遍历深度，默认为 0，即直接使用 <code>toString</code> 输出</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">指定 class 的 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right"><code>[n:]</code></td>
<td align="left">具有详细信息的匹配类的最大数量（默认为 100）</td>
</tr>
<tr>
<td align="right"><code>[cs &lt;arg&gt;]</code></td>
<td align="left">指定 class 的 ClassLoader#toString() 返回值。长格式<code>[classLoaderStr &lt;arg&gt;]</code></td>
</tr>
</tbody></table>
<div class="note primary no-icon"><p><strong>提示</strong></p>
<p>class-pattern 支持全限定名，如 com.taobao.test.AAA，也支持 com/taobao/test/AAA 这样的格式，这样，我们从异常堆栈里面把类名拷贝过来的时候，不需要在手动把/替换为.啦。</p>
</div>

<div class="note primary no-icon"><p><strong>提示</strong></p>
<p>sc 默认开启了子类匹配功能，也就是说所有当前类的子类也会被搜索出来，想要精确的匹配，请打开options disable-sub-class true开关</p>
</div>

<h3 id="使用参考-3"><a href="#使用参考-3" class="headerlink" title="使用参考"></a>使用参考</h3><ul>
<li><p>模糊搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sc demo.*</span><br><span class="line">demo.MathGame</span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 55 ms.</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印类的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sc -d demo.MathGame</span><br><span class="line">class-info        demo.MathGame</span><br><span class="line">code-source       /private/tmp/math-game.jar</span><br><span class="line">name              demo.MathGame</span><br><span class="line">isInterface       <span class="literal">false</span></span><br><span class="line">isAnnotation      <span class="literal">false</span></span><br><span class="line">isEnum            <span class="literal">false</span></span><br><span class="line">isAnonymousClass  <span class="literal">false</span></span><br><span class="line">isArray           <span class="literal">false</span></span><br><span class="line">isLocalClass      <span class="literal">false</span></span><br><span class="line">isMemberClass     <span class="literal">false</span></span><br><span class="line">isPrimitive       <span class="literal">false</span></span><br><span class="line">isSynthetic       <span class="literal">false</span></span><br><span class="line">simple-name       MathGame</span><br><span class="line">modifier          public</span><br><span class="line">annotation</span><br><span class="line">interfaces</span><br><span class="line">super-class       +-java.lang.Object</span><br><span class="line">class-loader      +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">                    +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@66350f69</span><br><span class="line">classLoaderHash   3d4eac69</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 875 ms.</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印出类的 Field 信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sc -d -f demo.MathGame</span><br><span class="line">class-info        demo.MathGame</span><br><span class="line">code-source       /private/tmp/math-game.jar</span><br><span class="line">name              demo.MathGame</span><br><span class="line">isInterface       <span class="literal">false</span></span><br><span class="line">isAnnotation      <span class="literal">false</span></span><br><span class="line">isEnum            <span class="literal">false</span></span><br><span class="line">isAnonymousClass  <span class="literal">false</span></span><br><span class="line">isArray           <span class="literal">false</span></span><br><span class="line">isLocalClass      <span class="literal">false</span></span><br><span class="line">isMemberClass     <span class="literal">false</span></span><br><span class="line">isPrimitive       <span class="literal">false</span></span><br><span class="line">isSynthetic       <span class="literal">false</span></span><br><span class="line">simple-name       MathGame</span><br><span class="line">modifier          public</span><br><span class="line">annotation</span><br><span class="line">interfaces</span><br><span class="line">super-class       +-java.lang.Object</span><br><span class="line">class-loader      +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@3d4eac69</span><br><span class="line">                    +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@66350f69</span><br><span class="line">classLoaderHash   3d4eac69</span><br><span class="line">fields            modifierprivate,static</span><br><span class="line">                  <span class="built_in">type</span>    java.util.Random</span><br><span class="line">                  name    random</span><br><span class="line">                  value   java.util.Random@522b4</span><br><span class="line">                          08a</span><br><span class="line"></span><br><span class="line">                  modifierprivate</span><br><span class="line">                  <span class="built_in">type</span>    int</span><br><span class="line">                  name    illegalArgumentCount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 19 ms.</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 ClassLoader#toString 查找类（前提：有一个 toString()返回值是<code>apo</code>的类加载器，加载的类中包含<code>demo.MathGame</code>, <code>demo.MyBar</code>,<code> demo.MyFoo</code>3 个类）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sc -cs apo *demo*</span><br><span class="line">demo.MathGame</span><br><span class="line">demo.MyBar</span><br><span class="line">demo.MyFoo</span><br><span class="line">Affect(row-cnt:3) cost <span class="keyword">in</span> 56 ms.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Jad"><a href="#Jad" class="headerlink" title="Jad"></a>Jad</h2><p>可以通过 <code>jad</code> 命令来反编译代码：</p>
<div class="note info no-icon"><p><strong>提示</strong></p>
<p>反编译指定已加载类的源码</p>
</div>

<p><code>jad</code> 命令将 JVM 中实际运行的 class 的 byte code 反编译成 java 代码，便于你理解业务逻辑；如需批量下载指定包的目录的 class 字节码可以参考 <a href="https://arthas.aliyun.com/doc/dump.html">dump</a>。</p>
<ul>
<li>在 Arthas Console 上，反编译出来的源码是带语法高亮的，阅读更方便</li>
<li>当然，反编译出来的 java 代码可能会存在语法错误，但不影响你进行阅读理解</li>
</ul>
<h3 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h3><table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><code>[c:]</code></td>
<td align="left">类所属 ClassLoader 的 hashcode</td>
</tr>
<tr>
<td align="right"><code>[classLoaderClass:]</code></td>
<td align="left">指定执行表达式的 ClassLoader 的 class name</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
</tbody></table>
<h3 id="使用参考-4"><a href="#使用参考-4" class="headerlink" title="使用参考"></a>使用参考</h3><h4 id="反编译java-lang-String"><a href="#反编译java-lang-String" class="headerlink" title="反编译java.lang.String"></a>反编译<code>java.lang.String</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad java.lang.String</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Decompiled with CFR.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.ObjectStreamField;</span><br><span class="line">        <span class="keyword">import</span> java.io.Serializable;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">        <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] value;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> hash;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = <span class="keyword">new</span> ObjectStreamField[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = <span class="keyword">new</span> CaseInsensitiveComparator();</span><br><span class="line">...</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] byArray, <span class="keyword">int</span> n, <span class="keyword">int</span> n2, Charset charset)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*460*/</span>         <span class="keyword">if</span> (charset == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;charset&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">/*462*/</span>         String.checkBounds(byArray, n, n2);</span><br><span class="line"><span class="comment">/*463*/</span>         <span class="keyword">this</span>.value = StringCoding.decode(charset, byArray, n, n2);</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反编译时只显示源代码"><a href="#反编译时只显示源代码" class="headerlink" title="反编译时只显示源代码"></a>反编译时只显示源代码</h4><p>默认情况下，反编译结果里会带有<code>ClassLoader</code>信息，通过<code>--source-only</code>选项，可以只打印源代码。方便和<a href="https://arthas.aliyun.com/doc/mc.html">mc</a>/<a href="https://arthas.aliyun.com/doc/retransform.html">retransform</a>命令结合使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad --source-only demo.MathGame</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR 0_132.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathGame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> illegalArgumentCount = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反编译指定的函数"><a href="#反编译指定的函数" class="headerlink" title="反编译指定的函数"></a>反编译指定的函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad demo.MathGame main</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">232204</span>a1</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">7f</span>31245a</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/<span class="keyword">private</span>/tmp/math-game.jar</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">           MathGame game = <span class="keyword">new</span> MathGame();</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">/*16*/</span>         game.run();</span><br><span class="line"><span class="comment">/*17*/</span>         TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反编译时不显示行号"><a href="#反编译时不显示行号" class="headerlink" title="反编译时不显示行号"></a>反编译时不显示行号</h4><p><code>--lineNumber</code> 参数默认值为 true，显示指定为 false 则不打印行号。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad demo.MathGame main --lineNumber <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">232204</span>a1</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">7f</span>31245a</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/<span class="keyword">private</span>/tmp/math-game.jar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    MathGame game = <span class="keyword">new</span> MathGame();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        game.run();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="反编译时指定-ClassLoader"><a href="#反编译时指定-ClassLoader" class="headerlink" title="反编译时指定 ClassLoader"></a>反编译时指定 ClassLoader</h4><div class="note info no-icon"><p><strong>提示</strong></p>
<p>当有多个 <code>ClassLoader</code> 都加载了这个类时，<code>jad</code> 命令会输出对应 <code>ClassLoader</code> 实例的 <code>hashcode</code>，然后你只需要重新执行 <code>jad</code> 命令，并使用参数 <code>-c &lt;hashcode&gt;</code> 就可以反编译指定 ClassLoader 加载的那个类了；</p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ jad org.apache.log4j.Logger</span><br><span class="line"></span><br><span class="line">Found more than one class for: org.apache.log4j.Logger, Please use jad -c hashcode org.apache.log4j.Logger</span><br><span class="line">HASHCODE  CLASSLOADER</span><br><span class="line"><span class="number">69d</span>caba4  +-monitor<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string">6e51ad67  +-java.net.URLClassLoader@6e51ad67</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$AppClassLoader@6951a712</span></span><br><span class="line"><span class="string">            +-sun.misc.Launcher$ExtClassLoader@6fafc4c2</span></span><br><span class="line"><span class="string">2bdd9114  +-pandora-qos-service&#x27;</span>s ModuleClassLoader</span><br><span class="line"><span class="number">4</span>c0df5f8  +-pandora-framework<span class="string">&#x27;s ModuleClassLoader</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Affect(row-cnt:0) cost in 38 ms.</span></span><br><span class="line"><span class="string">$ jad org.apache.log4j.Logger -c 69dcaba4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ClassLoader:</span></span><br><span class="line"><span class="string">+-monitor&#x27;</span>s ModuleClassLoader</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line">/Users/admin/app/log4j-<span class="number">1.2</span>.<span class="number">14.</span>jar</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.spi.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> <span class="keyword">extends</span> <span class="title">Category</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Logger</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">190</span> ms.</span><br></pre></td></tr></table></figure>

<p>对于只有唯一实例的 ClassLoader 还可以通过<code>--classLoaderClass</code>指定 class name，使用起来更加方便：</p>
<p><code>--classLoaderClass</code> 的值是 ClassLoader 的类名，只有匹配到唯一的 ClassLoader 实例时才能工作，目的是方便输入通用命令，而<code>-c &lt;hashcode&gt;</code>是动态变化的。</p>
<hr>
<h2 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h2><p>通过 <code>watch</code> 命令可以查看函数的参数/返回值/异常信息。</p>
<div class="note info no-icon"><p>提示</p>
<p>函数执行数据观测</p>
</div>

<p>让你能方便的观察到指定函数的调用情况。能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p>
<h3 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="参数说明"></a>参数说明</h3><p>watch 的参数比较多，主要是因为它能在 4 个不同的场景观察对象</p>
<table>
<thead>
<tr>
<th align="right">参数名称</th>
<th align="left">参数说明</th>
</tr>
</thead>
<tbody><tr>
<td align="right"><em>class-pattern</em></td>
<td align="left">类名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>method-pattern</em></td>
<td align="left">函数名表达式匹配</td>
</tr>
<tr>
<td align="right"><em>express</em></td>
<td align="left">观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code></td>
</tr>
<tr>
<td align="right"><em>condition-express</em></td>
<td align="left">条件表达式</td>
</tr>
<tr>
<td align="right">[b]</td>
<td align="left">在<strong>函数调用之前</strong>观察</td>
</tr>
<tr>
<td align="right">[e]</td>
<td align="left">在<strong>函数异常之后</strong>观察</td>
</tr>
<tr>
<td align="right">[s]</td>
<td align="left">在<strong>函数返回之后</strong>观察</td>
</tr>
<tr>
<td align="right">[f]</td>
<td align="left">在<strong>函数结束之后</strong>(正常返回和异常返回)观察</td>
</tr>
<tr>
<td align="right">[E]</td>
<td align="left">开启正则表达式匹配，默认为通配符匹配</td>
</tr>
<tr>
<td align="right">[x:]</td>
<td align="left">指定输出结果的属性遍历深度，默认为 1，最大值是 4</td>
</tr>
<tr>
<td align="right"><code>[m &lt;arg&gt;]</code></td>
<td align="left">指定 Class 最大匹配数量，默认值为 50。长格式为<code>[maxMatch &lt;arg&gt;]</code>。</td>
</tr>
</tbody></table>
<p>这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写<code>&quot;&#123;params,returnObj&#125;&quot;</code>，只要是一个合法的 ognl 表达式，都能被正常支持。</p>
<p>观察的维度也比较多，主要体现在参数 <code>advice</code> 的数据结构上。<code>Advice</code> 参数最主要是封装了通知节点的所有信息。</p>
<ul>
<li>特殊用法请参考：<a href="https://github.com/alibaba/arthas/issues/71">https://github.com/alibaba/arthas/issues/71在新窗口打开</a></li>
<li>OGNL 表达式官网：<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html">https://commons.apache.org/proper/commons-ognl/language-guide.html在新窗口打开</a></li>
</ul>
<p><strong>特别说明</strong>：</p>
<ul>
<li>watch 命令定义了 4 个观察事件点，即 <code>-b</code> 函数调用前，<code>-e</code> 函数异常后，<code>-s</code> 函数返回后，<code>-f</code> 函数结束后</li>
<li>4 个观察事件点 <code>-b</code>、<code>-e</code>、<code>-s</code> 默认关闭，<code>-f</code> 默认打开，当指定观察点被打开后，在相应事件点会对观察表达式进行求值并输出</li>
<li>这里要注意<code>函数入参</code>和<code>函数出参</code>的区别，有可能在中间被修改导致前后不一致，除了 <code>-b</code> 事件点 <code>params</code> 代表函数入参外，其余事件都代表函数出参</li>
<li>当使用 <code>-b</code> 时，由于观察事件点是在函数调用前，此时返回值或异常均不存在</li>
<li>在 watch 命令的结果里，会打印出<code>location</code>信息。<code>location</code>有三种可能值：<code>AtEnter</code>，<code>AtExit</code>，<code>AtExceptionExit</code>。对应函数入口，函数正常 return，函数抛出异常。</li>
</ul>
<h3 id="使用参考-5"><a href="#使用参考-5" class="headerlink" title="使用参考"></a>使用参考</h3><h4 id="观察函数调用返回时的参数、this-对象和返回值"><a href="#观察函数调用返回时的参数、this-对象和返回值" class="headerlink" title="观察函数调用返回时的参数、this 对象和返回值"></a>观察函数调用返回时的参数、this 对象和返回值</h4><div class="note info no-icon"><p>提示</p>
<p>观察表达式，默认值是 {params, target, returnObj}</p>
</div>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors -x 2</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 32 ms, listenerId: 5</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=2021-08-31 15:22:57; [cost=0.220625ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[-179173],</span><br><span class="line">    ],</span><br><span class="line">    @MathGame[</span><br><span class="line">        random=@Random[java.util.Random@31cefde0],</span><br><span class="line">        illegalArgumentCount=@Integer[44],</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExit</span><br><span class="line">ts=2021-08-31 15:22:58; [cost=1.020982ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[1],</span><br><span class="line">    ],</span><br><span class="line">    @MathGame[</span><br><span class="line">        random=@Random[java.util.Random@31cefde0],</span><br><span class="line">        illegalArgumentCount=@Integer[44],</span><br><span class="line">    ],</span><br><span class="line">    @ArrayList[</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[2],</span><br><span class="line">        @Integer[26947],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的结果里，说明函数被执行了两次，第一次结果是<code>location=AtExceptionExit</code>，说明函数抛出异常了，因此<code>returnObj</code>是 null</li>
<li>在第二次结果里是<code>location=AtExit</code>，说明函数正常返回，因此可以看到<code>returnObj</code>结果是一个 ArrayList</li>
</ul>
<h4 id="指定-Class最大匹配数量"><a href="#指定-Class最大匹配数量" class="headerlink" title="指定 Class最大匹配数量"></a>指定 Class最大匹配数量</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors -m 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 302 ms, listenerId: 3</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=2022-12-25 19:58:41; [cost=0.222419ms] result=@ArrayList[</span><br><span class="line">    @Object[][isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">    @MathGame[demo.MathGame@3bf400],</span><br><span class="line">    null,</span><br><span class="line">]</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExceptionExit</span><br><span class="line">ts=2022-12-25 19:58:51; [cost=0.046928ms] result=@ArrayList[</span><br><span class="line">    @Object[][isEmpty=<span class="literal">false</span>;size=1],</span><br><span class="line">    @MathGame[demo.MathGame@3bf400],</span><br><span class="line">    null,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="观察函数调用入口的参数和返回值"><a href="#观察函数调用入口的参数和返回值" class="headerlink" title="观察函数调用入口的参数和返回值"></a>观察函数调用入口的参数和返回值</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ watch demo.MathGame primeFactors <span class="string">&quot;&#123;params,returnObj&#125;&quot;</span> -x 2 -b</span><br><span class="line">Press Ctrl+C to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost <span class="keyword">in</span> 50 ms.</span><br><span class="line">ts=2018-12-03 19:23:23; [cost=0.0353ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @Integer[-1077465243],</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>对比前一个例子，返回值为空（事件点为函数执行前，因此获取不到返回值）</li>
</ul>
<h2 id="Vmtool"><a href="#Vmtool" class="headerlink" title="Vmtool"></a>Vmtool</h2><p>通过 <code>vmtool</code> 命令，可以搜索内存对象。</p>
<h3 id="获取-class-实例"><a href="#获取-class-实例" class="headerlink" title="获取 class 实例"></a>获取 class 实例</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vmtool --action getInstances --className java.lang.String --<span class="built_in">limit</span> 10</span><br><span class="line">@String[][</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session],</span><br><span class="line">    @String[com.taobao.arthas.core.shell.session.Session],</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session],</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session],</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session.class],</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session.class],</span><br><span class="line">    @String[com/taobao/arthas/core/shell/session/Session.class],</span><br><span class="line">    @String[com/],</span><br><span class="line">    @String[java/util/concurrent/ConcurrentHashMap<span class="variable">$ValueIterator</span>],</span><br><span class="line">    @String[java/util/concurrent/locks/LockSupport],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>提示</p>
<p>通过 –limit 参数，可以限制返回值数量，避免获取超大数据时对 JVM 造成压力。默认值是 10。</p>
</div>

<h4 id="调用实例方法"><a href="#调用实例方法" class="headerlink" title="调用实例方法"></a>调用实例方法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[arthas@13416]$ vmtool --action  getInstances  --className demo.MathGame --express <span class="string">&#x27;instances[0].primeFactors(3)&#x27;</span> -x 3</span><br><span class="line">@ArrayList[</span><br><span class="line">    @Integer[3],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="退出-Arthas"><a href="#退出-Arthas" class="headerlink" title="退出 Arthas"></a>退出 Arthas</h2><p>用 <code>exit</code> 或者 <code>quit</code> 命令可以退出 Arthas。</p>
<p>退出 Arthas 之后，还可以再次用 <code>java -jar arthas-boot.jar</code> 来连接。</p>
<h2 id="彻底退出-Arthas"><a href="#彻底退出-Arthas" class="headerlink" title="彻底退出 Arthas"></a>彻底退出 Arthas</h2><p><code>exit/quit</code> 命令只是退出当前 session，arthas server 还在目标进程中运行。</p>
<p>想完全退出 Arthas，可以执行 <code>stop</code> 命令。</p>
]]></content>
      <categories>
        <category>Java诊断工具</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
        <tag>Java诊断工具</tag>
        <tag>线上问题排查</tag>
        <tag>JVM</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 构建生命周期</title>
    <url>/2023/09/05/Maven-%E6%9E%84%E5%BB%BA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>Maven 基于构建生命周期的中心概念。 这意味着构建和分发特定项的过程是明确定义的。</p>
<p>对于构建项目的人来说，这意味着只需要学习一小部分命令即可构建任何 Maven 项目，POM 将确保他们获得所需的结果。</p>
<p>共有三个内置构建生命周期：<code>default</code>, <code>clean</code> and  <code>site</code>。 <code>default</code>生命周期处理项目部署，<code>clean</code>生命周期处理项目清理，而 <code>site</code>生命周期处理项目网站的创建。</p>
<h1 id="构建生命周期由多个阶段组成"><a href="#构建生命周期由多个阶段组成" class="headerlink" title="构建生命周期由多个阶段组成"></a>构建生命周期由多个阶段组成</h1><p>每个构建生命周期都由不同的构建阶段列表定义，其中一个构建阶段代表生命周期中的一个阶段。</p>
<p>例如，默认生命周期包括以下阶段（有关生命周期阶段的完整列表，请参阅生命周期参考）：</p>
<ul>
<li><code>validate</code>- 验证项目是否正确并且所有必要的信息均可用</li>
<li><code>compile</code>- 编译项目的源代码，编译后的类被放置在 中<code>$&#123;basedir&#125;/target/classes</code></li>
<li><code>test</code>- 使用合适的单元测试框架测试编译后的源代码。这些测试不应要求打包或部署代码</li>
<li><code>package</code>- 将编译后的代码打包为可发布的格式，如 JAR</li>
<li><code>verify</code>- 对集成测试的结果进行检查，确保符合质量标准</li>
<li><code>install</code>- 将软件包（例如JAR包）安装到本地存储库（本地Repository）中，作为本地其他项目的依赖项使用</li>
<li><code>deploy</code>- 将最终包复制到远程存储库以与其他开发人员和项目共享</li>
</ul>
<p>这些生命周期阶段<strong>按顺序执行</strong>以完成默认生命周期。 考虑到上面的生命周期阶段，这意味着当使用默认生命周期时，Maven 将首先验证项目，然后尝试编译源代码，针对测试运行这些源代码，打包二进制文件（例如 jar），针对该项目运行集成测试 包，验证集成测试，将验证的包安装到本地存储库，然后将安装的包部署到远程存储库。</p>
<hr>
<h1 id="命令行调用"><a href="#命令行调用" class="headerlink" title="命令行调用"></a>命令行调用</h1><p>您应该选择与您的结果相匹配的阶段。 如果你想要你的<code>jar</code>，运行<code>package</code>。如果您想运行单元测试，请运行<code>test</code>。</p>
<p>如果您不确定自己想要什么，首选调用的阶段是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn verify</span><br></pre></td></tr></table></figure>

<p>在执行<code>verify</code>之前，该命令会依次执行每个默认生命周期阶段（<code>validate</code>, <code>compile</code>, <code>package</code>等）。在大多数情况下，效果与打包相同。不过，如果有集成测试，这些测试也会被执行。在验证阶段，还可以进行一些额外的检查，例如，如果代码是按照预定义的检查样式规则编写的。</p>
<p>在构建环境中，使用下面的调用即可将工程干净利落地构建并部署到共享存储库中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean deploy</span><br></pre></td></tr></table></figure>

<p>同一命令可用于多模块场景（即具有一个或多个子项目的项目）。 Maven遍历每个子项目并执行<code>clean</code>，然后执行<code>deploy</code>（包括之前的所有构建阶段步骤）。</p>
<h1 id="构建阶段由插件目标组成"><a href="#构建阶段由插件目标组成" class="headerlink" title="构建阶段由插件目标组成"></a>构建阶段由插件目标组成</h1><p>不过，尽管构建阶段负责构建生命周期中的特定步骤，但其履行职责的方式可能会有所不同。这可以通过声明与这些构建阶段绑定的插件目标来实现。</p>
<p>一个插件目标代表一个特定的任务（比构建阶段更细），有助于项目的构建和管理。它可以与零个或多个构建阶段绑定。未与任何构建阶段绑定的目标可通过直接调用在构建生命周期之外执行。执行顺序取决于目标和构建阶段的调用顺序。</p>
<p>例如，考虑下面的命令。<code>clean</code>和<code>package</code>是构建阶段，而<code>dependency:copy-dependencies</code>是（插件的）目标。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean dependency:copy-dependencies package</span><br></pre></td></tr></table></figure>

<p>如果要执行此操作，则将首先执行<code>clean</code>阶段（这意味着它将运行<code>clean</code>生命周期的所有前置阶段，加上<code>clean</code>阶段本身），然后是<code>dependency:copy-dependencies</code>目标，最后执行<code>package</code>阶段（以及<code>package</code>默认生命周期的所有先前构建阶段）。</p>
<p>此外，如果一个目标与一个或多个构建阶段绑定，那么该目标将在所有这些阶段中被调用。</p>
<h1 id="设置项目以使用构建生命周期"><a href="#设置项目以使用构建生命周期" class="headerlink" title="设置项目以使用构建生命周期"></a>设置项目以使用构建生命周期</h1><p>构建生命周期简单易用，但在为项目构建 Maven 构建时，如何为每个构建阶段分配任务？</p>
<h2 id="Packaging-打包"><a href="#Packaging-打包" class="headerlink" title="Packaging-打包"></a>Packaging-打包</h2><p>第一种，也是最常见的一种方法，是通过POM 元素<code>&lt;packaging></code>为项目设置打包。一些有效的<code>&lt;packaging></code>值包括 <code>jar</code>、<code>war</code>、<code>ear</code>和<code>pom</code>。如果没有指定包装值，则默认为<code>jar</code>。</p>
<p>每个<code>packaging</code>都包含一个目标列表，用于绑定到特定阶段。例如，<code>jar</code> <code>packaging</code>将把以下目标绑定到默认生命周期的构建阶段。</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>jar  packagin的插件目标</th>
</tr>
</thead>
<tbody><tr>
<td><code>process-resources</code></td>
<td><code>resources:resources</code></td>
</tr>
<tr>
<td><code>compile</code></td>
<td><code>compiler:compile</code></td>
</tr>
<tr>
<td><code>process-test-resources</code></td>
<td><code>resources:testResources</code></td>
</tr>
<tr>
<td><code>test-compile</code></td>
<td><code>compiler:testCompile</code></td>
</tr>
<tr>
<td><code>test</code></td>
<td><code>surefire:test</code></td>
</tr>
<tr>
<td><code>package</code></td>
<td><code>jar:jar</code></td>
</tr>
<tr>
<td><code>install</code></td>
<td><code>install:install</code></td>
</tr>
<tr>
<td><code>deploy</code></td>
<td><code>deploy:deploy</code></td>
</tr>
</tbody></table>
<p>这几乎是一套标准的绑定。</p>
<h2 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins-插件"></a>Plugins-插件</h2><p>将目标添加到生命周期阶段的第二种方法是在项目中配置插件。插件是为 Maven 提供目标的工程。此外，一个插件可能有一个或多个目标，其中每个目标代表该插件的一种能力。例如，编译器插件有两个目标：<code>compile</code>和<code>testCompile</code>。前者编译你的主代码的源代码，而后者编译你的测试代码的源代码。</p>
<p>在后面的章节中您将看到，插件可以包含指示将目标绑定到哪个生命周期阶段的信息。请注意，仅添加插件本身的信息是不够的，还必须指定要在构建过程中运行的目标。</p>
<p>配置的目标将添加到已绑定到所选包的生命周期的目标中。 如果多个目标绑定到特定阶段，则使用的顺序是首先执行打包中的目标，然后执行 POM 中配置的目标。 请注意，您可以使用<code>&lt;executions></code>元素来更好地控制特定目标的顺序。</p>
<p>为阶段添加目标的第二种方法是在项目中配置插件。插件是向 Maven 提供目标的工件。此外，一个插件可能有一个或多个目标，其中每个目标代表该插件的一种能力。例如，编译器插件有两个目标：<code>compile</code>和<code>testCompile</code>。前者编译主代码的源代码，后者编译测试代码的源代码。</p>
<p>在后面的章节中您将看到，插件可以包含指示将目标绑定到哪个生命周期阶段的信息。请注意，仅添加插件本身的信息是不够的，还必须指定要在构建过程中运行的目标。</p>
<p>配置的目标将添加到已绑定到所选包装生命周期的目标中。如果一个特定阶段绑定了多个目标，则使用的顺序是先执行包装中的目标，然后再执行 POM 中配置的目标。请注意，您可以使用<code>&lt;executions></code>元素对特定目标的顺序进行更多控制。</p>
<p>例如，<code>Modello</code>插件默认将其目标<code>modello:java</code>绑定到<code>generate-sources</code>阶段（注：<code>modello:java</code>目标生成 Java 源代码）。因此，要使用 Modello 插件并让它从模型生成源代码并将其纳入构建，您需要在<code>&lt;build></code>的<code>&lt;plugins></code>部分的 POM 中添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.modello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>modello-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">models</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">model</span>&gt;</span>src/main/mdo/maven.mdo<span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">models</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>您可能想知道为什么<code>&lt;executions></code>元素在那里。 这样您就可以根据需要使用不同的配置多次运行相同的目标。还可以根据一个给定 ID单独的执行，以便在继承或应用配置文件期间，您可以控制是否合并目标配置或将其转变为附加执行。</p>
<p>当多个执行与特定阶段相匹配时，它们将按照 POM 中指定的顺序执行，先执行继承的执行。</p>
<p>现在，就<code>modello:java</code>而言，只有在生成源代码阶段才有意义。但有些目标可以在多个阶段中使用，因此可能没有合理的默认值。对于这些目标，你可以自己指定阶段。例如，假设有一个目标<code>display:time</code>，它能在命令行中回声显示当前时间，你希望它在<code>process-test-resources</code>阶段运行，以显示测试何时开始。可以这样配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>display-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>time<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven POM</title>
    <url>/2023/08/25/Maven-POM/</url>
    <content><![CDATA[<h1 id="What-is-the-POM"><a href="#What-is-the-POM" class="headerlink" title="What is the POM?"></a>What is the POM?</h1><p>POM 代表“项目对象模型”，即”Project Object Model”。它是 Maven 项目的 XML 表示形式，保存在名为<code>pom.xml</code>的文件中。当 Maven 人员在场时，谈论项目是在哲学意义上谈论项目，而不仅仅是包含代码的文件集合。一个项目包含配置文件、相关开发人员及其角色、缺陷、跟踪系统、组织和许可证、项目所在的 URL、项目的依赖关系，以及赋予代码生命的所有其他小部件。它是与项目有关的所有事项的一站式商店。事实上，在 Maven 的世界里，一个项目根本不需要包含任何代码，只需要一个<code>pom.xml</code>。</p>
<h1 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h1><p>这是 <code>POM</code> 的项目元素下的直接元素列表。请注意，<code>modelVersion</code>的版本是<code>4.0.0</code>，这是目前唯一支持的 <code>POM</code> 版本，而且始终是必需的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- The Basics --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>...<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>...<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>...<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span>...<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modules</span>&gt;</span>...<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span>...<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- Build Settings --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span>...<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span>...<span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- More Project Information --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>...<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>...<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">licenses</span>&gt;</span>...<span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">organization</span>&gt;</span>...<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">developers</span>&gt;</span>...<span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">contributors</span>&gt;</span>...<span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span>...<span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scm</span>&gt;</span>...<span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span>...<span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>...<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>...<span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span>...<span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="POM文件基础信息"><a href="#POM文件基础信息" class="headerlink" title="POM文件基础信息"></a>POM文件基础信息</h1><p>POM 包含项目的所有必要信息，以及构建过程中要使用的插件配置。它是 “who”, “what”,  “where”的声明式表现，而构建生命周期是 “when” and “how”。这并不是说 POM 不能影响应用生命周期的流程–它可以。例如，通过配置<code>maven-antrun-plugin</code>，就可以在 POM 中嵌入 Apache Ant 任务。然而，这最终只是一个声明。 build.xml 准确地告诉 Ant 在运行时要做什么（过程式），而 POM 则说明其配置（声明式）。如果某种外力导致生命周期跳过 Ant 插件的执行，也不会阻止已执行的插件发挥其魔力。这与 build.xml 文件不同，在 build.xml 文件中，任务几乎总是依赖于在它之前执行的行。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Maven-坐标"><a href="#Maven-坐标" class="headerlink" title="Maven 坐标"></a>Maven 坐标</h1><p>上面定义的 POM 是 Maven 允许的最低限度。<code>groupId:artifactId:version</code>都是必填字段（不过，如果 groupId 和 version 是继承自父版本，则无需明确定义，有关继承的内容稍后详述）。这三个字段的作用很像地址和时间戳。这标记了版本库中的一个特定位置，就像 Maven 项目的坐标系：</p>
<ul>
<li><strong>groupId</strong>：这通常在一个组织或项目中是唯一的。例如，所有核心 Maven 工程都（应该）使用的 <code>groupId</code> 是<code>org.apache.maven</code>。<code>groupId</code>不一定使用点符号，例如 junit 项目。请注意，点标记的 groupId 不必与项目包含的包结构相对应。 但是，这是一个值得遵循的好习惯。当存储在存储库中时，该组的行为与操作系统中的 Java 打包结构非常相似。 这些点被操作系统特定的目录分隔符（例如 Unix 中的“/”）替换，成为基础存储库的相对目录结构。 在给出的示例中，<code>org.codehaus.mojo</code>组位于目录<code>$M2_REPO/org/codehaus/mojo</code>中。</li>
<li><strong>artifactId</strong>：<code>artifactId</code> 通常是项目的名称。虽然 <code>groupId</code> 很重要，但小组内的人在讨论中很少会提到 groupId（他们通常都是同一个 ID，例如 MojoHaus 项目的 groupId：<code>org.codehaus.mojo</code>。它与 <code>groupId</code> 一起创建了一个key，该key将此项目与世界上其他所有项目区分开来（至少应该如此：）。<code>artifactId</code> 配合 <code>groupId</code> ， 完全定义了工程在版本库中的唯一地址。在上述项目中，<code>my-project</code>位于<code>$M2_REPO/org/codehaus/mojo/my-project</code>。</li>
<li><strong>version</strong>: groupId:artifactId 表示的是一个项目，但它们无法确定我们谈论的是该项目的哪个版本。我们想要 2018 年（4.12 版）的 junit:junit，还是 2007 年（3.8.2 版）的 junit:junit？简而言之：代码发生了变化，这些变化就应该进行版本化，而这个元素可以使这些版本保持一致。my-project 1.0 版本的文件存放在<code>$M2_REPO/org/codehaus/mojo/my-project/1.0</code>的目录结构中。</li>
</ul>
<h1 id="Packaging-打包"><a href="#Packaging-打包" class="headerlink" title="Packaging-打包"></a>Packaging-打包</h1><p>现在，我们有了<code>groupId:artifactId:version</code>的地址结构，还需要一个标准标签来提供真正完整的内容：那就是项目的包装。在我们的例子中，上面定义的<code>org.codehaus.mojo:my-project:1.0</code>的 POM 示例将打包为<code>jar</code>。我们可以通过声明不同的打包方式将其变为<code>war</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有声明<code>packaging</code>，Maven 默认的<code>packaging</code>为 jar。当前的核心打包方式有：<code>pom</code>、<code>jar</code>、<code>maven-plugin</code>、<code>ejb</code>、<code>war</code>、<code>ear</code>、<code>rar</code>。</p>
<h1 id="POM-Relationships"><a href="#POM-Relationships" class="headerlink" title="POM Relationships"></a>POM Relationships</h1><h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>POM 的基石是其依赖列表。大多数项目都需要依赖其他项目才能正确构建和运行。如果 Maven 为你所做的一切就是管理这个列表，那么你已经收获很多。Maven 下载并链接编译以及需要它们的其他目标的依赖项。作为额外的好处，Maven 引入了这些依赖项的依赖项（传递依赖项），让您的列表只关注项目所需的依赖项。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>groupId</strong>, <strong>artifactId</strong>, <strong>version</strong>:</p>
<p>您会经常看到这些元素。 这个三位一体用于及时计算特定项目的 Maven 坐标，将其划分为该项目的依赖项。 此计算的目的是选择与所有依赖项声明匹配的版本（由于传递依赖项，同一工程可能有多个依赖项声明）。</p>
</li>
<li><p><strong>type</strong>:</p>
<p>对应于所选的依赖关系类型。 默认为<code>jar</code>。虽然它通常表示依赖项文件名的扩展名，但情况并非总是如此：类型可以映射到不同的扩展名和分类器。<code>type</code>通常与所使用的<code>packaging</code>相对应，但也并非总是如此。</p>
</li>
<li><p><strong>scope</strong>:</p>
<p>该元素指的是当前任务（编译和运行时、测试等）的类路径，以及如何限制依赖关系的传递性。有五种作用域可供选择：</p>
<ul>
<li><code>compile</code>- 这是<code>scope</code>，在未指定任何作用域时使用。编译依赖项在所有类路径中都可用。 此外，这些依赖关系会传播到依赖项目。</li>
<li><code>provided</code>- 这与<code>compile</code>很相似，但表示您希望 JDK 或容器在运行时提供它。它只能在编译和测试的<code>classpath</code> 上使用，而且不具有传递性。</li>
<li><code>runtime</code>- 此作用域表示编译时不需要该依赖关系，但执行时需要。它在运行时和测试类路径中，但不在编译类路径中。</li>
<li><code>test</code>- 此范围表示应用程序的正常使用不需要依赖项，并且仅适用于测试编译和执行阶段。 它不具有传递性。</li>
<li><code>system</code>- 此范围与提供的<code>prvoide</code>类似，只是您必须显式提供包含它的 <code>JAR</code>。 该工件始终可用，无需在资源库中查找。</li>
</ul>
</li>
<li><p><strong>systemPath</strong>:</p>
<p>仅在<code>&lt;scope></code>范围为<code>system</code>时才使用。否则，如果设置了该元素，编译将失败。路径必须是绝对路径，因此建议使用属性指定特定机器的路径，如<code>$&#123;java.home&#125;/lib</code>。它会假定系统依赖作用域具有优先权，因此 Maven 不会检查项目的远程资源库，而是检查系统路径该文件是否存在。如果不存在，Maven 会导致构建失败，并建议您手动下载和安装。</p>
</li>
<li><p><strong>optional</strong>:</p>
<p>当项目本身是依赖项时，标记为<code>optional</code>。例如，假设项目<code>A</code>需要依赖项目<code>B</code>来编译一部分代码，而这部分代码在运行时可能用不到，那么我们的所有项目可能都不需要项目<code>B</code>。因此，如果项目<code>X</code>将项目<code>A</code>作为自己的依赖项，那么 Maven 就根本不需要安装项目<code>B</code>。如果<code>=></code>表示必须依赖，而<code>--></code>表示可选，那么在构建<code>A</code>时会出现<code>A=>B</code>的情况，而构建<code>X</code>时可能会出现<code>X=>A-->B</code>的情况。</p>
<p>简而言之，<code>optional</code>让其他项目知道，当您使用此项目时，不需要此依赖项即可正常工作。</p>
</li>
</ul>
<h2 id="依赖关系版本要求规范"><a href="#依赖关系版本要求规范" class="headerlink" title="依赖关系版本要求规范"></a>依赖关系版本要求规范</h2><p>依赖项的版本元素定义版本要求，用于计算依赖项版本。软性要求可以被依赖关系图中其他地方的同一工程的不同版本所替代。硬性要求规定了特定的一个或多个版本，并覆盖软性要求。如果没有任何依赖项版本可以满足该工程的所有硬要求，则构建会失败。</p>
<p>版本要求的语法如下：</p>
<ul>
<li><code>1.0</code>: 1.0 的软要求。 如果依赖关系树中较早没有出现其他版本，则使用 1.0。</li>
<li><code>[1.0]</code>：1.0 的硬性要求。 使用 1.0 并且仅使用 1.0。</li>
<li><code>(,1.0]</code>: 任何&lt;= 1.0 版本的硬性要求。</li>
<li><code>[1.2,1.3]</code>: 1.2 和 1.3（含）之间任何版本的硬性要求。</li>
<li><code>[1.0,2.0)</code>: 1.0&lt;= x&lt; 2.0；硬性要求在 1.0（含）和 2.0（不含）之间的任何版本。</li>
<li><code>[1.5,)</code>: 任何大于或等于 1.5 版本的硬性要求。</li>
<li><code>(,1.0],[1.2,)</code>: 小于或等于 1.0 或大于或等于 1.2 的任何版本的硬性要求，但不包括 1.1。多个要求之间用逗号分隔。</li>
<li><code>(,1.1),(1.1,)</code>: 除 1.1 之外的任何版本的硬性需求；例如，因为 1.1 存在关键漏洞。<br>Maven 挑选每个项目中满足该项目依赖项所有硬性要求的最高版本。如果没有任何版本满足所有硬性要求，则构建失败。</li>
</ul>
<h2 id="版本顺序规范"><a href="#版本顺序规范" class="headerlink" title="版本顺序规范"></a>版本顺序规范</h2><p>如果版本字符串在语法上是正确的语义版本控制 1.0.0 版本号，则在几乎所有情况下版本比较都遵循该规范中概述的优先规则。 这些版本是常见的字母数字 ASCII 字符串，例如 2.15.2-alpha。 更准确地说，如果要比较的两个版本号都与语义版本控制规范中的 BNF 语法中的“有效 semver”产生式相匹配，则情况成立。 Maven 不考虑该规范隐含的任何语义。</p>
<p>重要：这只适用于语义版本控制1.0.0。 Maven的版本顺序算法与语义版本控制2.0.0不兼容。 特别是，Maven不对加号进行特殊处理，也不考虑构建标识符。</p>
<p>当版本字符串不遵循语义版本控制时，需要一组更复杂的规则。 Maven 坐标被分割为点（“.”）、连字符（“-”）以及数字和字符之间的转换之间的标记。 分隔符被记录并将对顺序产生影响。 数字和字符之间的转换相当于连字符。 空标记将替换为“0”。 这给出了一系列版本号（数字标记）和带有“.”的版本限定符（非数字标记）。 或“-”前缀。</p>
<p>拆分和替换示例：</p>
<div class="note success"><p>1-1.foo-bar1baz-.1 -&gt;1-1.foo-bar-1-baz-0.1</p>
</div>

<p>然后，从版本末尾开始，修剪尾随的“null”值（0、“”、“final”、“ga”）。 从头到尾对每个剩余的连字符重复此过程。</p>
<p>修剪示例：</p>
<ul>
<li><code>1.0.0</code>-&gt;<code>1</code></li>
<li><code>1.g</code>-&gt;<code>1</code></li>
<li><code>1.fina</code>-&gt;<code>1</code></li>
<li><code>1.0</code>-&gt;<code>1</code></li>
<li><code>1.</code>-&gt;<code>1</code></li>
<li><code>1-</code>-&gt;<code>1</code></li>
<li><code>1.0.0-foo.0.0</code>-&gt;<code>1-foo</code></li>
<li><code>1.0.0-0.0.0</code>-&gt;<code>1</code></li>
</ul>
<p>版本顺序是这一前缀标记序列的字典顺序，较短的标记填充有足够的“空”值和匹配的前缀，以与较长的标记具有相同的长度。 填充的“null”值取决于其他版本的前缀：0 表示“.”，“”表示“-”。 前缀令牌顺序为：</p>
<p>如果前缀相同，则比较 token：</p>
<ul>
<li>数字标记具有自然顺序。</li>
<li>非数字标记（“限定符”）按字母顺序排列，但以下标记除外（按此顺序排在第一位）<ul>
<li>“<code>alpha</code>“&lt; “<code>beta</code>“&lt; “<code>milestone</code>“&lt; “<code>rc</code>“ = “<code>cr</code>“&lt; “<code>snapshot</code>“&lt; “” = “<code>final</code>“ = “<code>ga</code>“&lt; “<code>sp</code>“</li>
<li>当直接跟数字时，“alpha”、“beta”和“milestone”限定符可以分别缩写为“a”、“b”和“m”。<br>否则“.qualifier”=“-qualifier”&lt;“-number”&lt;“.number”</li>
<li>alpha = a&lt;&lt;&lt;beta&gt;&gt;= b&lt;&lt;&lt;milestone&gt;&gt;= m&lt;&lt;&lt;rc&gt;&gt;= cr&lt;&lt;&lt;snapshot&gt;&gt;’&lt;&lt;&lt;&gt;&gt;’ = final = ga = release&lt; sp</li>
</ul>
</li>
</ul>
<p>鼓励遵守 semver 规则，不鼓励使用某些限定词：</p>
<ul>
<li>与<code>ea</code>and<code>preview</code>相比，更倾向使用<code>alpha</code>,<code>beta</code>和<code>milestone</code></li>
<li>优先选择<code>1.0.0-RC1</code>，而不是<code>1.0.0.0.RC1</code></li>
<li>不鼓励使用<code>CR</code>修饰符。请使用<code>RC</code></li>
<li>不鼓励使用<code>final</code>、<code>ga</code>和<code>release</code>限定符。请勿使用限定符。</li>
<li>不鼓励使用<code>SP</code>限定符。 而是增加补丁版本。</li>
</ul>
<h2 id="Exclusions-排除项"><a href="#Exclusions-排除项" class="headerlink" title="Exclusions-排除项"></a>Exclusions-排除项</h2><p>限制依赖项的传递依赖关系有时很有用。依赖项可能指定了不正确的作用域，或与项目中的其他依赖项发生冲突。<code>Exclusions</code>会告诉 Maven 不要在类路径中包含指定的<code>artifact</code>，即使该<code>artifact</code>是本项目一个或多个依赖项的依赖项（传递依赖项）。例如，<code>maven-embedder</code>依赖于<code>maven-core</code>。假设您想依赖<code>maven-embedder</code>，但不想在 classpath 中包含<code>maven-core</code>或其依赖项。那么就在声明依赖<code>maven-embedder</code>的元素中添加<code>maven-core</code>作为排除项：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-embedder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这只会从<code>maven-embedder</code>依赖项中删除到<code>maven-core</code>的路径。 如果<code>maven-core</code>在 POM 中的其他位置显示为直接或传递依赖项，它仍然可以添加到类路径中。</p>
<p>通配符排除可以轻松排除依赖项的所有传递依赖项。 在下面的情况下，您可能正在使用 maven-embedder 并且想要管理您使用的依赖项，因此您排除所有传递依赖项：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-embedder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>exclusions</strong>： Exclusions包含一个或多个<code>&lt;exclusion></code>，每个元素都包含表示要排除的依赖关系的<code>groupId</code>和<code>artifactId</code>。与<code>optional</code>不同的是，<code>exclusions</code>会主动将<code>artifacts</code>从依赖关系树中移除，而<code>optional</code>可能会也可能不会被安装和使用。</li>
</ul>
<h2 id="Inheritance-继承"><a href="#Inheritance-继承" class="headerlink" title="Inheritance-继承"></a>Inheritance-继承</h2><p>Maven 为构建管理带来的一个强大功能是项目继承概念。虽然在 Ant 等构建系统中可以模拟继承，但 Maven 在项目对象模型中明确了项目继承。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目和聚合（多模块）项目的<code>packaging</code>类型需要为<code>pom</code>。这些类型定义了与一组生命周期阶段绑定的目标。例如，如果打包类型为<code>jar</code>，那么打包阶段将执行<code>jar:jar</code>目标。现在，我们可以为父 POM 添加值，这些值将由其子 POM 继承。父 POM 中的大多数元素都会被其子 POM 继承，其中包括:</p>
<ul>
<li>groupId</li>
<li>version</li>
<li>description</li>
<li>url</li>
<li>inceptionYear</li>
<li>organization</li>
<li>licenses</li>
<li>developers</li>
<li>contributors</li>
<li>mailingLists</li>
<li>scm</li>
<li>issueManagement</li>
<li>ciManagement</li>
<li>properties</li>
<li>dependencyManagement</li>
<li>dependencies</li>
<li>repositories</li>
<li>pluginRepositories</li>
<li>build<ul>
<li>plugin executions with matching ids</li>
<li>plugin configuration</li>
<li>etc.</li>
</ul>
</li>
<li>reporting</li>
<li>profiles</li>
</ul>
<p><code>不继承的重要元素包括:</code></p>
<ul>
<li>artifactId</li>
<li>name</li>
<li>prerequisites</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../my-parent<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意<code>relativePath</code>元素。它不是必需的，但可以用来指示 Maven 在搜索本地和远程版本库之前，首先搜索该项目父节点的路径。</p>
<p>要查看继承的实际效果，只需查看 ASF 或 Maven 父 POM 即可。</p>
<h2 id="The-Super-POM"><a href="#The-Super-POM" class="headerlink" title="The Super POM"></a>The Super POM</h2><p>与面向对象编程中的对象继承类似，扩展父 POM 的 POM 会从该父 POM 继承某些值。 此外，正如 Java 对象最终继承自<code>java.lang.Object</code>一样，所有项目对象模型都继承自基础 Super POM。 下面的代码片段是 Maven 3.5.4 的 Super POM。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> These plugins will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2-beta-5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> The release profile will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>release-profile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>performRelease<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">updateReleaseInfo</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updateReleaseInfo</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>您可以创建一个最小的<code>pom.xml</code>，并在命令行中执行：<code>mvn help:effective-pom</code>来查看超级 POM 如何影响您的项目对象模型。</p>
<h3 id="Dependency-Management-依赖管理"><a href="#Dependency-Management-依赖管理" class="headerlink" title="Dependency Management-依赖管理"></a>Dependency Management-依赖管理</h3><p>除了继承某些顶层元素外，父类还拥有为子 POM 和传递依赖关系配置值的元素。其中一个元素就是依赖关系管理<code>dependencyManagement</code>。</p>
<ul>
<li><p><strong>dependencyManagement</strong>: POM 使用它来帮助管理其所有子项的依赖关系信息。如果<code>my-parent</code>项目使用<code>dependencyManagement</code>定义了对<code>junit:junit:4.12</code>的依赖项，则从该项目继承的 <code>POM</code> 设置其依赖项时，可以仅给出<code>groupId=junit</code>和<code>artifactId=junit</code>即可，Maven 将自动填写父依赖项设置的版本 。这种方法的好处显而易见。依赖关系的详细信息可以在一个中心位置设置，并传播到所有继承的 POM。</p>
<p>需要注意的是，从传递依赖关系中合并进来的<code>artifacts</code>的版本和范围也受依赖关系管理部分中的版本规范控制。这可能会导致意想不到的后果。 考虑这样一种情况，您的项目使用两个依赖项：dep1 和 dep2。 dep2 反过来也使用 dep1，并且需要特定的最低版本才能运行。 如果您随后使用 dependencyManagement 指定旧版本，dep2 将被迫使用旧版本，并失败。 所以，你必须小心检查整个依赖树以避免这个问题； mvn dependency:tree 很有帮助。</p>
</li>
</ul>
<hr>
<h2 id="聚合多个模块"><a href="#聚合多个模块" class="headerlink" title="聚合多个模块"></a>聚合多个模块</h2><p>包含多个模块的项目称为多模块项目或聚合项目。模块是该 POM 列出的项目，并作为一个组执行。pom 打包项目可以通过将一组项目列为模块来聚合一组项目的构建，这些模块是这些项目的目录或 POM 文件的相对路径。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>another-project<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">module</span>&gt;</span>third-project/pom-example.xml<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在列出模块时，您无需考虑模块间的依赖关系，即 POM 给出的模块顺序并不重要。Maven 会对模块进行拓扑排序，使依赖模块总是先于被依赖模块构建。</p>
<h3 id="关于继承与聚合的最后一点说明"><a href="#关于继承与聚合的最后一点说明" class="headerlink" title="关于继承与聚合的最后一点说明"></a>关于继承与聚合的最后一点说明</h3><p>继承和聚合为通过单一的高级 POM 控制构建创造了良好的动态效果。你经常会看到既是父项目又是聚合项目的项目。例如，整个 Maven 核心通过单个基础 POM<code>org.apache.maven:maven</code>运行，因此构建 Maven 项目可以通过单个命令来执行：mvn compile。不过，聚合项目和父项目都是 POM 项目，它们并不相同，不能混为一谈。POM 项目可以从其聚合的任何模块继承，但不一定拥有这些模块。相反，一个 POM 项目可以聚合不从它继承的项目。</p>
<h2 id="Propertie-属性"><a href="#Propertie-属性" class="headerlink" title="Propertie-属性"></a>Propertie-属性</h2><p>属性是理解 POM 基础知识的最后一个必需部分。Maven 属性是值占位符，就像 Ant 中的属性一样。它们的值可以通过使用符号<code>$&#123;X&#125;</code>在 POM 中的任何位置访问，其中<code>X</code>是属性。 或者它们可以被插件用作默认值，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Following project.-properties are reserved for Maven in will become elements in a future POM definition. --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Don&#x27;t start your own properties properties with project. --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它们有五种不同的风格：</p>
<ol>
<li><code>env.X</code>：在变量前添加“env”前缀。 将返回 shell 的环境变量。 例如，${env.PATH} 包含 PATH 环境变量。注意：虽然 Windows 环境变量本身不区分大小写，但属性的查找却区分大小写。换句话说，Windows shell 会返回 %PATH% 和 %Path% 的相同值，而 Maven 则会区分 ${env.PATH} 和 ${env.Path}。为可靠起见，环境变量的名称统一为大写。</li>
<li>project.x：POM 中的点 (.) 表示的路径将包含相应元素的值。 例如：<code>&lt;project>&lt;version>1.0&lt;/version>&lt;/project></code>可通过<code>$&#123;project.version&#125;</code>访问。</li>
<li>settings.xml 中的点 (.) 符号路径将包含相应元素的值。例如<code>&lt;settings>&lt;offline>false&lt;/offline>&lt;/settings></code>可通过<code>$&#123;settings.offline&#125;</code>访问。</li>
<li>所有通过<code>java.lang.System.getProperties()</code>访问的属性都可作为 POM 属性使用，如<code>$&#123;java.home&#125;</code>。</li>
<li><code>x</code>: 设置在 POM 中的<code>&lt;properties /></code>元素中。<code>&lt;properties>&lt;someVar>value&lt;/someVar>&lt;/properties></code>的值可用作<code>$&#123;someVar&#125;</code>。</li>
</ol>
<hr>
<h1 id="Build-Settings"><a href="#Build-Settings" class="headerlink" title="Build Settings"></a>Build Settings</h1><p>除了上面给出的 POM 基础知识之外，在声明 POM 的基本能力之前，还必须了解两个要素。它们分别是<code>build</code>元素和<code>reporting</code>元素，前者负责处理诸如声明项目目录结构和管理插件等事务，后者则在很大程度上反映了用于报告目的的构建元素。</p>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>根据 POM 4.0.0 XSD，<code>build</code>元素在概念上分为两部分：有一个<code>BaseBuild</code>类型，其中包含两个构建元素通用的元素集（项目下的顶级构建元素和配置文件下的构建元素） ，如下所述）； 还有<code>Build</code>类型，它包含<code>BaseBuild</code>集以及顶级定义的更多元素。 让我们首先分析两者之间的共同点。</p>
<p>注：这些不同的构建元素可分别称为 “项目构建 “和 “配置文件构建”。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="comment">&lt;!-- &quot;Project Build&quot; contains more elements than just the BaseBuild set --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span>...<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- &quot;Profile Build&quot; contains a subset of &quot;Project Build&quot;s elements --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">build</span>&gt;</span>...<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="The-BaseBuild-Element-Set"><a href="#The-BaseBuild-Element-Set" class="headerlink" title="The BaseBuild Element Set"></a>The BaseBuild Element Set</h3><p><code>BaseBuild</code>顾名思义：POM 中<code>&lt;build></code>与<code>&lt;/build></code>之间的基本元素集。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span>install<span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;artifactId&#125;-$&#123;version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span>filters/filter1.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>defaultGoal</strong>:  如果没有给出，则执行的默认目标或阶段。如果给出了目标，则应按照命令行中的方式进行定义（例如<code>jar:jar</code>）。 如果定义了阶段（例如<code>install</code>），情况也是如此。</li>
<li><strong>directory</strong>: 这是项目构建后输出文件的目录，或者用 Maven 的话说，就是构建的目标。 它适当地默认为<code>$&#123;basedir&#125;/target</code>。</li>
<li><strong>finalName</strong>: 这是最终构建时项目的名称（不带文件扩展名，例如：<code>my-project-1.0.jar</code>）。 默认为<code>$&#123;artifactId&#125;-$&#123;version&#125;</code>。不过，”finalName “这个术语有点名不副实，因为构建捆绑项目的插件完全有权忽略/修改这个名称（但它们通常不会这样做）。例如，如果<code>maven-jar-plugin</code>被配置为给 jar 提供一个 test 分类器，那么上面定义的实际 jar 将被构建为<code>my-project-1.0-test.jar</code>。</li>
<li><strong>filter</strong>: 定义<code>*.properties</code>文件，其中包含一些列的属性值适用于资源文件列表。 换句话说，过滤器文件中定义的“<code>name=value</code>”对将替换构建时资源中的<code>$&#123;name&#125;</code>字符串。上面的示例定义了<code>filters/</code>目录下的<code>filter1.properties</code>文件。 Maven的默认过滤器目录是<code>$&#123;basedir&#125;/src/main/filters/</code>。</li>
</ul>
<h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>build元素的另一个功能是指定资源文件在项目中存在的位置。资源（通常）不是代码。 它们不会被编译，而是要捆绑在项目中或出于各种其他原因（例如代码生成）而使用的项目。</p>
<p>例如，Plexus 项目需要在 META-INF/plexus 目录中放置一个<code>configuration.xml</code>文件（该文件指定了容器的组件配置）。虽然我们可以很容易地将该文件放在<code>src/main/resources/META-INF/plexus</code>目录中，但我们还是想让 Plexus 拥有自己的<code>src/main/plexus</code>目录。为了让 JAR 插件正确地捆绑资源，您需要指定与下面类似的资源：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/plexus<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/plexus<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>configuration.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>resources：</strong>是资源元素的列表，每个元素都描述了与此项目相关的文件的包含内容和位置。</li>
<li><strong>targetPath：</strong>指定用于放置构建资源集的目录结构。目标路径默认为基本目录。对于将打包到 JAR 中的资源，通常指定的目标路径是 META-INF。</li>
<li><strong>filtering</strong>：<code>true</code>或<code>false</code>，表示是否对该资源启用过滤。请注意，不必定义过滤器<code>*.properties</code>文件即可进行过滤，资源还可以使用 POM 中默认定义的属性（例如 ${project.version}）。使用以下命令传递到命令行 “-D”标志（例如“-Dname=value”）或由属性元素显式定义。 过滤器文件已在上面介绍过。</li>
<li><strong>directory：</strong>该元素的值定义在哪里可以找到资源文件。 构建的默认目录是<code>$&#123;basedir&#125;/src/main/resources</code>。</li>
<li><strong>includes</strong>: 包括：一组文件模式，指定要作为指定目录下的资源包含的文件，使用 * 作为通配符。</li>
<li><strong>excludes</strong>: 与<code>includes</code>相同的结构，指定要忽略哪些文件。 在<code>includes</code>和<code>excludes</code>发生冲突时，<code>excludes</code>获胜。</li>
<li><strong>testResources</strong>: 它们的定义与<code>resources</code>类似，但自然是在测试阶段使用。唯一的区别是项目的默认（Super POM 定义的）测试资源目录是<code>$&#123;basedir&#125;/src/test/resources</code>。测试资源不会被部署。</li>
</ul>
<h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>test<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span>...<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>除了<code>groupId:artifactId:version</code>的标准坐标外，还有一些元素用于配置插件或构建与插件的交互。</p>
<ul>
<li><strong>extensions:</strong><code>true</code>或<code>false</code>，是否加载该插件的扩展。 默认情况下为<code>false</code>。 本文档稍后将介绍扩展。</li>
<li><strong>inherited</strong>:<code>true</code>或<code>false</code>，表示此插件配置是否应用于继承自此插件的 POM。默认值为<code>true</code>。</li>
<li><strong>configuration</strong>: 这是单个插件的特定属性。无需太深入地了解插件如何工作的机制，只需说明插件 Mojo 可能期望的任何属性（这些是 Java Mojo bean 中的 getter 和 setter）都可以在这里指定。在上面示例中，我们在<code>maven-jar-plugin</code>中将<code>classifier</code>设置为<code>test</code>。值得注意的是，所有配置元素，无论它们位于 POM 中的什么位置，都是为了将值传递到另一个底层系统，例如插件。 换句话说：POM 模式永远不会明确要求配置元素中的值，但插件目标完全有权要求配置值。</li>
</ul>
<p>如果您的 POM 声明了一个parent，它将从父类的<code>build/plugins</code>或<code>pluginManagement</code>部分继承插件配置。</p>
<p><strong>default configuration inheritance:</strong></p>
<p>为了说明这一点，请考虑父 POM 中的以下片段：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>my.group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">item</span>&gt;</span>parent-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">item</span>&gt;</span>parent-2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parentKey</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">parentKey</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面是使用该父级作为<code>parent</code>的项目中的插件配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>my.group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">item</span>&gt;</span>child-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">childKey</span>&gt;</span>child<span class="tag">&lt;/<span class="name">childKey</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认行为是根据元素名称合并配置元素的内容。 如果子 POM 具有特定元素，则该值将成为有效值。 如果子 POM 没有元素，但父 POM 有，则父值将成为有效值。 请注意，这纯粹是对 XML 的操作； 不涉及插件本身的代码或配置。 仅涉及元素，而不涉及其值。</p>
<p>将这些规则应用到示例中，Maven 得出：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>my.group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">item</span>&gt;</span>child-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">childKey</span>&gt;</span>child<span class="tag">&lt;/<span class="name">childKey</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">parentKey</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">parentKey</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>高级配置继承：<code>combine.child</code>和<code>combine.self</code></p>
<p>你可以控制子POM如何从父POM继承配置通过向配置元素的子元素添加属性。这些属性是<code>combine.children</code>和<code>combine.self</code>。在子 POM 中使用这些属性来控制 Maven 如何将父 POM 中的插件配置与子 POM 中的显式配置相结合。</p>
<p>以下是带有这两个属性说明的子配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">items</span> <span class="attr">combine.children</span>=<span class="string">&quot;append&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- combine.children=&quot;merge&quot; is the default --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>child-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">combine.self</span>=<span class="string">&quot;override&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- combine.self=&quot;merge&quot; is the default --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">childKey</span>&gt;</span>child<span class="tag">&lt;/<span class="name">childKey</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，有效结果如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">items</span> <span class="attr">combine.children</span>=<span class="string">&quot;append&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>parent-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>parent-2<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>child-1<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span> <span class="attr">combine.self</span>=<span class="string">&quot;override&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">childKey</span>&gt;</span>child<span class="tag">&lt;/<span class="name">childKey</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>combine.children="append "</code>的结果是按顺序连接父元素和子元素。而<code>combine.self="override"</code>则会完全抑制父元素的配置。您不能在一个<code>element</code>上同时使用<code>combine.self="override"</code>和<code>combine.children="append"</code>； 如果你尝试，<code>override</code>将会获胜。</p>
<p>请注意，这些属性只适用于它们所声明的配置元素，不会传播到嵌套元素。也就是说，如果子 POM 中项目元素的内容是复杂结构而非文本，那么其子元素仍将采用默认的合并策略，除非它们本身也标有属性。</p>
<p><code>merge.*</code>属性从父 POM 继承到子 POM。 将这些属性添加到父 POM 时要小心，因为这可能会影响子 POM 或孙 POM。</p>
<ul>
<li><strong>dependencies:</strong><code>dependencies</code>在 POM 中经常出现，它是所有<code>plugins</code>元素块下的一个元素。<code>dependencies</code>有着与基础构建相同的结构和功能。这种情况下的主要区别在于依赖项不再作为项目的依赖项，而是作为其所在插件的依赖项。其强大之处在于可以更改插件的依赖项列表，可能是通过排除删除未使用的运行时依赖项，或者更改所需依赖项的版本。 有关更多信息，请参阅上面的依赖项。</li>
<li><strong>executions:</strong> 需要注意的是，一个<code>plugin</code>可能有多个<code>goals</code>。每个目标都可能有单独的配置，甚至可能将插件的目标完全绑定到不同的阶段。<code>executions</code>配置了一个插件<code>goals</code>的执行。</li>
</ul>
<p>例如，假设要<code>antrun:run</code>目标绑定到<code>verify</code>阶段。我们希望该任务能呼应构建目录，并通过将<code>inherited</code>设置为<code>false</code>来避免将此配置传递给其子任务（假设它是父任务）。执行结果如下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>echodir<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">tasks</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">echo</span>&gt;</span>Build Dir: /home/jenkins/82467a7c/workspace/aven_maven-box_maven-site_master/target<span class="tag">&lt;/<span class="name">echo</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">tasks</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>id</strong>: 不言自明。它指定了所有其他执行块之间的这个执行块，该运行阶段时，将以下形式显示：<code>[plugin:goal execution: id]</code>。在此示例中：<code>antrun:run execution: echodir</code></li>
<li><strong>goals</strong>: 它包含了一系列元素，在本例中，是该执行块指定的插件目标列表。</li>
<li><strong>phase</strong>: 这是一系列<code>goals</code>列表将执行的阶段。这是一个非常强大的选项，允许将任何目标绑定到构建生命周期中的任何阶段，从而改变 Maven 的默认行为。</li>
<li><strong>inherited</strong>: 与上面的继承元素一样，将其设置为 false 将禁止 Maven 将此执行传递给其子元素。 该元素仅对父 POM 有意义。</li>
<li><strong>configuration</strong>: 与上面相同，但将配置限制到这个特定的目标列表，而不是插件下的所有目标。</li>
</ul>
<h4 id="Plugin-Management"><a href="#Plugin-Management" class="headerlink" title="Plugin Management"></a>Plugin Management</h4><p><code>pluginManagement</code>是一个与<code>plugins</code>一起出现的元素。插件管理以大致相同的方式包含插件元素，不同之处在于它不是为特定项目构建配置插件信息，而是用于配置继承自此项目构建的项目。不过，这只能配置子项目或当前 POM 中插件元素实际引用的插件。子项目完全有权覆盖<code>pluginManagement</code>定义。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">id</span>&gt;</span>pre-process-classes<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>pre-process<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果我们将这些规范添加到<code>plugins</code>元素中，它们将仅适用于单个POM。但是，如果我们在<code>pluginManagement</code>元素下应用它们，那么这个 POM 和所有在构建过程中继承 了<code>maven-jar-plugin</code>的POM也将获得预处理类的执行。因此，与其在每个子<code>pom.xml</code>中包含上述乱七八糟的内容，不如只需要以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="The-Build-Element-Set"><a href="#The-Build-Element-Set" class="headerlink" title="The Build Element Set"></a>The Build Element Set</h3><p>XSD 中的 “构建 “类型表示那些只适用于 “项目构建 “的元素。尽管额外元素的数量很多（6 个），但项目构建所包含的元素中只有两组是配置文件构建所缺少的：<code>directories</code>and<code>extensions</code>。</p>
<h4 id="Directories"><a href="#Directories" class="headerlink" title="Directories"></a>Directories</h4><p>目录元素集存在于父构建元素中，为整个 POM 设置了各种目录结构。由于它们不存在于配置文件构建中，因此不能被配置文件更改。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src/main/scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src/test/java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果上述<code>*Directory</code>元素的值被设置为绝对路径（在展开其属性时），则使用该目录。否则，它将相对于基本构建目录：<code>$&#123;basedir&#125;</code>。请注意，脚本源目录<code>scriptSourceDirectory</code>在 Maven 中已不再使用，并已过时。</p>
<h4 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h4><p>扩展是用于工程构建的一系列artifacts列表。它们将被包含在正在运行的构建的类路径中。他们可以扩展构建过程（例如为 Wagon 传输机制添加 ftp provider），以及激活插件以更改构建生命周期。简而言之，扩展是在构建期间激活的artifacts。扩展不需要做任何实际工作，也不包含 Mojo。因此，扩展非常适合指定一个通用插件接口的多个实现中的一个。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.wagon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wagon-ftp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-alpha-3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Reporting"><a href="#Reporting" class="headerlink" title="Reporting"></a>Reporting</h2><p>报告包含专门对应网站生成阶段的元素。定义和配置在<code>reporting</code>元素下相当多的Maven 插件可以生成报告。例如：生成 Javadoc 报告。 与构建元素配置插件的能力非常相似，与构建元素配置插件的功能一样，报告元素也具有同样的功能。明显的区别在于，明显的区别在于，报告不是在执行块中对插件目标进行精细控制，而是在 reportSet 元素中配置目标。更微妙的区别在于，报告元素下的插件配置可作为构建插件配置使用，尽管相反情况并非如此（构建插件配置不会影响报告插件）。</p>
<p>对于了解构建元素的人来说，报告元素下唯一不熟悉的项目可能是可能就是布尔排除默认值元素<code>Boolean excludeDefaults element</code>。该元素向站点生成器表示排除通常默认生成的报告。当通过站点构建周期生成站点时，项目信息部分会放置在左侧菜单中，其中充满了报告，例如项目团队报告或依赖项列表报告。这些报告目标由 maven-project-info-reports-plugin 生成。作为一个和其他插件一样的插件，它也可以通过以下更冗长的方式被抑制，从而有效地关闭项目信息报告。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target/site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span><span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另一个区别是<code>plugin</code>下的<code>outputDirectory</code>元素。 在报告的情况下，输出目录默认为<code>$&#123;basedir&#125;/target/site</code>。</p>
<h3 id="Report-Sets"><a href="#Report-Sets" class="headerlink" title="Report Sets"></a>Report Sets</h3><p>重要的是要记住，单个插件可能有多个目标。 每个目标可能有单独的配置。报告集配置报告插件目标的执行。 这听起来是不是很熟悉——似曾相识？关于构建的执行元素也说了同样的事情，但有一个区别：您不能将报告绑定到另一个阶段。 对不起。例如，假设您想将 javadoc:javadoc 目标配置为链接到 “<a href="http://java.sun.com/j2se/1.5.0/docs/api/&quot;%EF%BC%8C%E4%BD%86%E4%BB%85%E9%99%90%E4%BA%8E">http://java.sun.com/j2se/1.5.0/docs/api/&quot;，但仅限于</a> javadoc 目标（而不是目标 maven-javadoc-plugin:jar）。我们还希望将此配置传递给其子级，并将inherited设置为 true。 reportSet类似于以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">       <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>sunlink<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">reports</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">report</span>&gt;</span>javadoc<span class="tag">&lt;/<span class="name">report</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">reports</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">links</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">link</span>&gt;</span>http://java.sun.com/j2se/1.5.0/docs/api/<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">links</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在build<code>executions</code>和reporting<code>reportSets</code>之间，现在应该清楚它们存在的原因了。最简单的意义上讲，它们是对配置的深入研究。它们赋予了 POM 在控制其构建命运方面的最终粒度。</p>
<hr>
<h1 id="More-Project-Information"><a href="#More-Project-Information" class="headerlink" title="More Project Information"></a>More Project Information</h1><p>有几个元素并不影响构建，而是为了方便开发人员而记录项目。在生成项目网站时，这些元素中有许多都用于填写项目细节。不过，与所有 POM 声明一样，插件也可以将它们用于任何用途。以下是最简单的元素：</p>
<ul>
<li><strong>name</strong>: 项目往往都有一个会话式的名称，而不只是<code>artifactId</code>。Sun 公司的工程师们并没有把他们的项目称为 “java-1.5”，而是称之为 “Tiger”。这里是设置该值的位置。</li>
<li><strong>description</strong>:  简短、可读的项目描述。尽管这不应取代正式文档，但对 POM 的任何读者进行快速评语总是有帮助的。</li>
<li><strong>url</strong>: 项目主页。</li>
<li><strong>inceptionYear</strong>: 项目首次创建的年份。</li>
</ul>
<h2 id="Licenses-许可证"><a href="#Licenses-许可证" class="headerlink" title="Licenses-许可证"></a>Licenses-许可证</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache-2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Licenses 是法律文件定义如何以及何时使用项目，项目应列出直接适用于本项目的许可证，而不应列出适用于本项目依赖关系的许可证。</p>
<ul>
<li><strong>name</strong>, <strong>url</strong> and <strong>comments</strong>: 不言自明，以前在其他情况下也遇到过。建议使用 SPDX 标识符作为许可证名称。第四个许可证元素是</li>
<li><strong>distribution</strong>: 这描述了如何合法地分发项目。 两种指定的方法是repo（它们可以从Maven存储库下载）或manual（它们必须手动安装）。</li>
</ul>
<h2 id="Organization-组织"><a href="#Organization-组织" class="headerlink" title="Organization-组织"></a>Organization-组织</h2><p>大多数项目都是由某种组织（企业、私人团体等）运作的。这里设置了最基本的信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Mojo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mojo.codehaus.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Developers-开发者"><a href="#Developers-开发者" class="headerlink" title="Developers-开发者"></a>Developers-开发者</h2><p>所有项目都由某个人在某个时间创建的文件组成。 与围绕项目的其他系统一样，参与项目的人员也与项目息息相关。开发人员可能是项目的核心开发成员。需要注意的是，尽管一个组织可能有很多开发人员（程序员），但把他们都列为开发人员并不是好的做法，而只能是那些直接负责代码的人。一个好的经验法则是，如果不应该就项目与此人联系，就不需要在此列出。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdoe<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">email</span>&gt;</span>jdoe@example.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com/jdoe<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">organization</span>&gt;</span>ACME<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">role</span>&gt;</span>architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">role</span>&gt;</span>developer<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>America/New_York<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">picUrl</span>&gt;</span>http://www.example.com/jdoe/pic<span class="tag">&lt;/<span class="name">picUrl</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>id</strong>, <strong>name</strong>, <strong>email</strong>:  这些信息对应于开发者的 ID（可能是整个组织的唯一 ID）、开发者的姓名和电子邮件地址。</li>
<li><strong>organization</strong>, <strong>organizationUrl</strong>: 你可能猜到了，这分别是开发者的组织名称和 URL。</li>
<li><strong>roles</strong>: 角色应明确规定该人负责的标准行动。就像一个人可以身兼数职一样，一个人可以扮演多个角色。</li>
<li><strong>timezone</strong>: timezone：有效的时区 ID，例如 America/New_York 或 Europe/Berlin，或者是开发人员居住地与 UTC 的小时数（和分数）偏移量，例如 -5 或 +1。 时区 ID 是高度首选，因为它们不受 DST 和时区转换的影响。 有关官方时区数据库和维基百科中的列表，请参阅 IANA。</li>
<li><strong>properties</strong>: 该元素用于放置有关个人的其他属性。例如，指向个人图像或即时消息句柄的链接。不同的插件可能会使用这些属性，也可能只是给阅读 POM 的其他开发人员使用。</li>
</ul>
<h2 id="Contributors-贡献者"><a href="#Contributors-贡献者" class="headerlink" title="Contributors-贡献者"></a>Contributors-贡献者</h2><p>贡献者就像开发人员一样，但在项目的生命周期中扮演辅助角色。 也许贡献者发送了错误修复，或者添加了一些重要的文档。 一个健康的开源项目可能会有比开发人员更多的贡献者。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Noelle<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">email</span>&gt;</span>some.name@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://noellemarie.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">organization</span>&gt;</span>Noelle Marie<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://noellemarie.com<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">role</span>&gt;</span>tester<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>America/Vancouver<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">gtalk</span>&gt;</span>some.name@gmail.com<span class="tag">&lt;/<span class="name">gtalk</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Environment-Settings"><a href="#Environment-Settings" class="headerlink" title="Environment Settings"></a>Environment Settings</h1><h2 id="Issue-Management-问题管理"><a href="#Issue-Management-问题管理" class="headerlink" title="Issue Management-问题管理"></a>Issue Management-问题管理</h2><p>这定义了所使用的bug跟踪系统（Bugzilla、TestTrack、ClearQuest 等）。尽管没有什么可以阻止插件使用此信息进行某些操作，但它主要用于生成项目文档。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system</span>&gt;</span>Bugzilla<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1/bugzilla/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Continuous-Integration-Management-持续集成管理"><a href="#Continuous-Integration-Management-持续集成管理" class="headerlink" title="Continuous Integration Management-持续集成管理"></a>Continuous Integration Management-持续集成管理</h2><p>在过去几年中，基于触发器或定时（如每小时或每天）的持续集成构建系统比手动构建系统更受欢迎。随着构建系统越来越标准化，运行触发这些构建的系统也越来越标准化。虽然大部分配置取决于所使用的特定程序（Continuum、Cruise Control 等），但也有一些配置可能会在 POM 中进行。Maven 在通知器元素集中捕捉到了一些经常出现的重复设置。通知器是通知人们某些构建状态的方式。在以下示例中，此 POM 设置邮件类型的通知程序（即电子邮件），并配置要在指定触发器<code>sendOnError</code>、<code>sendOnFailure</code>上使用的电子邮件地址，而不是<code>sendOnSuccess</code>或<code>sendOnWarning</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">system</span>&gt;</span>continuum<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8080/continuum<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">type</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sendOnError</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sendOnError</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sendOnFailure</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sendOnFailure</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sendOnSuccess</span>&gt;</span>false<span class="tag">&lt;/<span class="name">sendOnSuccess</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sendOnWarning</span>&gt;</span>false<span class="tag">&lt;/<span class="name">sendOnWarning</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;<span class="name">address</span>&gt;</span>continuum@127.0.0.1<span class="tag">&lt;/<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mailing-Lists-邮件列表"><a href="#Mailing-Lists-邮件列表" class="headerlink" title="Mailing Lists-邮件列表"></a>Mailing Lists-邮件列表</h2><p>邮件列表是与项目相关人员保持联系的绝佳工具。大多数邮件列表都面向开发人员和用户。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>User List<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>user-subscribe@127.0.0.1<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>user-unsubscribe@127.0.0.1<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">post</span>&gt;</span>user@127.0.0.1<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http://127.0.0.1/user/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">otherArchives</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">otherArchive</span>&gt;</span>http://base.google.com/base/1/127.0.0.1<span class="tag">&lt;/<span class="name">otherArchive</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">otherArchives</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>subscribe</strong>, <strong>unsubscribe</strong>: 些元素指定用于执行相关操作的电子邮件地址。要订阅上面的用户列表，用户将向 <a href="mailto:&#x75;&#x73;&#x65;&#114;&#x2d;&#x73;&#117;&#98;&#115;&#99;&#114;&#105;&#x62;&#x65;&#x40;&#49;&#50;&#55;&#46;&#x30;&#46;&#x30;&#x2e;&#x31;">&#x75;&#x73;&#x65;&#114;&#x2d;&#x73;&#117;&#98;&#115;&#99;&#114;&#105;&#x62;&#x65;&#x40;&#49;&#50;&#55;&#46;&#x30;&#46;&#x30;&#x2e;&#x31;</a> 发送电子邮件。</li>
<li><strong>archive</strong>: 此元素指定旧邮件列表电子邮件的存档的 URL（如果存在）。 如果有镜像存档，可以在otherArchives下指定。</li>
<li><strong>post</strong>: 用于发布到邮件列表的电子邮件地址。 请注意，并非所有邮件列表都能够发帖（例如构建失败列表）。</li>
</ul>
<h2 id="SCM-版本控制"><a href="#SCM-版本控制" class="headerlink" title="SCM-版本控制"></a>SCM-版本控制</h2><p>SCM（软件配置管理，也称为源代码/控制管理，或者简单地说，版本控制）是任何健康项目不可或缺的一部分。 如果您的 Maven 项目使用 SCM 系统（确实如此，不是吗？），那么您可以在此处将该信息放入 POM 中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:svn:http://127.0.0.1/svn/my-project<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:svn:https://127.0.0.1/svn/my-project<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tag</span>&gt;</span>HEAD<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1/websvn/my-project<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>connection</strong>, <strong>developerConnection</strong>: 这两个连接元素传达了如何通过 Maven 连接到版本控制系统。连接需要 Maven 的读取访问权限才能找到源代码（例如更新），而developerConnection 则需要提供写入访问权限的连接。Maven 项目衍生了另一个名为 Maven SCM 的项目，该项目为任何希望实现它的 SCM 创建了一个通用 API。 最流行的是 CVS 和 Subversion，但是，其他受支持的 SCM 的列表也在不断增加。 所有 SCM 连接都是通过通用 URL 结构建立的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scm:[provider]:[provider_specific]</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中provider是SCM系统的类型。 例如，连接到 CVS 存储库可能如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scm:cvs:pserver:127.0.0.1:&#x2F;cvs&#x2F;root:my-project</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>tag</strong>: 指定该项目所在的标签。 HEAD（即 SCM root）是默认值。</p>
</li>
<li><p><strong>url</strong>: 可公开浏览的存储库。 例如，通过 ViewCVS。</p>
</li>
</ul>
<h2 id="Prerequisites-先决条件"><a href="#Prerequisites-先决条件" class="headerlink" title="Prerequisites-先决条件"></a>Prerequisites-先决条件</h2><p>POM 可能需要某些先决条件才能正确执行。在 POM 4.0.0 中，唯一作为先决条件存在的元素是<code>maven</code>元素，它需要一个最低版本号。</p>
<p>使用 Maven Enforcer Plugin 的<code>requireMavenVersion</code>规则或其他规则作为构建时的先决条件。对于打包的<code>maven-plugin</code>，运行时仍会使用该规则，以确保满足插件的最低 Maven 版本要求（但仅限于引用插件的 pom.xml）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">maven</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">maven</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Repositories-存储库"><a href="#Repositories-存储库" class="headerlink" title="Repositories-存储库"></a>Repositories-存储库</h2><p>存储库是遵循 Maven 存储库目录布局的工程集合。要成为 Maven 资源库工程，POM 文件必须位于<code>$BASE_REPO/groupId/artifactId/version/artifactId-version.pom</code>结构中。<code>$BASE_REPO</code>可以是本地的（文件结构），也可以是远程的（基本 URL）；其余布局将保持不变。资源库是收集和存储<code>artifacts</code>的地方。每当项目依赖于某个artifact时，Maven 将首先尝试使用指定工件的本地副本。 如果本地存储库中不存在该工件，它将尝试从远程存储库下载。POM 中的版本库元素指定了要搜索的备用版本库。</p>
<p>存储库是 Maven 社区最强大的功能之一。 默认情况下，Maven 搜索 <a href="https://repo.maven.apache.org/maven2/">https://repo.maven.apache.org/maven2/</a> 的中央存储库。 可以在 pom.xml <code>repositories</code> 元素中配置其他存储库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>releases</strong>, <strong>snapshots</strong>: 这些是针对每种类型的工件（<code>Release</code>或者<code>snapshot</code>）的策略。有了这两套策略，POM 就能在单个版本库中改变每种类型的策略，而不受另一种策略的影响。例如，可能出于开发目的，有人会决定只启用快照下载。</li>
<li><strong>enabled</strong>:<code>true</code>或<code>false</code>，表示该版本库是否为相应类型（<code>Release</code>或者<code>snapshot</code>）启用。</li>
<li><strong>updatePolicy</strong>: 该元素指定了尝试更新的频率。Maven 将比较本地 POM 的时间戳（存储在版本库的 maven-metadata 文件中）和远程 POM 的时间戳。可选项有：<code>always</code>、<code>daily</code>（默认）、<code>interval:X</code>（X 是以分钟为单位的整数）或<code>never</code>（仅在本地版本库中不存在时下载）。</li>
<li><strong>checksumPolicy</strong>: 当Maven将文件部署到存储库时，它也会部署相应的校验和文件。当校验和缺失或者不正确您的可选项是<code>ignore</code>,<code>fail</code>, or<code>warn</code></li>
<li><strong>layout</strong>: 在上文对资源库的描述中，提到它们都遵循一个共同的布局。这基本上是正确的。Maven 2 引入的布局是 Maven 2 和 3 使用的版本库默认布局。不过，Maven 1.x 有不同的布局。使用此元素指定它是默认的还是旧的。</li>
</ul>
<h2 id="Plugin-Repositories-插件存储库"><a href="#Plugin-Repositories-插件存储库" class="headerlink" title="Plugin Repositories-插件存储库"></a>Plugin Repositories-插件存储库</h2><p>存储库是两种主要类型artifacts的所在地。第一种类型是用作其他工程的依赖项，另一种类型的工程是插件。Maven 插件本身就是一种特殊类型的工程。因此，插件存储库可能与其他存储库分开（尽管，我还没有听到这样做的令人信服的论据）。 无论如何，pluginRepositories 元素块的结构与 repositories 元素类似。 每个pluginRepository 元素都指定Maven 可以找到新插件的远程位置。</p>
<h2 id="Distribution-Management-分发管理"><a href="#Distribution-Management-分发管理" class="headerlink" title="Distribution Management-分发管理"></a>Distribution Management-分发管理</h2><p>分发管理的作用正如其听起来一样：它管理整个构建过程中生成的工件和支持文件的分发。 首先从最后一个元素开始：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">downloadUrl</span>&gt;</span>http://mojo.codehaus.org/my-project<span class="tag">&lt;/<span class="name">downloadUrl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">status</span>&gt;</span>deployed<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>downloadUrl</strong>: 是另一个 POM 可以指向的存储库的 URL，以便获取此 POM 的工件。 用最简单的话来说，我们告诉 POM 如何上传它（通过<code>repository/url</code>），但是公众可以从哪里下载它呢？ 这个元素回答了这个问题。</li>
<li><strong>status</strong>: 警告！就像巢中的雏鸟一样，status永远不应该被人类的手触碰！这样做的原因是，当项目被传输到存储库时，Maven 会自动设置项目的状态。 其有效类型如下。<ul>
<li><strong>none</strong>: 没有特殊的状态。 这是 POM 的默认设置。</li>
<li><strong>converted</strong>: 存储库的管理员将此 POM 从早期版本转换为 Maven 2。</li>
<li><strong>partner</strong>: 该artifact已与合作伙伴资源库同步。</li>
<li><strong>deployed</strong>: ：迄今为止最常见的状态，这意味着该工件是从 Maven 2 或 3 实例部署的。 这是使用命令行<code>deploy</code>手动部署时得到的结果。</li>
<li><strong>verified</strong>: 该项目已经过验证，应视为已完成。</li>
</ul>
</li>
</ul>
<h3 id="Repository-存储库"><a href="#Repository-存储库" class="headerlink" title="Repository-存储库"></a>Repository-存储库</h3><p>repositories 元素在 POM 中指定了 Maven 下载远程工件供当前项目使用的位置和方式，而 distributionManagement 则指定了该项目在部署时从哪里（以及如何）进入远程版本库。如果未定义快照存储库（snapshotRepository），存储库元素将用于快照分发。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">uniqueVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">uniqueVersion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>corp1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Corporate Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://repo/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">uniqueVersion</span>&gt;</span>true<span class="tag">&lt;/<span class="name">uniqueVersion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>propSnap<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Propellors Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>sftp://propellers.net/maven<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">layout</span>&gt;</span>legacy<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>id</strong>, <strong>name</strong>:<code>id</code>用于在众多资源库中唯一标识该资源库，<code>name</code>是人类可读的形式。</li>
<li><strong>uniqueVersion</strong>: 唯一版本，取值为<code>true</code>或<code>false</code>，表示部署到该版本库的工件是应该获得唯一生成的版本号，还是使用定义为地址一部分的版本号。</li>
<li><strong>url</strong>: 这是版本库元素的核心。它指定了用于将构建的工件（以及 POM 文件和校验和数据）传输到版本库的位置和传输协议。</li>
<li><strong>layout</strong>: 这些与存储库元素中定义的布局元素具有相同的类型和用途。 </li>
</ul>
<h3 id="Site-Distribution-站点发布"><a href="#Site-Distribution-站点发布" class="headerlink" title="Site Distribution-站点发布"></a>Site Distribution-站点发布</h3><p>分发管理<code>distributionManagement</code>不仅负责向资源库分发，还负责定义如何部署项目网站和文档。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>mojo.website<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Mojo Website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://beaver.codehaus.org/home/projects/mojo/public_html/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>id</strong>, <strong>name</strong>, <strong>url</strong>: 这些元素与上面的 distributionManagement 资源库元素中的对应元素类似。</li>
</ul>
<h3 id="Relocation-搬迁"><a href="#Relocation-搬迁" class="headerlink" title="Relocation-搬迁"></a>Relocation-搬迁</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><span class="attr">1</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">message</span>&gt;</span>We have moved the Project under Apache<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目不是一成不变的；它们是有生命的东西（或垂死的东西，视情况而定）。随着项目的发展壮大，一个常见的情况是项目被迫迁往更合适的地方。例如，当你的下一个大获成功的开源项目转移到 Apache 旗下时，最好能给用户提个醒，告诉他们项目将更名为<code>org.apache:my-project:1.0</code>。除了指明新地址外，提供一条解释原因的信息也是很好的形式。</p>
<h2 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h2><p>POM 4.0 的一个新功能是项目可以根据构建环境改变设置。一个<code>profile</code>元素既包含可选激活（配置文件触发器），也包含激活该配置文件后对 POM 所做的一系列更改。例如，为测试环境构建的项目可能与最终部署环境有着不同的数据库。或者，根据所使用的 JDK 版本不同，依赖关系也可能来自不同的资源库。The elements of profiles are as follows:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activation</span>&gt;</span>...<span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">build</span>&gt;</span>...<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">modules</span>&gt;</span>...<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">repositories</span>&gt;</span>...<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>...<span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">reporting</span>&gt;</span>...<span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span>...<span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Activation"><a href="#Activation" class="headerlink" title="Activation"></a>Activation</h3><p><code>Activations</code>是<code>Profiles</code>的关键。只有在特定情况下，配置文件才能修改基本 POM。这些情况通过激活一个activation元素来指定。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>sparrow-type<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>African<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自 Maven 3.2.2 以来，当满足所有指定条件时才会激活。</p>
<ul>
<li><p><strong>jdk</strong>:<code>activation</code>在 jdk 元素中具有内置的、以 Java 为中心的检查。 该值为以下三种类型之一:</p>
<ul>
<li>根据 maven-enforcer-plugin 定义的版本范围，<code>[</code>或<code>（,</code></li>
<li>如果值以<code>!</code>开头，则为否定前缀</li>
<li>一个（无负数）前缀，用于所有其他情况</li>
</ul>
</li>
<li><p>如果运行 Maven 所用的 JDK 版本以给定的前缀开始/不以给定的前缀开始（不包括潜在的前导 !），则前缀（否定）值匹配。如果运行 Maven 所用的 JDK 版本介于下限和上限之间（包含或排除），则值范围匹配。</p>
</li>
<li><p><strong>os</strong>: os 元素可以定义一些特定于操作系统的属性，如上图所示。有关操作系统值的更多详情，请参阅 maven-enforcer-plugins RequireOS Rule。</p>
</li>
<li><p><strong>property</strong>: 如果 Maven 检测到相应<code>name=value</code>对的系统属性或 CLI 用户属性（可以在 POM 中通过 ${name} 解除引用）与给定值（如果给定）匹配，则<code>profile</code>将激活。</p>
</li>
<li><p><strong>file</strong>: 最后，给定的文件名可以通过文件存在或丢失来激活配置文件。 注意：此元素的插值仅限于 ${basedir}、系统属性和请求属性。</p>
</li>
</ul>
<hr>
<h1 id="Maven依赖的优先原则"><a href="#Maven依赖的优先原则" class="headerlink" title="Maven依赖的优先原则"></a>Maven依赖的优先原则</h1><p>使用<code>Maven</code>的程序员都会遇到一个问题，那就是<code>Maven</code>依赖冲突的问题，这会导致<code>ClassNotFound</code>或者<code>MethodNotFound</code>这样的异常。其实只要明白<code>Maven</code>依赖的根本性的原则就不怕这样的问题了。</p>
<h2 id="依赖路径最短优先"><a href="#依赖路径最短优先" class="headerlink" title="依赖路径最短优先"></a>依赖路径最短优先</h2><p>一个Demo项目依赖了两个<code>jar</code>包，其中<code>A-B-C-X(1.0)</code>，<code>A-D-X(2.0)</code>。由于<code>X(2.0)</code>路径最短，所以项目使用的是<code>X(2.0)</code>。</p>
<h2 id="申明顺序优先"><a href="#申明顺序优先" class="headerlink" title="申明顺序优先"></a>申明顺序优先</h2><p>如果<code>A-B-X(1.0)</code>，<code>A-C-X(2.0)</code> 这样的路径长度一样怎么办呢？这样的情况下，<code>maven</code>会根据<code>pom</code>文件声明的顺序加载，如果先声明了<code>B</code>，后声明了<code>C</code>，那就最后的依赖就会是<code>X(1.0)</code>。</p>
<div class="note no-icon success"><p>所以maven依赖原则总结起来就两条：<code>路径最短，申明顺序其次。</code></p>
</div>

<hr>
<h1 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h1><p>Maven POM 体积庞大。不过，它的大小也证明了它的多功能性。</p>
<p>至少可以说，将项目的所有方面抽象为单个工件的能力是强大的。 每个项目都有数十个不同的构建脚本和分散的文档的日子已经一去不复返了。</p>
<p>与 Maven 一起组成 Maven 星系的其他明星—定义明确的构建生命周期、易于编写和维护的插件、集中式存储库、系统范围和基于用户的配置，以及越来越多的工具来完成开发人员的工作 更容易维护复杂的项目 - POM 是大而明亮的中心。</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Maven</tag>
        <tag>POM</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基础(二)</title>
    <url>/2021/12/25/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><ul>
<li><strong>什么是聚合函数</strong></li>
</ul>
<p>聚合函数作用于一组数据，并对一组数据返回一个值。</p>
<ul>
<li><p><strong>聚合函数类型</strong></p>
<ul>
<li><strong>AVG()</strong> </li>
<li><strong>SUM()</strong></li>
<li><strong>MAX()</strong> </li>
<li><strong>MIN()</strong> </li>
<li><strong>COUNT()</strong></li>
</ul>
</li>
<li><p>聚合函数不能嵌套调用。比如不能出现类似<code>AVG(SUM(字段名称))</code>形式的调用。</p>
</li>
</ul>
<h2 id="AVG和SUM函数"><a href="#AVG和SUM函数" class="headerlink" title="AVG和SUM函数"></a>AVG和SUM函数</h2><p>可以对<strong>数值型数据</strong>使用<code>AVG</code>和<code>SUM</code>函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary), <span class="keyword">MAX</span>(salary),<span class="keyword">MIN</span>(salary), <span class="keyword">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span>   employees</span><br><span class="line"><span class="keyword">WHERE</span>  job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%REP%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">AVg(salary)  MAx(salary)  min(salary)  Sum(salary)  </span><br><span class="line"><span class="comment">-----------  -----------  -----------  -------------</span></span><br><span class="line">8272.727273     11500.00      6000.00      273000.00</span><br></pre></td></tr></table></figure>

<h2 id="MIN和MAX函数"><a href="#MIN和MAX函数" class="headerlink" title="MIN和MAX函数"></a>MIN和MAX函数</h2><p>可以对<strong>任意数据类型</strong>的数据使用<code>MIN</code>和<code>MAX</code>函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(hire_date), <span class="keyword">MAX</span>(hire_date)</span><br><span class="line"><span class="keyword">FROM</span>	  employees;</span><br><span class="line"></span><br><span class="line">min(hire_date)  max(hire_date)  </span><br><span class="line"><span class="comment">--------------  ----------------</span></span><br><span class="line">1987-06-17      2000-04-21</span><br></pre></td></tr></table></figure>

<h2 id="COUNT函数"><a href="#COUNT函数" class="headerlink" title="COUNT函数"></a>COUNT函数</h2><ul>
<li><code>COUNT(*)</code>返回表中记录总数，适用于<strong>任意数据类型</strong>。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span>	  employees</span><br><span class="line"><span class="keyword">WHERE</span>  department_id = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>COUNT(expr)</code>返回<strong>expr不为空</strong>的记录总数。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(commission_pct)</span><br><span class="line"><span class="keyword">FROM</span>   employees</span><br><span class="line"><span class="keyword">WHERE</span>  department_id = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>问题：用count(*)，count(1)，count(列名)谁好呢?</p>
<p>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。</p>
<p>Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。</p>
<h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><code>GROUP BY</code>子句将查询结果按某一列或多列的值分组，值相等的为一组。对查询结果分组的目的是为了细化聚合函数的作用对象。如果未对查询结果分组，聚合函数将作用于整个查询结果。</p>
<p><strong>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   department_id, <span class="keyword">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span>     employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br></pre></td></tr></table></figure>

<div class="note no-icon success"><p>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</p>
</div>

<h2 id="GROUP-BY中使用WITH-ROLLUP"><a href="#GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="GROUP BY中使用WITH ROLLUP"></a>GROUP BY中使用WITH ROLLUP</h2><p>使用<code>WITH ROLLUP</code>关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT department_id,AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &gt; 80</span><br><span class="line">GROUP BY department_id WITH ROLLUP;</span><br></pre></td></tr></table></figure>

<div class="note no-icon success"><p><strong>注意：</strong></p>
<p>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p>
</div>

<h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p><strong>过滤分组</strong>：<code>HAVING</code>子句</p>
<ol>
<li>行已经被分组。</li>
<li>使用了聚合函数。</li>
<li>满足HAVING 子句中条件的分组将被显示。</li>
<li><code>HAVING</code>不能单独使用，必须要跟<code>GROUP BY</code>一起使用。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   department_id, <span class="keyword">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span>     employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span>   <span class="keyword">MAX</span>(salary)&gt;<span class="number">10000</span> ;</span><br><span class="line"></span><br><span class="line">department_id  MAX(salary)  </span><br><span class="line"><span class="comment">-------------  -------------</span></span><br><span class="line">           20       13000.00</span><br><span class="line">           30       11000.00</span><br><span class="line">           80       14000.00</span><br><span class="line">           90       24000.00</span><br><span class="line">          100       12000.00</span><br><span class="line">          110       12000.00</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>非法使用聚合函数 ： 不能在 WHERE 子句中使用聚合函数。</strong>如下：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   department_id, <span class="keyword">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span>     employees</span><br><span class="line"><span class="keyword">WHERE</span>    <span class="keyword">AVG</span>(salary) &gt; <span class="number">8000</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>

<p><span style="color:red">ERROR at line 3: ORA-00934. group function is not allowed here </span></p>
<h3 id="WHERE和HAVING的对比"><a href="#WHERE和HAVING的对比" class="headerlink" title="WHERE和HAVING的对比"></a>WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong> </p>
<p>这决定了，在需要对数据进行分组统计的时候，<code>HAVING</code>可以完成<code>WHERE</code>不能完成的任务。这是因为，在查询语法结构中，<code>WHERE</code>在<code>GROUP BY</code>之前，所以无法对分组结果进行筛选。<code>HAVING</code>在<code>GROUP BY</code>之后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是<code>WHERE</code>无法完成的。另外，<code>WHERE</code>排除的记录不再包括在分组中。</p>
<p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</strong> 这一点，就决定了在关联查询中，<code>WHERE</code>比<code>HAVING</code>更高效。因为<code>WHERE</code>可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。 </p>
<p>小结如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>WHERE</td>
<td>先筛选数据再关联，执行效率高</td>
<td>不能使用分组中的计算函数进行筛选</td>
</tr>
<tr>
<td>HAVING</td>
<td>可以使用分组中的计算函数</td>
<td>在最后的结果集中进行筛选，执行效率较低</td>
</tr>
</tbody></table>
<p><strong>开发中的选择：</strong></p>
<p><code>WHERE</code>和<code>HAVING</code>也不是互相排斥的，我们可以在一个查询里面同时使用<code>WHERE</code>和<code>HAVING</code>。包含分组统计函数的条件用<code>HAVING</code>，普通条件用<code>WHERE</code>。这样，我们就既利用了<code>WHERE</code>条件的高效快速，又发挥了<code>HAVING</code>可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p>
<hr>
<h2 id="SELECT的执行过程"><a href="#SELECT的执行过程" class="headerlink" title="SELECT的执行过程"></a>SELECT的执行过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] &lt; 目标列表达式 &gt; [,&lt; 目标列表达式 &gt;]...</span><br><span class="line"><span class="keyword">FROM</span> &lt; 表名或试图名 &gt; [,&lt; 表名或试图名 &gt;]...</span><br><span class="line">[ <span class="keyword">WHERE</span> &lt; 条件表达式 &gt; ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt; 列名<span class="number">1</span> &gt; [ <span class="keyword">HAVING</span> &lt; 条件表达式 &gt; ] ]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt; 列名<span class="number">2</span> &gt; [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#其中：</span></span><br><span class="line"><span class="comment">#（1）from：从哪些表中筛选</span></span><br><span class="line"><span class="comment">#（2）on：关联多表查询时，去除笛卡尔积</span></span><br><span class="line"><span class="comment">#（3）where：从表中筛选的条件</span></span><br><span class="line"><span class="comment">#（4）group by：分组依据</span></span><br><span class="line"><span class="comment">#（5）having：在统计结果中再次筛选</span></span><br><span class="line"><span class="comment">#（6）order by：排序</span></span><br><span class="line"><span class="comment">#（7）limit：分页</span></span><br></pre></td></tr></table></figure>

<h3 id="SELECT执行顺序"><a href="#SELECT执行顺序" class="headerlink" title="SELECT执行顺序"></a>SELECT执行顺序</h3><p>你需要记住 SELECT 查询时的两个顺序：</p>
<p><strong>1. 关键字的顺序是不能颠倒的：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT...</span><br></pre></td></tr></table></figure>

<p><strong>2.SELECT 语句的执行顺序</strong>（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/selectprocess.png" style="zoom:50%;" />

<p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5</span><br><span class="line">FROM player JOIN team ON player.team_id &#x3D; team.team_id # 顺序 1</span><br><span class="line">WHERE height &gt; 1.80 # 顺序 2</span><br><span class="line">GROUP BY player.team_id # 顺序 3</span><br><span class="line">HAVING num &gt; 2 # 顺序 4</span><br><span class="line">ORDER BY num DESC # 顺序 6</span><br><span class="line">LIMIT 2 # 顺序 7</span><br></pre></td></tr></table></figure>

<p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个<code>虚拟表</code>，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p>
<h3 id="SQL-的执行原理"><a href="#SQL-的执行原理" class="headerlink" title="SQL 的执行原理"></a>SQL 的执行原理</h3><p><code>SELECT</code>是先执行<code>FROM</code>这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p>
<ol>
<li>首先先通过<code>CROSS JOIN</code>求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li>
<li>通过<code>ON</code>进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li>
<li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li>
</ol>
<p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p>
<p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code>，就可以在此基础上再进行 <code>WHERE 阶段</code>。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code>。</p>
<p>然后进入第三步和第四步，也就是 <code>GROUP</code>和<code>HAVING</code>阶段。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3</code> 和 <code>vt4</code>。</p>
<p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT</code>和<code>DISTINCT</code> 阶段。</p>
<p>首先在<code>SELECT</code>阶段会提取想要的字段，然后在<code>DISTINCT</code>阶段过滤掉重复的行，分别得到中间的虚拟表 <code>vt5-1</code> 和 <code>vt5-2</code>。</p>
<p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY</code>阶段，得到虚拟表 <code>vt6</code>。</p>
<p>最后在 vt6 的基础上，取出指定行的记录，也就是<code>LIMIT</code>阶段，得到最终的结果，对应的是虚拟表 <code>vt7</code>。</p>
<p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p>
<p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序，<strong>所谓底层运行的原理，就是我们刚才讲到的执行顺序。</strong></p>
<hr>
<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>
<ul>
<li>子查询（内查询）在主查询之前一次执行完成。</li>
<li>子查询的结果被主查询（外查询）使用 。</li>
<li><strong>注意事项</strong><ul>
<li>子查询要包含在括号内</li>
<li>将子查询放在比较条件的右侧</li>
<li>单行操作符对应单行子查询，多行操作符对应多行子查询</li>
</ul>
</li>
</ul>
<h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><h3 id="单行比较操作符"><a href="#单行比较操作符" class="headerlink" title="单行比较操作符"></a>单行比较操作符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>=</code></td>
<td>equal to</td>
</tr>
<tr>
<td><code>></code></td>
<td>greater than</td>
</tr>
<tr>
<td><code>>=</code></td>
<td>greater than or equal to</td>
</tr>
<tr>
<td><code><</code></td>
<td>less than</td>
</tr>
<tr>
<td><code><=</code></td>
<td>less than or equal to</td>
</tr>
<tr>
<td><code><></code></td>
<td>not equal to</td>
</tr>
</tbody></table>
<h3 id="题目：查询工资大于149号员工工资的员工的信息"><a href="#题目：查询工资大于149号员工工资的员工的信息" class="headerlink" title="题目：查询工资大于149号员工工资的员工的信息"></a><strong>题目：查询工资大于149号员工工资的员工的信息</strong></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> salary &gt; (</span><br><span class="line">  <span class="keyword">SELECT</span> salary </span><br><span class="line">  <span class="keyword">FROM</span> employees </span><br><span class="line">  <span class="keyword">WHERE</span> employee <span class="keyword">id</span> = <span class="number">149</span></span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><ul>
<li>也称为集合比较子查询</li>
<li>内查询返回多行</li>
<li>使用多行比较操作符</li>
</ul>
<h3 id="多行比较操作符"><a href="#多行比较操作符" class="headerlink" title="多行比较操作符"></a>多行比较操作符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>IN</code></td>
<td>等于列表中的<strong>任意一个</strong></td>
</tr>
<tr>
<td><code>ANY</code></td>
<td>需要和单行比较操作符一起使用，和子查询返回的<strong>某一个</strong>值比较</td>
</tr>
<tr>
<td><code>ALL</code></td>
<td>需要和单行比较操作符一起使用，和子查询返回的<strong>所有</strong>值比较</td>
</tr>
<tr>
<td><code>SOME</code></td>
<td>实际上是ANY的别名，作用相同，一般常使用ANY</td>
</tr>
</tbody></table>
<p><strong>题目：查询平均工资最低的部门id</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">AVG</span>(salary) &lt;= <span class="keyword">ALL</span> (</span><br><span class="line">				<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) avg_sal</span><br><span class="line">				<span class="keyword">FROM</span> employees</span><br><span class="line">				<span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><h3 id="相关子查询执行流程"><a href="#相关子查询执行流程" class="headerlink" title="相关子查询执行流程"></a>相关子查询执行流程</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为<code>关联子查询</code>。</p>
<p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p>
<p>题目：找出每个学生超过他选修课程平均成绩的课程号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno, Cno</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade &gt;= (</span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">AVG</span>(Grade)</span><br><span class="line">  <span class="keyword">FROM</span> SC y</span><br><span class="line">  <span class="keyword">WHERE</span> y.Sno = x.Sno</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="EXISTS-与-NOT-EXISTS关键字"><a href="#EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="EXISTS 与 NOT EXISTS关键字"></a>EXISTS 与 NOT EXISTS关键字</h3><p><code>EXISTS</code>代表存在量词。带有<code>EXISTS</code>谓词的子查询不返回任何数据，只产生逻辑真值<code>true</code>或逻辑假值<code>false</code>。</p>
<p>使用存在量词<code>EXISTS</code>后，若内存查询结果非空，则外层的<code>WHERE子</code>句返回真值，否则返回假值。</p>
<p><code>NOT EXISTS</code>关键字表示如果不存在某种条件，则返回<code>TRUE</code>，否则返回<code>FALSE</code>。</p>
<p><strong>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">                  <span class="keyword">FROM</span>   employees</span><br><span class="line">                  <span class="keyword">WHERE</span>  department_id = d.department_id);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="创建和管理表"><a href="#创建和管理表" class="headerlink" title="创建和管理表"></a>创建和管理表</h1><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><ul>
<li>数据库名、表名不得超过<code>30</code>个字符，变量名限制为29个</li>
<li>必须只能包含<code> A–Z</code>, <code>a–z</code>, <code>0–9</code>, <code>_</code>共63个字符</li>
<li>数据库名、表名、字段名等对象名中间不要包含空格</li>
<li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li>
<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用<code>`</code>（着重号）引起来</li>
<li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>
</ul>
<h2 id="MySQL中的数据类型"><a href="#MySQL中的数据类型" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>类型举例</th>
</tr>
</thead>
<tbody><tr>
<td>整数类型</td>
<td>TINYINT、SMALLINT、MEDIUMINT、**INT(或INTEGER)**、BIGINT</td>
</tr>
<tr>
<td>浮点类型</td>
<td>FLOAT、DOUBLE</td>
</tr>
<tr>
<td>定点数类型</td>
<td><strong>DECIMAL</strong></td>
</tr>
<tr>
<td>位类型</td>
<td>BIT</td>
</tr>
<tr>
<td>日期时间类型</td>
<td>YEAR、TIME、<strong>DATE</strong>、DATETIME、TIMESTAMP</td>
</tr>
<tr>
<td>文本字符串类型</td>
<td>CHAR、<strong>VARCHAR</strong>、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td>
</tr>
<tr>
<td>枚举类型</td>
<td>ENUM</td>
</tr>
<tr>
<td>集合类型</td>
<td>SET</td>
</tr>
<tr>
<td>二进制字符串类型</td>
<td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td>
</tr>
<tr>
<td>JSON类型</td>
<td>JSON对象、JSON数组</td>
</tr>
<tr>
<td>空间数据类型</td>
<td>单值：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td>
</tr>
</tbody></table>
<p>其中，常用的几类类型介绍如下：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>INT</td>
<td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td>
</tr>
<tr>
<td>CHAR(size)</td>
<td>定长字符数据。若未指定，默认为1个字符，最大长度255</td>
</tr>
<tr>
<td>VARCHAR(size)</td>
<td>可变长字符数据，根据字符串实际长度保存，<strong>必须指定长度</strong></td>
</tr>
<tr>
<td>FLOAT(M,D)</td>
<td>单精度，占用4个字节，M=整数位+小数位，D=小数位。 D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认M+D&lt;=6</td>
</tr>
<tr>
<td>DOUBLE(M,D)</td>
<td>双精度，占用8个字节，D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认M+D&lt;=15</td>
</tr>
<tr>
<td>DECIMAL(M,D)</td>
<td>高精度小数，占用M+2个字节，D&lt;=M&lt;=65，0&lt;=D&lt;=30，最大取值范围与DOUBLE相同。</td>
</tr>
<tr>
<td>DATE</td>
<td>日期型数据，格式’YYYY-MM-DD’</td>
</tr>
<tr>
<td>BLOB</td>
<td>二进制形式的长文本数据，最大可达4G</td>
</tr>
<tr>
<td>TEXT</td>
<td>长文本数据，最大可达4G</td>
</tr>
</tbody></table>
<h2 id="创建和管理数据库"><a href="#创建和管理数据库" class="headerlink" title="创建和管理数据库"></a>创建和管理数据库</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li>方式1：创建数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名; </span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：创建数据库并指定字符集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名 CHARACTER SET 字符集;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式3：判断数据库是否已经存在，不存在则创建数据库（<code>推荐</code>）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS 数据库名; </span><br></pre></td></tr></table></figure>

<p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p>
<div class="note no-icon success"><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删旧库完成的。</p>
</div>

<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul>
<li>更改数据库字符集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE 数据库名 CHARACTER SET 字符集;  #比如：gbk、utf8等</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><ul>
<li>方式1：删除指定的数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式2：删除指定的数据库（<code>推荐</code>）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS 数据库名;</span><br></pre></td></tr></table></figure>

<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><h3 id="创建方式1"><a href="#创建方式1" class="headerlink" title="创建方式1"></a>创建方式1</h3><ul>
<li><strong>必须具备：</strong><ul>
<li>CREATE TABLE权限</li>
<li>存储空间</li>
</ul>
</li>
<li><strong>语法格式：</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] 表名(</span><br><span class="line">	字段1, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段2, 数据类型 [约束条件] [默认值],</span><br><span class="line">	字段3, 数据类型 [约束条件] [默认值],</span><br><span class="line">	……</span><br><span class="line">	[表约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<div class="note no-icon success"><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表；如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p>
</div>

<ul>
<li><p><strong>必须指定：</strong></p>
<ul>
<li>表名</li>
<li>列名(或字段名)，数据类型，<strong>长度</strong></li>
</ul>
</li>
<li><p><strong>可选指定：</strong></p>
<ul>
<li>约束条件</li>
<li>默认值</li>
</ul>
</li>
<li><p>创建表举例：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE dept(</span><br><span class="line">    -- int类型，自增</span><br><span class="line">	deptno INT(2) AUTO_INCREMENT,</span><br><span class="line">	dname VARCHAR(14),</span><br><span class="line">	loc VARCHAR(13),</span><br><span class="line">    -- 主键</span><br><span class="line">    PRIMARY KEY (deptno)</span><br><span class="line">);DESCRIBE dept;</span><br></pre></td></tr></table></figure>

<h3 id="创建方式2-基于查询创建"><a href="#创建方式2-基于查询创建" class="headerlink" title="创建方式2 基于查询创建"></a>创建方式2 基于查询创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span>  employee_id, last_name, salary*<span class="number">12</span> ANNSAL, hire_date</span><br><span class="line"><span class="keyword">FROM</span>    employees</span><br><span class="line"><span class="keyword">WHERE</span>   department_id = <span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用<code>DESCRIBE/DESC</code>语句查看数据表结构，也支持使用<code>SHOW CREATE TABLE</code>语句查看数据表结构。</p>
<p>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名\G</span><br></pre></td></tr></table></figure>

<p>使用<code>SHOW CREATE TABLE</code>语句不仅可以查看表创建时的详细语句，还可以查看存储引擎和字符编码。</p>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p>修改表指的是修改数据库中已经存在的数据表的结构。</p>
<p><strong>使用 ALTER TABLE 语句可以实现：</strong></p>
<ul>
<li><p>向已有的表中添加列</p>
</li>
<li><p>修改现有表中的列</p>
</li>
<li><p>删除现有表中的列</p>
</li>
<li><p>重命名现有表中的列</p>
</li>
</ul>
<h3 id="追加一个列"><a href="#追加一个列" class="headerlink" title="追加一个列"></a>追加一个列</h3><p>语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE dept80 </span><br><span class="line">ADD job_id varchar(15);</span><br></pre></td></tr></table></figure>

<h3 id="修改一个列"><a href="#修改一个列" class="headerlink" title="修改一个列"></a>修改一个列</h3><ul>
<li><p>可以修改列的数据类型，长度、默认值和位置</p>
</li>
<li><p>修改字段数据类型、长度、默认值、位置的语法格式如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE	dept80</span><br><span class="line">MODIFY last_name VARCHAR(30);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE	dept80</span><br><span class="line">MODIFY salary double(9,2) default 1000;</span><br></pre></td></tr></table></figure>

<ul>
<li>对默认值的修改只影响今后对表的修改</li>
</ul>
<h3 id="重命名一个列"><a href="#重命名一个列" class="headerlink" title="重命名一个列"></a>重命名一个列</h3><p>使用<code> CHANGE old_column  new_column  dataType</code>子句重命名列。语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE  dept80</span><br><span class="line">CHANGE department_name dept_name varchar(15); </span><br></pre></td></tr></table></figure>

<h3 id="删除一个列"><a href="#删除一个列" class="headerlink" title="删除一个列"></a>删除一个列</h3><p>删除表中某个字段的语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP 【COLUMN】字段名</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE  dept80</span><br><span class="line">DROP COLUMN  job_id; </span><br></pre></td></tr></table></figure>

<h2 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h2><ul>
<li>方式一：使用<code>RENAME</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RENAME TABLE emp</span><br><span class="line">TO myemp;</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER table dept</span><br><span class="line">RENAME [TO] detail_dept;  -- [TO]可以省略</span><br></pre></td></tr></table></figure>

<ul>
<li>必须是对象的拥有者</li>
</ul>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><ul>
<li><p>在MySQL中，当一张数据表<code>没有与其他任何数据表形成关联关系</code>时，可以将当前数据表直接删除。</p>
</li>
<li><p>数据和结构都被删除</p>
</li>
<li><p>所有正在运行的相关事务被提交</p>
</li>
<li><p>所有相关索引被删除</p>
</li>
<li><p>语法格式：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];</span><br></pre></td></tr></table></figure>

<p><code>IF EXISTS</code>的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p>
<ul>
<li>举例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE dept80;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DROP TABLE</code>语句不能回滚</li>
</ul>
<h2 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h2><ul>
<li><p><code>TRUNCATE TABLE</code>语句：</p>
<ul>
<li>删除表中所有的数据</li>
<li>释放表的存储空间</li>
</ul>
</li>
<li><p>举例：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE detail_dept;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>TRUNCATE</code>语句<strong>不能回滚</strong>，而使用<code>DELETE</code>语句删除数据，<strong>可以回滚</strong></p>
</li>
<li><p>对比：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET autocommit &#x3D; FALSE;</span><br><span class="line">  </span><br><span class="line">DELETE FROM emp2; </span><br><span class="line">#TRUNCATE TABLE emp2;</span><br><span class="line">  </span><br><span class="line">SELECT * FROM emp2;</span><br><span class="line">  </span><br><span class="line">ROLLBACK;</span><br><span class="line">  </span><br><span class="line">SELECT * FROM emp2;</span><br></pre></td></tr></table></figure>

<div class="note no-icon info"><p>阿里开发规范：</p>
<p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。 </p>
<p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p>
</div>

<h3 id="阿里巴巴《Java开发手册》之MySQL字段命名"><a href="#阿里巴巴《Java开发手册》之MySQL字段命名" class="headerlink" title="阿里巴巴《Java开发手册》之MySQL字段命名"></a>阿里巴巴《Java开发手册》之MySQL字段命名</h3><ul>
<li><p>【<mark class="label danger">强制</mark>】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p>
<ul>
<li>正例：aliyun_admin，rdc_config，level3_name </li>
<li>反例：AliyunAdmin，rdcConfig，level_3_name</li>
</ul>
</li>
<li><p>【<mark class="label danger">强制</mark>】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p>
</li>
<li><p>【<mark class="label danger">强制</mark>】表必备三字段：id, gmt_create, gmt_modified。 </p>
<ul>
<li>说明：其中 id 必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新</li>
</ul>
</li>
<li><p>【<mark class="label danger">强制</mark>】表的命名最好是遵循 “业务名称_表的作用”。 </p>
<ul>
<li>正例：alipay_task 、 force_project、 trade_config</li>
</ul>
</li>
<li><p>【<mark class="label danger">强制</mark>】库名与应用名称尽量一致。</p>
</li>
<li><p>【<mark class="label primary">参考</mark>】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。 </p>
<ul>
<li>正例：无符号值可以避免误存负数，且扩大了表示范围。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>对象</th>
<th>年龄区间</th>
<th>类型</th>
<th>字节</th>
<th>表示范围</th>
</tr>
</thead>
<tbody><tr>
<td>人</td>
<td>150岁之内</td>
<td>tinyint unsigned</td>
<td>1</td>
<td>无符号值：0到255</td>
</tr>
<tr>
<td>龟</td>
<td>数百岁</td>
<td>smallint unsigned</td>
<td>2</td>
<td>无符号值：0到65535</td>
</tr>
<tr>
<td>恐龙化石</td>
<td>数千万年</td>
<td>int unsigned</td>
<td>4</td>
<td>无符号值：0到约43亿</td>
</tr>
<tr>
<td>太阳</td>
<td>约50亿年</td>
<td>bigint unsigned</td>
<td>8</td>
<td>无符号值：0到约10的19次方</td>
</tr>
</tbody></table>
<h3 id="拓展2：如何理解清空表、删除表等操作需谨慎？！"><a href="#拓展2：如何理解清空表、删除表等操作需谨慎？！" class="headerlink" title="拓展2：如何理解清空表、删除表等操作需谨慎？！"></a>拓展2：如何理解清空表、删除表等操作需谨慎？！</h3><p><code>表删除</code>操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行<code>备份</code>，这样当操作失误时可以对数据进行恢复，以免造成无法挽回的后果。</p>
<p>同样的，在使用ALTER TABLE<strong>进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进行完整的备份</strong>，因为数据库的改变是<code>无法撤销</code>的，如果添加了一个不需要的字段，可以将其删除；相同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p>
<h3 id="拓展3：MySQL8新特性—DDL的原子化"><a href="#拓展3：MySQL8新特性—DDL的原子化" class="headerlink" title="拓展3：MySQL8新特性—DDL的原子化"></a>拓展3：MySQL8新特性—DDL的原子化</h3><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即<code>DDL操作要么成功要么回滚</code>。DDL操作回滚日志写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到）中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p>
<p>分别在MySQL 5.7版本和MySQL 8.0版本中创建数据库和数据表，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE mytest;</span><br><span class="line"></span><br><span class="line">USE mytest;</span><br><span class="line"></span><br><span class="line">CREATE TABLE book1(</span><br><span class="line">book_id INT ,</span><br><span class="line">book_name VARCHAR(255)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>

<p>（1）在MySQL 5.7版本中，测试步骤如下：<br>删除数据表book1和数据表book2，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE book1,book2;</span><br><span class="line">ERROR 1051 (42S02): Unknown table &#39;mytest.book2&#39;</span><br></pre></td></tr></table></figure>

<p>再次查询数据库中的数据表名称，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，虽然删除操作时报错了，但是仍然删除了数据表book1。</p>
<p>（2）在MySQL 8.0版本中，测试步骤如下：<br>删除数据表book1和数据表book2，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE book1,book2;</span><br><span class="line">ERROR 1051 (42S02): Unknown table &#39;mytest.book2&#39;</span><br></pre></td></tr></table></figure>

<p>再次查询数据库中的数据表名称，结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_mytest |</span><br><span class="line">+------------------+</span><br><span class="line">| book1            |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>从结果可以看出，数据表book1并没有被删除。</p>
<hr>
<h1 id="数据处理之增删改"><a href="#数据处理之增删改" class="headerlink" title="数据处理之增删改"></a>数据处理之增删改</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="方式1：VALUES的方式添加"><a href="#方式1：VALUES的方式添加" class="headerlink" title="方式1：VALUES的方式添加"></a>方式1：VALUES的方式添加</h3><p>使用这种语法一次只能向表中插入<strong>一条</strong>数据。</p>
<p><strong>情况1：为表的所有字段按默认顺序插入数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">VALUES (value1,value2,....);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO departments</span><br><span class="line">VALUES (70, &#39;Pub&#39;, 100, 1700);</span><br></pre></td></tr></table></figure>

<p><strong>情况2：为表的指定字段插入数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名(column1 [, column2, …, columnn]) </span><br><span class="line">VALUES (value1 [,value2, …, valuen]);</span><br></pre></td></tr></table></figure>

<p>为表的指定字段插入数据，就是在<code>INSERT</code>语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO departments(department_id, department_name)</span><br><span class="line">VALUES (80, &#39;IT&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>情况3：同时插入多条记录</strong></p>
<p><code>INSERT</code>语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔开，基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name </span><br><span class="line">VALUES </span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">……</span><br><span class="line">(value1 [,value2, …, valuen]);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name(column1 [, column2, …, columnn]) </span><br><span class="line">VALUES </span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">……</span><br><span class="line">(value1 [,value2, …, valuen]);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO emp(emp_id,emp_name)</span><br><span class="line">    -&gt; VALUES (1001,&#39;shkstart&#39;),</span><br><span class="line">    -&gt; (1002,&#39;atguigu&#39;),</span><br><span class="line">    -&gt; (1003,&#39;Tom&#39;);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含义如下：<br>●　Records：表明插入的记录条数。<br>●　Duplicates：表明插入时被忽略的记录，原因可能是这些记录包含了重复的主键值。<br>●　Warnings：表明有问题的数据值，例如发生数据类型转换。</p>
<blockquote>
<p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句在处理过程中<code>效率更高</code>。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p>
</blockquote>
<p><strong>小结：</strong></p>
<ul>
<li><code>VALUES</code>也可以写成<code>VALUE</code>，但是<code>VALUES</code>是标准写法。</li>
</ul>
<ul>
<li>字符和日期型数据应包含在单引号中。</li>
</ul>
<h3 id="方式2：将查询结果插入到表中"><a href="#方式2：将查询结果插入到表中" class="headerlink" title="方式2：将查询结果插入到表中"></a>方式2：将查询结果插入到表中</h3><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p>
<p>基本语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO 目标表名</span><br><span class="line">(tar_column1 [, tar_column2, …, tar_columnn])</span><br><span class="line">SELECT</span><br><span class="line">(src_column1 [, src_column2, …, src_columnn])</span><br><span class="line">FROM 源表名</span><br><span class="line">[WHERE condition]</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>INSERT</code>语句中加入子查询。 </li>
<li><strong>不必书写</strong> <strong>VALUES</strong> <strong>子句。</strong> </li>
<li>子查询中的值列表应与<code>INSERT</code>子句中的列名对应。</li>
</ul>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales_reps(<span class="keyword">id</span>, <span class="keyword">name</span>, salary, commission_pct)</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary, commission_pct</span><br><span class="line"><span class="keyword">FROM</span>   employees</span><br><span class="line"><span class="keyword">WHERE</span>  job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%REP%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><ul>
<li>使用<code>UPDATE</code>语句更新数据。语法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1&#x3D;value1, column2&#x3D;value2, … , column&#x3D;valuen</span><br><span class="line">[WHERE condition]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以一次更新<strong>多条</strong>数据。</p>
</li>
<li><p>如果需要回滚数据，需要保证在DML前，进行设置：<strong>SET AUTOCOMMIT = FALSE;</strong></p>
</li>
<li><p>使用 <strong>WHERE</strong> 子句指定需要更新的数据。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span>    department_id = <span class="number">70</span></span><br><span class="line"><span class="keyword">WHERE</span>  employee_id = <span class="number">113</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果省略<code>WHERE</code>子句，则表中的所有数据都将被更新。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 	copy_emp</span><br><span class="line"><span class="keyword">SET</span>    	department_id = <span class="number">110</span>;</span><br></pre></td></tr></table></figure>

<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul>
<li>使用<code>DELETE</code>语句从表中删除数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE &lt;condition&gt;];</span><br></pre></td></tr></table></figure>

<p>table_name指定要执行删除操作的表；<code>[WHERE &lt;condition>]</code>为可选参数，指定删除条件，如果没有WHERE子句，DELETE语句将删除表中的所有记录。</p>
<ul>
<li>使用 WHERE 子句删除指定的记录。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span>  department_name = <span class="string">&#x27;Finance&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果省略 WHERE 子句，则表中的全部数据将被删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span>  copy_emp;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="MySQL中的数据类型-1"><a href="#MySQL中的数据类型-1" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h1><table>
<thead>
<tr>
<th>类型</th>
<th>类型举例</th>
</tr>
</thead>
<tbody><tr>
<td>整数类型</td>
<td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td>
</tr>
<tr>
<td>浮点类型</td>
<td>FLOAT、DOUBLE</td>
</tr>
<tr>
<td>定点数类型</td>
<td>DECIMAL</td>
</tr>
<tr>
<td>位类型</td>
<td>BIT</td>
</tr>
<tr>
<td>日期时间类型</td>
<td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td>
</tr>
<tr>
<td>文本字符串类型</td>
<td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td>
</tr>
<tr>
<td>枚举类型</td>
<td>ENUM</td>
</tr>
<tr>
<td>集合类型</td>
<td>SET</td>
</tr>
<tr>
<td>二进制字符串类型</td>
<td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td>
</tr>
<tr>
<td>JSON类型</td>
<td>JSON对象、JSON数组</td>
</tr>
<tr>
<td>空间数据类型</td>
<td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON；<br/>集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td>
</tr>
</tbody></table>
<p>常见数据类型的属性，如下：</p>
<table>
<thead>
<tr>
<th>MySQL关键字</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>数据列可包含NULL值</td>
</tr>
<tr>
<td>NOT NULL</td>
<td>数据列不允许包含NULL值</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>默认值</td>
</tr>
<tr>
<td>PRIMARY KEY</td>
<td>主键</td>
</tr>
<tr>
<td>AUTO_INCREMENT</td>
<td>自动递增，适用于整数类型</td>
</tr>
<tr>
<td>UNSIGNED</td>
<td>无符号</td>
</tr>
<tr>
<td>CHARACTER SET name</td>
<td>指定一个字符集</td>
</tr>
</tbody></table>
<h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p>
<p>它们的区别如下表所示：</p>
<table>
<thead>
<tr>
<th><strong>整数类型</strong></th>
<th><strong>字节</strong></th>
<th>有符号数取值范围</th>
<th>无符号数取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>-128~127</td>
<td>0~255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768~32767</td>
<td>0~65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608~8388607</td>
<td>0~16777215</td>
</tr>
<tr>
<td>INT、INTEGER</td>
<td>4</td>
<td>-2147483648~2147483647</td>
<td>0~4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-9223372036854775808~9223372036854775807</td>
<td>0~18446744073709551615</td>
</tr>
</tbody></table>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p><code>TINYINT</code>：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</p>
<p><code>SMALLINT</code>：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</p>
<p><code>MEDIUMINT</code>：用于较大整数的计算，比如车站每日的客流量等。</p>
<p><code>INT</code>、<code>INTEGER</code>：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p>
<p><code>BIGINT</code>：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p>
<h3 id="如何选择？"><a href="#如何选择？" class="headerlink" title="如何选择？"></a>如何选择？</h3><p>在评估用哪种整数类型的时候，你需要考虑<code>存储空间</code>和<code>可靠性</code>的平衡问题：一方 面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起<code>系统错误</code>，影响可靠性。 </p>
<p>举个例子，商品编号采用的数据类型是<code>INT</code>。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p>
<p>如果使用<code>SMALLINT</code>类型，虽然占用字节数比<code>INT</code>类型的整数少，但是却不能保证数据不会超出范围 65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。 </p>
<p>你要注意的是，在实际工作中，<strong>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</strong>。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p>
<h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><h3 id="类型介绍-1"><a href="#类型介绍-1" class="headerlink" title="类型介绍"></a>类型介绍</h3><p>浮点数和定点数类型的特点是可以<code>处理小数</code>，你可以把整数看成小数的一个特例。因此，浮点数和定点数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是<code>FLOAT</code>、<code>DOUBLE</code>、<code>REAL</code>。</p>
<ul>
<li><p><code>FLOAT</code>表示单精度浮点数；</p>
</li>
<li><p><code>DOUBLE</code>表示双精度浮点数；</p>
</li>
<li><p><code>REAL</code>默认就是<code>DOUBLE</code>。如果你把 SQL 模式设定为启用“<code>REAL_AS_FLOAT</code>”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET sql_mode &#x3D; “REAL_AS_FLOAT”;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>问题1：</strong>FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢？</p>
<p><code>FLOAT</code>占用字节数少，取值范围小；<code>DOUBLE</code>占用字节数多，取值范围也大。</p>
<p><strong>问题2：</strong>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？ </p>
<p>MySQL 存储浮点数的格式为：<code>符号(S)</code>、<code>尾数(M)</code>和 <code>阶码(E)</code>。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p>
<h3 id="精度误差说明"><a href="#精度误差说明" class="headerlink" title="精度误差说明"></a>精度误差说明</h3><p>浮点数类型有个缺陷，就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我们设计一个表，有f1这个字段，插入值分别为0.47,0.44,0.19，我们期待的运行结果是：0.47 + 0.44 + 0.19 = 1.1。而使用sum之后查询：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_double2(</span><br><span class="line">f1 DOUBLE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO test_double2</span><br><span class="line">VALUES(0.47),(0.44),(0.19);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(f1)</span><br><span class="line">    -&gt; FROM test_double2;</span><br><span class="line">+--------------------+</span><br><span class="line">| SUM(f1)            |</span><br><span class="line">+--------------------+</span><br><span class="line">| 1.0999999999999999 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(f1) &#x3D; 1.1,1.1 &#x3D; 1.1</span><br><span class="line">    -&gt; FROM test_double2;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| SUM(f1) &#x3D; 1.1 | 1.1 &#x3D; 1.1 |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">|             0 |         1 |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查询结果是 1.0999999999999999。看到了吗？虽然误差很小，但确实有误差。 你也可以尝试把数据类型改成 FLOAT，然后运行求和查询，得到的是， 1.0999999940395355。显然，误差更大了。</p>
<p>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。 </p>
<p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。 </p>
<p>在编程中，如果用到浮点数，要特别注意误差问题，<strong>因为浮点数是不准确的，所以我们要避免使用“=”来判断两个数是否相等。</strong>同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数类型：<code>DECIMAL</code>。</p>
<h2 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h2><h3 id="类型介绍-2"><a href="#类型介绍-2" class="headerlink" title="类型介绍"></a>类型介绍</h3><ul>
<li><p>MySQL中的定点数类型只有 DECIMAL 一种类型。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>字节数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>DECIMAL(M,D),DEC,NUMERIC</td>
<td>M+2字节</td>
<td>有效范围由M和D决定</td>
</tr>
</tbody></table>
<p>使用<code>DECIMAL(M,D)</code>的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;=M&lt;=65，0&lt;=D&lt;=30，D&lt;M。例如，定义<code>DECIMAL(5, 2)</code>的类型，表示该列取值范围是-999.99~999.99。</p>
</li>
<li><p><strong>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样</strong>，但是有效的数据范围是由M和D决定的。DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些。</p>
</li>
<li><p>定点数在MySQL内部是以<code>字符串</code>的形式进行存储，这就决定了它一定是精准的。</p>
</li>
<li><p>当DECIMAL类型不指定精度和标度时，其默认为<code>DECIMAL(10,0)</code>。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行四舍五入处理。</p>
</li>
<li><p><strong>浮点数 vs 定点数</strong></p>
<ul>
<li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li>
<li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</li>
</ul>
</li>
<li><p>举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_decimal1(</span><br><span class="line">f1 DECIMAL,</span><br><span class="line">f2 DECIMAL(5,2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESC test_decimal1;</span><br><span class="line"></span><br><span class="line">INSERT INTO test_decimal1(f1,f2)</span><br><span class="line">VALUES(123.123,123.456);</span><br><span class="line"></span><br><span class="line">#Out of range value for column &#39;f2&#39; at row 1</span><br><span class="line">INSERT INTO test_decimal1(f2)</span><br><span class="line">VALUES(1234.34);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM test_decimal1;</span><br><span class="line">+------+--------+</span><br><span class="line">| f1   | f2     |</span><br><span class="line">+------+--------+</span><br><span class="line">|  123 | 123.46 |</span><br><span class="line">+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>举例</p>
<p>我们运行下面的语句，把test_double2表中字段“f1”的数据类型修改为 DECIMAL(5,2)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE test_double2</span><br><span class="line">MODIFY f1 DECIMAL(5,2);</span><br></pre></td></tr></table></figure>

<p>然后，我们再一次运行求和语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(f1)</span><br><span class="line">    -&gt; FROM test_double2;</span><br><span class="line">+---------+</span><br><span class="line">| SUM(f1) |</span><br><span class="line">+---------+</span><br><span class="line">|    1.10 |</span><br><span class="line">+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(f1) &#x3D; 1.1</span><br><span class="line">    -&gt; FROM test_double2;</span><br><span class="line">+---------------+</span><br><span class="line">| SUM(f1) &#x3D; 1.1 |</span><br><span class="line">+---------------+</span><br><span class="line">|             1 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="开发中经验"><a href="#开发中经验" class="headerlink" title="开发中经验"></a>开发中经验</h3><div class="note no-icon primary"><p>“由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能差。 ” ——来自某项目经理</p>
</div>

<h2 id="BIT"><a href="#BIT" class="headerlink" title="BIT"></a>BIT</h2><p>BIT类型中存储的是二进制值，类似010110。</p>
<table>
<thead>
<tr>
<th>二进制字符串类型</th>
<th>长度</th>
<th>长度范围</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>BIT(M)</td>
<td>M</td>
<td>1 &lt;= M &lt;= 64</td>
<td>约为(M + 7)/8个字节</td>
</tr>
</tbody></table>
<p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的位数，位数最小值为1，最大值为64。</p>
<h2 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h2><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的时间标签，从而进行数据查询、统计和处理。 </p>
<p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间类型主要有：<code>YEAR</code>类型、<code>TIME</code>类型、<code>DATE</code>类型、<code>DATETIME</code>类型和<code>TIMESTAMP</code>类型。</p>
<ul>
<li><code>YEAR</code>类型通常用来表示年</li>
<li><code>DATE</code>类型通常用来表示年、月、日</li>
<li><code>TIME</code>类型通常用来表示时、分、秒</li>
<li><code>DATETIME</code>类型通常用来表示年、月、日、时、分、秒</li>
<li><code>TIMESTAMP</code>类型通常用来表示带时区的年、月、日、时、分、秒</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>字节</th>
<th>日期格式</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>年</td>
<td>1</td>
<td>YYYY或YY</td>
<td>1901</td>
<td>2155</td>
</tr>
<tr>
<td>TIME</td>
<td>时间</td>
<td>3</td>
<td>HH:MM:SS</td>
<td>-838:59:59</td>
<td>838:59:59</td>
</tr>
<tr>
<td>DATE</td>
<td>日期</td>
<td>3</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01</td>
<td>9999-12-03</td>
</tr>
<tr>
<td>DATETIME</td>
<td>日期时间</td>
<td>8</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00</td>
<td>9999-12-31 23:59:59</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>日期时间</td>
<td>4</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1970-01-01 00:00:00 UTC</td>
<td>2038-01-19 03:14:07UTC</td>
</tr>
</tbody></table>
<p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据实际需要灵活选取。</p>
<p>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p>
<h3 id="开发中经验-1"><a href="#开发中经验-1" class="headerlink" title="开发中经验"></a>开发中经验</h3><p>用得最多的日期时间类型，就是<code>DATETIME</code>。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用<code>DATETIME</code>类型。因为这个数据类型包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。 </p>
<p>此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用<code>时间戳</code>，因为DATETIME虽然直观，但不便于计算。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP();</span><br><span class="line">+------------------+</span><br><span class="line">| UNIX_TIMESTAMP() |</span><br><span class="line">+------------------+</span><br><span class="line">|       1635932762 |</span><br><span class="line">+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h2><p>在实际的项目中，我们还经常遇到一种数据，就是字符串数据。</p>
<p>MySQL中，文本字符串总体上分为<code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code>等类型。</p>
<table>
<thead>
<tr>
<th>文本字符串类型</th>
<th>值的长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>M</td>
<td>0 &lt;= M &lt;= 255</td>
<td>M个子节</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>M</td>
<td>0 &lt;= M &lt;= 65535</td>
<td>M+l个字节</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>L</td>
<td>0 &lt;= L &lt;= 255</td>
<td>L+2个字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>L</td>
<td>0 &lt;= L &lt;= 65535</td>
<td>L+2个字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>L</td>
<td>0 &lt;= L &lt;= 16777215</td>
<td>L+3个字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>L</td>
<td>0 &lt;= L &lt;= 4294967295</td>
<td>L+4个字节</td>
</tr>
<tr>
<td>ENUM</td>
<td>L</td>
<td>1 &lt;= L &lt;= 65535</td>
<td>1或2个字节</td>
</tr>
<tr>
<td>SET</td>
<td>L</td>
<td>0 &lt;= L &lt;= 64</td>
<td>1,2,3,4或8个字节</td>
</tr>
</tbody></table>
<h3 id="CHAR与VARCHAR类型"><a href="#CHAR与VARCHAR类型" class="headerlink" title="CHAR与VARCHAR类型"></a>CHAR与VARCHAR类型</h3><p><code>CHAR</code>和<code>VARCHAR</code>类型都可以存储比较短的字符串。</p>
<table>
<thead>
<tr>
<th>字符串(文本)类型</th>
<th>特点</th>
<th>长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度</td>
<td>M</td>
<td>0 &lt;= M &lt;= 255</td>
<td>M个字节</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>可变长度</td>
<td>M</td>
<td>0 &lt;= M &lt;= 65535</td>
<td>(实际长度 + 1) 个字节</td>
</tr>
</tbody></table>
<p><strong>CHAR类型：</strong></p>
<ul>
<li><code>CHAR(M)</code>类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是<code>1个字符</code>。</li>
<li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在<code>右侧填充</code>空格以达到指定的长度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</li>
<li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li>
</ul>
<p><strong>VARCHAR类型：</strong></p>
<ul>
<li><code>VARCHAR(M) </code>定义时，<code>必须指定</code>长度M，否则报错。</li>
<li>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节） ；MySQL5.0版本以上，varchar(20)：指的是20字符。</li>
<li>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间为字符串实际长度加1个字节。</li>
</ul>
<p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特点</th>
<th>空间上</th>
<th>时间上</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度</td>
<td>浪费存储空间</td>
<td>效率高</td>
<td>存储不大，速度要求高</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>可变长度</td>
<td>节省存储空间</td>
<td>效率低</td>
<td>非CHAR的情况</td>
</tr>
</tbody></table>
<p>情况1：存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p>
<p>情况2：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。</p>
<p>情况3：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</p>
<p>情况4：具体存储引擎中的情况：</p>
<ul>
<li><p><code>MyISAM</code> 数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使<code>数据检索更快</code>，用空间换时间。</p>
</li>
<li><p><code>MEMORY</code> 存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</p>
</li>
<li><p><code>InnoDB</code>存储引擎，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且<strong>主要影响性能的因素是数据行使用的存储总量</strong>，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的，其他考虑varchar。这样节省空间，对磁盘I/O和数据存储总量比较好。</p>
</li>
</ul>
<h3 id="TEXT类型"><a href="#TEXT类型" class="headerlink" title="TEXT类型"></a>TEXT类型</h3><p>在MySQL中，<code>TEXT</code>用来保存文本类型的字符串，总共包含4种类型，分别为<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>和<code>LONGTEXT</code>类型。</p>
<p>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和 VARCHAR类型相同。</p>
<p>每种TEXT类型保存的数据长度和所占用的存储空间不同，如下：</p>
<table>
<thead>
<tr>
<th>文本字符串类型</th>
<th>特点</th>
<th>长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>TINYTEXT</td>
<td>小文本、可变长度</td>
<td>L</td>
<td>0 &lt;= L &lt;= 255</td>
<td>L + 2 个字节</td>
</tr>
<tr>
<td>TEXT</td>
<td>文本、可变长度</td>
<td>L</td>
<td>0 &lt;= L &lt;= 65535</td>
<td>L + 2 个字节</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等文本、可变长度</td>
<td>L</td>
<td>0 &lt;= L &lt;= 16777215</td>
<td>L + 3 个字节</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>大文本、可变长度</td>
<td>L</td>
<td>0 &lt;= L&lt;= 4294967295（相当于4GB）</td>
<td>L + 4 个字节</td>
</tr>
</tbody></table>
<p><strong>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键</strong>。遇到这种情况，你只能采用 CHAR(M)，或者 VARCHAR(M)。</p>
<p><strong>开发中经验：</strong></p>
<p>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR，VARCHAR来代替。还有TEXT类型不用加默认值，加了也没用。而且text和blob类型的数据删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用一个表。</p>
<h2 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h2><p><code>ENUM</code>类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM类型只允许从成员中选取单个值，不能一次选取多个值。</p>
<p>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p>
<table>
<thead>
<tr>
<th>文本字符串类型</th>
<th>长度</th>
<th>长度范围</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>ENUM</td>
<td>L</td>
<td>1 &lt;= L &lt;= 65535</td>
<td>1或2个字节</td>
</tr>
</tbody></table>
<ul>
<li><p>当ENUM类型包含1～255个成员时，需要1个字节的存储空间；</p>
</li>
<li><p>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。</p>
</li>
<li><p>ENUM类型的成员个数的上限为65535个。</p>
</li>
</ul>
<p>举例：</p>
<p>创建表如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_enum(</span><br><span class="line">season ENUM(&#39;春&#39;,&#39;夏&#39;,&#39;秋&#39;,&#39;冬&#39;,&#39;unknow&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h2><p><code>SET</code>表示一个字符串对象，可以包含0个或多个成员，但成员个数的上限为<code>64</code>。设置字段值时，可以取取值范围内的 0 个或多个值。</p>
<p>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p>
<table>
<thead>
<tr>
<th>成员个数范围（L表示实际成员个数）</th>
<th>占用的存储空间</th>
</tr>
</thead>
<tbody><tr>
<td>1 &lt;= L &lt;= 8</td>
<td>1个字节</td>
</tr>
<tr>
<td>9 &lt;= L &lt;= 16</td>
<td>2个字节</td>
</tr>
<tr>
<td>17 &lt;= L &lt;= 24</td>
<td>3个字节</td>
</tr>
<tr>
<td>25 &lt;= L &lt;= 32</td>
<td>4个字节</td>
</tr>
<tr>
<td>33 &lt;= L &lt;= 64</td>
<td>8个字节</td>
</tr>
</tbody></table>
<p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以一次选择多个成员，这一点与ENUM类型不同。</p>
<p>举例：</p>
<p>创建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_set(</span><br><span class="line">s SET (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>向表中插入数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO test_set (s) VALUES (&#39;A&#39;), (&#39;A,B&#39;);</span><br><span class="line"></span><br><span class="line">#插入重复的SET类型成员时，MySQL会自动删除重复的成员</span><br><span class="line">INSERT INTO test_set (s) VALUES (&#39;A,B,C,A&#39;);</span><br><span class="line"></span><br><span class="line">#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。</span><br><span class="line">INSERT INTO test_set (s) VALUES (&#39;A,B,C,D&#39;);</span><br><span class="line"></span><br><span class="line">SELECT *</span><br><span class="line">FROM test_set;</span><br></pre></td></tr></table></figure>

<h2 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h2><p>MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。</p>
<p>MySQL中支持的二进制字符串类型主要包括<code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和<code>LONGBLOB</code>类型。</p>
<h4 id="BINARY与VARBINARY类型"><a href="#BINARY与VARBINARY类型" class="headerlink" title="BINARY与VARBINARY类型"></a>BINARY与VARBINARY类型</h4><p><code>BINARY</code>和<code>VARBINARY</code>类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p>
<p><code>BINARY (M)</code>为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字符。如果未指定(M)，表示只能存储<code>1个字节</code>。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字节，将在右边填充’\0’以补齐指定长度。</p>
<p><code>VARBINARY (M)</code>为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数。VARBINARY类型必须指定(M)，否则报错。</p>
<table>
<thead>
<tr>
<th>二进制字符串类型</th>
<th>特点</th>
<th>值的长度</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>BINARY(M)</td>
<td>固定长度</td>
<td>M （0 &lt;= M &lt;= 255）</td>
<td>M个字节</td>
</tr>
<tr>
<td>VARBINARY(M)</td>
<td>可变长度</td>
<td>M（0 &lt;= M &lt;= 65535）</td>
<td>M+1个字节</td>
</tr>
</tbody></table>
<h4 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h4><p><code>BLOB</code>是一个<strong>二进制大对象</strong>，可以容纳可变数量的数据。</p>
<p>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如<code>图片</code>、<code>音频</code>和<code>视频</code>等。</p>
<p>需要注意的是，在实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将图片、音频和视频文件存储到<code>服务器的磁盘上</code>，并将图片、音频和视频的访问路径存储到MySQL中。</p>
<table>
<thead>
<tr>
<th>二进制字符串类型</th>
<th>值的长度</th>
<th>长度范围</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>TINYBLOB</td>
<td>L</td>
<td>0 &lt;= L &lt;= 255</td>
<td>L + 1 个字节</td>
</tr>
<tr>
<td>BLOB</td>
<td>L</td>
<td>0 &lt;= L &lt;= 65535（相当于64KB）</td>
<td>L + 2 个字节</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>L</td>
<td>0 &lt;= L &lt;= 16777215 （相当于16MB）</td>
<td>L + 3 个字节</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>L</td>
<td>0 &lt;= L &lt;= 4294967295（相当于4GB）</td>
<td>L + 4 个字节</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_blob1(</span><br><span class="line">id INT,</span><br><span class="line">img MEDIUMBLOB</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>TEXT和BLOB的使用注意事项：</strong></p>
<p>在使用<code>text</code>和<code>blob</code>字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p>
<p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的”<code>空洞</code>“，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行<code>碎片整理</code>。</p>
<p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了<strong>前缀索引</strong>。但是仍然要在不必要的时候避免检索大型的BLOB或TEXT值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p>
<p>③ 把BLOB或TEXT列<strong>分离到单独的表</strong>中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会<code>减少主表中的碎片</code>，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的BLOB或TEXT值。</p>
<h2 id="JSON-类型"><a href="#JSON-类型" class="headerlink" title="JSON 类型"></a>JSON 类型</h2><p><code>JSON（JavaScript Object Notation）</code>是一种轻量级的<strong>数据交换格式</strong>。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<strong>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</strong></p>
<p>在MySQL 5.7中，就已经支持JSON数据类型。在MySQL 8.x版本中，JSON类型提供了可以进行自动验证的JSON文档和优化的存储结构，使得在MySQL中存储和读取JSON类型的数据更加方便和高效。<br>创建数据表，表中包含一个JSON类型的字段 js 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_json(</span><br><span class="line">js json</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>向表中插入JSON数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO test_json (js) </span><br><span class="line">VALUES (&#39;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;, &quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#39;);</span><br></pre></td></tr></table></figure>

<p>当需要检索JSON类型的字段中数据的某个具体值时，可以使用“-&gt;”和“-&gt;&gt;”符号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT js -&gt; &#39;$.name&#39; AS NAME,js -&gt; &#39;$.age&#39; AS age ,js -&gt; &#39;$.address.province&#39; AS province, js -&gt; &#39;$.address.city&#39; AS city</span><br><span class="line">    -&gt; FROM test_json;</span><br><span class="line">+----------+------+-----------+-----------+</span><br><span class="line">| NAME     | age  | province  | city      |</span><br><span class="line">+----------+------+-----------+-----------+</span><br><span class="line">| &quot;songhk&quot; | 18   | &quot;beijing&quot; | &quot;beijing&quot; |</span><br><span class="line">+----------+------+-----------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p>
<h2 id="数据类型选择建议"><a href="#数据类型选择建议" class="headerlink" title="数据类型选择建议"></a>数据类型选择建议</h2><p>在定义数据类型时，如果确定是<code>整数</code>，就用<code>INT</code>； 如果是<code>小数</code>，一定用定点数类型 <code>DECIMAL(M,D)</code>； 如果是<code>日期与时间</code>，就用<code>DATETIME</code>。 </p>
<p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p>
<p>关于字符串的选择，建议参考如下阿里巴巴的《Java开发手册》规范：</p>
<p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p>
<ul>
<li>任何字段如果为<code>非负数</code>，必须是<code>UNSIGNED</code></li>
<li>【<code>强制</code>】小数类型为<code>DECIMAL</code>，禁止使用<code>FLOAT</code>和<code>DOUBLE</code>。 <ul>
<li>说明：在存储的时候，<code>FLOAT</code>和<code>DOUBLE</code>都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过<code>DECIMAL</code>的范围，建议将数据拆成整数和小数并分开存储。</li>
</ul>
</li>
<li>【<code>强制</code>】如果存储的字符串长度几乎相等，使用<code>CHAR</code>定长字符串类型。 </li>
<li>【<code>强制</code>】<code>VARCHAR</code>是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为<code>TEXT</code>，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li>
</ul>
<hr>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="为什么需要约束"><a href="#为什么需要约束" class="headerlink" title="为什么需要约束"></a>为什么需要约束</h2><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p>
<p>为了保证数据的完整性，SQL规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p>
<ul>
<li><strong>实体完整性（Entity Integrity）</strong>：例如，同一个表中，不能存在两条完全相同无法区分的记录</li>
<li><strong>域完整性（Domain Integrity）</strong>：例如：年龄范围0-120，性别范围“男/女”</li>
<li><strong>引用完整性（Referential Integrity）</strong>：例如：员工所在部门，在部门表中要能找到这个部门</li>
<li><strong>用户自定义完整性（User-defined Integrity）</strong>：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li>
</ul>
<h2 id="什么是约束"><a href="#什么是约束" class="headerlink" title="什么是约束"></a>什么是约束</h2><p>约束是表级的强制规定。</p>
<p>可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句规定约束</strong>。</p>
<h3 id="约束的分类"><a href="#约束的分类" class="headerlink" title="约束的分类"></a>约束的分类</h3><ul>
<li><strong>根据约束数据列的限制，</strong>约束可分为：<ul>
<li><strong>单列约束</strong>：每个约束只约束一列</li>
<li><strong>多列约束</strong>：每个约束可约束多列数据</li>
</ul>
</li>
<li><strong>根据约束的作用范围</strong>，约束可分为：<ul>
<li><strong>列级约束</strong>：只能作用在一个列上，跟在列的定义后面</li>
<li><strong>表级约束</strong>：可以作用在多个列上，不与列一起，而是单独定义</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>位置</th>
<th>支持的约束类型</th>
<th>是否可以起约束名</th>
</tr>
</thead>
<tbody><tr>
<td>列级约束：    列的后面</td>
<td>语法都支持，但外键没有效果</td>
<td>不可以</td>
</tr>
<tr>
<td>表级约束：    所有列的下面</td>
<td>默认和非空不支持，其他支持</td>
<td>可以（主键没有效果）</td>
</tr>
</tbody></table>
<ul>
<li><strong>根据约束起的作用</strong>，约束可分为：<ul>
<li><strong>NOT NULL</strong> <strong>非空约束，规定某个字段不能为空</strong></li>
<li><strong>UNIQUE</strong>  <strong>唯一约束</strong>，<strong>规定某个字段在整个表中是唯一的</strong></li>
<li><strong>PRIMARY KEY  主键(非空且唯一)约束</strong></li>
<li><strong>FOREIGN KEY</strong>  <strong>外键约束</strong></li>
<li><strong>CHECK</strong>  <strong>检查约束</strong></li>
<li><strong>DEFAULT</strong>  <strong>默认值约束</strong></li>
</ul>
</li>
</ul>
<div class="note no-icon primary"><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p>
</div>

<ul>
<li>查看某个表已有的约束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#information_schema数据库名（系统库）</span><br><span class="line">#table_constraints表名称（专门存储各个表的约束）</span><br><span class="line">SELECT * FROM information_schema.table_constraints </span><br><span class="line">WHERE table_name &#x3D; &#39;表名称&#39;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p>限定某个字段/某列的值不允许为空</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>默认，所有的类型的值都可以是<code>NULL</code>，包括<code>INT</code>、<code>FLOAT</code>等数据类型</p>
</li>
<li><p>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</p>
</li>
<li><p>一个表可以有很多列都分别限定了非空</p>
</li>
<li><p>空字符串<code>''</code>不等于<code>NULL</code>，<code>0</code>也不等于<code>NULL</code></p>
</li>
</ul>
<h3 id="添加非空约束"><a href="#添加非空约束" class="headerlink" title="添加非空约束"></a>添加非空约束</h3><p>（1）建表时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名称(</span><br><span class="line">	  字段名  数据类型,</span><br><span class="line">    字段名  数据类型 NOT NULL,  </span><br><span class="line">    字段名  数据类型 NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">CHAR</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>（2）建表后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 not null;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY sex VARCHAR(30) NOT NULL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table student modify sname varchar(20) not null;</span><br></pre></td></tr></table></figure>

<h3 id="删除非空约束"><a href="#删除非空约束" class="headerlink" title="删除非空约束"></a>删除非空约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空</span><br><span class="line"></span><br><span class="line">或 </span><br><span class="line"></span><br><span class="line">alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY sex VARCHAR(30) NULL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">MODIFY NAME VARCHAR(15) DEFAULT &#39;abc&#39; NULL;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p>用来限制某个字段/某列的值不能重复。</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>同一个表可以有多个唯一约束。</li>
<li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li>
<li>唯一性约束允许列值为空。</li>
<li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li>
<li><strong>MySQL会给唯一约束的列上默认创建一个唯一索引。</strong></li>
</ul>
<h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><p>（1）建表时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型,</span><br><span class="line">    字段名  数据类型  unique,  </span><br><span class="line">    字段名  数据类型  unique key,</span><br><span class="line">    字段名  数据类型</span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型,</span><br><span class="line">    字段名  数据类型,  </span><br><span class="line">    字段名  数据类型,</span><br><span class="line">    [constraint 约束名] unique key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	  sid int,</span><br><span class="line">    sname varchar(20),</span><br><span class="line">    tel char(11) unique,</span><br><span class="line">    cardid char(18) unique key</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE USER(</span><br><span class="line"> id INT NOT NULL,</span><br><span class="line"> NAME VARCHAR(25),</span><br><span class="line"> PASSWORD VARCHAR(16),</span><br><span class="line"> -- 使用表级约束语法</span><br><span class="line"> CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<div class="note no-icon primary"><p>表示用户名和密码组合不能重复</p>
</div>

<p>（2）建表后指定唯一键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的</span><br><span class="line">#方式1：</span><br><span class="line">alter table 表名称 add unique key(字段列表); </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式2：</span><br><span class="line">alter table 表名称 modify 字段名 字段类型 unique;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE USER </span><br><span class="line">ADD UNIQUE(NAME,PASSWORD);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE USER </span><br><span class="line">ADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE USER </span><br><span class="line">MODIFY NAME VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table student(</span><br><span class="line">	  sid int primary key,</span><br><span class="line">    sname varchar(20),</span><br><span class="line">    tel char(11) ,</span><br><span class="line">    cardid char(18) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table student add unique key(tel);</span><br><span class="line">alter table student add unique key(cardid);</span><br></pre></td></tr></table></figure>

<h3 id="关于复合唯一约束"><a href="#关于复合唯一约束" class="headerlink" title="关于复合唯一约束"></a>关于复合唯一约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型,</span><br><span class="line">    字段名  数据类型,  </span><br><span class="line">    字段名  数据类型,</span><br><span class="line">    unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><ul>
<li>添加唯一性约束的列上也会自动创建唯一索引。</li>
<li>删除唯一约束只能通过删除唯一索引的方式删除。</li>
<li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li>
<li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名&#39;; #查看都有哪些约束</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE USER </span><br><span class="line">DROP INDEX uk_name_pwd;</span><br></pre></td></tr></table></figure>

<div class="note no-icon primary"><p>注意：可以通过 show index from 表名称; 查看表的索引</p>
</div>

<hr>
<h2 id="PRIMARY-KEY-约束"><a href="#PRIMARY-KEY-约束" class="headerlink" title="PRIMARY KEY 约束"></a>PRIMARY KEY 约束</h2><p>用来唯一标识表中的一行记录。</p>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>主键约束相当于<strong>唯一约束+非空约束的组合</strong>，主键约束列不允许重复，也不允许出现空值。</p>
</li>
<li><p>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</p>
</li>
</ul>
<ul>
<li><p>主键约束对应着表中的一列或者多列（复合主键）</p>
</li>
<li><p>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</p>
</li>
<li><p><strong>MySQL的主键名总是PRIMARY</strong>，就算自己命名了主键约束名也没用。</p>
</li>
<li><p>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</p>
</li>
</ul>
<ul>
<li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li>
</ul>
<h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><p>1）建表时指定主键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型  primary key, #列级模式</span><br><span class="line">    字段名  数据类型,  </span><br><span class="line">    字段名  数据类型  </span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型,</span><br><span class="line">    字段名  数据类型,  </span><br><span class="line">    字段名  数据类型,</span><br><span class="line">    [constraint 约束名] primary key(字段名) #表级模式</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table temp(</span><br><span class="line">	  id int primary key,</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>再举例：</p>
<ul>
<li>列级约束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE emp4(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT ,</span><br><span class="line">NAME VARCHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>表级约束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE emp5(</span><br><span class="line">id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">NAME VARCHAR(20),</span><br><span class="line">pwd VARCHAR(15),</span><br><span class="line">CONSTRAINT emp5_id_pk PRIMARY KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>（2）建表后增加主键约束</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student ADD PRIMARY KEY (sid);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);</span><br></pre></td></tr></table></figure>

<h3 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 drop primary key;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE student DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp5 DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>

<div class="note no-icon primary"><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p>
</div>

<hr>
<h2 id="自增列：AUTO-INCREMENT"><a href="#自增列：AUTO-INCREMENT" class="headerlink" title="自增列：AUTO_INCREMENT"></a>自增列：AUTO_INCREMENT</h2><p>某个字段的值自增</p>
<h3 id="特点和要求"><a href="#特点和要求" class="headerlink" title="特点和要求"></a>特点和要求</h3><p>（1）一个表最多只能有一个自增长列</p>
<p>（2）当需要产生唯一标识符或顺序值时，可设置自增长</p>
<p>（3）自增长列约束的列必须是键列（主键列，唯一键列）</p>
<p>（4）自增约束的列的数据类型必须是整数类型</p>
<p>（5）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</p>
<h3 id="如何指定自增约束"><a href="#如何指定自增约束" class="headerlink" title="如何指定自增约束"></a>如何指定自增约束</h3><p><strong>（1）建表时</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型  primary key auto_increment,</span><br><span class="line">    字段名  数据类型  unique key not null,  </span><br><span class="line">    字段名  数据类型  unique key,</span><br><span class="line">    字段名  数据类型  not null default 默认值, </span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型 default 默认值 ,</span><br><span class="line">    字段名  数据类型 unique key auto_increment,  </span><br><span class="line">    字段名  数据类型 not null default 默认值,,</span><br><span class="line">    primary key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">	  eid int primary key auto_increment,</span><br><span class="line">    ename varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| ename | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>（2）建表后</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 auto_increment;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">	  eid int primary key ,</span><br><span class="line">    ename varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table employee modify eid int auto_increment;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| ename | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="如何删除自增约束"><a href="#如何删除自增约束" class="headerlink" title="如何删除自增约束"></a>如何删除自增约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束</span><br><span class="line"></span><br><span class="line">alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table employee modify eid int;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employee;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| eid   | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| ename | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="FOREIGN-KEY-约束"><a href="#FOREIGN-KEY-约束" class="headerlink" title="FOREIGN KEY 约束"></a>FOREIGN KEY 约束</h2><p>限定某个表的某个字段的引用完整性。</p>
<p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p>
<h3 id="主表和从表-父表和子表"><a href="#主表和从表-父表和子表" class="headerlink" title="主表和从表/父表和子表"></a>主表和从表/父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p>
<p>从表（子表）：引用别人的表，参考别人的表</p>
<p>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</p>
<p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p>
<h3 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h3><p>（1）从表的外键列，必须引用/参考主表的主键或唯一约束的列</p>
<p>​          为什么？因为被依赖/被参考的值必须是唯一的</p>
<p>（2）在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名</strong>（例如 student_ibfk_1;），也可以指定外键约束名。</p>
<p>（3）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</p>
<p>（4）删表时，先删从表（或先删除外键约束），再删除主表</p>
<p>（5）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</p>
<p>（6）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p>
<p>（7）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</p>
<p>​          例如：都是表示部门编号，都是int类型。</p>
<p>（8）<strong>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引</strong>。但是索引名是外键的约束名。（根据外键查询效率很高）</p>
<p>（9）删除外键约束后，必须<code>手动</code>删除对应的索引</p>
<h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><p>（1）建表时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 主表名称(</span><br><span class="line">	  字段1  数据类型  primary key,</span><br><span class="line">    字段2  数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table 从表名称(</span><br><span class="line">	  字段1  数据类型  primary key,</span><br><span class="line">    字段2  数据类型,</span><br><span class="line">    [CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段)</span><br><span class="line">);</span><br><span class="line">#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样</span><br><span class="line">#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样</span><br><span class="line"></span><br><span class="line">-- FOREIGN KEY: 在表级指定子表中的列</span><br><span class="line">-- REFERENCES: 标示在父表中的列</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table dept( #主表</span><br><span class="line">	  did int primary key,		#部门编号</span><br><span class="line">    dname varchar(50)			#部门名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp(#从表</span><br><span class="line">	  eid int primary key,  #员工编号</span><br><span class="line">    ename varchar(5),     #员工姓名</span><br><span class="line">    deptid int,				#员工所在的部门</span><br><span class="line">    foreign key (deptid) references dept(did)   #在从表中指定外键约束</span><br><span class="line">    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">（1）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。</span><br><span class="line">（2）删除表时，先删除从表emp，再删除主表dept</span><br></pre></td></tr></table></figure>

<p>（2）建表后</p>
<p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那么，就要用修改表的方式来补充定义。</p>
<p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE emp1</span><br><span class="line">ADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table dept(</span><br><span class="line">	did int primary key,		#部门编号</span><br><span class="line">    dname varchar(50)			#部门名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">	eid int primary key,  #员工编号</span><br><span class="line">    ename varchar(5),     #员工姓名</span><br><span class="line">    deptid int				#员工所在的部门</span><br><span class="line">);</span><br><span class="line">#这两个表创建时，没有指定外键的话，那么创建顺序是随意</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table emp add foreign key (deptid) references dept(did);</span><br></pre></td></tr></table></figure>

<p>总结：约束关系是针对双方的</p>
<ul>
<li><p>添加了外键约束后，主表的修改和删除数据受约束</p>
</li>
<li><p>添加了外键约束后，从表的添加和修改数据受约束</p>
</li>
<li><p>在从表上建立外键，要求主表必须存在</p>
</li>
<li><p>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</p>
</li>
</ul>
<h3 id="约束等级"><a href="#约束等级" class="headerlink" title="约束等级"></a>约束等级</h3><ul>
<li><p><code>Cascade</code>方式：在父表上update/delete记录时，同步update/delete掉子表的匹配记录 </p>
</li>
<li><p><code>Set null</code>方式：在父表上update/delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null  </p>
</li>
<li><p><code>No action</code>方式：如果子表中有匹配的记录，则不允许对父表对应候选键进行update/delete操作  </p>
</li>
<li><p><code>Restrict</code>方式：同no action， 都是立即检查外键约束</p>
</li>
<li><p><code>Set default</code>方式（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</p>
</li>
</ul>
<p>如果没有指定等级，就相当于<code>Restrict</code>方式。</p>
<p>对于外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">	eid <span class="built_in">int</span> primary <span class="keyword">key</span>,  <span class="comment">#员工编号</span></span><br><span class="line">    ename <span class="built_in">varchar</span>(<span class="number">5</span>),     <span class="comment">#员工姓名</span></span><br><span class="line">    deptid <span class="built_in">int</span>,				<span class="comment">#员工所在的部门</span></span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span> (deptid) <span class="keyword">references</span> dept(did)  <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">#把修改操作设置为级联修改等级，把删除操作设置为set null等级</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>建和不建外键约束有什么区别？</strong></p>
<p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p>
<p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的<code>引用完整性</code>，只能依<code>靠程序员的自觉</code>，或者是<code>在Java程序中进行限定</code>。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。</p>
<p><strong>那么建和不建外键约束和查询有没有关系？</strong></p>
<div class="note no-icon primary"><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以， MySQL 允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p>
</div>

<h3 id="阿里开发规范"><a href="#阿里开发规范" class="headerlink" title="阿里开发规范"></a>阿里开发规范</h3><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。 </p>
<p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于<code>单机低并发</code>，不适合<code>分布式</code>、<code>高并发集群</code>；级联更新是强阻塞，存在数据库<code>更新风暴</code>的风险；外键影响数据库的<code>插入速度</code>。</p>
<hr>
<h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p>
<h3 id="说明：MySQL-5-7-不支持"><a href="#说明：MySQL-5-7-不支持" class="headerlink" title="说明：MySQL 5.7 不支持"></a>说明：MySQL 5.7 不支持</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p>
<p>但是<strong>MySQL 8.0中可以使用check约束了</strong>。</p>
<h2 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h2><p>给某个字段/某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p>
<h3 id="给字段加默认值"><a href="#给字段加默认值" class="headerlink" title="给字段加默认值"></a>给字段加默认值</h3><p>1）建表时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型  primary key,</span><br><span class="line">    字段名  数据类型  unique key not null,  </span><br><span class="line">    字段名  数据类型  unique key,</span><br><span class="line">    字段名  数据类型  not null default 默认值, </span><br><span class="line">);</span><br><span class="line">create table 表名称(</span><br><span class="line">	  字段名  数据类型 default 默认值 ,</span><br><span class="line">    字段名  数据类型 not null default 默认值,  </span><br><span class="line">    字段名  数据类型 not null default 默认值,</span><br><span class="line">    primary key(字段名),</span><br><span class="line">    unique key(字段名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">说明：默认值约束一般不在唯一键和主键列上加</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">	  eid int primary key,</span><br><span class="line">    ename varchar(20) not null,</span><br><span class="line">    gender char default &#39;男&#39;,</span><br><span class="line">    tel char(11) not null default &#39;&#39; #默认是空字符串</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>（2）建表后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 default 默认值;</span><br><span class="line"></span><br><span class="line">#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了</span><br><span class="line">#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了</span><br><span class="line">alter table 表名称 modify 字段名 数据类型 default 默认值 not null;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table employee modify gender char default &#39;男&#39;;  #给gender字段增加默认值约束</span><br><span class="line">alter table employee modify tel char(11) default &#39;&#39;; #给tel字段增加默认值约束</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table employee modify tel char(11) default &#39;&#39;  not null;#给tel字段增加默认值约束，并保留非空约束</span><br></pre></td></tr></table></figure>

<h3 id="如何删除默认值约束"><a href="#如何删除默认值约束" class="headerlink" title="如何删除默认值约束"></a>如何删除默认值约束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束</span><br><span class="line"></span><br><span class="line">alter table 表名称 modify 字段名 数据类型  not null; #删除默认值约束，保留非空约束</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除</span><br><span class="line">alter table employee modify tel char(11)  not null;#删除tel字段默认值约束，保留非空约束</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Optional</title>
    <url>/2023/09/25/Optional/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><div class="note info no-icon"><p>“Null sucks.” - Doug Lea</p>
</div>

<p>Doug Lea 是一位美国的计算机科学家，他是 Java 平台的并发和集合框架的主要设计者之一。他在 2014 年的一篇文章中说过：“Null sucks.”，意思是 null 很糟糕。他认为 null 是一种不明确的表示，它既可以表示一个值不存在，也可以表示一个值未知，也可以表示一个值无效。这样就会导致很多逻辑错误和空指针异常，给程序员带来很多麻烦。他建议使用 Optional 类来封装可能为空的值，从而提高代码的可读性和健壮性。</p>
<p>null 引用是一种表示一个对象变量没有指向任何对象的方式，它是 Java 语言中的一个特殊值，也是导致空指针异常（NullPointerException）的主要原因。虽然 null 引用可以用来表示一个值不存在或未知，也可以用来节省内存空间。但是它也不符合面向对象的思想，因为它不是一个对象，不能调用任何方法或属性。</p>
<p>可以看到，null 引用并不好，我们应该尽量避免使用 null，那么我们该怎么避免 null 引用引起的逻辑错误和运行时异常嘞？</p>
<p>其实这个问题 Java 的设计者也知道，于是他们在 Java8 之后设计引入了 Optional 类解决这个问题，本文将给大家详细介绍下 Optional 类的设计目的以及使用方法。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/optional/java_optional.png"></p>
<hr>
<h1 id="Optional-类是什么？"><a href="#Optional-类是什么？" class="headerlink" title="Optional 类是什么？"></a>Optional 类是什么？</h1><p><code>Optional</code> 类是 java 8 中引入的一个新的类，它的作用是封装一个可能为空的值，从而避免空指针异常（<code>NullPointerException</code>）。<code>Optional</code> 类可以看作是一个容器，它可以包含一个非空的值，也可以为空。<code>Optional</code> 类提供了一些方法，让我们可以更方便地处理可能为空的值，而不需要显式地进行空值检查或者使用 null。</p>
<h1 id="Optional-类的设计"><a href="#Optional-类的设计" class="headerlink" title="Optional 类的设计"></a>Optional 类的设计</h1><p>Optional 类的设计是基于函数式编程的思想，它借鉴了 Scala 和 Haskell 等语言中的 Option 类型。Optional 类实现了 java.util.function 包中的 Supplier、Consumer、Predicate、Function 等接口，这使得它可以和 lambda 表达式或者方法引用一起使用，形成更简洁和优雅的代码。</p>
<p>Optional 类被 final 修饰，因此它是一个不可变的类，它有两个静态方法用于创建 Optional 对象。</p>
<h2 id="Optional-empty"><a href="#Optional-empty" class="headerlink" title="Optional.empty()"></a><code>Optional.empty()</code></h2><p><code>Optional.empty</code> 表示一个空的 <code>Optional</code> 对象，它不包含任何值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的 Optional 对象</span></span><br><span class="line">Optional&lt;String&gt; empty = Optional.empty();</span><br></pre></td></tr></table></figure>

<h2 id="Optional-of-T-value"><a href="#Optional-of-T-value" class="headerlink" title="Optional.of(T value)"></a><code>Optional.of(T value)</code></h2><p><code>Optional.of</code> 表示一个非空的 <code>Optional</code> 对象，它包含一个非空的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个非空的 Optional 对象</span></span><br><span class="line">Optional&lt;String&gt; hello = Optional.of(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Optional-ofNullable-T-value"><a href="#Optional-ofNullable-T-value" class="headerlink" title="Optional.ofNullable(T value)"></a><code>Optional.ofNullable(T value)</code></h2><p>注意，如果我们使用 <code>Optional.of</code> 方法传入一个 <code>null</code> 值，会抛出 <code>NullPointerException</code>。如果我们不确定一个值是否为空，可以使用 <code>Optional.ofNullable</code> 方法，它会根据值是否为空，返回一个相应的 <code>Optional</code> 对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个可能为空的 Optional 对象</span></span><br><span class="line">Optional&lt;String&gt; name = Optional.ofNullable(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Optional-对象的使用方法"><a href="#Optional-对象的使用方法" class="headerlink" title="Optional 对象的使用方法"></a>Optional 对象的使用方法</h1><p><code>Optional</code> 对象提供了一些方法，让我们可以更方便地处理可能为空的值，而不需要显式地进行空值检查或者使用 <code>null</code>。以下是一些常用的方法。</p>
<h2 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent()"></a><code>isPresent()</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Person&gt; personOptional = daoService.selectOne(person1);</span><br><span class="line"><span class="keyword">if</span> (personOptional.isPresent()) &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;查询不为空&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;查询为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get()"></a><code>get()</code></h2><p>如果 <code>Optional</code> 对象包含一个非空的值，返回该值，否则抛出 <code>NoSuchElementException</code> 异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Person&gt; personOptional = daoService.selectOne(person1);</span><br><span class="line"><span class="keyword">if</span> (personOptional.isPresent()) &#123;</span><br><span class="line">  Person person = personOptional.get();</span><br><span class="line">  System.out.println(person);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;查询为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ifPresent-Consumer-lt-super-T-gt-action"><a href="#ifPresent-Consumer-lt-super-T-gt-action" class="headerlink" title="ifPresent(Consumer&lt;? super T&gt; action)"></a><code>ifPresent(Consumer&lt;? super T&gt; action)</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Person&gt; personOptional = daoService.selectOne(person1);</span><br><span class="line">personOptional.ifPresent(person -&gt; System.out.println(person.getName()));</span><br></pre></td></tr></table></figure>

<h2 id="orElse-T-other"><a href="#orElse-T-other" class="headerlink" title="orElse(T other)"></a><code>orElse(T other)</code></h2><p>如果 <code>Optional</code> 对象包含一个非空的值，返回该值，否则返回给定的默认值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Person&gt; personOptional = daoService.selectOne(person1);</span><br><span class="line">Person person = personOptional.orElse(<span class="keyword">new</span> Person());</span><br></pre></td></tr></table></figure>

<h2 id="orElseGet-Supplier-lt-extends-T-gt-supplier"><a href="#orElseGet-Supplier-lt-extends-T-gt-supplier" class="headerlink" title="orElseGet(Supplier&lt;? extends T&gt; supplier)"></a><code>orElseGet(Supplier&lt;? extends T&gt; supplier)</code></h2><p>如果 <code>Optional</code> 对象包含一个非空的值，返回该值，否则返回由给定的供应者操作生成的值。</p>
<p>当<code>orElse</code>的参数是间接计算得来的时候，使用<code>orElse</code>可能导致<code>NullPointerException</code>，当<code>orElse</code>的参数是间接计算得来的时候。虽然这种说法有点牵强（因为并不是<code>orElse</code>导致了空指针异常），但是使用<code>orElseGet</code>确实可以避免这种情况。</p>
<p>两者的明显（也是唯一）区别是前者需要传递的参数是一个值（通常是为空时的默认值），后者传递的是一个函数。我们看一下源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise return &#123;<span class="doctag">@code</span> other&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise invoke &#123;<span class="doctag">@code</span> other&#125; and return</span></span><br><span class="line"><span class="comment"> * the result of that invocation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单解释为，我们使用<code>Optional</code>包装的变量如果不为空，返回它本身，否则返回我们传递进去的值。<code>orElseGet</code>参数为<code>Supplier</code>接口，它是一个函数式接口，它的形式是这样的：<code>() -&gt; &#123; return computedResult &#125;</code>，即<em>入参为空，有返回值（任意类型的）</em>。</p>
<p>我们可能考虑的问题是：何时使用<code>orElse</code>和何时使用<code>orElseGet</code>？看起来可以使用<code>orElseGet</code>的时候，使用<code>orElse</code>也可以代替（因为<code>Supplier</code>接口没有入参），而且使用<code>orElseGet</code>还需要将计算过程额外包装成一个 lambda 表达式。</p>
<p>一个关键的点是，使用<code>Supplier</code>能够做到<em>懒计算</em>，即使用<code>orElseGet</code>时。它的好处是，<strong>只有在需要的时候才会计算结果</strong>。具体到我们的场景，使用<code>orElse</code>的时候，每次它都会执行计算结果的过程，而对于<code>orElseGet</code>，只有<code>Optional</code>中的值为空时，它才会计算备选结果。这样做的好处是可以<strong>避免提前计算结果的风险</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">Person person2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String orElse = Optional.ofNullable(person1.getName()).orElse(person2.getName()); <span class="comment">// 报错，空指针</span></span><br><span class="line"></span><br><span class="line">String orElseGet = Optional.ofNullable(person1.getName()).orElseGet(() -&gt; person2.getName()); <span class="comment">// 不报错</span></span><br><span class="line"></span><br><span class="line">System.out.println(orElseGet);</span><br></pre></td></tr></table></figure>

<h2 id="map-Function-lt-super-T-extends-U-gt-mapper"><a href="#map-Function-lt-super-T-extends-U-gt-mapper" class="headerlink" title="map(Function&lt;? super T,? extends U&gt; mapper)"></a><code>map(Function&lt;? super T,? extends U&gt; mapper)</code></h2><p>如果 <code>Optional</code> 对象包含一个非空的值，对该值应用给定的映射函数，返回一个包含映射结果的 Optional 对象，否则返回一个空的 <code>Optional</code> 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">Optional&lt;Person&gt; person = Optional.ofNullable(person1);</span><br><span class="line">Optional&lt;String&gt; optionalS = person.map(p -&gt; p.getName().toUpperCase());</span><br><span class="line"><span class="keyword">if</span> (optionalS.isPresent()) &#123;</span><br><span class="line">  String upperName = optionalS.get();</span><br><span class="line">  System.out.println(upperName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ZHANGSAN</span></span><br></pre></td></tr></table></figure>

<h2 id="flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper"><a href="#flatMap-Function-lt-super-T-Optional-lt-U-gt-gt-mapper" class="headerlink" title="flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)"></a><code>flatMap(Function&lt;? super T,Optional&lt;U&gt;&gt; mapper)</code></h2><h3 id="map和flatMap的区别"><a href="#map和flatMap的区别" class="headerlink" title="map和flatMap的区别:"></a>map和flatMap的区别:</h3><p><code>map</code>会将传入的<code>Function</code>函数的结果进行封装，先看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));<span class="comment">//会使用Optional的ofNullable方法包装Function函数返回的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>flatMap</code>会直接返回<code>Function</code>函数执行的结果，看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));<span class="comment">//直接返回Function执行的结果</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以在使用的时候，下面这段代码会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStudentName</span><span class="params">(School school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(school)</span><br><span class="line">                .map(School::getTearch)</span><br><span class="line">                .map(Tearch::getStudent)</span><br><span class="line">                .map(Student::getName)</span><br><span class="line">                .orElse(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而下面这段代码不会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStudentName</span><span class="params">(School school)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(school)</span><br><span class="line">                .flatMap(School::getTearch)</span><br><span class="line">                .flatMap(Tearch::getStudent)</span><br><span class="line">                .map(Student::getName).orElse(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="filter-Predicate-lt-super-T-gt-predicate"><a href="#filter-Predicate-lt-super-T-gt-predicate" class="headerlink" title="filter(Predicate&lt;? super T&gt; predicate)"></a><code>filter(Predicate&lt;? super T&gt; predicate)</code></h2><p>如果 <code>Optional</code> 对象包含一个非空的值，并且该值满足给定的谓词条件，返回包含该值的 <code>Optional</code> 对象，否则返回一个空的 <code>Optional</code> 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">Optional&lt;Person&gt; optionalPerson = Optional.of(person1);</span><br><span class="line">Optional&lt;Person&gt; optional = optionalPerson.filter(person -&gt; <span class="string">&quot;ZHANGSAN&quot;</span>.equals(person.getName()));)</span><br><span class="line"><span class="keyword">if</span> (optional.isPresent())&#123;</span><br><span class="line">	System.out.println(optional);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;optional为空&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基础(三)</title>
    <url>/2022/01/05/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E4%B8%89/</url>
    <content><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="常见的数据库对象"><a href="#常见的数据库对象" class="headerlink" title="常见的数据库对象"></a>常见的数据库对象</h2><table>
<thead>
<tr>
<th align="left">对象</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">表(TABLE)</td>
<td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td>
</tr>
<tr>
<td align="left">数据字典</td>
<td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td>
</tr>
<tr>
<td align="left">约束(CONSTRAINT)</td>
<td>执行数据校验的规则，用于保证数据完整性的规则</td>
</tr>
<tr>
<td align="left">视图(VIEW)</td>
<td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td>
</tr>
<tr>
<td align="left">索引(INDEX)</td>
<td>用于提高查询性能，相当于书的目录</td>
</tr>
<tr>
<td align="left">存储过程(PROCEDURE)</td>
<td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td>
</tr>
<tr>
<td align="left">存储函数(FUNCTION)</td>
<td>用于完成一次特定的计算，具有一个返回值</td>
</tr>
<tr>
<td align="left">触发器(TRIGGER)</td>
<td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td>
</tr>
</tbody></table>
<h2 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h2><p>视图是从一个或几个基本表（或视图）导出的表。他与基本表不同，是一个虚表。数据库只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。以基本表的数据发生变化，从视图中查询出的数据也随之改变了，从这个意义上讲，视图就像一个窗口。透过他可以看到数据库中自己感兴趣的数据及变化。</p>
<h3 id="视图的特点"><a href="#视图的特点" class="headerlink" title="视图的特点"></a>视图的特点</h3><ul>
<li><p>视图是一种<code>虚拟表</code>，本身是<code>不具有数据</code>的，占用很少的内存空间，它是 SQL 中的一个重要概念。</p>
</li>
<li><p>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。</p>
</li>
<li><p>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为<strong>存储起来的SELECT 语句</strong> </p>
<ul>
<li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li>
</ul>
</li>
<li><p>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</p>
</li>
</ul>
<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称 [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span>|<span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure>

<h3 id="创建单表视图"><a href="#创建单表视图" class="headerlink" title="创建单表视图"></a>创建单表视图</h3><p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW empvu80</span><br><span class="line">AS </span><br><span class="line">SELECT  employee_id, last_name, salary</span><br><span class="line">FROM    employees</span><br><span class="line">WHERE   department_id &#x3D; 80;</span><br></pre></td></tr></table></figure>

<p>查询视图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM	salvu80;</span><br></pre></td></tr></table></figure>

<h3 id="创建多表联合视图"><a href="#创建多表联合视图" class="headerlink" title="创建多表联合视图"></a>创建多表联合视图</h3><p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW emp_dept</span><br><span class="line">AS </span><br><span class="line">SELECT ename,dname</span><br><span class="line">FROM t_employee LEFT JOIN t_department</span><br><span class="line">ON t_employee.did &#x3D; t_department.did;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>利用视图对数据进行格式化</strong></li>
</ul>
<p>我们经常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为 emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW emp_depart</span><br><span class="line">AS</span><br><span class="line">SELECT CONCAT(last_name,&#39;(&#39;,department_name,&#39;)&#39;) AS emp_dept</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">WHERE e.department_id &#x3D; d.department_id</span><br></pre></td></tr></table></figure>

<h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW TABLES;</span><br></pre></td></tr></table></figure>

<p>语法2：查看视图的结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DESC &#x2F; DESCRIBE 视图名称;</span><br></pre></td></tr></table></figure>

<p>语法3：查看视图的属性信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）</span><br><span class="line">SHOW TABLE STATUS LIKE &#39;视图名称&#39;\G</span><br></pre></td></tr></table></figure>

<p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。</p>
<p>语法4：查看视图的详细定义信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE VIEW 视图名称;</span><br></pre></td></tr></table></figure>

<h2 id="更新视图的数据"><a href="#更新视图的数据" class="headerlink" title="更新视图的数据"></a>更新视图的数据</h2><h3 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h3><p>MySQL支持使用<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>语句对视图中的数据进行插入、更新和删除操作。对视图的操作转换为对基本表的更新操作。</p>
<p>举例：<code>UPDATE</code>操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IS_Student</span><br><span class="line"><span class="keyword">SET</span> Sname = <span class="string">&#x27;刘晨&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno = <span class="string">&#x27;202210101&#x27;</span></span><br></pre></td></tr></table></figure>

<p>转换后的更新语句为:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Student</span><br><span class="line"><span class="keyword">SET</span> Sname = <span class="string">&#x27;刘晨&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> Sno = <span class="string">&#x27;202210101&#x27;</span> <span class="keyword">AND</span> Sdept = <span class="string">&#x27;IS&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="不可更新的视图"><a href="#不可更新的视图" class="headerlink" title="不可更新的视图"></a>不可更新的视图</h3><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在<code>一对一</code>的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p>
<ul>
<li>在定义视图的时候指定了“ALGORITHM = TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li>
<li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li>
<li>在定义视图的SELECT语句中使用了<code>JOIN联合查询</code>，视图将不支持INSERT和DELETE操作；</li>
<li>在定义视图的SELECT语句后的字段列表中使用了<code>数学表达式</code>或<code>子查询</code>，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li>
<li>在定义视图的SELECT语句后的字段列表中使用<code>DISTINCT</code>、<code>聚合函数</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>等，视图将不支持INSERT、UPDATE、DELETE；</li>
<li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li>
<li>视图定义基于一个<code>不可更新视图</code>；</li>
<li>常量视图。</li>
</ul>
<div class="note no-icon primary"><p>虽然可以更新视图数据，但总的来说，视图作为虚拟表，主要用于方便查询，不建议更新视图的数据。对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</p>
</div>

<h2 id="修改、删除视图"><a href="#修改、删除视图" class="headerlink" title="修改、删除视图"></a>修改、删除视图</h2><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>方式1：使用CREATE OR REPLACE VIEW 子句修改视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW empvu80</span><br><span class="line">(id_number, name, sal, department_id)</span><br><span class="line">AS </span><br><span class="line">SELECT  employee_id, first_name || &#39; &#39; || last_name, salary, department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D; 80;</span><br></pre></td></tr></table></figure>

<div class="note no-icon primary"><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p>
</div>

<p>方式2：ALTER VIEW</p>
<p>修改视图的语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER VIEW 视图名称 </span><br><span class="line">AS</span><br><span class="line">查询语句</span><br></pre></td></tr></table></figure>

<h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><ul>
<li><p>删除视图只是删除视图的定义，并不会删除基表的数据。</p>
</li>
<li><p>删除视图的语法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW IF EXISTS 视图名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW IF EXISTS 视图名称1,视图名称2,视图名称3,...;</span><br></pre></td></tr></table></figure>
</li>
<li><p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP VIEW empvu80;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这样的视图c需要手动删除或修改，否则影响使用。</p>
</li>
</ul>
<hr>
<h1 id="存储过程与存储函数"><a href="#存储过程与存储函数" class="headerlink" title="存储过程与存储函数"></a>存储过程与存储函数</h1><h2 id="存储过程概述"><a href="#存储过程概述" class="headerlink" title="存储过程概述"></a>存储过程概述</h2><p><strong>含义</strong>：存储过程的英文是 <code>Stored Procedure</code>。它的思想很简单，就是一组经过<code>预先编译</code>的 SQL 语句的封装。</p>
<p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p>
<p><strong>好处</strong>：</p>
<p>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力<br>2、减少操作过程中的失误，提高效率<br>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）<br>4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性</p>
<p><strong>和视图、函数的对比</strong>：</p>
<p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是<code>虚拟表</code>，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以<code>直接操作底层数据表</code>，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p>
<p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，<code>存储过程是没有返回值的</code>。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p>
<p>1、没有参数（无参数无返回）<br>2、仅仅带 IN 类型（有参数无返回）<br>3、仅仅带 OUT 类型（无参数有返回）<br>4、既带 IN 又带 OUT（有参数有返回）<br>5、带 INOUT（有参数有返回）</p>
<p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p>
<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line">BEGIN</span><br><span class="line">	存储过程体</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1、参数前面的符号的意思</p>
<ul>
<li><p><code>IN</code>：当前参数为输入参数，也就是表示入参；</p>
<p>存储过程只是读取这个参数的值。如果没有定义参数种类，<code>默认就是 IN</code>，表示输入参数。</p>
</li>
<li><p><code>OUT</code>：当前参数为输出参数，也就是表示出参；</p>
<p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p>
</li>
<li><p><code>INOUT</code>：当前参数既可以为输入参数，也可以为输出参数。</p>
</li>
</ul>
<p>2、形参类型可以是 MySQL数据库中的任意类型。</p>
<p>3、<code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LANGUAGE SQL</span><br><span class="line">| [NOT] DETERMINISTIC</span><br><span class="line">| &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</span><br><span class="line">| SQL SECURITY &#123; DEFINER | INVOKER &#125;</span><br><span class="line">| COMMENT &#39;string&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>LANGUAGE SQL</code>：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li>
<li><code>[NOT] DETERMINISTIC</code>：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</li>
<li><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</code>：指明子程序使用SQL语句的限制。<ul>
<li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li>
<li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句；</li>
<li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；</li>
<li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。</li>
<li>默认情况下，系统会指定为CONTAINS SQL。</li>
</ul>
</li>
<li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。<ul>
<li><code>DEFINER</code>表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li>
<li><code>INVOKER</code>表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li>
<li>如果没有设置相关的值，则MySQL默认指定值为DEFINER。</li>
</ul>
</li>
<li><code>COMMENT 'string'</code>：注释信息，可以用来描述存储过程。</li>
</ul>
<p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END</p>
<p>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。</span><br><span class="line">2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。</span><br><span class="line">3. SET：赋值语句，用于对变量进行赋值。</span><br><span class="line">4. SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。</span><br></pre></td></tr></table></figure>

<p>5、需要设置新的结束标记</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER 新的结束标记</span><br></pre></td></tr></table></figure>

<p>因为MySQL默认的语句结束符号为分号<code>;</code>。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。</p>
<p>比如：“DELIMITER //”语句的作用是将MySQL的结束符设置为//，并以“END //”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p>
<p>当使用DELIMITER命令时，应该避免使用反斜杠<code>\</code>字符，因为反斜线是MySQL的转义字符。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line">BEGIN</span><br><span class="line">	sql语句1;</span><br><span class="line">	sql语句2;</span><br><span class="line"></span><br><span class="line">END $</span><br></pre></td></tr></table></figure>

<h4 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h4><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE select_all_data()</span><br><span class="line">BEGIN</span><br><span class="line">	SELECT * FROM emps;</span><br><span class="line">	</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE avg_employee_salary ()</span><br><span class="line">BEGIN</span><br><span class="line">	SELECT AVG(salary) AS avg_salary FROM emps;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE show_max_salary()</span><br><span class="line">	LANGUAGE SQL</span><br><span class="line">	NOT DETERMINISTIC</span><br><span class="line">	CONTAINS SQL</span><br><span class="line">	SQL SECURITY DEFINER</span><br><span class="line">	COMMENT &#39;查看最高薪资&#39;</span><br><span class="line">	BEGIN</span><br><span class="line">		SELECT MAX(salary) FROM emps;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE show_min_salary(OUT ms DOUBLE)</span><br><span class="line">	BEGIN</span><br><span class="line">		SELECT MIN(salary) INTO ms FROM emps;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE show_someone_salary(IN empname VARCHAR(20))</span><br><span class="line">	BEGIN</span><br><span class="line">		SELECT salary FROM emps WHERE ename &#x3D; empname;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE show_someone_salary2(IN empname VARCHAR(20),OUT empsalary DOUBLE)</span><br><span class="line">	BEGIN</span><br><span class="line">		SELECT salary INTO empsalary FROM emps WHERE ename &#x3D; empname;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，输出领导的姓名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE show_mgr_name(INOUT empname VARCHAR(20))</span><br><span class="line">	BEGIN</span><br><span class="line">		SELECT ename INTO empname FROM emps</span><br><span class="line">		WHERE eid &#x3D; (SELECT MID FROM emps WHERE ename&#x3D;empname);</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><h4 id="调用格式"><a href="#调用格式" class="headerlink" title="调用格式"></a>调用格式</h4><p>存储过程有多种调用方法。存储过程必须使用<code>CALL</code>语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CALL 存储过程名(实参列表)</span><br></pre></td></tr></table></figure>

<p><strong>格式：</strong></p>
<p>1、调用in模式的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CALL sp1(&#39;值&#39;);</span><br></pre></td></tr></table></figure>

<p>2、调用out模式的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @name;</span><br><span class="line">CALL sp1(@name);</span><br><span class="line">SELECT @name;</span><br></pre></td></tr></table></figure>

<p>3、调用inout模式的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @name&#x3D;值;</span><br><span class="line">CALL sp1(@name);</span><br><span class="line">SELECT @name;</span><br></pre></td></tr></table></figure>

<h4 id="代码举例-1"><a href="#代码举例-1" class="headerlink" title="代码举例"></a>代码举例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)</span><br><span class="line">BEGIN</span><br><span class="line">	SELECT COUNT(*) INTO num FROM fruits </span><br><span class="line">	WHERE s_id &#x3D; sid;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用存储过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL CountProc (101, @num);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>查看返回结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @num;</span><br></pre></td></tr></table></figure>

<p>该存储过程返回了指定 s_id=101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查看，返回结果为3。</p>
<h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>函数（function）为一命名的存储程序，可带参数，并返回一计算值。函数和过程的结构类似，但必须有一个return子句，用于返回函数值。函数说明要指定函数名、结果值的类型，以及参数类型等。</p>
<h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p>
<p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION 函数名(参数名 参数类型,...) </span><br><span class="line">RETURNS 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line">BEGIN</span><br><span class="line">	函数体   #函数体中肯定有 RETURN 语句</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。</p>
<p>2、RETURNS type 语句表示函数返回数据的类型；</p>
<p>RETURNS子句只能对FUNCTION做指定，对函数而言这是<code>强制</code>的。它用来指定函数的返回类型，而且函数体必须包含一个<code>RETURN value</code>语句。</p>
<p>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</p>
<p>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。</p>
<h3 id="调用存储函数"><a href="#调用存储函数" class="headerlink" title="调用存储函数"></a>调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是<code>用户自己定义</code>的，而内部函数是MySQL的<code>开发者定义</code>的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 函数名(实参列表)</span><br></pre></td></tr></table></figure>

<h4 id="代码举例-2"><a href="#代码举例-2" class="headerlink" title="代码举例"></a>代码举例</h4><p><strong>举例1：</strong></p>
<p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION email_by_name()</span><br><span class="line">RETURNS VARCHAR(25)</span><br><span class="line">DETERMINISTIC</span><br><span class="line">CONTAINS SQL</span><br><span class="line">BEGIN</span><br><span class="line">	RETURN (SELECT email FROM employees WHERE last_name &#x3D; &#39;Abel&#39;);</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT email_by_name();</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong></p>
<p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION email_by_id(emp_id INT)</span><br><span class="line">RETURNS VARCHAR(25)</span><br><span class="line">DETERMINISTIC</span><br><span class="line">CONTAINS SQL</span><br><span class="line">BEGIN</span><br><span class="line">	RETURN (SELECT email FROM employees WHERE employee_id &#x3D; emp_id);</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @emp_id &#x3D; 102;</span><br><span class="line">SELECT email_by_id(102);</span><br></pre></td></tr></table></figure>

<p><strong>举例3：</strong></p>
<p>创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION count_by_id(dept_id INT)</span><br><span class="line">RETURNS INT</span><br><span class="line">	LANGUAGE SQL</span><br><span class="line">	NOT DETERMINISTIC</span><br><span class="line">	READS SQL DATA</span><br><span class="line">	SQL SECURITY DEFINER</span><br><span class="line">	COMMENT &#39;查询部门平均工资&#39;</span><br><span class="line">BEGIN</span><br><span class="line">	RETURN (SELECT COUNT(*) FROM employees WHERE department_id &#x3D; dept_id);</span><br><span class="line">	</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @dept_id &#x3D; 50;</span><br><span class="line">SELECT count_by_id(@dept_id);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>若在创建存储函数中报错“<code>you might want to use the less safe log_bin_trust_function_creators variable</code>”，有两种处理方法：</p>
<ul>
<li>方式1：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”</li>
</ul>
<ul>
<li>方式2：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET GLOBAL log_bin_trust_function_creators &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h3 id="对比存储函数和存储过程"><a href="#对比存储函数和存储过程" class="headerlink" title="对比存储函数和存储过程"></a>对比存储函数和存储过程</h3><table>
<thead>
<tr>
<th></th>
<th>关键字</th>
<th>调用语法</th>
<th>返回值</th>
<th>应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>存储过程</td>
<td>PROCEDURE</td>
<td>CALL 存储过程()</td>
<td>理解为有0个或多个</td>
<td>一般用于更新</td>
</tr>
<tr>
<td>存储函数</td>
<td>FUNCTION</td>
<td>SELECT 函数()</td>
<td>只能是一个</td>
<td>一般用于查询结果为一个值并返回时</td>
</tr>
</tbody></table>
<p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p>
<h2 id="存储过程和函数的查看、修改、删除"><a href="#存储过程和函数的查看、修改、删除" class="headerlink" title="存储过程和函数的查看、修改、删除"></a>存储过程和函数的查看、修改、删除</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p>
<p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p>
<p><strong>1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</strong></p>
<p>基本语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; 存储过程名或函数名</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CREATE FUNCTION test_db.CountProc \G</span><br></pre></td></tr></table></figure>

<p><strong>2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</strong></p>
<p>基本语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE &#39;pattern&#39;]</span><br></pre></td></tr></table></figure>

<p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p>
<p>[LIKE ‘pattern’]：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的所有存储过程或函数的信息。<br>举例：SHOW STATUS语句示例，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW PROCEDURE STATUS LIKE &#39;SELECT%&#39; \G </span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  Db: test_db</span><br><span class="line">                Name: SelectAllData</span><br><span class="line">                Type: PROCEDURE</span><br><span class="line">             Definer: root@localhost</span><br><span class="line">            Modified: 2021-10-16 15:55:07</span><br><span class="line">             Created: 2021-10-16 15:55:07</span><br><span class="line">       Security_type: DEFINER</span><br><span class="line">             Comment: </span><br><span class="line">character_set_client: utf8mb4</span><br><span class="line">collation_connection: utf8mb4_general_ci</span><br><span class="line">  Database Collation: utf8mb4_general_ci</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>3. 从information_schema.Routines表中查看存储过程和函数的信息</strong></p>
<p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM information_schema.Routines</span><br><span class="line">WHERE ROUTINE_NAME&#x3D;&#39;存储过程或函数的名&#39; [AND ROUTINE_TYPE &#x3D; &#123;&#39;PROCEDURE|FUNCTION&#39;&#125;];</span><br></pre></td></tr></table></figure>

<p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来指明查询的是存储过程还是函数。</p>
<p>举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM information_schema.Routines</span><br><span class="line">WHERE ROUTINE_NAME&#x3D;&#39;count_by_id&#39;　AND　ROUTINE_TYPE &#x3D; &#39;FUNCTION&#39; \G</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER &#123;PROCEDURE | FUNCTION&#125; 存储过程或函数的名 [characteristic ...]</span><br></pre></td></tr></table></figure>

<p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</span><br><span class="line">| SQL SECURITY &#123; DEFINER | INVOKER &#125;</span><br><span class="line">| COMMENT &#39;string&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>CONTAINS SQL</code>，表示子程序包含SQL语句，但不包含读或写数据的语句。</li>
<li><code>NO SQL</code>，表示子程序中不包含SQL语句。</li>
<li><code>READS SQL DATA</code>，表示子程序中包含读数据的语句。</li>
<li><code>MODIFIES SQL DATA</code>，表示子程序中包含写数据的语句。</li>
<li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>，指明谁有权限来执行。<ul>
<li><code>DEFINER</code>，表示只有定义者自己才能够执行。</li>
<li><code>INVOKER</code>，表示调用者可以执行。</li>
</ul>
</li>
<li><code>COMMENT &#39;string&#39;</code>，表示注释信息。</li>
</ul>
<div class="note no-icon primary"><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。</p>
</div>

<p><strong>举例1：</strong></p>
<p>修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER　PROCEDURE　CountProc</span><br><span class="line">MODIFIES SQL DATA</span><br><span class="line">SQL SECURITY INVOKER ;</span><br></pre></td></tr></table></figure>

<p>查询修改后的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT specific_name,sql_data_access,security_type</span><br><span class="line">FROM information_schema.&#96;ROUTINES&#96;</span><br><span class="line">WHERE routine_name &#x3D; &#39;CountProc&#39; AND routine_type &#x3D; &#39;PROCEDURE&#39;;</span><br></pre></td></tr></table></figure>

<p>结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ ACCESS）已经变成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。</p>
<p><strong>举例2：</strong></p>
<p>修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER　FUNCTION　CountProc</span><br><span class="line">READS SQL DATA</span><br><span class="line">COMMENT &#39;FIND NAME&#39; ;</span><br></pre></td></tr></table></figure>

<p>存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP &#123;PROCEDURE | FUNCTION&#125; [IF EXISTS] 存储过程或函数的名</span><br></pre></td></tr></table></figure>

<p>IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE CountProc;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP FUNCTION CountProc;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p>
<p>在 MySQL 数据库中，变量分为<code>系统变量</code>以及<code>用户自定义变量</code>。</p>
<h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>变量由系统定义，不是用户定义，属于<code>服务器</code>层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是<code>编译MySQL时参数</code>的默认值，要么是<code>配置文件</code>（例如my.ini等）中的参数值。大家可以通过网址 <code>https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html</code> 查看MySQL文档的系统变量。</p>
<p>系统变量分为全局系统变量（需要添加<code>global</code> 关键字）以及会话系统变量（需要添加 <code>session</code> 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<strong>如果不写，默认会话级别。</strong>静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p>
<p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。</p>
<ul>
<li>全局系统变量针对于所有会话（连接）有效，但<code>重启之后失效</code>。</li>
<li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li>
<li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li>
</ul>
<p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p>
<h3 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h3><ul>
<li><strong>查看所有或部分系统变量</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line"></span><br><span class="line">#查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">或</span><br><span class="line">SHOW VARIABLES;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看满足条件的部分系统变量。</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%标识符%&#39;;</span><br><span class="line"></span><br><span class="line">#查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%标识符%&#39;;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;admin_%&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看指定系统变量</strong></li>
</ul>
<p>作为 MySQL 编码规范，MySQL 中的系统变量以<code>两个“@”</code>开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看指定的系统变量的值</span><br><span class="line">SELECT @@global.变量名;</span><br><span class="line"></span><br><span class="line">#查看指定的会话变量的值</span><br><span class="line">SELECT @@session.变量名;</span><br><span class="line">#或者</span><br><span class="line">SELECT @@变量名;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改系统变量的值</strong></li>
</ul>
<p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：</p>
<p>方式1：修改MySQL<code>配置文件</code>，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</p>
<p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#为某个系统变量赋值</span><br><span class="line">#方式1：</span><br><span class="line">SET @@global.变量名&#x3D;变量值;</span><br><span class="line">#方式2：</span><br><span class="line">SET GLOBAL 变量名&#x3D;变量值;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#为某个会话变量赋值</span><br><span class="line">#方式1：</span><br><span class="line">SET @@session.变量名&#x3D;变量值;</span><br><span class="line">#方式2：</span><br><span class="line">SET SESSION 变量名&#x3D;变量值;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @@global.autocommit;</span><br><span class="line">SET GLOBAL autocommit&#x3D;0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @@session.tx_isolation;</span><br><span class="line">SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET GLOBAL max_connections &#x3D; 1000;</span><br><span class="line">SELECT @@global.max_connections;</span><br></pre></td></tr></table></figure>

<h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以<code>一个“@”</code>开头。根据作用范围不同，又分为<code>会话用户变量</code>和<code>局部变量</code>。</p>
<ul>
<li><p>会话用户变量：作用域和会话变量一样，只对<code>当前连接</code>会话有效。</p>
</li>
<li><p>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在<code>存储过程和函数</code>中使用。</p>
</li>
</ul>
<h3 id="会话用户变量"><a href="#会话用户变量" class="headerlink" title="会话用户变量"></a>会话用户变量</h3><ul>
<li>变量的定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式1：“&#x3D;”或“:&#x3D;”</span><br><span class="line">SET @用户变量 &#x3D; 值;</span><br><span class="line">SET @用户变量 :&#x3D; 值;</span><br><span class="line"></span><br><span class="line">#方式2：“:&#x3D;” 或 INTO关键字</span><br><span class="line">SELECT @用户变量 :&#x3D; 表达式 [FROM 等子句];</span><br><span class="line">SELECT 表达式 INTO @用户变量  [FROM 等子句];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查看用户变量的值 （查看、比较、运算等）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @用户变量</span><br></pre></td></tr></table></figure>

<ul>
<li>举例</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET @a &#x3D; 1;</span><br><span class="line"></span><br><span class="line">SELECT @a;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @num :&#x3D; COUNT(*) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT @num;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT AVG(salary) INTO @avgsalary FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT @avgsalary;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT @big;  #查看某个未声明的变量时，将得到NULL值</span><br></pre></td></tr></table></figure>

<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>定义：可以使用<code>DECLARE</code>语句定义一个局部变量</p>
<p>作用域：仅仅在定义它的 BEGIN … END 中有效</p>
<p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">	#声明局部变量</span><br><span class="line">	DECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];</span><br><span class="line">	DECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];</span><br><span class="line"></span><br><span class="line">	#为局部变量赋值</span><br><span class="line">	SET 变量名1 &#x3D; 值;</span><br><span class="line">	SELECT 值 INTO 变量名2 [FROM 子句];</span><br><span class="line"></span><br><span class="line">	#查看局部变量的值</span><br><span class="line">	SELECT 变量1,变量2,变量3;</span><br><span class="line">END</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>1.定义变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE　myparam　INT　DEFAULT 100;</span><br></pre></td></tr></table></figure>

<p><strong>2.变量赋值</strong></p>
<p>方式1：一般用于赋简单的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET 变量名&#x3D;值;</span><br><span class="line">SET 变量名:&#x3D;值;</span><br></pre></td></tr></table></figure>

<p>方式2：一般用于赋表中的字段值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 字段名或表达式 INTO 变量名 FROM 表;</span><br></pre></td></tr></table></figure>

<p><strong>3.使用变量</strong>（查看、比较、运算等）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 局部变量名;</span><br></pre></td></tr></table></figure>

<p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE set_value()</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_name VARCHAR(25);</span><br><span class="line">	DECLARE sal DOUBLE(10,2);</span><br><span class="line">	</span><br><span class="line">	SELECT last_name,salary INTO emp_name,sal</span><br><span class="line">	FROM employees </span><br><span class="line">	WHERE employee_id &#x3D; 102;</span><br><span class="line">	</span><br><span class="line">	SELECT emp_name,sal;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式1：使用用户变量</span><br><span class="line">SET @m&#x3D;1;</span><br><span class="line">SET @n&#x3D;1;</span><br><span class="line">SET @sum&#x3D;@m+@n;</span><br><span class="line"></span><br><span class="line">SELECT @sum;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式2：使用局部变量</span><br><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE add_value()</span><br><span class="line">BEGIN</span><br><span class="line">	#局部变量</span><br><span class="line">	DECLARE m INT DEFAULT 1;</span><br><span class="line">	DECLARE n INT DEFAULT 3;</span><br><span class="line">	DECLARE SUM INT;</span><br><span class="line">	</span><br><span class="line">	SET SUM &#x3D; m+n;</span><br><span class="line">	SELECT SUM;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#声明</span><br><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)</span><br><span class="line">BEGIN</span><br><span class="line">	#声明局部变量</span><br><span class="line">	DECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;</span><br><span class="line">	DECLARE mgr_id INT;</span><br><span class="line">	</span><br><span class="line">	SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	SELECT manager_id INTO mgr_id FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	SELECT salary INTO mgr_sal FROM employees WHERE employee_id &#x3D; mgr_id;</span><br><span class="line">	SET dif_salary &#x3D; mgr_sal - emp_sal;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">SET @emp_id &#x3D; 102;</span><br><span class="line">CALL different_salary(@emp_id,@diff_sal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">SELECT @diff_sal;</span><br></pre></td></tr></table></figure>

<h3 id="对比会话用户变量与局部变量"><a href="#对比会话用户变量与局部变量" class="headerlink" title="对比会话用户变量与局部变量"></a>对比会话用户变量与局部变量</h3><table>
<thead>
<tr>
<th>作用域</th>
<th>定义位置</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>会话用户变量</td>
<td>当前会话</td>
<td>会话的任何地方，加@符号，不用指定类型</td>
</tr>
<tr>
<td>局部变量</td>
<td>定义它的BEGIN END中</td>
<td>BEGIN END的第一句话，一般不用加@,需要指定类型</td>
</tr>
</tbody></table>
<h2 id="定义条件与处理程序"><a href="#定义条件与处理程序" class="headerlink" title="定义条件与处理程序"></a>定义条件与处理程序</h2><p><code>定义条件</code>是事先定义程序执行过程中可能遇到的问题，<code>处理程序</code>定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p>
<p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p><strong>案例分析：</strong>创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE UpdateDataNoCondition()</span><br><span class="line">	BEGIN</span><br><span class="line">		SET @x &#x3D; 1;</span><br><span class="line">		UPDATE employees SET email &#x3D; NULL WHERE last_name &#x3D; &#39;Abel&#39;;</span><br><span class="line">		SET @x &#x3D; 2;</span><br><span class="line">		UPDATE employees SET email &#x3D; &#39;aabbel&#39; WHERE last_name &#x3D; &#39;Abel&#39;;</span><br><span class="line">		SET @x &#x3D; 3;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用存储过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL UpdateDataNoCondition();</span><br><span class="line">ERROR 1048 (23000): Column &#39;email&#39; cannot be null</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @x;</span><br><span class="line">+------+</span><br><span class="line">| @x   |</span><br><span class="line">+------+</span><br><span class="line">|   1  |</span><br><span class="line">+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。</p>
<h3 id="定义条件"><a href="#定义条件" class="headerlink" title="定义条件"></a>定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来。这个名字可以随后被用在定义处理程序的<code>DECLARE HANDLER</code>语句中。</p>
<p>定义条件使用DECLARE语句，语法格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）</span><br></pre></td></tr></table></figure>

<p>错误码的说明：</p>
<ul>
<li><code>MySQL_error_code</code>和<code>sqlstate_value</code>都可以表示MySQL的错误。<ul>
<li>MySQL_error_code是数值类型错误代码。</li>
<li>sqlstate_value是长度为5的字符串类型错误代码。</li>
</ul>
</li>
<li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li>
<li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</li>
</ul>
<p><strong>举例1：</strong>定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用MySQL_error_code</span><br><span class="line">DECLARE Field_Not_Be_NULL CONDITION FOR 1048;</span><br><span class="line"></span><br><span class="line">#使用sqlstate_value</span><br><span class="line">DECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE &#39;23000&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong>定义”ERROR 1148(42000)”错误，名称为command_not_allowed。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用MySQL_error_code</span><br><span class="line">DECLARE command_not_allowed CONDITION FOR 1148;</span><br><span class="line"></span><br><span class="line">#使用sqlstate_value</span><br><span class="line">DECLARE command_not_allowed CONDITION FOR SQLSTATE &#39;42000&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="定义处理程序"><a href="#定义处理程序" class="headerlink" title="定义处理程序"></a>定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>处理方式</strong>：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul>
<li><code>CONTINUE</code>：表示遇到错误不处理，继续执行。</li>
<li><code>EXIT</code>：表示遇到错误马上退出。</li>
<li><code>UNDO</code>：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li>
</ul>
</li>
<li><strong>错误类型</strong>（即条件）可以有如下取值：<ul>
<li><code>SQLSTATE &#39;字符串错误码&#39;</code>：表示长度为5的sqlstate_value类型的错误代码；</li>
<li><code>MySQL_error_code</code>：匹配数值类型错误代码；</li>
<li><code>错误名称</code>：表示DECLARE … CONDITION定义的错误条件名称。</li>
<li><code>SQLWARNING</code>：匹配所有以01开头的SQLSTATE错误代码；</li>
<li><code>NOT FOUND</code>：匹配所有以02开头的SQLSTATE错误代码；</li>
<li><code>SQLEXCEPTION</code>：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li>
</ul>
</li>
<li><strong>处理语句</strong>：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“<code>SET 变量 = 值</code>”这样的简单语句，也可以是使用<code>BEGIN ... END</code>编写的复合语句。</li>
</ul>
<p>定义处理程序的几种方式，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方法1：捕获sqlstate_value</span><br><span class="line">DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;42S02&#39; SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;</span><br><span class="line"></span><br><span class="line">#方法2：捕获mysql_error_value</span><br><span class="line">DECLARE CONTINUE HANDLER FOR 1146 SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;</span><br><span class="line"></span><br><span class="line">#方法3：先定义条件，再调用</span><br><span class="line">DECLARE no_such_table CONDITION FOR 1146;</span><br><span class="line">DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;</span><br><span class="line"></span><br><span class="line">#方法4：使用SQLWARNING</span><br><span class="line">DECLARE EXIT HANDLER FOR SQLWARNING SET @info &#x3D; &#39;ERROR&#39;;</span><br><span class="line"></span><br><span class="line">#方法5：使用NOT FOUND</span><br><span class="line">DECLARE EXIT HANDLER FOR NOT FOUND SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;</span><br><span class="line"></span><br><span class="line">#方法6：使用SQLEXCEPTION</span><br><span class="line">DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info &#x3D; &#39;ERROR&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="案例解决"><a href="#案例解决" class="headerlink" title="案例解决"></a>案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行CONTINUE操作，并且将@proc_value的值设置为-1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE UpdateDataNoCondition()</span><br><span class="line">	BEGIN</span><br><span class="line">		#定义处理程序</span><br><span class="line">		DECLARE CONTINUE HANDLER FOR 1048 SET @proc_value &#x3D; -1;</span><br><span class="line">		</span><br><span class="line">		SET @x &#x3D; 1;</span><br><span class="line">		UPDATE employees SET email &#x3D; NULL WHERE last_name &#x3D; &#39;Abel&#39;;</span><br><span class="line">		SET @x &#x3D; 2;</span><br><span class="line">		UPDATE employees SET email &#x3D; &#39;aabbel&#39; WHERE last_name &#x3D; &#39;Abel&#39;;</span><br><span class="line">		SET @x &#x3D; 3;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL UpdateDataWithCondition();</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @x,@proc_value;</span><br><span class="line">+------+-------------+</span><br><span class="line">| @x   | @proc_value |</span><br><span class="line">+------+-------------+</span><br><span class="line">|    3 |       	 -1  |</span><br><span class="line">+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>举例：</strong></p>
<p>创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。</p>
<p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操作，并且将@proc_value的值设置为-1。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#准备工作</span><br><span class="line">CREATE TABLE departments</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM atguigudb.&#96;departments&#96;;</span><br><span class="line"></span><br><span class="line">ALTER TABLE departments</span><br><span class="line">ADD CONSTRAINT uk_dept_name UNIQUE(department_id);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE InsertDataWithCondition()</span><br><span class="line">	BEGIN</span><br><span class="line">		DECLARE duplicate_entry CONDITION FOR SQLSTATE &#39;23000&#39; ;</span><br><span class="line">		DECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value &#x3D; -1;</span><br><span class="line">		</span><br><span class="line">		SET @x &#x3D; 1;</span><br><span class="line">		INSERT INTO departments(department_name) VALUES(&#39;测试&#39;);</span><br><span class="line">		SET @x &#x3D; 2;</span><br><span class="line">		INSERT INTO departments(department_name) VALUES(&#39;测试&#39;);</span><br><span class="line">		SET @x &#x3D; 3;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p>调用存储过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CALL InsertDataWithCondition();</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT @x,@proc_value;</span><br><span class="line">+------+-------------+</span><br><span class="line">| @x   | @proc_value |</span><br><span class="line">+------+-------------+</span><br><span class="line">|    2 |       	 -1  |</span><br><span class="line">+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p>
<ul>
<li><code>顺序结构</code>：程序从上往下依次执行</li>
<li><code>分支结构</code>：程序按条件进行选择执行，从两条或多条路径中选择一条执行</li>
<li><code>循环结构</code>：程序满足一定条件下，重复执行一组语句</li>
</ul>
<p>针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</p>
<ul>
<li><code>条件判断语句</code>：IF 语句和 CASE 语句</li>
<li><code>循环语句</code>：LOOP、WHILE 和 REPEAT 语句</li>
<li><code>跳转语句</code>：ITERATE 和 LEAVE 语句</li>
</ul>
<h2 id="分支结构之-IF"><a href="#分支结构之-IF" class="headerlink" title="分支结构之 IF"></a>分支结构之 IF</h2><ul>
<li>IF 语句的语法结构是：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF 表达式1 THEN 操作1</span><br><span class="line">[ELSEIF 表达式2 THEN 操作2]……</span><br><span class="line">[ELSE 操作N]</span><br><span class="line">END IF</span><br></pre></td></tr></table></figure>

<p>根据表达式的结果为TRUE或FALSE执行相应的语句。</p>
<ul>
<li><p><strong>举例1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF val IS NULL </span><br><span class="line">	THEN SELECT &#39;val is null&#39;;</span><br><span class="line">ELSE SELECT &#39;val is not null&#39;;</span><br><span class="line"></span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>举例2：</strong>声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_salary DOUBLE;</span><br><span class="line">	DECLARE hire_year DOUBLE;</span><br><span class="line"></span><br><span class="line">	SELECT salary INTO emp_salary FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	SELECT DATEDIFF(CURDATE(),hire_date)&#x2F;365 INTO hire_year</span><br><span class="line">	FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	IF emp_salary &lt; 8000 AND hire_year &gt; 5</span><br><span class="line">	THEN UPDATE employees SET salary &#x3D; salary + 500 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	END IF;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>举例3：</strong>声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_salary DOUBLE;</span><br><span class="line">	DECLARE hire_year DOUBLE;</span><br><span class="line"></span><br><span class="line">	SELECT salary INTO emp_salary FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	SELECT DATEDIFF(CURDATE(),hire_date)&#x2F;365 INTO hire_year</span><br><span class="line">	FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	IF emp_salary &lt; 8000 AND hire_year &gt; 5</span><br><span class="line">		THEN UPDATE employees SET salary &#x3D; salary + 500 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	ELSE </span><br><span class="line">		UPDATE employees SET salary &#x3D; salary + 100 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	END IF;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>举例4：</strong>声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_salary DOUBLE;</span><br><span class="line">	DECLARE bonus DECIMAL(3,2);</span><br><span class="line"></span><br><span class="line">	SELECT salary INTO emp_salary FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	SELECT commission_pct INTO bonus FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	IF emp_salary &lt; 9000</span><br><span class="line">		THEN UPDATE employees SET salary &#x3D; 9000 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	ELSEIF emp_salary &lt; 10000 AND bonus IS NULL</span><br><span class="line">		THEN UPDATE employees SET commission_pct &#x3D; 0.01 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	ELSE</span><br><span class="line">		UPDATE employees SET salary &#x3D; salary + 100 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	END IF;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="分支结构之-CASE"><a href="#分支结构之-CASE" class="headerlink" title="分支结构之 CASE"></a>分支结构之 CASE</h2><p>CASE 语句的语法结构1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#情况一：类似于switch</span><br><span class="line">CASE 表达式</span><br><span class="line">WHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">WHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">ELSE 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br></pre></td></tr></table></figure>

<p>CASE 语句的语法结构2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#情况二：类似于多重if</span><br><span class="line">CASE </span><br><span class="line">WHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">WHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">ELSE 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例1：</strong></li>
</ul>
<p>使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASE val</span><br><span class="line">　　　WHEN 1 THEN SELECT &#39;val is 1&#39;;</span><br><span class="line">　　　WHEN 2 THEN SELECT &#39;val is 2&#39;;</span><br><span class="line">　　　ELSE SELECT &#39;val is not 1 or 2&#39;;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例2：</strong></li>
</ul>
<p>使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CASE</span><br><span class="line">	WHEN val IS NULL THEN SELECT &#39;val is null&#39;;</span><br><span class="line">	WHEN val &lt; 0 THEN SELECT &#39;val is less than 0&#39;;</span><br><span class="line">	WHEN val &gt; 0 THEN SELECT &#39;val is greater than 0&#39;;</span><br><span class="line">	ELSE SELECT &#39;val is 0&#39;;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>举例3：</strong>声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_sal DOUBLE;</span><br><span class="line">	DECLARE bonus DECIMAL(3,2);</span><br><span class="line"></span><br><span class="line">	SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	SELECT commission_pct INTO bonus FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	CASE</span><br><span class="line">	WHEN emp_sal&lt;9000</span><br><span class="line">		THEN UPDATE employees SET salary&#x3D;9000 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	WHEN emp_sal&lt;10000 AND bonus IS NULL</span><br><span class="line">		THEN UPDATE employees SET commission_pct&#x3D;0.01 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	ELSE</span><br><span class="line">		UPDATE employees SET salary&#x3D;salary+100 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	END CASE;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年，薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE emp_sal DOUBLE;</span><br><span class="line">	DECLARE hire_year DOUBLE;</span><br><span class="line"></span><br><span class="line">	SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	</span><br><span class="line">	SELECT ROUND(DATEDIFF(CURDATE(),hire_date)&#x2F;365) INTO hire_year FROM employees WHERE employee_id &#x3D; emp_id;</span><br><span class="line"></span><br><span class="line">	CASE hire_year</span><br><span class="line">		WHEN 0 THEN UPDATE employees SET salary&#x3D;salary+50 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">		WHEN 1 THEN UPDATE employees SET salary&#x3D;salary+100 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">		WHEN 2 THEN UPDATE employees SET salary&#x3D;salary+200 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">		WHEN 3 THEN UPDATE employees SET salary&#x3D;salary+300 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">		WHEN 4 THEN UPDATE employees SET salary&#x3D;salary+400 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">		ELSE UPDATE employees SET salary&#x3D;salary+500 WHERE employee_id &#x3D; emp_id;</span><br><span class="line">	END CASE;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构之LOOP"><a href="#循环结构之LOOP" class="headerlink" title="循环结构之LOOP"></a>循环结构之LOOP</h2><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。</p>
<p>LOOP语句的基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[loop_label:] LOOP</span><br><span class="line">	循环执行的语句</span><br><span class="line">END LOOP [loop_label]</span><br></pre></td></tr></table></figure>

<p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p>
<p><strong>举例1：</strong></p>
<p>使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE id INT DEFAULT 0;</span><br><span class="line">add_loop:LOOP</span><br><span class="line">	SET id &#x3D; id +1;</span><br><span class="line">	IF id &gt;&#x3D; 10 THEN LEAVE add_loop;</span><br><span class="line">	END IF;</span><br><span class="line"></span><br><span class="line">END LOOP add_loop;</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_loop(OUT num INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE avg_salary DOUBLE;</span><br><span class="line">	DECLARE loop_count INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	SELECT AVG(salary) INTO avg_salary FROM employees;</span><br><span class="line">	</span><br><span class="line">	label_loop:LOOP</span><br><span class="line">		IF avg_salary &gt;&#x3D; 12000 THEN LEAVE label_loop;</span><br><span class="line">		END IF;</span><br><span class="line">		</span><br><span class="line">		UPDATE employees SET salary &#x3D; salary * 1.1;</span><br><span class="line">		SET loop_count &#x3D; loop_count + 1;</span><br><span class="line">		SELECT AVG(salary) INTO avg_salary FROM employees;</span><br><span class="line">	END LOOP label_loop;</span><br><span class="line">	</span><br><span class="line">	SET num &#x3D; loop_count;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构之WHILE"><a href="#循环结构之WHILE" class="headerlink" title="循环结构之WHILE"></a>循环结构之WHILE</h2><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[while_label:] WHILE 循环条件  DO</span><br><span class="line">	循环体</span><br><span class="line">END WHILE [while_label];</span><br></pre></td></tr></table></figure>

<p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p>
<p><strong>举例1：</strong></p>
<p>WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_while()</span><br><span class="line">BEGIN	</span><br><span class="line">	DECLARE i INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	WHILE i &lt; 10 DO</span><br><span class="line">		SET i &#x3D; i + 1;</span><br><span class="line">	END WHILE;</span><br><span class="line">	</span><br><span class="line">	SELECT i;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line">#调用</span><br><span class="line">CALL test_while();</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong>市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_while(OUT num INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE avg_sal DOUBLE ;</span><br><span class="line">	DECLARE while_count INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	SELECT AVG(salary) INTO avg_sal FROM employees;</span><br><span class="line">	</span><br><span class="line">	WHILE avg_sal &gt; 5000 DO</span><br><span class="line">		UPDATE employees SET salary &#x3D; salary * 0.9;</span><br><span class="line">		</span><br><span class="line">		SET while_count &#x3D; while_count + 1;</span><br><span class="line">		</span><br><span class="line">		SELECT AVG(salary) INTO avg_sal FROM employees;</span><br><span class="line">	END WHILE;</span><br><span class="line">	</span><br><span class="line">	SET num &#x3D; while_count;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="循环结构之REPEAT"><a href="#循环结构之REPEAT" class="headerlink" title="循环结构之REPEAT"></a>循环结构之REPEAT</h2><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p>
<p>REPEAT语句的基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[repeat_label:] REPEAT</span><br><span class="line">　　　　循环体的语句</span><br><span class="line">UNTIL 结束循环的条件表达式</span><br><span class="line">END REPEAT [repeat_label]</span><br></pre></td></tr></table></figure>

<p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。</p>
<p><strong>举例1：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_repeat()</span><br><span class="line">BEGIN	</span><br><span class="line">	DECLARE i INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	REPEAT </span><br><span class="line">		SET i &#x3D; i + 1;</span><br><span class="line">	UNTIL i &gt;&#x3D; 10</span><br><span class="line">	END REPEAT;</span><br><span class="line">	</span><br><span class="line">	SELECT i;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_repeat(OUT num INT)</span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE avg_sal DOUBLE ;</span><br><span class="line">	DECLARE repeat_count INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	SELECT AVG(salary) INTO avg_sal FROM employees;</span><br><span class="line">	</span><br><span class="line">	REPEAT</span><br><span class="line">		UPDATE employees SET salary &#x3D; salary * 1.15;</span><br><span class="line">		</span><br><span class="line">		SET repeat_count &#x3D; repeat_count + 1;</span><br><span class="line">		</span><br><span class="line">		SELECT AVG(salary) INTO avg_sal FROM employees;</span><br><span class="line">	UNTIL avg_sal &gt;&#x3D; 13000</span><br><span class="line">	END REPEAT;</span><br><span class="line">	</span><br><span class="line">	SET num &#x3D; repeat_count;</span><br><span class="line">		</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>对比三种循环结构：</strong></p>
<p>1、这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。<br>2、<br>LOOP：一般用于实现简单的”死”循环<br>WHILE：先判断后执行<br>REPEAT：先执行后判断，无条件至少执行一次</p>
<h2 id="跳转语句之LEAVE语句"><a href="#跳转语句之LEAVE语句" class="headerlink" title="跳转语句之LEAVE语句"></a>跳转语句之LEAVE语句</h2><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p>
<p>基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LEAVE 标记名</span><br></pre></td></tr></table></figure>

<p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p>
<p><strong>举例1：</strong>创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在BEGIN…END中使用IF语句判断num参数的值。</p>
<ul>
<li>如果num&lt;=0，则使用LEAVE语句退出BEGIN…END；</li>
<li>如果num=1，则查询“employees”表的平均薪资；</li>
<li>如果num=2，则查询“employees”表的最低薪资；</li>
<li>如果num&gt;2，则查询“employees”表的最高薪资。</li>
</ul>
<p>IF语句结束后查询“employees”表的总人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE leave_begin(IN num INT)</span><br><span class="line"></span><br><span class="line">	begin_label: BEGIN</span><br><span class="line">		IF num&lt;&#x3D;0 </span><br><span class="line">			THEN LEAVE begin_label;</span><br><span class="line">		ELSEIF num&#x3D;1 </span><br><span class="line">			THEN SELECT AVG(salary) FROM employees;</span><br><span class="line">		ELSEIF num&#x3D;2 </span><br><span class="line">			THEN SELECT MIN(salary) FROM employees;</span><br><span class="line">		ELSE </span><br><span class="line">			SELECT MAX(salary) FROM employees;</span><br><span class="line">		END IF;</span><br><span class="line">		</span><br><span class="line">		SELECT COUNT(*) FROM employees;</span><br><span class="line">	END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<p><strong>举例2：</strong></p>
<p>当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE leave_while(OUT num INT)</span><br><span class="line"></span><br><span class="line">BEGIN </span><br><span class="line">	#</span><br><span class="line">	DECLARE avg_sal DOUBLE;#记录平均工资</span><br><span class="line">	DECLARE while_count INT DEFAULT 0; #记录循环次数</span><br><span class="line">	</span><br><span class="line">	SELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件</span><br><span class="line">	</span><br><span class="line">	while_label:WHILE TRUE DO  #② 循环条件</span><br><span class="line">		</span><br><span class="line">		#③ 循环体</span><br><span class="line">		IF avg_sal &lt;&#x3D; 10000 THEN</span><br><span class="line">			LEAVE while_label;</span><br><span class="line">		END IF;</span><br><span class="line">		</span><br><span class="line">		UPDATE employees SET salary  &#x3D; salary * 0.9;</span><br><span class="line">		SET while_count &#x3D; while_count + 1;</span><br><span class="line">		</span><br><span class="line">		#④ 迭代条件</span><br><span class="line">		SELECT AVG(salary) INTO avg_sal FROM employees;</span><br><span class="line">	</span><br><span class="line">	END WHILE;</span><br><span class="line">	</span><br><span class="line">	#赋值</span><br><span class="line">	SET num &#x3D; while_count;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="跳转语句之ITERATE语句"><a href="#跳转语句之ITERATE语句" class="headerlink" title="跳转语句之ITERATE语句"></a>跳转语句之ITERATE语句</h2><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p>
<p>语句基本格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ITERATE label</span><br></pre></td></tr></table></figure>

<p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p>
<p><strong>举例：</strong>  定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p>
<ul>
<li>如果num &lt; 10，则继续执行循环；</li>
<li>如果num &gt; 15，则退出循环结构；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE test_iterate()</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE num INT DEFAULT 0;</span><br><span class="line">	</span><br><span class="line">	my_loop:LOOP</span><br><span class="line">		SET num &#x3D; num + 1;</span><br><span class="line">	</span><br><span class="line">		IF num &lt; 10 </span><br><span class="line">			THEN ITERATE my_loop;</span><br><span class="line">		ELSEIF num &gt; 15 </span><br><span class="line">			THEN LEAVE my_loop;</span><br><span class="line">		END IF;</span><br><span class="line">	</span><br><span class="line">		SELECT &#39;尚硅谷：让天下没有难学的技术&#39;;</span><br><span class="line">	</span><br><span class="line">	END LOOP my_loop;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><h2 id="使用游标步骤"><a href="#使用游标步骤" class="headerlink" title="使用游标步骤"></a>使用游标步骤</h2><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。</p>
<p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p>
<p><strong>第一步，声明游标</strong></p>
<p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE cursor_name CURSOR FOR select_statement; </span><br></pre></td></tr></table></figure>

<p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE cursor_name CURSOR IS select_statement;</span><br></pre></td></tr></table></figure>

<p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE cur_emp CURSOR FOR </span><br><span class="line">SELECT employee_id,salary FROM employees;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE cursor_fruit CURSOR FOR </span><br><span class="line">SELECT f_name, f_price FROM fruits ;</span><br></pre></td></tr></table></figure>

<p><strong>第二步，打开游标</strong></p>
<p>打开游标的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPEN cursor_name</span><br></pre></td></tr></table></figure>

<p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的<code>逐条读取</code>结果集中的记录做准备。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPEN　cur_emp ;</span><br></pre></td></tr></table></figure>

<p><strong>第三步，使用游标（从游标中取得数据）</strong></p>
<p>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br></pre></td></tr></table></figure>

<p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p>
<p>注意：var_name必须在声明游标之前就定义好。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FETCH　cur_emp INTO emp_id, emp_sal ;</span><br></pre></td></tr></table></figure>

<p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时候，MySQL 会提示错误。</p>
<p><strong>第四步，关闭游标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CLOSE cursor_name</span><br></pre></td></tr></table></figure>

<p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会<code>占用系统资源</code>，如果不及时关闭，<strong>游标会一直保持到存储过程结束</strong>，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。</p>
<p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CLOSE　cur_emp;</span><br></pre></td></tr></table></figure>

<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">	DECLARE sum_salary DOUBLE DEFAULT 0;  #记录累加的总工资</span><br><span class="line">	DECLARE cursor_salary DOUBLE DEFAULT 0; #记录某一个工资值</span><br><span class="line">	DECLARE emp_count INT DEFAULT 0; #记录循环个数</span><br><span class="line">	#定义游标</span><br><span class="line">	DECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;</span><br><span class="line">	#打开游标</span><br><span class="line">	OPEN emp_cursor;</span><br><span class="line">	</span><br><span class="line">	REPEAT</span><br><span class="line">		#使用游标（从游标中获取数据）</span><br><span class="line">		FETCH emp_cursor INTO cursor_salary;</span><br><span class="line">		</span><br><span class="line">		SET sum_salary &#x3D; sum_salary + cursor_salary;</span><br><span class="line">		SET emp_count &#x3D; emp_count + 1;</span><br><span class="line">		</span><br><span class="line">		UNTIL sum_salary &gt;&#x3D; limit_total_salary</span><br><span class="line">	END REPEAT;</span><br><span class="line">	</span><br><span class="line">	SET total_count &#x3D; emp_count;</span><br><span class="line">	#关闭游标</span><br><span class="line">	CLOSE emp_cursor;</span><br><span class="line">	</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>游标是 MySQL 的一个重要的功能，为<code>逐条读取</code>结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。</p>
<p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行<code>加锁</code>，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会<code>消耗系统资源</code>，造成内存不足，这是因为游标是在内存中进行的处理。</p>
<p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba Nacos</title>
    <url>/2021/08/25/Spring-Cloud-Alibaba-Nacos/</url>
    <content><![CDATA[<h1 id="Nacos能做什么"><a href="#Nacos能做什么" class="headerlink" title="Nacos能做什么?"></a>Nacos能做什么?</h1><p>Nacos（官网：nacos.io）是一个易于使用的平台，专为动态服务发现和配置以及服务管理而设计。它可以帮助您轻松构建云原生应用程序和微服务平台。 服务是Nacos的关键。 Nacos 支持几乎所有类型的服务，例如，Dubbo/gRPC 服务、Spring Cloud RESTFul 服务或 Kubernetes 服务。</p>
<p>Nacos 提供了四大主要功能。</p>
<ul>
<li><p><strong>服务发现和服务健康检查</strong></p>
<p>Nacos 使服务通过 DNS 或 HTTP 接口注册自己和发现其他服务变得简单。 Nacos 还提供服务的实时健康检查，以防止向不健康的主机或服务实例发送请求。</p>
</li>
<li><p><strong>动态配置管理</strong></p>
<p>动态配置服务允许您在所有环境中以集中和动态的方式管理所有服务的配置。 Nacos 无需在更新配置时重新部署应用程序和服务，这使得配置更改更加高效和敏捷。</p>
</li>
<li><p><strong>动态 DNS 服务</strong></p>
<p>Nacos 支持加权路由，让您更容易在数据中心内的生产环境中实现中层负载均衡、灵活的路由策略、流量控制和简单的 DNS 解析服务。它可以帮助您轻松实现基于 DNS 的服务发现，并防止应用程序耦合到特定于供应商的服务发现 API。</p>
</li>
<li><p><strong>服务和元数据管理</strong></p>
<p>Nacos 提供了一个易于使用的服务仪表板，帮助您管理您的服务元数据、配置、kubernetes DNS、服务健康和指标统计。 </p>
</li>
</ul>
<p><strong>本文主要讲讲Nacos作为注册中心和Nacos作为配置中心的使用</strong></p>
<hr>
<h1 id="Nacos-地图"><a href="#Nacos-地图" class="headerlink" title="Nacos 地图"></a>Nacos 地图</h1><p>一图看懂 Nacos</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosMap.png"></p>
<hr>
<h1 id="Nacos-快速开始"><a href="#Nacos-快速开始" class="headerlink" title="Nacos 快速开始"></a>Nacos 快速开始</h1><h2 id="预备环境准备"><a href="#预备环境准备" class="headerlink" title="预备环境准备"></a>预备环境准备</h2><p>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">Java</a> 环境来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html">Maven</a>环境，请确保是在以下版本环境中安装使用:</p>
<ol>
<li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li>
<li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li>
<li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a>。</li>
</ol>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>您可以从 <a href="https://github.com/alibaba/nacos/releases">最新稳定版本</a> 下载 <code>nacos-server-$version.zip</code> 包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip nacos-server-<span class="variable">$version</span>.zip 或者 tar -xvf nacos-server-<span class="variable">$version</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nacos/bin</span><br></pre></td></tr></table></figure>

<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><h3 id="Linux-Unix-Mac"><a href="#Linux-Unix-Mac" class="headerlink" title="Linux/Unix/Mac"></a>Linux/Unix/Mac</h3><p>启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>启动命令(standalone代表着单机模式运行，非集群模式):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<p>或双击bin中的startup.cmd 文件</p>
<p>访问<a href="http://localhost:8848/nacos/">http://localhost:8848/nacos/</a><br> 账户密码使用默认的nacos/nacos 进行登录</p>
<hr>
<h2 id="SpringCloud-Alibaba-Nacos-作为注册中心"><a href="#SpringCloud-Alibaba-Nacos-作为注册中心" class="headerlink" title="SpringCloud Alibaba-Nacos[作为注册中心]"></a>SpringCloud Alibaba-Nacos[作为注册中心]</h2><h3 id="首先，修改pom-xml-文件，引入Nacos-Discovery-Starter。"><a href="#首先，修改pom-xml-文件，引入Nacos-Discovery-Starter。" class="headerlink" title="首先，修改pom.xml 文件，引入Nacos Discovery Starter。"></a>首先，修改pom.xml 文件，引入Nacos Discovery Starter。</h3><p>如果要在您的项目中使用 Nacos 来实现服务注册/发现，使用 group ID 为 <code>com.alibaba.cloud</code> 和 artifact ID 为 <code>spring-cloud-starter-alibaba-nacos-discovery</code> 的 starter。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改application-yml配置"><a href="#修改application-yml配置" class="headerlink" title="修改application.yml配置"></a>修改application.yml配置</h3><ul>
<li>在应用application.yml配置文件中配置Nacos Server 地址</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">	<span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">	  <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">		<span class="meta">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在应用application.yml配置文件中配置服务的名称</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos服务地址</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">  	<span class="attr">name</span>: <span class="string">product</span></span><br></pre></td></tr></table></figure>

<h3 id="通过Spring-Cloud原生注解-EnableDiscoveryClient-开启服务注册发现功能"><a href="#通过Spring-Cloud原生注解-EnableDiscoveryClient-开启服务注册发现功能" class="headerlink" title="通过Spring Cloud原生注解 @EnableDiscoveryClient 开启服务注册发现功能"></a>通过Spring Cloud原生注解 <code>@EnableDiscoveryClient</code> 开启服务注册发现功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/startApplication.png"></p>
<p>启动成功后再去nacos服务列表里，观察nacos 服务列表是否已经注册上服务，如下图所示已经注册上了</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosservices.png"></p>
<hr>
<h2 id="SpringCloud-Alibaba-Nacos-作为配置中心"><a href="#SpringCloud-Alibaba-Nacos-作为配置中心" class="headerlink" title="SpringCloud Alibaba-Nacos[作为配置中心]"></a>SpringCloud Alibaba-Nacos[作为配置中心]</h2><p>我们先了解一下 Spring Cloud 应用如何接入 Nacos Config，步骤如下</p>
<ol>
<li><p>首先，修改 pom.xml 文件，引入 Nacos Config Starter。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>在应用的 /src/main/resources/bootstrap.properties 配置文件中配置 Nacos Config 元数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.application.name=nacos-config-example</span><br><span class="line">spring.cloud.nacos.config.server-addr=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8848</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>需要给配置中心默认添加一个叫数据集（Data Id）gulimall-coupon.properties。默认规则，应用名.properties</p>
</li>
<li><p>给应用名.properties中添加配置</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosconfig.png"></p>
</li>
<li><p>完成上述步骤后，应用会从 Nacos Config 中获取相应的配置，并添加在 Spring Environment 的 PropertySources 中。这里我们使用 @Value 注解来将对应的配置注入到 SampleController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line">	String userName;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h3><p><strong>1）命名空间</strong></p>
<p>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的Group 或Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p>
<p>默认：public（保留空间）；默认新增的所有配置都在public</p>
<ul>
<li><p>开发，测试，生产：利用命名空间来做环境隔离</p>
</li>
<li><p>我们需要在我们的项目的bootstrap.properties配置上我们需要使用的命名空间配置。<strong>namespace一定要写命名空间的唯一id</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/bootstrapproperties1.png"></p>
</li>
</ul>
<p>每一个微服务之间相互隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置。</p>
<p><strong>2）配置集</strong></p>
<p>一组相关或不相关的配置项的集合称为配置集。在系统中一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p>
<p><strong>3）配置集ID</strong></p>
<p>Data ID：类似于文件名</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosconfigid.png"></p>
<p><strong>4）配置分组</strong></p>
<p>默认所有的配置集都属于：DEFAULT_GROUP</p>
<p>我们也可以创建自己的分组例如1111,618,1212</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosconfiggroup.png"></p>
<p>然后在项目的bootstrap.properties文件中指定分组</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosconfiggroup1.png"></p>
<hr>
<h3 id="实际项目中的应用"><a href="#实际项目中的应用" class="headerlink" title="实际项目中的应用"></a><strong>实际项目中的应用</strong></h3><p>每个微服务创建自己的命名空间，使用配置分组来区分开发环境，如dev，test，prod。</p>
<hr>
<h3 id="同时加载多个配置集"><a href="#同时加载多个配置集" class="headerlink" title="同时加载多个配置集"></a>同时加载多个配置集</h3><p>微服务的任何配置信息，任何配置文件都可以放在配置中心中</p>
<p>例如我们要读取配置中心的datasource.yml、mybatis.yml、 others.yml三个配置文件</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosconfigfile.png"></p>
<p>在项目中进行读取，如下图所示</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/SpringCloudAlibabaNacos/nacosreadfile.png"></p>
]]></content>
      <categories>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Spring Cloud Alibaba</tag>
        <tag>Nacos</tag>
        <tag>注册中心</tag>
        <tag>配置中心</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas教程</title>
    <url>/2023/08/21/Pandas%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>pandas 是一个 Python 包，它提供快速、灵活且富有表现力的数据结构，旨在使“关系”或“标记”数据的处理变得简单直观。 它的目标是成为用 Python 进行实际、真实世界数据分析的基本高级构建块。 此外，它还有更广泛的目标，即成为任何语言中最强大、最灵活的开源数据分析/操作工具。 它已经在朝着这个目标前进。</p>
<p>pandas 非常适合下列这些类型的数据：</p>
<ul>
<li>具有异构类型列的表格数据，如 SQL 表或 Excel 电子表格</li>
<li>有序和无序（不一定是固定频率）时间序列数据</li>
<li>带有行和列标签的任意矩阵数据（同质类型或异构）</li>
<li>任何其他形式的观察/统计数据集。数据根本不需要被标记就可以放入 pandas 数据结构中</li>
</ul>
<h1 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h1><p>pandas 的两种主要数据结构<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series"><code>Series</code></a>（一维）和<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a>（二维）处理金融、统计、社会科学和许多工程领域的绝大多数典型用例。对于 R 用户，<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a>提供 R <code>data.frame</code>提供的一切以及更多。<a href="https://numpy.org/">pandas 构建在NumPy</a>之上，旨在与许多其他第三方库在科学计算环境中良好集成。</p>
<p>以下是 <code>pandas</code> 擅长的一些事情：</p>
<ul>
<li>轻松处理浮点和非浮点数据中的缺失数据（表示为 <code>NaN</code>、<code>NA</code>或<code>NaT</code>）</li>
<li>大小可变性：可以从 <code>DataFrame</code> 和更高维对象中插入和删除列</li>
<li>自动和精确的数据对齐：对象可以准确地与一组数据对齐，或者用户可以简单地忽略数据并让<code>Series</code>、<code>DataFrame</code>等在计算中自动为您对齐数据</li>
<li>强大、灵活的分组功能，可对数据集执行拆分-应用-组合操作，以聚合和转换数据</li>
<li>可以轻松地将其他 <code>Python</code> 和 <code>NumPy</code> 数据结构中的不规则、不同索引的数据转换为 <code>DataFrame</code> 对象</li>
<li>基于智能标签的切片、高级索引和大数据集的子集</li>
<li>直观的合并和连接数据集</li>
<li>灵活的重塑和翻转数据集</li>
<li>坐标轴的分层标签（每个刻度可能有多个标签）</li>
<li>强大的<code>IO</code>工具，用于从平面文件<code>(CSV and delimited</code>)、<code>Excel</code>文件、数据集以及从超快<code>HDF5</code>格式保存或加载的数据</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>pandas 可以通过<a href="https://pypi.org/project/pandas">PyPI</a>中的 pip 安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<h1 id="pandas-处理什么样的数据？"><a href="#pandas-处理什么样的数据？" class="headerlink" title="pandas 处理什么样的数据？"></a>pandas 处理什么样的数据？</h1><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h2 id="pandas-数据表表示"><a href="#pandas-数据表表示" class="headerlink" title="pandas 数据表表示"></a>pandas 数据表表示</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/table_dataframe.png" style="zoom: 50%;" />

<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(</span><br><span class="line">    &#123;<span class="string">&quot;Name&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">            <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;Age&quot;</span>: [<span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>],</span><br><span class="line">        <span class="string">&quot;Sex&quot;</span>: [<span class="string">&quot;男&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;女&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(df)</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/dataframe_print.png" style="zoom:50%;" />

<p>在电子表格软件中，我们数据的表格表示看起来非常相似：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/df_excel.png" style="zoom:50%;" />

<h2 id="DataFrame中每一列都是一个-Series"><a href="#DataFrame中每一列都是一个-Series" class="headerlink" title="DataFrame中每一列都是一个 Series"></a>DataFrame中每一列都是一个 Series</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/01_table_series.png" style="zoom:50%;" />

<p>如果只对<code>Name</code>这一列的数据感兴趣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pring(df[<span class="string">&quot;Age&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0    22</span><br><span class="line">1    24</span><br><span class="line">2    26</span><br><span class="line">Name: Age, dtype: int64</span><br></pre></td></tr></table></figure>

<p>当选择<code>DataFrame</code>中的单列时，结果是 <code>Series</code>。要选择列，请使用方括号之间的列标签<code>[]</code>。</p>
<p>创建<code>Series</code>：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ages = pd.Series([<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], name=<span class="string">&quot;Age&quot;</span>)</span><br><span class="line">print(ages)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0    20</span><br><span class="line">1    30</span><br><span class="line">2    40</span><br><span class="line">Name: Age, dtype: int64</span><br></pre></td></tr></table></figure>

<h2 id="使用-DataFrame-或-Series-做一些事情"><a href="#使用-DataFrame-或-Series-做一些事情" class="headerlink" title="使用 DataFrame 或 Series 做一些事情"></a>使用 DataFrame 或 Series 做一些事情</h2><p>我想知道谁的年龄最大？</p>
<p><code>DataFrame</code>我们可以通过选择<code>Age</code>列并应用<code>max()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ages = pd.Series([<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], name=<span class="string">&quot;Age&quot;</span>)</span><br><span class="line">print(ages.<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">40</span><br></pre></td></tr></table></figure>

<p><code>DataFrame</code>和<code>Series</code>还有许多其他函数供我们使用，可以通过下面链接进行查看。</p>
<p><a href="https://pandas.pydata.org/docs/reference/series.html">Series</a></p>
<p><a href="https://pandas.pydata.org/docs/reference/frame.html">DataFrame</a></p>
<p>假如我们只对数据表的数值数据的一些基本统计感兴趣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.describe())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        Age</span><br><span class="line">count   3.0</span><br><span class="line">mean   24.0</span><br><span class="line">std     2.0</span><br><span class="line">min    22.0</span><br><span class="line">25%    23.0</span><br><span class="line">50%    24.0</span><br><span class="line">75%    25.0</span><br><span class="line">max    26.0</span><br></pre></td></tr></table></figure>

<p><code>describe()</code> 方法可快速浏览 <code>DataFrame</code> 中的数字数据。由于<code>Name</code>和<code>Sex</code>列是文本数据，因此 <code>describe()</code> 方法默认不考虑这两列。</p>
<hr>
<h1 id="如何读写表格数据？"><a href="#如何读写表格数据？" class="headerlink" title="如何读写表格数据？"></a>如何读写表格数据？</h1><p>数据集：</p>
<p>本教程使用<a href="https://www.kaggle.com/datasets/uciml/adult-census-income?resource=download">成人人口普查收入</a>数据集，存储为 <code>csv 文件</code>。如下所示:</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/dataframe_dataset.png"></p>
<p><code>Pandas</code>提供了<code>read_csv()</code>函数将Excel文件读取为<code>DataFrame</code>对象。</p>
<p><code>pandas</code> 支持许多不同的文件格式或开箱即用的数据源（<code>csv</code>、<code>excel</code>、<code>sql</code>、<code>json</code>、<code>parquet</code>…），读取每个文件格式或数据源都使用带有前缀<code>read_*</code>的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_csv(<span class="string">&quot;data/adult.csv&quot;</span>)</span><br><span class="line">print(adult)</span><br></pre></td></tr></table></figure>

<p>Out：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/read_excel.png"></p>
<p>请确保读完数据之后总是有一个数据检查。显示 <code>DataFrame</code> 时，默认显示前 5 行和后 5 行。</p>
<p>要查看 DataFrame 的前 N 行，请使用该 <code>head()</code> 方法并以所需的行数作为参数。</p>
<p>我想查看 <code>pandas</code> <code>DataFrame</code> 的前 8 行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult.head(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   age  workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">0   90          ?   77053  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">1   82    Private  132870  ...             18   United-States  &lt;&#x3D;50K</span><br><span class="line">2   66          ?  186061  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">3   54    Private  140359  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">4   41    Private  264663  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">5   34    Private  216864  ...             45   United-States  &lt;&#x3D;50K</span><br><span class="line">6   38    Private  150601  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">7   74  State-gov   88638  ...             20   United-States   &gt;50K</span><br></pre></td></tr></table></figure>

<p>对最后 N 行感兴趣吗？pandas也提供了一种  <code>tail() </code>方法。例如，<code>adult.tail(10)</code>将返回 <code>DataFrame</code> 的最后 10 行。</p>
<p>可以通过请求 <code>pandas</code>  <code>dtypes</code> 属性来检查 <code>pandas</code> 如何解释每个列数据类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult.dtypes)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age                int64</span><br><span class="line">workclass         object</span><br><span class="line">fnlwgt             int64</span><br><span class="line">education         object</span><br><span class="line">education.num      int64</span><br><span class="line">marital.status    object</span><br><span class="line">occupation        object</span><br><span class="line">relationship      object</span><br><span class="line">race              object</span><br><span class="line">sex               object</span><br><span class="line">capital.gain       int64</span><br><span class="line">capital.loss       int64</span><br><span class="line">hours.per.week     int64</span><br><span class="line">native.country    object</span><br><span class="line">income            object</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure>

<p>对于每一列，都会列出所使用的数据类型。其中的数据类型<code>DataFrame</code>为整数 ( <code>int64</code>)和字符串 ( <code>object</code>)。</p>
<p>将<code>DataFrame</code>保存为Excel文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adult.to_excel(&quot;adult.xlsx&quot;, sheet_name&#x3D;&quot;person&quot;, index&#x3D;False)</span><br></pre></td></tr></table></figure>

<p><code> read_*</code>函数常用于读取函数到<code>Pandas</code>中，而<code>to_*</code>函数常用于存储数据。</p>
<p>该<code>to_excel()</code>方法将数据存储为 <code>Excel</code> 文件。在此示例中，<code>sheet_name</code>名为<em>“person”</em>而不是默认的<em>“Sheet1”</em>。通过设置 <code>index=False</code>行索引标签不会保存在电子表格中。</p>
<p>读取函数<code>read_excel()</code>会将数据重新加载到 <code>DataFrame</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_excel(<span class="string">&quot;adult.xlsx&quot;</span>)</span><br><span class="line">print(adult)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       age workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">0       90         ?   77053  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">1       82   Private  132870  ...             18   United-States  &lt;&#x3D;50K</span><br><span class="line">2       66         ?  186061  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">3       54   Private  140359  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">4       41   Private  264663  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">...    ...       ...     ...  ...            ...             ...    ...</span><br><span class="line">32556   22   Private  310152  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">32557   27   Private  257302  ...             38   United-States  &lt;&#x3D;50K</span><br><span class="line">32558   40   Private  154374  ...             40   United-States   &gt;50K</span><br><span class="line">32559   58   Private  151910  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">32560   22   Private  201490  ...             20   United-States  &lt;&#x3D;50K</span><br></pre></td></tr></table></figure>

<p>我对 <code>DataFrame</code> 的技术摘要感兴趣</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult.info())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</span><br><span class="line">RangeIndex: 32561 entries, 0 to 32560</span><br><span class="line">Data columns (total 15 columns):</span><br><span class="line"> #   Column          Non-Null Count  Dtype </span><br><span class="line">---  ------          --------------  ----- </span><br><span class="line"> 0   age             32561 non-null  int64 </span><br><span class="line"> 1   workclass       32561 non-null  object</span><br><span class="line"> 2   fnlwgt          32561 non-null  int64 </span><br><span class="line"> 3   education       32561 non-null  object</span><br><span class="line"> 4   education.num   32561 non-null  int64 </span><br><span class="line"> 5   marital.status  32561 non-null  object</span><br><span class="line"> 6   occupation      32561 non-null  object</span><br><span class="line"> 7   relationship    32561 non-null  object</span><br><span class="line"> 8   race            32561 non-null  object</span><br><span class="line"> 9   sex             32561 non-null  object</span><br><span class="line"> 10  capital.gain    32561 non-null  int64 </span><br><span class="line"> 11  capital.loss    32561 non-null  int64 </span><br><span class="line"> 12  hours.per.week  32561 non-null  int64 </span><br><span class="line"> 13  native.country  32561 non-null  object</span><br><span class="line"> 14  income          32561 non-null  object</span><br><span class="line">dtypes: int64(6), object(9)</span><br><span class="line">memory usage: 3.7+ MB</span><br></pre></td></tr></table></figure>

<p><code>info()</code>方法提供了有关 <code>DataFrame</code> 的技术信息 ，因此让我们对输出作出更详细地解释：</p>
<ul>
<li>它确实是一个<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><code>DataFrame</code></a></li>
<li>有 32561 个<code>entries</code>，即 32561 行</li>
<li>每行都有一个行标签（也称为<code>index</code>），其值范围为 0 到 32560</li>
<li>该表有 15列。大多数列的每一行都有一个值（所有 32561 个值都是<code>non-null</code>）</li>
<li><code>workclass</code> <code>education</code> <code>marital.status</code> <code>occupation</code> <code>relationship</code>  <code>race</code> <code>sex</code> <code>native.country</code> <code>income</code>列都是由文本数据组成（String 又称 Object）</li>
<li>其他列是数值数据，其中一些是整数（又名<code>integer</code>）</li>
<li>不同列中的数据类型（字符、整数……）通过<code>dtypes</code>列出</li>
<li>还提供了用于保存 DataFrame 的大致 RAM </li>
</ul>
<hr>
<h1 id="选择DataFrame的子集"><a href="#选择DataFrame的子集" class="headerlink" title="选择DataFrame的子集"></a>选择DataFrame的子集</h1><h2 id="如何选择DataFrame的特定列？"><a href="#如何选择DataFrame的特定列？" class="headerlink" title="如何选择DataFrame的特定列？"></a>如何选择DataFrame的特定列？</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/03_subset_columns.png" style="zoom:50%;" />

<p>假如我们只对<code>Age</code>感兴趣:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_excel(<span class="string">&quot;adult.xlsx&quot;</span>)</span><br><span class="line">adult_subset = adult.head()</span><br><span class="line">print(adult_subset[<span class="string">&quot;age&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0    90</span><br><span class="line">1    82</span><br><span class="line">2    66</span><br><span class="line">3    54</span><br><span class="line">4    41</span><br><span class="line">Name: age, dtype: int64</span><br></pre></td></tr></table></figure>

<p><code>DataFrame</code> 中的每一列都是一个<code>Series</code>。当选择单个列时，返回的对象是 <code>pandas Series</code>。我们可以通过检查输出的类型来验证这一点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">type</span>(adult[<span class="string">&quot;age&quot;</span>]))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;pandas.core.series.Series&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>看看<code>shape</code>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult[<span class="string">&quot;age&quot;</span>].shape)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(5,)</span><br></pre></td></tr></table></figure>

<p><code>DataFrame.shape</code>是 <code>Series</code>、<code>DataFram</code> 的一个属性。<code>DataFrame</code>包含行数和列数：(nrows, ncolumns)。pandas <code>Series</code> 是一维的，仅返回行数。</p>
<p>假如对年龄和性别感兴趣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age_sex = adult[[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>]]</span><br><span class="line">print(age_sex)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   age     sex</span><br><span class="line">0   90  Female</span><br><span class="line">1   82  Female</span><br><span class="line">2   66  Female</span><br><span class="line">3   54  Female</span><br><span class="line">4   41  Female</span><br></pre></td></tr></table></figure>

<div class="note success no-icon"><p>要选择多个列，请在选择括号内使用列名称列表<code>[]</code>。</p>
</div>



<p>返回的数据类型是 <code>pandas DataFrame</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">type</span>(age_sex))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>In:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(age_sex.shape)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(5, 2)</span><br></pre></td></tr></table></figure>

<p>返回的<code>DataFrame</code>具有5 行 2 列。</p>
<hr>
<h2 id="如何选择DataFrame的特定行？"><a href="#如何选择DataFrame的特定行？" class="headerlink" title="如何选择DataFrame的特定行？"></a>如何选择DataFrame的特定行？</h2><p>假如对 60岁以上的客户感兴趣。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult[adult[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">60</span>])</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   age workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">0   90         ?   77053  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">1   82   Private  132870  ...             18   United-States  &lt;&#x3D;50K</span><br><span class="line">2   66         ?  186061  ...             40   United-States  &lt;&#x3D;50K</span><br></pre></td></tr></table></figure>

<p>括号内的条件 <code>adult[&quot;age&quot;] &gt; 60</code> 检查哪些行 <code>Age</code> 列的值大于 60：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0     True</span><br><span class="line">1     True</span><br><span class="line">2     True</span><br><span class="line">3    False</span><br><span class="line">4    False</span><br><span class="line">Name: age, dtype: bool</span><br></pre></td></tr></table></figure>

<p>条件表达式（也可以是 <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,… ）的输出实际上是一组<code>pandas Series</code>的布尔值（<code>True</code>或<code>False</code>），</p>
<p>其行数与原始 <code>DataFrame</code> 相同 。这样的一系列布尔值可用于将其放在选择括号 [] 之间来过滤 DataFrame， 仅选择值为 <code>True</code> 的行。</p>
<p>假如我们只对<code>native.country</code>是<code>China</code>和<code>India</code>的用户感兴趣。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">country = adult[adult[<span class="string">&quot;native.country&quot;</span>].isin([<span class="string">&quot;China&quot;</span>, <span class="string">&quot;India&quot;</span>])]</span><br><span class="line">print(country.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     age         workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">63    51  Self-emp-not-inc  160724  ...             40           China   &gt;50K</span><br><span class="line">90    39           Private  198654  ...             67           India   &gt;50K</span><br><span class="line">214   42      Self-emp-inc   23510  ...             60           India   &gt;50K</span><br><span class="line">244   64           Private  149044  ...             60           China  &lt;&#x3D;50K</span><br><span class="line">377   30           Private  315640  ...             40           China   &gt;50K</span><br></pre></td></tr></table></figure>

<p>与条件表达式类似，<code>isin()</code> 条件函数为匹配条件列表中的每一行返回 <code>True</code>。要根据此类函数过滤行，请使用括号内的条件函数，括号内的条件函数检查<code>native.country</code>是<code>China</code>或<code>India</code>的行。</p>
<p>与下列等价:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">country = adult[(adult[<span class="string">&quot;native.country&quot;</span>] == <span class="string">&quot;China&quot;</span>) | (adult[<span class="string">&quot;native.country&quot;</span>] == <span class="string">&quot;India&quot;</span>)]</span><br><span class="line">print(country.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     age         workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">63    51  Self-emp-not-inc  160724  ...             40           China   &gt;50K</span><br><span class="line">90    39           Private  198654  ...             67           India   &gt;50K</span><br><span class="line">214   42      Self-emp-inc   23510  ...             60           India   &gt;50K</span><br><span class="line">244   64           Private  149044  ...             60           China  &lt;&#x3D;50K</span><br><span class="line">377   30           Private  315640  ...             40           China   &gt;50K</span><br></pre></td></tr></table></figure>

<div class="note success no-icon"><p>组合多个条件语句时，每个条件必须用括号 <code style="color:red;font-family:bold">()</code> 括起来。 而且，不能使用<code style="color:red;font-family:bold"> or </code>或<code style="color:red;font-family:bold"> and </code>，而需要使用或运算符<code style="color:red;font-family:bold">  | </code>以及与运算符<code style="color:red;font-family:bold">  & </code>。</p>
</div>

<p>假如我们只对年龄已知的用户感兴趣。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adult &#x3D; pd.read_excel(&quot;adult.xlsx&quot;)</span><br><span class="line">age_not_no &#x3D; adult[adult[&quot;age&quot;].notna()]</span><br><span class="line">print(age_not_no.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   age workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">0   90         ?   77053  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">1   82   Private  132870  ...             18   United-States  &lt;&#x3D;50K</span><br><span class="line">2   66         ?  186061  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">3   54   Private  140359  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">4   41   Private  264663  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line"></span><br><span class="line">[5 rows x 15 columns]</span><br></pre></td></tr></table></figure>

<p><code style="color:red; font-weight: bold">notna() </code>条件函数对于值不是 <code>Null</code> 值的每一行返回 <code>True</code>。 因此，可以结合选择括号<code>[]</code>来过滤数据表。</p>
<h2 id="如何选择DataFrame的特定行和列？"><a href="#如何选择DataFrame的特定行和列？" class="headerlink" title="如何选择DataFrame的特定行和列？"></a>如何选择DataFrame的特定行和列？</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/03_subset_columns_rows.png"></p>
<p>假如对35 岁以上人员的性别感兴趣。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult_names = adult.loc[adult[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">35</span>, <span class="string">&quot;sex&quot;</span>]</span><br><span class="line">print(adult_names.head())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在这种情况下，行和列的子集是一次性生成的，仅使用括号选择<code style="color:red;font-weight:bold"> [] </code>已经不够了。 选择括号<code style="color:red;font-weight:bold"> [] </code>前面需要<code style="color:red;font-weight:bold"> loc/iloc </code>运算符。 使用<code style="color:red;font-weight:bold"> loc/iloc </code>时，逗号之前的部分是您想要选择的行，逗号之后的部分是您想要选择的列。</p>
</blockquote>
<p>使用列名、行标签或条件表达式时，请在选择括号 [] 前面使用 loc 运算符。 对于逗号之前和之后的部分，您可以使用单个标签、标签列表、标签切片、条件表达式或冒号。 使用冒号指定您要选择所有行或列。</p>
<p>假如对第 10 行到第 25 行和第 3 到第 5 列感兴趣。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(adult.iloc[9:25, 2:5])</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    fnlwgt     education  education.num</span><br><span class="line">9    70037  Some-college             10</span><br><span class="line">10  172274     Doctorate             16</span><br><span class="line">11  164526   Prof-school             15</span><br><span class="line">12  129177     Bachelors             13</span><br><span class="line">13  136204       Masters             14</span><br><span class="line">14  172175     Doctorate             16</span><br><span class="line">15   45363   Prof-school             15</span><br><span class="line">16  172822          11th              7</span><br><span class="line">17  317847       Masters             14</span><br><span class="line">18  119592    Assoc-acdm             12</span><br><span class="line">19  203034     Bachelors             13</span><br><span class="line">20  188774     Bachelors             13</span><br><span class="line">21   77009          11th              7</span><br><span class="line">22   29059       HS-grad              9</span><br><span class="line">23  153870  Some-college             10</span><br><span class="line">24  135285       HS-grad              9</span><br></pre></td></tr></table></figure>

<p>同样，行和列的子集是一次性生成的，仅使用选择括号<code style="color:red;font-weight:bold"> [] </code>已经不够了。 当根据表中的位置对某些行和/或列特别感兴趣时，请在选择括号<code style="color:red;font-weight:bold"> [] </code>前面使用<code style="color:red;font-weight:bold"> iloc </code>运算符。</p>
<p>当使用 loc 或 iloc 选择特定行和/或列时，我们对我们所选的特定行和/或列赋值。 </p>
<p>例如，要将前三行人员的年龄统一改成20：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult.iloc[<span class="number">0</span>:<span class="number">3</span>, <span class="number">0</span>] = <span class="number">20</span></span><br><span class="line">print(adult.head(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   age workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">0   20         ?   77053  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">1   20   Private  132870  ...             18   United-States  &lt;&#x3D;50K</span><br><span class="line">2   20         ?  186061  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">3   54   Private  140359  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">4   41   Private  264663  ...             40   United-States  &lt;&#x3D;50K</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code style="color:red;font-weight:bold">Remember</code>:</p>
<ul>
<li><code style="color:green;font-weight:bold">要选择数据子集时，使用方括号[]。</code></li>
<li><code style="color:green;font-weight:bold">在括号内，您可以使用单个列/行标签、列/行标签列表、标签切片、条件表达式或冒号。</code></li>
<li><code style="color:green;font-weight:bold">通过 loc 使用行名和列名选择特定的行和列。</code></li>
<li><code style="color:green;font-weight:bold">通过 iloc 使用坐标轴位置选择特定的行和列。</code></li>
<li><code style="color:green;font-weight:bold">你可以为 loc 或 iloc 选择的行或列赋新值。</code></li>
</ul>
</blockquote>
<hr>
<h1 id="如何在-pandas-中创建绘图？"><a href="#如何在-pandas-中创建绘图？" class="headerlink" title="如何在 pandas 中创建绘图？"></a>如何在 pandas 中创建绘图？</h1><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/04_plot_overview.png"></p>
<p>导入相关类库：</p>
<p>本教程使用的数据：<a href="https://github.com/pandas-dev/pandas/blob/main/doc/data/air_quality_no2.csv">空气质量数据</a></p>
<p>在本教程中，使用了有关的空气质量数据，这些数据由 <code>OpenAQ</code> 提供并使用 py-openaq 包。 <code>air_quality_no2.csv</code> 数据集提供了分别位于巴黎、安特卫普和伦敦的测量站 FR04014、BETR801 和伦敦威斯敏斯特的值。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/air_quilty_data.png" style="zoom:50%;" />

<p>读取数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality = pd.read_csv(<span class="string">&quot;data/air_quality_no2.csv&quot;</span>, index_col=<span class="number">0</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line">print(air_quality.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                     station_antwerp  station_paris  station_london</span><br><span class="line">datetime                                                           </span><br><span class="line">2019-05-07 02:00:00              NaN            NaN            23.0</span><br><span class="line">2019-05-07 03:00:00             50.5           25.0            19.0</span><br><span class="line">2019-05-07 04:00:00             45.0           27.7            19.0</span><br><span class="line">2019-05-07 05:00:00              NaN           50.4            16.0</span><br><span class="line">2019-05-07 06:00:00              NaN           61.9             NaN</span><br></pre></td></tr></table></figure>

<p><code>read_csv</code> 函数的 <code>index_col</code>参数表示将第一（第 0）列定义为结果 <code>DataFrame</code> 的索引。</p>
<p><code>read_csv</code> 函数的 <code>parse_dates</code>参数表示将列中的日期转换为 <code>Timestamp</code> 对象。</p>
<p>通过视图快速的检查数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality = pd.read_csv(<span class="string">&quot;data/air_quality_no2.csv&quot;</span>, index_col=<span class="number">0</span>, parse_dates=<span class="literal">True</span>)</span><br><span class="line">air_quality.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/matplot_air.png"></p>
<p><code>pandas</code> 默认为<code>DataFrame</code>包含数字的每一列数创建一个线图。</p>
<p>我只想用巴黎的数据列绘制图形。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/station_pairs_draw.png" style="zoom:50%;" />

<p>我想直观地比较NO2在伦敦和巴黎测量的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality.plot.scatter(x=<span class="string">&quot;station_london&quot;</span>, y=<span class="string">&quot;station_paris&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/matlab_scatter_plot.png" style="zoom:50%;" />

<p>除了使用绘图功能时的默认线图之外，还可以使用许多其他图形来绘制数据。</p>
<p>绘图方法允许使用除默认线图之外的多种绘图样式，可以通过<code>plot()</code>方法的<code>kind</code>参数进行设置:</p>
<ul>
<li><code style="color:red;font-weight:bold">"bar" </code>或<code style="color:red;font-weight:bold"> "barh" </code>绘制柱状图</li>
<li><code style="color:red;font-weight:bold">"hist" </code>绘制直方图</li>
<li><code style="color:red;font-weight:bold"> "box" </code>绘制箱形图</li>
<li><code style="color:red;font-weight:bold"> "kde" </code>或<code style="color:red;font-weight:bold"> "density" </code>绘制密度图</li>
<li><code style="color:red;font-weight:bold"> "area" </code>绘制面积图</li>
<li><code style="color:red;font-weight:bold"> "scatter" </code>绘制散点图</li>
<li><code style="color:red;font-weight:bold"> "hexbin" </code>绘制六边形箱图</li>
<li> <code style="color:red;font-weight:bold"> "pie" </code>绘制饼状图</li>
</ul>
<p>例如，可以通过以下方式创建箱线图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality.plot.box()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/air_quality_plot_box.png" style="zoom:50%;" />

<p>我希望每一列都在一个单独的子图中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">axs = air_quality.plot.area(figsize=(<span class="number">12</span>, <span class="number">4</span>), subplots=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/air_quality_subplots.png" style="zoom:50%;" />

<p>我想进一步定制、扩展或保存结果图。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/plt_subplots.png" style="zoom:50%;" />

<p><code>pandas</code> 创建的每个绘图对象都是 <a href="https://matplotlib.org/">Matplotlib</a>对象。由于 <code>Matplotlib</code> 提供了大量的选项来自定义绘图，因此使 <code>pandas</code> 和 <code>Matplotlib</code> 之间的关联显式化，从而可以将 Matplotlib 的所有功能发挥到绘图上。</p>
<hr>
<h1 id="如何从现有列创建新列"><a href="#如何从现有列创建新列" class="headerlink" title="如何从现有列创建新列"></a>如何从现有列创建新列</h1><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/05_newcolumn_1.png" style="zoom:50%;" />

<p>教程数据如下：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/market_sales_excel.png" style="zoom:50%;" />

<p>假设我们想在表格中新增一列表示所有商场第一季度的收入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">market_sales[<span class="string">&quot;first_season_sales&quot;</span>] = market_sales.iloc[:, <span class="number">0</span>:<span class="number">4</span>].<span class="built_in">sum</span>(axis=<span class="number">1</span>)</span><br><span class="line">print(market_sales)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        sales_01  sales_02  sales_03  sales_04  first_season_sales</span><br><span class="line">market                                                            </span><br><span class="line">沃尔玛        10000     30000     80000     60000              180000</span><br><span class="line">家乐福        20000     20000     20000     20000               80000</span><br><span class="line">好又多        30000     50000     10000     10000              100000</span><br><span class="line">大润发        40000     60000     50000     30000              180000</span><br><span class="line">华润万家       50000     40000     60000     20000              170000</span><br><span class="line">永辉         60000     10000     20000     10000              100000</span><br></pre></td></tr></table></figure>

<p>其他数学运算符（+、-、*、/、…）或逻辑运算符（&lt;、&gt;、==、…）也按此逻辑工作。</p>
<p>如果您需要更高级的逻辑，您可以通过<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply"><code>apply()</code></a>.</p>
<p>如果你想对某些列名进行重命名操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">renamed_market_sales = market_sales.rename(</span><br><span class="line">        columns=&#123;</span><br><span class="line">          </span><br><span class="line">            <span class="string">&quot;sales_01&quot;</span>: <span class="string">&quot;SALES_FIRST_MONTH&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sales_02&quot;</span>: <span class="string">&quot;SALES_SECOND_MONTH&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sales_03&quot;</span>: <span class="string">&quot;SALES_THIRD_MONTH&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sales_04&quot;</span>: <span class="string">&quot;SALES_FOURTH_MONTH&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">print(renamed_market_sales)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        SALES_FIRST_MONTH  ...  SALES_FOURTH_MONTH</span><br><span class="line">market                     ...                    </span><br><span class="line">沃尔玛                 10000  ...               60000</span><br><span class="line">家乐福                 20000  ...               20000</span><br><span class="line">好又多                 30000  ...               10000</span><br><span class="line">大润发                 40000  ...               30000</span><br><span class="line">华润万家                50000  ...               20000</span><br><span class="line">永辉                  60000  ...               10000</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>rename()</code> 函数可用于行和列。 你需要提供一个字典，其中包含当前名称的键和新名称的值，以更新相应的名称。</p>
</blockquote>
<p>映射不应仅限于固定名称，也可以是映射函数。 例如，也可以使用函数将列名转换为小写字母：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">renamed_market_sales = renamed_market_sales.rename(columns=<span class="built_in">str</span>.lower)</span><br><span class="line">print(renamed_market_sales)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        sales_first_month  ...  sales_fourth_month</span><br><span class="line">market                     ...                    </span><br><span class="line">沃尔玛                 10000  ...               60000</span><br><span class="line">家乐福                 20000  ...               20000</span><br><span class="line">好又多                 30000  ...               10000</span><br><span class="line">大润发                 40000  ...               30000</span><br><span class="line">华润万家                50000  ...               20000</span><br><span class="line">永辉                  60000  ...               10000</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="如何计算汇总统计数据"><a href="#如何计算汇总统计数据" class="headerlink" title="如何计算汇总统计数据"></a>如何计算汇总统计数据</h1><p>数据集：本教程使用<a href="https://www.kaggle.com/datasets/uciml/adult-census-income?resource=download">成人人口普查收入</a>数据集。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/06_aggregate.png" style="zoom:50%;" />

<h2 id="汇总统计数据"><a href="#汇总统计数据" class="headerlink" title="汇总统计数据"></a>汇总统计数据</h2><p>所有人员的平均年龄是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_excel(<span class="string">&quot;data/adult.xlsx&quot;</span>)</span><br><span class="line">print(adult[<span class="string">&quot;age&quot;</span>].mean())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">38.58164675532078</span><br></pre></td></tr></table></figure>

<p>可以使用不同的统计数据，并将其应用于具有数值数据的列。 一般情况下，操作会排除缺失数据并默认跨行(按列)操作。</p>
<p>我们可以使用<code>median</code>函数来计算一系列数值的中位数。这个函数可以用于计算 <code>Series</code> 或 <code>DataFrame</code> 对象中的中位数。：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_excel(<span class="string">&quot;data/adult.xlsx&quot;</span>)</span><br><span class="line">print(adult[[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;hours.per.week&quot;</span>]].median())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age               37.0</span><br><span class="line">hours.per.week    40.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<p>可以使用 <code>DataFrame.agg()</code> 方法定义给定列的聚合统计信息的特定组合，而不是预定义的统计信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">              age  hours.per.week</span><br><span class="line"><span class="built_in">min</span>     <span class="number">17.000000</span>        <span class="number">1.000000</span></span><br><span class="line"><span class="built_in">max</span>     <span class="number">90.000000</span>       <span class="number">99.000000</span></span><br><span class="line">median  <span class="number">37.000000</span>       <span class="number">40.000000</span></span><br><span class="line">skew     <span class="number">0.558743</span>        <span class="number">0.227643</span></span><br></pre></td></tr></table></figure>

<h2 id="聚合统计数据并按类别分组"><a href="#聚合统计数据并按类别分组" class="headerlink" title="聚合统计数据并按类别分组"></a>聚合统计数据并按类别分组</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/06_groupby.png" style="zoom:50%;" />

<p>统计所有男性和女性的平均年龄是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult[[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;sex&quot;</span>]].groupby(<span class="string">&quot;sex&quot;</span>).mean())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">              age</span><br><span class="line">sex              </span><br><span class="line">Female  36.858230</span><br><span class="line">Male    39.433547</span><br></pre></td></tr></table></figure>

<p>由于我们感兴趣的是每个性别的平均年龄，因此首先对这两列进行子选择：<code>titanic[[&quot;Sex&quot;, &quot;Age&quot;]]</code>。 接下来，对 “Sex” 列应用 <code>groupby()</code> 方法，为每个类别创建一个组。 计算并返回每个性别组的平均年龄。</p>
<p>如果我们只对每个性别的平均年龄感兴趣，则分组数据也支持列的选择（像往常一样的矩形括号 []）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult.groupby(<span class="string">&quot;sex&quot;</span>)[<span class="string">&quot;age&quot;</span>].mean())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex</span><br><span class="line">Female    36.858230</span><br><span class="line">Male      39.433547</span><br><span class="line">Name: age, dtype: float64</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/06_groupby_select_detail.png" style="zoom:50%;" />

<h2 id="按类别统计记录数"><a href="#按类别统计记录数" class="headerlink" title="按类别统计记录数"></a>按类别统计记录数</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/06_valuecounts.png" style="zoom:50%;" />

<p>统计每个性别的人数是多少：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult[<span class="string">&quot;sex&quot;</span>].value_counts())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex</span><br><span class="line">Female    10771</span><br><span class="line">Male      21790</span><br><span class="line">Name: count, dtype: int64</span><br></pre></td></tr></table></figure>

<p>该函数是一个快捷方式，因为它实际上是一个 groupby 操作，并结合了每组内记录数的计数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(adult.groupby(<span class="string">&quot;sex&quot;</span>)[<span class="string">&quot;sex&quot;</span>].count())</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>size</code>和两者都<code>count</code>可以与 结合使用 <code>groupby</code>。而<code>size</code>包含<code>NaN</code>值并仅提供行数（表的大小），<code>count</code>排除缺失值。在该<code>value_counts</code>方法中，使用<code>dropna</code>参数来包含或排除<code>NaN</code>值。</p>
</blockquote>
<hr>
<h1 id="如何重塑表格布局"><a href="#如何重塑表格布局" class="headerlink" title="如何重塑表格布局"></a>如何重塑表格布局</h1><p>让我们使用<a href="https://github.com/pandas-dev/pandas/blob/main/doc/data/air_quality_long.csv">空气质量数据集</a>的一小部分。我们专注于 <code>NO2</code>数据并仅使用每个位置的前两个测量值。数据子集将被称为<code>no2_subset</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality = pd.read_csv(</span><br><span class="line">	<span class="string">&quot;data/air_quality_long.csv&quot;</span>, index_col=<span class="string">&quot;date.utc&quot;</span>, parse_dates=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line">print(air_quality.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                                city country location parameter  value   unit</span><br><span class="line">date.utc                                                                     </span><br><span class="line"><span class="number">2019</span><span class="number">-06</span><span class="number">-18</span> <span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>  Antwerpen      BE  BETR801      pm25   <span class="number">18.0</span>  µg/m³</span><br><span class="line"><span class="number">2019</span><span class="number">-06</span><span class="number">-17</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>  Antwerpen      BE  BETR801      pm25    <span class="number">6.5</span>  µg/m³</span><br><span class="line"><span class="number">2019</span><span class="number">-06</span><span class="number">-17</span> <span class="number">07</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>  Antwerpen      BE  BETR801      pm25   <span class="number">18.5</span>  µg/m³</span><br><span class="line"><span class="number">2019</span><span class="number">-06</span><span class="number">-17</span> <span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>  Antwerpen      BE  BETR801      pm25   <span class="number">16.0</span>  µg/m³</span><br><span class="line"><span class="number">2019</span><span class="number">-06</span><span class="number">-17</span> <span class="number">05</span>:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>  Antwerpen      BE  BETR801      pm25    <span class="number">7.5</span>  µg/m³</span><br></pre></td></tr></table></figure>

<p>空气质量数据集包含以下列：</p>
<ul>
<li>city：使用传感器的城市，巴黎、安特卫普或伦敦</li>
<li>国家：使用传感器的国家，FR、BE 或 GB</li>
<li>location：传感器的 ID，<em>FR04014</em>、<em>BETR801</em>或 <em>伦敦威斯敏斯特</em></li>
<li>参数：传感器测量的参数，或者NO2 或颗粒物</li>
<li>value：测量值</li>
<li>单位：测量参数的单位，在本例中为“μg/m³”</li>
</ul>
<p><code>DataFrame</code>的索引是<code>datetime</code>测量的日期时间。</p>
<h2 id="对表行进行排序"><a href="#对表行进行排序" class="headerlink" title="对表行进行排序"></a>对表行进行排序</h2><p>根据年龄对表格数据进行排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult = pd.read_excel(<span class="string">&quot;adult.xlsx&quot;</span>)</span><br><span class="line">print(adult.sort_values(<span class="string">&quot;age&quot;</span>).head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       age workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">4159    17   Private  130125  ...             20   United-States  &lt;&#x3D;50K</span><br><span class="line">18810   17   Private  187308  ...             15   United-States  &lt;&#x3D;50K</span><br><span class="line">25709   17   Private  153021  ...             20   United-States  &lt;&#x3D;50K</span><br><span class="line">6046    17         ?  103810  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">8682    17         ?  127003  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line"></span><br><span class="line">[5 rows x 15 columns]</span><br></pre></td></tr></table></figure>

<p>根据年龄和受教育等级对所有人员进行排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adult_sorted = adult.sort_values(by=[<span class="string">&quot;age&quot;</span>, <span class="string">&quot;education.num&quot;</span>], ascending=<span class="literal">False</span>).head()</span><br><span class="line">print(adult_sorted)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       age  workclass  fnlwgt  ... hours.per.week  native.country income</span><br><span class="line">1742    90    Private   87372  ...             72   United-States   &gt;50K</span><br><span class="line">1739    90  Local-gov  227796  ...             60   United-States   &gt;50K</span><br><span class="line">8914    90    Private   51744  ...             50   United-States   &gt;50K</span><br><span class="line">20621   90    Private  115306  ...             40   United-States  &lt;&#x3D;50K</span><br><span class="line">22166   90    Private  206667  ...             40   United-States   &gt;50K</span><br><span class="line"></span><br><span class="line">[5 rows x 15 columns]</span><br></pre></td></tr></table></figure>

<p>使用 <code>DataFrame.sort_values()</code>，表中的行根据定义的列进行排序。 索引将遵循行顺序。</p>
<h2 id="从长到宽的表格格式"><a href="#从长到宽的表格格式" class="headerlink" title="从长到宽的表格格式"></a>从长到宽的表格格式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality = pd.read_csv(</span><br><span class="line">	<span class="string">&quot;data/air_quality_long.csv&quot;</span>, index_col=<span class="string">&quot;date.utc&quot;</span>, parse_dates=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># filter for no2 data only</span></span><br><span class="line">no2 = air_quality[air_quality[<span class="string">&quot;parameter&quot;</span>] == <span class="string">&quot;no2&quot;</span>]</span><br><span class="line"><span class="comment"># use 2 measurements (head) for each location (groupby)</span></span><br><span class="line">no2_subset = no2.sort_index().groupby([<span class="string">&quot;location&quot;</span>]).head(<span class="number">2</span>)</span><br><span class="line">print(no2_subset)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                city country  ... value   unit</span><br><span class="line">date.utc                                      ...             </span><br><span class="line">2019-04-09 01:00:00+00:00  Antwerpen      BE  ...  22.5  µg&#x2F;m³</span><br><span class="line">2019-04-09 01:00:00+00:00      Paris      FR  ...  24.4  µg&#x2F;m³</span><br><span class="line">2019-04-09 02:00:00+00:00     London      GB  ...  67.0  µg&#x2F;m³</span><br><span class="line">2019-04-09 02:00:00+00:00  Antwerpen      BE  ...  53.5  µg&#x2F;m³</span><br><span class="line">2019-04-09 02:00:00+00:00      Paris      FR  ...  27.4  µg&#x2F;m³</span><br><span class="line"></span><br><span class="line">[5 rows x 6 columns]</span><br></pre></td></tr></table></figure>

<p>我希望三个站点的值作为彼此相邻的单独列。（即将某些行转换成列）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(no2_subset.pivot(columns=<span class="string">&quot;location&quot;</span>, values=<span class="string">&quot;value&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location                   BETR801  FR04014  London Westminster</span><br><span class="line">date.utc                                                       </span><br><span class="line">2019-04-09 01:00:00+00:00     22.5     24.4                 NaN</span><br><span class="line">2019-04-09 02:00:00+00:00     53.5     27.4                67.0</span><br><span class="line">2019-04-09 03:00:00+00:00      NaN      NaN                67.0</span><br></pre></td></tr></table></figure>

<h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/07_pivot_table.png" style="zoom:50%;" />

<p>我想要以表格形式获取每个站<code>NO2</code>和<code>PM2.5</code>的平均浓度。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality_mean = air_quality.pivot_table(</span><br><span class="line">	values=<span class="string">&quot;value&quot;</span>, index=<span class="string">&quot;location&quot;</span>, columns=<span class="string">&quot;parameter&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span></span><br><span class="line">)</span><br><span class="line">print(air_quality_mean)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameter                 no2       pm25</span><br><span class="line">location                                </span><br><span class="line">BETR801             26.950920  23.169492</span><br><span class="line">FR04014             29.374284        NaN</span><br><span class="line">London Westminster  29.740050  13.443568</span><br></pre></td></tr></table></figure>

<p>数据透视表是电子表格软件中众所周知的概念。当对每个变量的行/列边距（小计）感兴趣时，请将参数<code>margins</code>设置为<code>True</code>：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">air_quality_mean = air_quality.pivot_table(</span><br><span class="line">      values=<span class="string">&quot;value&quot;</span>,</span><br><span class="line">      index=<span class="string">&quot;location&quot;</span>,</span><br><span class="line">      columns=<span class="string">&quot;parameter&quot;</span>,</span><br><span class="line">      aggfunc=<span class="string">&quot;mean&quot;</span>,</span><br><span class="line">      margins=<span class="literal">True</span></span><br><span class="line">  )</span><br><span class="line">  print(air_quality_mean)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameter                 no2       pm25        All</span><br><span class="line">location                                           </span><br><span class="line">BETR801             26.950920  23.169492  24.982353</span><br><span class="line">FR04014             29.374284        NaN  29.374284</span><br><span class="line">London Westminster  29.740050  13.443568  21.491708</span><br><span class="line">All                 29.430316  14.386849  24.222743</span><br></pre></td></tr></table></figure>

<h2 id="从宽到长的表格格式"><a href="#从宽到长的表格格式" class="headerlink" title="从宽到长的表格格式"></a>从宽到长的表格格式</h2><p>我们向<code>DataFrame</code> 加一个新索引<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index"><code>reset_index()</code></a>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">no2_pivoted = no2.pivot(columns=<span class="string">&quot;location&quot;</span>, values=<span class="string">&quot;value&quot;</span>).reset_index()</span><br><span class="line">print(no2_pivoted.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location                  date.utc  BETR801  FR04014  London Westminster</span><br><span class="line">0        2019-04-09 01:00:00+00:00     22.5     24.4                 NaN</span><br><span class="line">1        2019-04-09 02:00:00+00:00     53.5     27.4                67.0</span><br><span class="line">2        2019-04-09 03:00:00+00:00     54.5     34.2                67.0</span><br><span class="line">3        2019-04-09 04:00:00+00:00     34.5     48.5                41.0</span><br><span class="line">4        2019-04-09 05:00:00+00:00     46.5     59.5                41.0</span><br></pre></td></tr></table></figure>

<p>我想在单列（长格式）中收集所有空气质量二氧化氮测量值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">no_2 = no2_pivoted.melt(id_vars=<span class="string">&quot;date.utc&quot;</span>)</span><br><span class="line">print(no_2)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                      date.utc            location  value</span><br><span class="line">0    2019-04-09 01:00:00+00:00             BETR801   22.5</span><br><span class="line">1    2019-04-09 02:00:00+00:00             BETR801   53.5</span><br><span class="line">2    2019-04-09 03:00:00+00:00             BETR801   54.5</span><br><span class="line">3    2019-04-09 04:00:00+00:00             BETR801   34.5</span><br><span class="line">4    2019-04-09 05:00:00+00:00             BETR801   46.5</span><br><span class="line">...                        ...                 ...    ...</span><br><span class="line">5110 2019-06-20 20:00:00+00:00  London Westminster    NaN</span><br><span class="line">5111 2019-06-20 21:00:00+00:00  London Westminster    NaN</span><br><span class="line">5112 2019-06-20 22:00:00+00:00  London Westminster    NaN</span><br><span class="line">5113 2019-06-20 23:00:00+00:00  London Westminster    NaN</span><br><span class="line">5114 2019-06-21 00:00:00+00:00  London Westminster    NaN</span><br><span class="line"></span><br><span class="line">[5115 rows x 3 columns]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>DataFrame</code> 上的 <code>pandas.melt()</code> 方法将数据表从宽格式转换为长格式。 列标题成为新创建的列中的变量名称。</p>
<p>换句话说，也就是将多列合并成一列。</p>
</blockquote>
<p><code>pandas.melt()</code>可以更详细地定义传递给的参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">no_2 = no2_pivoted.melt(</span><br><span class="line">    id_vars=<span class="string">&quot;date.utc&quot;</span>,</span><br><span class="line">    value_vars=[<span class="string">&quot;BETR801&quot;</span>, <span class="string">&quot;FR04014&quot;</span>, <span class="string">&quot;London Westminster&quot;</span>],</span><br><span class="line">    value_name=<span class="string">&quot;NO_2&quot;</span>,</span><br><span class="line">    var_name=<span class="string">&quot;id_location&quot;</span>,</span><br><span class="line">)</span><br><span class="line">print(no_2)</span><br></pre></td></tr></table></figure>

<p>上述参数的解释：</p>
<ul>
<li><code>value_vars</code>定义将哪些列<em>融合</em>在一起</li>
<li><code>value_name</code>为列值提供自定义列名，而不是默认列名<code>value</code></li>
<li><code>var_name</code>为融合的列提供自定义列名称。否则它采用索引名称或默认值<code>variable</code></li>
<li><code>id_vars</code>中声明的列将不会被融合</li>
<li><code>id_vars</code>声明的列不会被融合</li>
</ul>
<p>因此，参数 <code>value_name</code> 和 <code>var_name</code> 只是两个生成列的用户定义名称。 要融合的列由 <code>id_vars</code> 和 <code>value_vars</code> 定义。</p>
<hr>
<h1 id="如何合并多个表的数据"><a href="#如何合并多个表的数据" class="headerlink" title="如何合并多个表的数据"></a>如何合并多个表的数据</h1><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/08_concat_row.png" style="zoom:50%;" />

<p>现有两个班的学生数据 <code>class_01_students.xlsx</code> <code>class_02_students.xlsx</code> 如下:</p>
<p> <code>class_01_students.xlsx</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">print(class_01_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   name   age  sex   height blood</span><br><span class="line">0   张三   20   男     175     O</span><br><span class="line">1   李四   21   女     160     A</span><br><span class="line">2   王五   50   男     170     B</span><br><span class="line">3   赵六   30   男     173    AB</span><br><span class="line">4   田七   40   男     180     A</span><br></pre></td></tr></table></figure>

<p><code>class_02_students.xlsx</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_02_students = pd.read_excel(<span class="string">&quot;data/class_02_students.xlsx&quot;</span>)</span><br><span class="line">print(class_02_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   name   age sex  height blood</span><br><span class="line">0   小明   18   男     181     O</span><br><span class="line">1   小黄   24   男     177     A</span><br><span class="line">2   小红   17   女     170     B</span><br><span class="line">3   小李   32   男     157    AB</span><br><span class="line">4   小花   29   女     168     A</span><br></pre></td></tr></table></figure>

<p>将两个具有相似结构的表合并成一个表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">class_02_students = pd.read_excel(<span class="string">&quot;data/class_02_students.xlsx&quot;</span>)</span><br><span class="line">students = pd.concat([class_01_students, class_02_students], axis=<span class="number">0</span>)</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    name  age sex  height blood</span><br><span class="line">0   张三   20   男     175     O</span><br><span class="line">1   李四   21   女     160     A</span><br><span class="line">2   王五   50   男     170     B</span><br><span class="line">3   赵六   30   男     173    AB</span><br><span class="line">4   田七   40   男     180     A</span><br><span class="line">0   小明   18   男     181     O</span><br><span class="line">1   小黄   24   男     177     A</span><br><span class="line">2   小红   17   女     170     B</span><br><span class="line">3   小李   32   男     157    AB</span><br><span class="line">4   小花   29   女     168     A</span><br></pre></td></tr></table></figure>

<blockquote>
<p>concat() 函数沿其中一个轴（按行或按列）执行多个表的串联操作。</p>
</blockquote>
<p>默认情况下，串联是沿着轴 0 进行的，因此生成的表组合了输入表的行。 让我们检查原始表和串联表的形状来验证操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;shape of class_01_students:&quot;</span>, class_01_students.shape)</span><br><span class="line"><span class="comment"># shape of class_01_students: (5, 5)</span></span><br><span class="line">print(<span class="string">&quot;shape of class_02_students:&quot;</span>, class_02_students.shape)</span><br><span class="line"><span class="comment"># shape of class_02_students: (5, 5)</span></span><br><span class="line">print(<span class="string">&quot;shape of students:&quot;</span>, students.shape)</span><br><span class="line"><span class="comment"># shape of students: (10, 5)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>axis 参数出现在许多可沿轴应用的 pandas 方法中。 DataFrame 有两个相应的轴：第一个轴垂直向下跨行（轴 0），第二个轴水平跨列（轴 1）。 默认情况下，大多数操作（如串联或汇总统计）是跨行（轴 0）的，但也可以跨列应用。</p>
</blockquote>
<p>根据年龄对表进行排序（正序）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted_students = students.sort_values(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">print(sorted_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    name  age sex  height blood</span><br><span class="line">2   小红   17   女     170     B</span><br><span class="line">0   小明   18   男     181     O</span><br><span class="line">0   张三   20   男     175     O</span><br><span class="line">1   李四   21   女     160     A</span><br><span class="line">1   小黄   24   男     177     A</span><br><span class="line">4   小花   29   女     168     A</span><br><span class="line">3   赵六   30   男     173    AB</span><br><span class="line">3   小李   32   男     157    AB</span><br><span class="line">4   田七   40   男     180     A</span><br><span class="line">2   王五   50   男     170     B</span><br></pre></td></tr></table></figure>

<p>倒序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sorted_students = students.sort_values(<span class="string">&quot;age&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">print(sorted_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    name  age sex  height blood</span><br><span class="line">2   王五   50   男     170     B</span><br><span class="line">4   田七   40   男     180     A</span><br><span class="line">3   小李   32   男     157    AB</span><br><span class="line">3   赵六   30   男     173    AB</span><br><span class="line">4   小花   29   女     168     A</span><br><span class="line">1   小黄   24   男     177     A</span><br><span class="line">1   李四   21   女     160     A</span><br><span class="line">0   张三   20   男     175     O</span><br><span class="line">0   小明   18   男     181     O</span><br><span class="line">2   小红   17   女     170     B</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这些教程中没有提到同时存在多个行/列索引。 分层索引或 MultiIndex 是一种先进且强大的 pandas 功能，用于分析更高维度的数据。</p>
<p>多重索引超出了 pandas 介绍的范围。 目前，请记住函数reset_index可用于将任何级别的索引转换为列。</p>
</blockquote>
<h2 id="使用通用标识符连接表"><a href="#使用通用标识符连接表" class="headerlink" title="使用通用标识符连接表"></a>使用通用标识符连接表</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/08_merge_left.png" style="zoom:50%;" />

<p>现有学生基本信息表 <code>class_01_students.xlsx</code> 和学生成绩表 <code>student_score.xlsx</code> 如下:</p>
<p>基本信息表 <code>class_01_students.xlsx</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">print(class_01_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  	name  age sex  height blood  student_id</span><br><span class="line">0   张三   20   男     175     O           1</span><br><span class="line">1   李四   21   女     160     A           2</span><br><span class="line">2   王五   50   男     170     B           3</span><br><span class="line">3   赵六   30   男     173    AB           4</span><br><span class="line">4   田七   40   男     180     A           5</span><br></pre></td></tr></table></figure>

<p>学生成绩表 <code>student_score.xlsx</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">student_score = pd.read_excel(<span class="string">&quot;data/student_score.xlsx&quot;</span>)</span><br><span class="line">print(student_score)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   student_id  chinese  math  english  physics</span><br><span class="line">0           1       89    76       88       90</span><br><span class="line">1           2       76    67       50       89</span><br><span class="line">2           3       57    82       91       88</span><br><span class="line">3           4       23    43       54       76</span><br></pre></td></tr></table></figure>

<p>根据<code>student_id</code>合并两个表格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">student_score = pd.read_excel(<span class="string">&quot;data/student_score.xlsx&quot;</span>)</span><br><span class="line">merged_table = pd.merge(class_01_students, student_score, how=<span class="string">&quot;left&quot;</span>, on=<span class="string">&quot;student_id&quot;</span>)</span><br><span class="line">print(merged_table)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    name  age sex  height blood  student_id  chinese  math  english  physics</span><br><span class="line">0   张三   20   男     175     O           1     89.0  76.0     88.0     90.0</span><br><span class="line">1   李四   21   女     160     A           2     76.0  67.0     50.0     89.0</span><br><span class="line">2   王五   50   男     170     B           3     57.0  82.0     91.0     88.0</span><br><span class="line">3   赵六   30   男     173    AB           4     23.0  43.0     54.0     76.0</span><br><span class="line">4   田七   40   男     180     A           5      NaN   NaN      NaN      NaN</span><br></pre></td></tr></table></figure>

<p><code>mege</code>操作类似于数据库的<code>join</code>操作</p>
<p>现学生成绩表 <code>student_score.xlsx</code> 和学生基本信息表 <code>class_01_students.xlsx</code> 没有相同的key。</p>
<p>学生基本信息表 <code>class_01_students.xlsx</code> 的数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    name  age sex  student_id</span><br><span class="line">0   张三   20   男           1</span><br><span class="line">1   李四   21   女           2</span><br><span class="line">2   王五   50   男           3</span><br><span class="line">3   赵六   30   男           4</span><br><span class="line">4   田七   40   男           5</span><br></pre></td></tr></table></figure>

<p>学生成绩表 <code>student_score.xlsx</code> 的数据如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   stuid  chinese  math  english  physics</span><br><span class="line">0      1       89    76       88       90</span><br><span class="line">1      2       76    67       50       89</span><br><span class="line">2      3       57    82       91       88</span><br><span class="line">3      4       23    43       54       76</span><br></pre></td></tr></table></figure>

<p>连接两个表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">student_score = pd.read_excel(<span class="string">&quot;data/student_score.xlsx&quot;</span>)</span><br><span class="line">merged_table = pd.merge(class_01_students, student_score, how=<span class="string">&quot;left&quot;</span>, left_on=<span class="string">&quot;student_id&quot;</span>,      right_on=<span class="string">&quot;stuid&quot;</span>)</span><br><span class="line">print(merged_table)</span><br></pre></td></tr></table></figure>

<p>与前面的示例相比，没有公共列名。然而，表  <code>class_01_students.xlsx</code> 中的<code>student_id</code>列和表<code>student_score.xlsx</code> 中的<code>stuid</code>字段以通用格式提供了学生Id信息，此处使用参数<code>left_on</code> 和参数<code>right_on</code> （而不仅仅是<code>on</code>）来建立两个表之间的链接。</p>
<hr>
<h1 id="如何轻松处理时间序列数据"><a href="#如何轻松处理时间序列数据" class="headerlink" title="如何轻松处理时间序列数据"></a>如何轻松处理时间序列数据</h1><p>本教程使用的数据：<a href="https://github.com/pandas-dev/pandas/blob/main/doc/data/air_quality_no2_long.csv">空气质量数据</a></p>
<h2 id="使用-pandas-日期时间属性"><a href="#使用-pandas-日期时间属性" class="headerlink" title="使用 pandas 日期时间属性"></a>使用 pandas 日期时间属性</h2><p>将纯文本转换成日期时间对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality = pd.read_csv(<span class="string">&quot;data/air_quality_no2_long.csv&quot;</span>)</span><br><span class="line">air_quality[<span class="string">&quot;date.utc&quot;</span>] = pd.to_datetime(air_quality[<span class="string">&quot;date.utc&quot;</span>])</span><br><span class="line">print(air_quality[<span class="string">&quot;date.utc&quot;</span>].head())</span><br></pre></td></tr></table></figure>

<p>最初，日期时间中的值是字符串，不提供任何日期时间操作（例如提取年份、星期几等）。 通过应用 <code>to_datetime</code> 函数，<code>pandas</code> 解释字符串并将其转换为日期时间（即 <code>datetime64[ns, UTC]</code>）对象。 在 <code>pandas</code> 中，我们将这些类似于标准库中的 <code>datetime.datetime</code> 的日期时间对象称为 <code>pandas.Timestamp</code>。</p>
<p>由于许多数据集的其中一列中确实包含日期时间信息，因此 <code>pandas.read_csv()</code> 和 <code>pandas.read_json()</code> 等 <code>pandas</code> 输入函数可以在使用 <code>parse_dates</code> 参数在读取数据时将一些列日期列转换成时间戳对象。</p>
<p>为什么这些<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html#pandas.Timestamp"><code>pandas.Timestamp</code></a>对象有用？让我们通过一些示例来说明附加值。</p>
<p>我们正在使用的时间序列数据集的开始日期和结束日期是哪天？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(air_quality[<span class="string">&quot;date.utc&quot;</span>].<span class="built_in">min</span>())</span><br><span class="line">print(air_quality[<span class="string">&quot;date.utc&quot;</span>].<span class="built_in">max</span>())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-05-07 01:00:00+00:00</span><br><span class="line">2019-06-21 00:00:00+00:00</span><br></pre></td></tr></table></figure>

<p>使用 <code>pandas.Timestamp</code> 作为日期时间使我们能够使用日期信息进行计算并使它们具有可比性。 因此，我们可以用它来获取时间序列的长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(air_quality[<span class="string">&quot;date.utc&quot;</span>].<span class="built_in">max</span>() - air_quality[<span class="string">&quot;date.utc&quot;</span>].<span class="built_in">min</span>())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">44 days 23:00:00</span><br></pre></td></tr></table></figure>

<p>结果是一个 <code>pandas.Timedelta</code> 对象，类似于标准 <code>Python</code> 库中的 <code>datetime.timedelta</code> 并定义持续时间。</p>
<p>我想向 DataFrame 添加一个新列，仅包含月份</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">air_quality[<span class="string">&quot;month&quot;</span>] = air_quality[<span class="string">&quot;date.utc&quot;</span>].dt.month</span><br><span class="line">print(air_quality.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    city country                  date.utc  ... value   unit  month</span><br><span class="line">0  Paris      FR 2019-06-21 00:00:00+00:00  ...  20.0  µg&#x2F;m³      6</span><br><span class="line">1  Paris      FR 2019-06-20 23:00:00+00:00  ...  21.8  µg&#x2F;m³      6</span><br><span class="line">2  Paris      FR 2019-06-20 22:00:00+00:00  ...  26.5  µg&#x2F;m³      6</span><br><span class="line">3  Paris      FR 2019-06-20 21:00:00+00:00  ...  24.9  µg&#x2F;m³      6</span><br><span class="line">4  Paris      FR 2019-06-20 20:00:00+00:00  ...  21.4  µg&#x2F;m³      6</span><br><span class="line"></span><br><span class="line">[5 rows x 8 columns]</span><br></pre></td></tr></table></figure>

<p>通过使用 <code>Timestamp</code> 对象来表示日期，<code>pandas</code> 提供了许多与时间相关的属性。 例如月份<code>month</code>，还有年份<code>year</code>、季度<code>quarter</code>……所有这些属性都可以通过<code style="color:red;font-weight:bold"> dt </code>访问器访问。</p>
<p>每个测量位置一周中每一天的平均二氧化氮浓度是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(air_quality.groupby(</span><br><span class="line">        [air_quality[<span class="string">&quot;date.utc&quot;</span>].dt.weekday, <span class="string">&quot;location&quot;</span>])[<span class="string">&quot;value&quot;</span>].mean())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date.utc  location          </span><br><span class="line">0         BETR801               27.875000</span><br><span class="line">          FR04014               24.856250</span><br><span class="line">          London Westminster    23.969697</span><br><span class="line">1         BETR801               22.214286</span><br><span class="line">          FR04014               30.999359</span><br><span class="line">          London Westminster    24.885714</span><br><span class="line">2         BETR801               21.125000</span><br><span class="line">          FR04014               29.165753</span><br><span class="line">          London Westminster    23.460432</span><br><span class="line">3         BETR801               27.500000</span><br><span class="line">          FR04014               28.600690</span><br><span class="line">          London Westminster    24.780142</span><br><span class="line">4         BETR801               28.400000</span><br><span class="line">          FR04014               31.617986</span><br><span class="line">          London Westminster    26.446809</span><br><span class="line">5         BETR801               33.500000</span><br><span class="line">          FR04014               25.266154</span><br><span class="line">          London Westminster    24.977612</span><br><span class="line">6         BETR801               21.896552</span><br><span class="line">          FR04014               23.274306</span><br><span class="line">          London Westminster    24.859155</span><br><span class="line">Name: value, dtype: float64</span><br></pre></td></tr></table></figure>

<p>还记得统计计算教程中 <code>groupby</code> 提供的分割-应用-组合模式吗？在这里，我们想要计算给定的统计数据（例如每周每个测量地的二氧化碳的平均浓度)。为了按工作日进行分组，我们使用 <code>pandas Timestamp</code> 的 <code>datetime</code> 属性 <code>weekday</code>（星期一 = 0 和星期日 = 6），也可以通过 <code>dt</code> 访问器访问。 可以对地点和工作日进行分组，以拆分每个组合的平均值计算。</p>
<p>将所有站点的时间序列中一天中典型的 NO2 模式绘制在一起。 换句话说，一天中每个小时的平均值是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">4</span>))</span><br><span class="line">air_quality.groupby(air_quality[<span class="string">&quot;date.utc&quot;</span>].dt.hour)[<span class="string">&quot;value&quot;</span>].mean().plot(</span><br><span class="line">    kind=<span class="string">&#x27;bar&#x27;</span>, rot=<span class="number">0</span>, ax=axs</span><br><span class="line">)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Hour of the day&quot;</span>)  <span class="comment"># custom x label using Matplotlib</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;$NO_2 (µg/m^3)$&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/hour_of_the_day.png" style="zoom:50%;" />

<h2 id="日期时间作为索引"><a href="#日期时间作为索引" class="headerlink" title="日期时间作为索引"></a>日期时间作为索引</h2><p>在重塑教程中， <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot.html#pandas.pivot"><code>pivot()</code></a>介绍了如何重塑数据表，将每个测量位置作为单独的列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">no_2 = air_quality.pivot(index=<span class="string">&quot;date.utc&quot;</span>, columns=<span class="string">&quot;location&quot;</span>, values=<span class="string">&quot;value&quot;</span>)</span><br><span class="line">print(no_2.head())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location                   BETR801  FR04014  London Westminster</span><br><span class="line">date.utc                                                       </span><br><span class="line">2019-05-07 01:00:00+00:00     50.5     25.0                23.0</span><br><span class="line">2019-05-07 02:00:00+00:00     45.0     27.7                19.0</span><br><span class="line">2019-05-07 03:00:00+00:00      NaN     50.4                19.0</span><br><span class="line">2019-05-07 04:00:00+00:00      NaN     61.9                16.0</span><br><span class="line">2019-05-07 05:00:00+00:00      NaN     72.4                 NaN</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过旋转数据，日期时间信息成为表的索引。一般来说，将某列设置为索引可以通过该<code>set_index</code>函数来实现。</p>
</blockquote>
<p>使用日期时间索引（即<code>DatetimeIndex</code>）提供了强大的功能。例如，我们不需要<code>dt</code>访问器来获取时间序列属性，而是直接在索引上使用这些属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(no_2.index.year)</span><br><span class="line">print(no_2.index.month)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Index([2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019,</span><br><span class="line">       ...</span><br><span class="line">       2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019, 2019],</span><br><span class="line">      dtype&#x3D;&#39;int32&#39;, name&#x3D;&#39;date.utc&#39;, length&#x3D;1033)</span><br><span class="line">Index([5, 5, 5, 5, 5, 5, 5, 5, 5, 5,</span><br><span class="line">       ...</span><br><span class="line">       6, 6, 6, 6, 6, 6, 6, 6, 6, 6],</span><br><span class="line">      dtype&#x3D;&#39;int32&#39;, name&#x3D;&#39;date.utc&#39;, length&#x3D;1033)</span><br></pre></td></tr></table></figure>

<p>绘制5 月 20 日至 5 月 21 月底不同站点的 NO2 值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">no_2 = air_quality.pivot(index=<span class="string">&quot;date.utc&quot;</span>, columns=<span class="string">&quot;location&quot;</span>, values=<span class="string">&quot;value&quot;</span>)</span><br><span class="line">no_2[<span class="string">&quot;2019-05-20&quot;</span>:<span class="string">&quot;2019-05-21&quot;</span>].plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/pandas/09_time_section.png" style="zoom:50%;" />

<hr>
<h1 id="如何操作文本数据"><a href="#如何操作文本数据" class="headerlink" title="如何操作文本数据"></a>如何操作文本数据</h1><p>本教程数据<code>class_01_students.xlsx</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">print(class_01_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        name  age  sex  student_id</span><br><span class="line">0  San Zhang   20   男           1</span><br><span class="line">1      Si Li   21   女           2</span><br><span class="line">2    Wu Wang   50   男           3</span><br><span class="line">3   Liu Zhao   30   男           4</span><br><span class="line">4    Qi Tian   40   男           5</span><br></pre></td></tr></table></figure>

<p>将<code>name</code>设为小写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students = pd.read_excel(<span class="string">&quot;data/class_01_students.xlsx&quot;</span>)</span><br><span class="line">print(class_01_students[<span class="string">&quot;name&quot;</span>].<span class="built_in">str</span>.lower())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0    san zhang</span><br><span class="line">1        si li</span><br><span class="line">2      wu wang</span><br><span class="line">3     liu zhao</span><br><span class="line">4      qi tian</span><br><span class="line">Name: name, dtype: object</span><br></pre></td></tr></table></figure>

<p>与时间序列教程中具有 <code>dt</code> 访问器的日期时间对象类似，使用 <code>str</code> 访问器时可以使用许多专用字符串方法。 这些方法通常具有与单个元素的等效内置字符串方法匹配的名称，但按元素应用到列的每个值。</p>
<p>通过提取逗号之前的部分来创建一个新列“姓氏”，其中包含乘客的姓氏。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students[<span class="string">&quot;surname&quot;</span>] = class_01_students[<span class="string">&quot;name&quot;</span>].<span class="built_in">str</span>.split(<span class="string">&quot; &quot;</span>).<span class="built_in">str</span>.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">print(class_01_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        name  age sex  student_id surname</span><br><span class="line">0  San Zhang   20   男           1   Zhang</span><br><span class="line">1      Si Li   21   女           2      Li</span><br><span class="line">2    Wu Wang   50   男           3    Wang</span><br><span class="line">3   Liu Zhao   30   男           4    Zhao</span><br><span class="line">4    Qi Tian   40   男           5    Tian</span><br></pre></td></tr></table></figure>

<p>使用该<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.split.html#pandas.Series.str.split"><code>Series.str.split()</code></a>方法，每个值都作为 2 个元素的列表返回。第一个元素是空格之前的部分，第二个元素是空格之后的部分。</p>
<p>假如我们只对姓名中带有”Tian”字的用户感兴趣：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(class_01_students[<span class="string">&quot;name&quot;</span>].<span class="built_in">str</span>.contains(<span class="string">&quot;Tian&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0    False</span><br><span class="line">1    False</span><br><span class="line">2    False</span><br><span class="line">3    False</span><br><span class="line">4     True</span><br><span class="line">Name: name, dtype: bool</span><br></pre></td></tr></table></figure>

<p>方法<code>Series.str.contains()</code>检查列中的每个值（<code>Name</code>如果字符串包含单词<code>Tian</code>，并返回每个值<code>True</code>（<code>Tian</code>是<code>name</code>的一部分）或 <code>False</code>（<code>Tian</code>不是<code>name</code>的一部分）。</p>
<blockquote>
<p>支持更强大的字符串提取，因为 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.contains.html#pandas.Series.str.contains"><code>Series.str.contains()</code></a>和<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html#pandas.Series.str.extract"><code>Series.str.extract()</code></a>方法接受<a href="https://docs.python.org/3/library/re.html">正则表达式</a>，但超出了本教程的范围。</p>
</blockquote>
<p>哪位用户的名字最长？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(class_01_students[<span class="string">&quot;name&quot;</span>].<span class="built_in">str</span>.<span class="built_in">len</span>().idxmax())</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>

<p>为了获得最长的名称，我们首先必须获得列中每个名称的长度<code>Name</code>。通过使用 <code>pandas</code> 字符串方法，该 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.len.html#pandas.Series.str.len"><code>Series.str.len()</code></a>函数将单独应用于每个名称（按元素）。</p>
<p>接下来，我们需要获取表中名称长度最大的对应位置，最好是索引标签。 <code>idxmax()</code> 方法正是这样做的。 它不是字符串方法，适用于整数，因此不使用 <code>str</code>。</p>
<p>根据行 ( <code>0</code>) 和列 ( <code>name</code>) 的索引名称，我们可以使用运算符进行选择<code>loc</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(class_01_students.loc[class_01_students[<span class="string">&quot;name&quot;</span>].<span class="built_in">str</span>.<span class="built_in">len</span>().idxmax(), <span class="string">&quot;name&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">San Zhang</span><br></pre></td></tr></table></figure>

<p>在“sex”列中，将“男”的值替换为“M”，将“女”的值替换为“F”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">class_01_students[<span class="string">&quot;sex&quot;</span>] = class_01_students[<span class="string">&quot;sex&quot;</span>].replace(&#123;<span class="string">&quot;男&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;女&quot;</span>:<span class="string">&quot;F&quot;</span>&#125;)</span><br><span class="line">print(class_01_students)</span><br></pre></td></tr></table></figure>

<p>Out:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        name  age sex  student_id</span><br><span class="line">0  San Zhang   20   M           1</span><br><span class="line">1      Si Li   21   F           2</span><br><span class="line">2    Wu Wang   50   M           3</span><br><span class="line">3   Liu Zhao   30   M           4</span><br><span class="line">4    Qi Tian   40   M           5</span><br></pre></td></tr></table></figure>

<p>虽然<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.replace.html#pandas.Series.replace"><code>replace()</code></a>它不是字符串方法，但它提供了一种使用映射或词汇表来转换某些值的便捷方法。它需要<code>dictionary</code>来定义映射。<code>&#123;from : to&#125;</code></p>
<hr>
<p>关于Pandas的更多教程请访问：<a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html%E3%80%82">https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html。</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Excel处理</tag>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba介绍</title>
    <url>/2021/08/25/Spring-Cloud-Alibaba%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>
<p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>
<hr>
<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><ul>
<li><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li>
<li><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>
<li><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>
<li><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>
<li><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li>
<li><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>
<li><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li>
<li><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>
</ul>
<hr>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p><strong><a href="https://github.com/alibaba/Sentinel">Sentinel</a>：</strong>把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p><strong><a href="https://github.com/alibaba/Nacos">Nacos</a>：</strong>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p><strong><a href="https://rocketmq.apache.org/">RocketMQ</a>：</strong>一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>
<p><strong><a href="https://github.com/apache/dubbo">Dubbo</a>：</strong>Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>
<p><strong><a href="https://github.com/seata/seata">Seata</a>：</strong>阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>
<p><strong><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
<p><strong><a href="https://help.aliyun.com/document_detail/43136.html">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>
<p><strong><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>
<hr>
<h1 id="版本管理规范"><a href="#版本管理规范" class="headerlink" title="版本管理规范"></a>版本管理规范</h1><p>项目的版本号格式为 x.x.x 的形式，其中 x 的数值类型为数字，从 0 开始取值，且不限于 0~9 这个范围。项目处于孵化器阶段时，第一位版本号固定使用 0，即版本号为 0.x.x 的格式。</p>
<p>由于 Spring Boot 1 和 Spring Boot 2 在 Actuator 模块的接口和注解有很大的变更，且 spring-cloud-commons 从 1.x.x 版本升级到 2.0.0 版本也有较大的变更，因此我们采取跟 SpringBoot 版本号一致的版本:</p>
<ul>
<li>1.5.x 版本适用于 Spring Boot 1.5.x</li>
<li>2.0.x 版本适用于 Spring Boot 2.0.x</li>
<li>2.1.x 版本适用于 Spring Boot 2.1.x</li>
<li>2.2.x 版本适用于 Spring Boot 2.2.x</li>
<li>2021.x 版本适用于 Spring Boot 2.4.x</li>
</ul>
<hr>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="如何引入依赖"><a href="#如何引入依赖" class="headerlink" title="如何引入依赖"></a>如何引入依赖</h2><p>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p>
<hr>
]]></content>
      <categories>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Spring Cloud Alibaba</tag>
        <tag>微服务</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基础(一)</title>
    <url>/2021/11/20/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h1><h2 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h2><p>SQL语言在功能上主要分为如下3大类:</p>
<p><span style="color: #730002"><strong>DDL(Data Definition Languages、数据定义语言)</strong></span>，这些语句定义了不同的数据库、表、视图、索 引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p>
<p>主要的语句关键字包括 <strong><span style="color: #e15307">CREATE</span></strong> 、 <strong><span style="color: #e15307">DROP</span></strong> 、 <strong><span style="color: #e15307">ALTER</span></strong> 等。<br><span style="color: #730002"><strong>DML(Data Manipulation Language、数据操作语言)</strong></span>，用于添加、删除、更新和查询数据库记 录，并检查数据完整性。</p>
<p>主要的语句关键字包括 <strong><span style="color: #e15307">INSERT</span></strong> 、 <strong><span style="color: #e15307">DELETE</span></strong> 、 <strong><span style="color: #e15307">UPDATE</span></strong> 、 <strong><span style="color: #e15307">SELECT</span></strong> 等。</p>
<p><strong><span style="color: red">SELECT是SQL语言的基础，最为重要。</span></strong><br><span style="color: #730002">DCL(Data Control Language、数据控制语言) </span>，用于定义数据库、表、字段、用户的访问权限和 安全级别。</p>
<p>主要的语句关键字包括 <strong><span style="color: #e15307">GRANT</span></strong> 、 <strong><span style="color: #e15307">REVOKE</span></strong> 、 <strong><span style="color: #e15307">COMMIT</span></strong> 、 <strong><span style="color: #e15307">ROLLBACK</span></strong> 、 <strong><span style="color: #e15307">SAVEPOINT</span></strong> 等。</p>
<hr>
<p><strong><span style="color: #730002">DCL(Data Control Language、数据控制语言) </span></strong></p>
<p><strong><span style="color: #e15307">注意：</span></strong></p>
<p><strong><span style="color: red">SELECT是SQL语言的基础，最为重要。</span></strong></p>
<hr>
<h2 id="SQL大小写规范-建议遵守"><a href="#SQL大小写规范-建议遵守" class="headerlink" title="SQL大小写规范 (建议遵守)"></a>SQL<strong>大小写规范 (建议遵守)</strong></h2><ul>
<li><p><strong><span style="color: red">MySQL 在Windows 环境下是大小写不敏感的</span></strong></p>
</li>
<li><p><strong><span style="color: red">MySQL 在Linux 环境下是大小写敏感的</span></strong></p>
<p>​    数据库名、表名、表的别名、变量名是严格区分大小写的</p>
</li>
</ul>
<p>​           关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</p>
<ul>
<li> <strong><span style="color: red">推荐采用统一的书写规范:</span></strong></li>
</ul>
<p>​            数据库名、表名、表别名、字段名、字段别名等都小写 SQL 关键字、函数名、绑定变量等都大写</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><p>可以使用如下格式的注释结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">单行注释: <span class="comment">#注释文字(MySQL特有的方式) </span></span><br><span class="line">单行注释: <span class="comment">-- 注释文字(--后面必须包含一个空格。) </span></span><br><span class="line">多行注释: <span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure>

<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><strong>命名规则</strong></h2><ul>
<li>数据库、表名不得超过<code>30</code>个字符，变量名限制为29个</li>
<li> 必须只能包含<code>A–Z</code>, <code>a–z</code>, <code>0–9</code>, <code>_</code>共<code>63</code>个字符</li>
<li>数据库名、表名、字段名等对象名中间不要包含空格 </li>
<li>同一个MySQL软件中，数据库不能同名;同一个库中，表不能重名;同一个表中，字段不能重名 </li>
<li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用`(着重号)引起来 </li>
<li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</li>
</ul>
<p>举例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下两句是一样的，不区分大小写 show databases;</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="comment">#创建表格</span></span><br><span class="line"><span class="comment">#create table student info(...); #表名错误，因为表名有空格 create table student_info(...);</span></span><br><span class="line"><span class="comment">#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><h3 id="SELECT语句一般格式："><a href="#SELECT语句一般格式：" class="headerlink" title="SELECT语句一般格式："></a>SELECT语句一般格式：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>] &lt; 目标列表达式 &gt; [,&lt; 目标列表达式 &gt;]...</span><br><span class="line"><span class="keyword">FROM</span> &lt; 表名或试图名 &gt; [,&lt; 表名或试图名 &gt;]...</span><br><span class="line">[ <span class="keyword">WHERE</span> &lt; 条件表达式 &gt; ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt; 列名<span class="number">1</span> &gt; [ <span class="keyword">HAVING</span> &lt; 条件表达式 &gt; ] ]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt; 列名<span class="number">2</span> &gt; [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ]];</span><br></pre></td></tr></table></figure>

<h3 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h3><p>方式一</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name lname</span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>

<p>方式二</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> lname</span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>

<p>方式三 </p>
<p>列的别名可以使用一对<code>""</code>引起来，不要使用<code>''</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="string">&quot;lname&quot;</span></span><br><span class="line"><span class="keyword">FROM</span>   employees;</span><br></pre></td></tr></table></figure>

<h3 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC;</span><br></pre></td></tr></table></figure>

<h3 id="查询经过计算的值"><a href="#查询经过计算的值" class="headerlink" title="查询经过计算的值"></a>查询经过计算的值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">NAME</span>,<span class="number">2021</span>-Sage BIRTHDAY</span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>

<h3 id="查询时添加常量列"><a href="#查询时添加常量列" class="headerlink" title="查询时添加常量列"></a>查询时添加常量列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, <span class="string">&#x27;湖北&#x27;</span> <span class="keyword">AS</span> province</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h3 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h3><p>使用<code>DESCRIBE</code>或<code>DESC</code>命令，表示表结构。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees;</span><br><span class="line">或</span><br><span class="line">DESC employees;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/basicComputer.png" style="zoom:67%;" />

<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回<code>1</code>，比较的结果为假则返回<code>0</code>，其他情况则返回<code>NULL</code>。</p>
<p>比较运算符经常被用来作为<code>SELECT</code>查询语句的条件来使用，返回符合条件的结果记录。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/compareCpmputer.png" style="zoom:67%;" />

<h3 id="安全等于运算符"><a href="#安全等于运算符" class="headerlink" title="安全等于运算符"></a>安全等于运算符</h3><p>安全等于运算符<code><=></code>与等于运算符<code>=</code>的作用是相似的，唯一的区别是<code><=></code>可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p>
<p>此外，还有非符号类型的运算符：</p>
<h3 id="非符号类型的运算符"><a href="#非符号类型的运算符" class="headerlink" title="非符号类型的运算符"></a>非符号类型的运算符</h3><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/notSymbol1.png" style="zoom:67%;" />

<hr>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为<code>1</code>、<code>0</code>或者<code>NULL</code>。</p>
<p>MySQL中支持4种逻辑运算符如下：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/logicSymbol.png" style="zoom:67%;" />

<h3 id="逻辑非运算符"><a href="#逻辑非运算符" class="headerlink" title="逻辑非运算符"></a>逻辑非运算符</h3><p>逻辑非（<code>NOT</code>或<code>!</code>）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。</p>
<h3 id="逻辑与运算符"><a href="#逻辑与运算符" class="headerlink" title="逻辑与运算符"></a>逻辑与运算符</h3><p>逻辑与（<code>AND</code>或<code>&&</code>）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</p>
<h3 id="逻辑或运算符"><a href="#逻辑或运算符" class="headerlink" title="逻辑或运算符"></a>逻辑或运算符</h3><p>逻辑或（<code>OR</code>或<code>||</code>）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为NULL时，返回NULL。</p>
<blockquote>
<p><strong><span style="color: #e15307">注意：OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</span></strong></p>
</blockquote>
<h3 id="逻辑异或运算符"><a href="#逻辑异或运算符" class="headerlink" title="逻辑异或运算符"></a>逻辑异或运算符</h3><p>逻辑异或（<code>XOR</code>）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p>
<p>MySQL支持的位运算符如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/bitwise.png"></p>
<ol>
<li><p><strong>按位与运算符</strong> 按位与(<code>&</code>)运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二 进制位的数值都为1时，则该位返回1，否则返回0。</p>
<p>例子：</p>
<p>​    1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制 数为10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</p>
</li>
<li><p><strong>按位或运算符</strong> 按位或(<code>|</code>)运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的 二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。</p>
<p>例子：</p>
<p>​    1的二进制数为0001，10的二进制数为1010，所以1 | 10的结果为1011，对应的十进制数为11。20的二进 制数为10100，30的二进制数为11110，所以20 | 30的结果为11110，对应的十进制数为30。</p>
</li>
<li><p><strong>按位异或运算符</strong>“<code>^</code>”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</p>
</li>
<li><p><strong>按位取反运算符</strong> 按位取反(<code>~</code>)运算符将给定的值的二进制数逐位进行取反操作，即将1变为0，将0变 为1。</p>
</li>
<li><p><strong>按位右移运算符</strong> 按位右移(<code>>></code>)运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的 位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</p>
<p>例子：</p>
<p>​    1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2 位为0000 0001，对应的十进制数为1。</p>
</li>
<li><p><strong>按位左移运算符</strong> 按位左移(<code><<</code>)运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的 位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。</p>
<p>例子：</p>
<p>​    1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移 两位为0001 0000，对应的十进制数为16。</p>
</li>
</ol>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/priority.png" style="zoom: 50%;" />

<p>数字编号越大，优先级越高，优先级高的运算符先进行计算。</p>
<hr>
<h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用 ORDER BY 子句排序</p>
<ul>
<li><span style="color: #730002">ASC(ascend)</span>: <strong>升序</strong></li>
<li><span style="color: #730002">DESC(descend)</span>: **降序<br>** ORDER BY 子句在SELECT语句的结尾。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   last_name, job_id, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span>     employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>

<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>分页原理 所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。 MySQL<strong>中使用</strong> LIMIT 实现分页<br>格式:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LIMIT [位置偏移量,] 行数</span><br></pre></td></tr></table></figure>

<ul>
<li>分页显式公式<strong>：（当前页数-1）每页条数，每页条数</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table </span><br><span class="line">LIMIT(PageNo - 1)*PageSize,PageSize;</span><br></pre></td></tr></table></figure>

<p>举例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">--前10条记录:</span></span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">10</span>; 或者</span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--第11至20条记录:</span></span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--第21至30条记录:</span></span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">LIMIT</span> <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<div class="note no-icon primary"><p>注意:LIMIT 子句必须放在整个SELECT语句的最后!</p>
</div>

<p>“LIMIT条目数”等价于”LIMIT  0, 条目数”</p>
<p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p>
<p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p>
<p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p>
<p>SQL92中，笛卡尔积也称为交叉连接，英文是 <code>CROSS JOIN</code>。在 SQL99 中也是使用<code>CROSS JOIN</code>表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡尔积：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询员工姓名和所在部门名称</span><br><span class="line">SELECT last_name,department_name FROM employees,departments;</span><br><span class="line">SELECT last_name,department_name FROM employees CROSS JOIN departments;</span><br><span class="line">SELECT last_name,department_name FROM employees INNER JOIN departments;</span><br><span class="line">SELECT last_name,department_name FROM employees JOIN departments;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>笛卡尔积的错误会在下面条件下产生</strong>：</p>
<ul>
<li>省略多个表的连接条件（或关联条件）</li>
<li>连接条件（或关联条件）无效</li>
<li>所有表中的所有行互相连接</li>
</ul>
</li>
<li><p>为了避免笛卡尔积， 可以<strong>在 WHERE 加入有效的连接条件。</strong></p>
</li>
<li><p>加入连接条件后，查询语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT	table1.column, table2.column</span><br><span class="line">FROM	table1, table2</span><br><span class="line">WHERE	table1.column1 &#x3D; table2.column2;  #连接条件</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在 WHERE子句中写入连接条件。</strong></li>
</ul>
</li>
<li><p>正确写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#案例：查询员工的姓名及其部门名称</span><br><span class="line">SELECT last_name, department_name</span><br><span class="line">FROM employees, departments</span><br><span class="line">WHERE employees.department_id &#x3D; departments.department_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在表中有相同列时，在列名之前加上表名前缀。</strong></p>
</li>
</ul>
<h3 id="等值连接与非等值连接"><a href="#等值连接与非等值连接" class="headerlink" title="等值连接与非等值连接"></a>等值连接与非等值连接</h3><p>非等值连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level</span><br><span class="line"><span class="keyword">FROM</span>   employees e, job_grades j</span><br><span class="line"><span class="keyword">WHERE</span>  e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal;</span><br></pre></td></tr></table></figure>



<h3 id="自连接与非自连接"><a href="#自连接与非自连接" class="headerlink" title="自连接与非自连接"></a>自连接与非自连接</h3><p>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两个表再进行内连接，外连接等查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FIRST.Cno, SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>, Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno = SECOND.Cno</span><br></pre></td></tr></table></figure>

<h3 id="内连接与外连接"><a href="#内连接与外连接" class="headerlink" title="内连接与外连接"></a>内连接与外连接</h3><ul>
<li><p>内连接: 合并具有同一列的两个以上的表的行, <strong>结果集中不包含一个表与另一个表不匹配的行</strong></p>
</li>
<li><p>外连接: 两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的行</strong> <strong>，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</p>
</li>
<li><p>如果是左外连接，则连接条件中左边的表也称为<code>主表</code>，右边的表称为<code>从表</code>。</p>
<p>如果是右外连接，则连接条件中右边的表也称为<code>主表</code>，左边的表称为<code>从表</code>。</p>
</li>
</ul>
<h4 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接(INNER JOIN)"></a>内连接(INNER JOIN)</h4><ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 字段列表</span><br><span class="line">FROM A表 INNER JOIN B表</span><br><span class="line">ON 关联条件</span><br><span class="line">WHERE 等其他子句;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT e.employee_id, e.last_name, e.department_id, </span><br><span class="line">       d.department_id, d.location_id</span><br><span class="line">FROM   employees e JOIN departments d</span><br><span class="line">ON     (e.department_id &#x3D; d.department_id);</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/innerjoin.png"></p>
<h4 id="外连接-OUTER-JOIN-的实现"><a href="#外连接-OUTER-JOIN-的实现" class="headerlink" title="外连接(OUTER JOIN)的实现"></a>外连接(OUTER JOIN)的实现</h4><h5 id="左外连接-LEFT-OUTER-JOIN"><a href="#左外连接-LEFT-OUTER-JOIN" class="headerlink" title="左外连接(LEFT OUTER JOIN)"></a>左外连接(LEFT OUTER JOIN)</h5><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/leftjoin.png"></p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#实现查询结果是A</span><br><span class="line">SELECT 字段列表</span><br><span class="line">FROM A表 LEFT JOIN B表</span><br><span class="line">ON 关联条件</span><br><span class="line">WHERE 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT e.last_name, e.department_id, d.department_name</span><br><span class="line">FROM   employees e</span><br><span class="line">LEFT OUTER JOIN departments d</span><br><span class="line">ON   (e.department_id &#x3D; d.department_id) ;</span><br></pre></td></tr></table></figure>

<h5 id="右外连接-RIGHT-OUTER-JOIN"><a href="#右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="右外连接(RIGHT OUTER JOIN)"></a>右外连接(RIGHT OUTER JOIN)</h5><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/rightjoin.png"></p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#实现查询结果是B</span><br><span class="line">SELECT 字段列表</span><br><span class="line">FROM A表 RIGHT JOIN B表</span><br><span class="line">ON 关联条件</span><br><span class="line">WHERE 等其他子句;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT e.last_name, e.department_id, d.department_name</span><br><span class="line">FROM   employees e</span><br><span class="line">RIGHT OUTER JOIN departments d</span><br><span class="line">ON    (e.department_id &#x3D; d.department_id) ;</span><br></pre></td></tr></table></figure>

<h5 id="满外连接-FULL-OUTER-JOIN"><a href="#满外连接-FULL-OUTER-JOIN" class="headerlink" title="满外连接(FULL OUTER JOIN)"></a>满外连接(FULL OUTER JOIN)</h5><ul>
<li>满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li>
<li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li>
<li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN <strong>UNION</strong> RIGHT join代替。</li>
</ul>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mysql%E5%9F%BA%E7%A1%80/fulljoin.png"></p>
<h3 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h3><p><strong>合并查询结果</strong><br>利用<code>UNION</code>关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p>
<p>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT column,... FROM table1</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT column,... FROM table2</span><br></pre></td></tr></table></figure>

<p><code>UNION</code>操作符返回两个查询的结果集的并集，去除重复记录。</p>
<p><code>UNION ALL</code>操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p>
<div class="note no-icon danger"><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p>
</div>

<h3 id="SQL99语法新特性"><a href="#SQL99语法新特性" class="headerlink" title="SQL99语法新特性"></a>SQL99语法新特性</h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如<code>NATURAL JOIN</code>用来表示自然连接。</p>
<p>我们可以把自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中所有相同的字段，然后进行等值连接。</p>
<p>在SQL92标准中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,department_name</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">ON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;</span><br><span class="line">AND e.&#96;manager_id&#96; &#x3D; d.&#96;manager_id&#96;;</span><br></pre></td></tr></table></figure>

<p>在 SQL99 中你可以写成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,department_name</span><br><span class="line">FROM employees e NATURAL JOIN departments d;</span><br></pre></td></tr></table></figure>

<h3 id="USING连接"><a href="#USING连接" class="headerlink" title="USING连接"></a>USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的<strong>同名字段</strong>进行等值连接。但是只能配合JOIN一起使用。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,department_name</span><br><span class="line">FROM employees e JOIN departments d</span><br><span class="line">USING (department_id);</span><br></pre></td></tr></table></figure>

<p>你能看出与自然连接<code>NATURAL JOIN</code>不同的是，<code>USING</code>指定了具体的相同的字段名称，你需要在<code>USING</code>的括号<code>()</code>中填入要指定的同名字段。同时使用<code>JOIN...USING</code>可以简化<code>JOIN ON</code>的等值连接。它与下面的 SQL 查询结果是相同的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,last_name,department_name</span><br><span class="line">FROM employees e ,departments d</span><br><span class="line">WHERE e.department_id &#x3D; d.department_id;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><h2 id="MySQL的内置函数及分类"><a href="#MySQL的内置函数及分类" class="headerlink" title="MySQL的内置函数及分类"></a>MySQL的内置函数及分类</h2><p>MySQL提供的内置函数从<code>实现的功能角度</code>可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里，我将这些丰富的内置函数再分为两类：<code>单行函数</code>、<code>聚合函数（或分组函数）</code>。</p>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td><code>ABS(x)</code></td>
<td>返回x的绝对值</td>
</tr>
<tr>
<td><code>SIGN(X)</code></td>
<td>返回X的符号。正数返回1，负数返回-1，0返回0</td>
</tr>
<tr>
<td><code>PI()</code></td>
<td>返回圆周率的值</td>
</tr>
<tr>
<td><code>CEIL(x)</code>，<code>CEILING(x)</code></td>
<td>返回大于或等于某个值的最小整数</td>
</tr>
<tr>
<td><code>FLOOR(x)</code></td>
<td>返回小于或等于某个值的最大整数</td>
</tr>
<tr>
<td><code>LEAST(e1,e2,e3…)</code></td>
<td>返回列表中的最小值</td>
</tr>
<tr>
<td><code>GREATEST(e1,e2,e3…)</code></td>
<td>返回列表中的最大值</td>
</tr>
<tr>
<td><code>MOD(x,y)</code></td>
<td>返回X除以Y后的余数</td>
</tr>
<tr>
<td><code>RAND()</code></td>
<td>返回0~1的随机值</td>
</tr>
<tr>
<td><code>RAND(x)</code></td>
<td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td>
</tr>
<tr>
<td><code>ROUND(x)</code></td>
<td>返回一个对x的值进行四舍五入后，最接近于X的整数</td>
</tr>
<tr>
<td><code>ROUND(x,y)</code></td>
<td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td>
</tr>
<tr>
<td><code>TRUNCATE(x,y)</code></td>
<td>返回数字x截断为y位小数的结果</td>
</tr>
<tr>
<td><code>SQRT(x)</code></td>
<td>返回x的平方根。当X的值为负数时，返回NULL</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ABS(-123),ABS(32),SIGN(-23),SIGN(43),PI(),CEIL(32.32),CEILING(-43.23),FLOOR(32.32),</span><br><span class="line">FLOOR(-43.23),MOD(12,5)</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="角度与弧度互换函数"><a href="#角度与弧度互换函数" class="headerlink" title="角度与弧度互换函数"></a>角度与弧度互换函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>RADIANS(x)</td>
<td>将角度转化为弧度，其中，参数x为角度值</td>
</tr>
<tr>
<td>DEGREES(x)</td>
<td>将弧度转化为角度，其中，参数x为弧度值</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT RADIANS(30),RADIANS(60),RADIANS(90),DEGREES(2*PI()),DEGREES(RADIANS(90))</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>SIN(x)</td>
<td>返回x的正弦值，其中，参数x为弧度值</td>
</tr>
<tr>
<td>ASIN(x)</td>
<td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td>
</tr>
<tr>
<td>COS(x)</td>
<td>返回x的余弦值，其中，参数x为弧度值</td>
</tr>
<tr>
<td>ACOS(x)</td>
<td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td>
</tr>
<tr>
<td>TAN(x)</td>
<td>返回x的正切值，其中，参数x为弧度值</td>
</tr>
<tr>
<td>ATAN(x)</td>
<td>返回x的反正切值，即返回正切值为x的值</td>
</tr>
<tr>
<td>ATAN2(m,n)</td>
<td>返回两个参数的反正切值</td>
</tr>
<tr>
<td>COT(x)</td>
<td>返回x的余切值，其中，X为弧度值</td>
</tr>
</tbody></table>
<p>举例：</p>
<p>ATAN2(M,N)函数返回两个参数的反正切值。<br>与ATAN(X)函数相比，ATAN2(M,N)需要两个参数，例如有两个点point(x1,y1)和point(x2,y2)，使用ATAN(X)函数计算反正切值为ATAN((y2-y1)/(x2-x1))，使用ATAN2(M,N)计算反正切值则为ATAN2(y2-y1,x2-x1)。由使用方式可以看出，当x2-x1等于0时，ATAN(X)函数会报错，而ATAN2(M,N)函数则仍然可以计算。</p>
<p>ATAN2(M,N)函数的使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SIN(RADIANS(30)),DEGREES(ASIN(1)),TAN(RADIANS(45)),DEGREES(ATAN(1)),DEGREES(ATAN2(1,1))</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="指数与对数"><a href="#指数与对数" class="headerlink" title="指数与对数"></a>指数与对数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>POW(x,y)，POWER(X,Y)</td>
<td>返回x的y次方</td>
</tr>
<tr>
<td>EXP(X)</td>
<td>返回e的X次方，其中e是一个常数，2.718281828459045</td>
</tr>
<tr>
<td>LN(X)，LOG(X)</td>
<td>返回以e为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td>
</tr>
<tr>
<td>LOG10(X)</td>
<td>返回以10为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td>
</tr>
<tr>
<td>LOG2(X)</td>
<td>返回以2为底的X的对数，当X &lt;= 0 时，返回NULL</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT POW(2,5),POWER(2,4),EXP(2),LN(10),LOG10(10),LOG2(4)</span><br><span class="line">    -&gt; FROM DUAL;</span><br><span class="line">+----------+------------+------------------+-------------------+-----------+---------+</span><br><span class="line">| POW(2,5) | POWER(2,4) | EXP(2)           | LN(10)            | LOG10(10) | LOG2(4) |</span><br><span class="line">+----------+------------+------------------+-------------------+-----------+---------+</span><br><span class="line">|       32 |         16 | 7.38905609893065 | 2.302585092994046 |         1 |       2 |</span><br><span class="line">+----------+------------+------------------+-------------------+-----------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="进制间的转换"><a href="#进制间的转换" class="headerlink" title="进制间的转换"></a>进制间的转换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>BIN(x)</td>
<td>返回x的二进制编码</td>
</tr>
<tr>
<td>HEX(x)</td>
<td>返回x的十六进制编码</td>
</tr>
<tr>
<td>OCT(x)</td>
<td>返回x的八进制编码</td>
</tr>
<tr>
<td>CONV(x,f1,f2)</td>
<td>返回f1进制数变成f2进制数</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT BIN(10),HEX(10),OCT(10),CONV(10,2,8)</span><br><span class="line">    -&gt; FROM DUAL;</span><br><span class="line">+---------+---------+---------+--------------+</span><br><span class="line">| BIN(10) | HEX(10) | OCT(10) | CONV(10,2,8) |</span><br><span class="line">+---------+---------+---------+--------------+</span><br><span class="line">| 1010    | A       | 12      | 2            |</span><br><span class="line">+---------+---------+---------+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>ASCII(S)</td>
<td>返回字符串S中的第一个字符的ASCII码值</td>
</tr>
<tr>
<td>CHAR_LENGTH(s)</td>
<td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td>
</tr>
<tr>
<td>LENGTH(s)</td>
<td>返回字符串s的字节数，和字符集有关</td>
</tr>
<tr>
<td>CONCAT(s1,s2,……,sn)</td>
<td>连接s1,s2,……,sn为一个字符串</td>
</tr>
<tr>
<td>CONCAT_WS(x, s1,s2,……,sn)</td>
<td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td>
</tr>
<tr>
<td>INSERT(str, idx, len, replacestr)</td>
<td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td>
</tr>
<tr>
<td>REPLACE(str, a, b)</td>
<td>用字符串b替换字符串str中所有出现的字符串a</td>
</tr>
<tr>
<td>UPPER(s) 或 UCASE(s)</td>
<td>将字符串s的所有字母转成大写字母</td>
</tr>
<tr>
<td>LOWER(s)  或LCASE(s)</td>
<td>将字符串s的所有字母转成小写字母</td>
</tr>
<tr>
<td>LEFT(str,n)</td>
<td>返回字符串str最左边的n个字符</td>
</tr>
<tr>
<td>RIGHT(str,n)</td>
<td>返回字符串str最右边的n个字符</td>
</tr>
<tr>
<td>LPAD(str, len, pad)</td>
<td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td>
</tr>
<tr>
<td>RPAD(str ,len, pad)</td>
<td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td>
</tr>
<tr>
<td>LTRIM(s)</td>
<td>去掉字符串s左侧的空格</td>
</tr>
<tr>
<td>RTRIM(s)</td>
<td>去掉字符串s右侧的空格</td>
</tr>
<tr>
<td>TRIM(s)</td>
<td>去掉字符串s开始与结尾的空格</td>
</tr>
<tr>
<td>TRIM(s1 FROM s)</td>
<td>去掉字符串s开始与结尾的s1</td>
</tr>
<tr>
<td>TRIM(LEADING s1 FROM s)</td>
<td>去掉字符串s开始处的s1</td>
</tr>
<tr>
<td>TRIM(TRAILING s1 FROM s)</td>
<td>去掉字符串s结尾处的s1</td>
</tr>
<tr>
<td>REPEAT(str, n)</td>
<td>返回str重复n次的结果</td>
</tr>
<tr>
<td>SPACE(n)</td>
<td>返回n个空格</td>
</tr>
<tr>
<td>STRCMP(s1,s2)</td>
<td>比较字符串s1,s2的ASCII码值的大小</td>
</tr>
<tr>
<td>SUBSTR(s,index,len)</td>
<td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</td>
</tr>
<tr>
<td>LOCATE(substr,str)</td>
<td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td>
</tr>
<tr>
<td>ELT(m,s1,s2,…,sn)</td>
<td>返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn</td>
</tr>
<tr>
<td>FIELD(s,s1,s2,…,sn)</td>
<td>返回字符串s在字符串列表中第一次出现的位置</td>
</tr>
<tr>
<td>FIND_IN_SET(s1,s2)</td>
<td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td>
</tr>
<tr>
<td>REVERSE(s)</td>
<td>返回s反转后的字符串</td>
</tr>
<tr>
<td>NULLIF(value1,value2)</td>
<td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td>
</tr>
</tbody></table>
<div class="note no-icon danger"><p>注意：MySQL中，字符串的位置是从1开始的。</p>
</div>

<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT FIELD(&#39;mm&#39;,&#39;hello&#39;,&#39;msm&#39;,&#39;amma&#39;),FIND_IN_SET(&#39;mm&#39;,&#39;hello,mm,amma&#39;)</span><br><span class="line">    -&gt; FROM DUAL;</span><br><span class="line">+----------------------------------+-----------------------------------+</span><br><span class="line">| FIELD(&#39;mm&#39;,&#39;hello&#39;,&#39;msm&#39;,&#39;amma&#39;) | FIND_IN_SET(&#39;mm&#39;,&#39;hello,mm,amma&#39;) |</span><br><span class="line">+----------------------------------+-----------------------------------+</span><br><span class="line">|                                0 |                                 2 |</span><br><span class="line">+----------------------------------+-----------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT NULLIF(&#39;mysql&#39;,&#39;mysql&#39;),NULLIF(&#39;mysql&#39;, &#39;&#39;);</span><br><span class="line">+-------------------------+---------------------+</span><br><span class="line">| NULLIF(&#39;mysql&#39;,&#39;mysql&#39;) | NULLIF(&#39;mysql&#39;, &#39;&#39;) |</span><br><span class="line">+-------------------------+---------------------+</span><br><span class="line">| NULL                    | mysql               |</span><br><span class="line">+-------------------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h3 id="日期与时间戳的转换"><a href="#日期与时间戳的转换" class="headerlink" title="日期与时间戳的转换"></a>日期与时间戳的转换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>UNIX_TIMESTAMP()</td>
<td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() -&gt;1634348884</td>
</tr>
<tr>
<td>UNIX_TIMESTAMP(date)</td>
<td>将时间date以UNIX时间戳的形式返回。</td>
</tr>
<tr>
<td>FROM_UNIXTIME(timestamp)</td>
<td>将UNIX时间戳的时间转换为普通格式的时间</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(now());</span><br><span class="line">+-----------------------+</span><br><span class="line">| UNIX_TIMESTAMP(now()) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|            1576380910 |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(CURDATE());</span><br><span class="line">+---------------------------+</span><br><span class="line">| UNIX_TIMESTAMP(CURDATE()) |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                1576339200 |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(CURTIME());</span><br><span class="line">+---------------------------+</span><br><span class="line">| UNIX_TIMESTAMP(CURTIME()) |</span><br><span class="line">+---------------------------+</span><br><span class="line">|                1576380969 |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT UNIX_TIMESTAMP(&#39;2011-11-11 11:11:11&#39;)</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| UNIX_TIMESTAMP(&#39;2011-11-11 11:11:11&#39;) |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">|                            1320981071 |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT FROM_UNIXTIME(1576380910);</span><br><span class="line">+---------------------------+</span><br><span class="line">| FROM_UNIXTIME(1576380910) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 2019-12-15 11:35:10       |</span><br><span class="line">+---------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="获取月份、星期、星期数、天数等函数"><a href="#获取月份、星期、星期数、天数等函数" class="headerlink" title="获取月份、星期、星期数、天数等函数"></a>获取月份、星期、星期数、天数等函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR(date) / MONTH(date) / DAY(date)</td>
<td>返回具体的日期值</td>
</tr>
<tr>
<td>HOUR(time) / MINUTE(time) / SECOND(time)</td>
<td>返回具体的时间值</td>
</tr>
<tr>
<td>MONTHNAME(date)</td>
<td>返回月份：January，…</td>
</tr>
<tr>
<td>DAYNAME(date)</td>
<td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td>
</tr>
<tr>
<td>WEEKDAY(date)</td>
<td>返回周几，注意，周1是0，周2是1，。。。周日是6</td>
</tr>
<tr>
<td>QUARTER(date)</td>
<td>返回日期对应的季度，范围为1～4</td>
</tr>
<tr>
<td>WEEK(date) ， WEEKOFYEAR(date)</td>
<td>返回一年中的第几周</td>
</tr>
<tr>
<td>DAYOFYEAR(date)</td>
<td>返回日期是一年中的第几天</td>
</tr>
<tr>
<td>DAYOFMONTH(date)</td>
<td>返回日期位于所在月份的第几天</td>
</tr>
<tr>
<td>DAYOFWEEK(date)</td>
<td>返回周几，注意：周日是1，周一是2，。。。周六是7</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT YEAR(CURDATE()),MONTH(CURDATE()),DAY(CURDATE()),</span><br><span class="line">HOUR(CURTIME()),MINUTE(NOW()),SECOND(SYSDATE())</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="日期的操作函数"><a href="#日期的操作函数" class="headerlink" title="日期的操作函数"></a>日期的操作函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>EXTRACT(type FROM date)</td>
<td>返回指定日期中特定的部分，type指定返回的值</td>
</tr>
</tbody></table>
<p>EXTRACT(type FROM date)函数中type的取值与含义：</p>
<table>
<thead>
<tr>
<th>type取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>MICROSECOND</td>
<td>返回毫秒数</td>
</tr>
<tr>
<td>SECOND</td>
<td>返回秒数</td>
</tr>
<tr>
<td>MINUTE</td>
<td>返回分钟数</td>
</tr>
<tr>
<td>HOUR</td>
<td>返回小时数</td>
</tr>
<tr>
<td>DAY</td>
<td>返回大数</td>
</tr>
<tr>
<td>WEEK</td>
<td>返回口期在一年中的第儿个星期</td>
</tr>
<tr>
<td>MONTH</td>
<td>返回日期在一年中的第几个月</td>
</tr>
<tr>
<td>QUARTER</td>
<td>返回日期在一年中的第几个季度</td>
</tr>
<tr>
<td>YEAR</td>
<td>返回日期的年份</td>
</tr>
<tr>
<td>SECOND MICROSECOND</td>
<td>返回秒和毫秒值</td>
</tr>
<tr>
<td>MINUTE MICROSECOND</td>
<td>返回分钟和毫秒值</td>
</tr>
<tr>
<td>MINUTE SECOND</td>
<td>返回分钟和秒值</td>
</tr>
<tr>
<td>HOUR MICROSECOND</td>
<td>返回小时和毫秒值</td>
</tr>
<tr>
<td>HOUR SECOND</td>
<td>返回小时和秒值</td>
</tr>
<tr>
<td>HOUR MINUTE</td>
<td>返回小时和分钟值</td>
</tr>
<tr>
<td>DAY MICROSECOND</td>
<td>返回天和毫秒值</td>
</tr>
<tr>
<td>DAY SECOND</td>
<td>返回天和秒值</td>
</tr>
<tr>
<td>DAY MINUTE</td>
<td>返回天和分钟值</td>
</tr>
<tr>
<td>DAY HOUR</td>
<td>返回天和小时</td>
</tr>
<tr>
<td>YEAR MONTH</td>
<td>返回年和月</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(<span class="keyword">MINUTE</span> <span class="keyword">FROM</span> <span class="keyword">NOW</span>()),<span class="keyword">EXTRACT</span>( <span class="keyword">WEEK</span> <span class="keyword">FROM</span> <span class="keyword">NOW</span>()),</span><br><span class="line"><span class="keyword">EXTRACT</span>( <span class="keyword">QUARTER</span> <span class="keyword">FROM</span> <span class="keyword">NOW</span>()),<span class="keyword">EXTRACT</span>( MINUTE_SECOND <span class="keyword">FROM</span> <span class="keyword">NOW</span>())</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="时间和秒钟转换的函数"><a href="#时间和秒钟转换的函数" class="headerlink" title="时间和秒钟转换的函数"></a>时间和秒钟转换的函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>TIME_TO_SEC(time)</td>
<td>将 time 转化为秒并返回结果值。转化的公式为：<code>小时*3600+分钟*60+秒</code></td>
</tr>
<tr>
<td>SEC_TO_TIME(seconds)</td>
<td>将 seconds 描述转化为包含小时、分钟和秒的时间</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT TIME_TO_SEC(NOW());</span><br><span class="line">+--------------------+</span><br><span class="line">| TIME_TO_SEC(NOW()) |</span><br><span class="line">+--------------------+</span><br><span class="line">|               78774 |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT SEC_TO_TIME(78774);</span><br><span class="line">+--------------------+</span><br><span class="line">| SEC_TO_TIME(78774) |</span><br><span class="line">+--------------------+</span><br><span class="line">| 21:52:54            |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set (0.12 sec)</span><br></pre></td></tr></table></figure>

<h3 id="计算日期和时间的函数"><a href="#计算日期和时间的函数" class="headerlink" title="计算日期和时间的函数"></a>计算日期和时间的函数</h3><p><strong>第1组：</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>DATE_ADD(datetime, INTERVAL  expr type)，ADDDATE(date,INTERVAL expr type)</td>
<td>返回与给定日期时间相差INTERVAL时间段的日期时间</td>
</tr>
<tr>
<td>DATE_SUB(date,INTERVAL expr type)，SUBDATE(date,INTERVAL expr type)</td>
<td>返回与date相差INTERVAL时间间隔的日期</td>
</tr>
</tbody></table>
<p>上述函数中type的取值：</p>
<table>
<thead>
<tr>
<th>间隔类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>HOUR</td>
<td>小时</td>
</tr>
<tr>
<td>MINUTE</td>
<td>分钟</td>
</tr>
<tr>
<td>SECOND</td>
<td>秒</td>
</tr>
<tr>
<td>YEAR</td>
<td>年</td>
</tr>
<tr>
<td>MONTH</td>
<td>月</td>
</tr>
<tr>
<td>DAY</td>
<td>日</td>
</tr>
<tr>
<td>YEAR MONTH</td>
<td>年和月</td>
</tr>
<tr>
<td>DAY HOUR</td>
<td>日和小时</td>
</tr>
<tr>
<td>DAY MINUTE</td>
<td>日和分钟</td>
</tr>
<tr>
<td>DAY SECOND</td>
<td>日和秒</td>
</tr>
<tr>
<td>HOUR MINUTE</td>
<td>小时和分钟</td>
</tr>
<tr>
<td>HOUR SECOND</td>
<td>小时和秒</td>
</tr>
<tr>
<td>MINUTE SECOND</td>
<td>分钟和秒</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 1 DAY) AS col1,DATE_ADD(&#39;2021-10-21 23:32:12&#39;,INTERVAL 1 SECOND) AS col2,</span><br><span class="line">ADDDATE(&#39;2021-10-21 23:32:12&#39;,INTERVAL 1 SECOND) AS col3,</span><br><span class="line">DATE_ADD(&#39;2021-10-21 23:32:12&#39;,INTERVAL &#39;1_1&#39; MINUTE_SECOND) AS col4,</span><br><span class="line">DATE_ADD(NOW(), INTERVAL -1 YEAR) AS col5, #可以是负数</span><br><span class="line">DATE_ADD(NOW(), INTERVAL &#39;1_1&#39; YEAR_MONTH) AS col6 #需要单引号</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATE_SUB(&#39;2021-01-21&#39;,INTERVAL 31 DAY) AS col1,</span><br><span class="line">SUBDATE(&#39;2021-01-21&#39;,INTERVAL 31 DAY) AS col2,</span><br><span class="line">DATE_SUB(&#39;2021-01-21 02:01:01&#39;,INTERVAL &#39;1 1&#39; DAY_HOUR) AS col3</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<p><strong>第2组：</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>ADDTIME(time1,time2)</td>
<td>返回time1加上time2的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td>
</tr>
<tr>
<td>SUBTIME(time1,time2)</td>
<td>返回time1减去time2后的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td>返回date1 - date2的日期间隔天数</td>
</tr>
<tr>
<td>TIMEDIFF(time1, time2)</td>
<td>返回time1 - time2的时间间隔</td>
</tr>
<tr>
<td>FROM_DAYS(N)</td>
<td>返回从0000年1月1日起，N天以后的日期</td>
</tr>
<tr>
<td>TO_DAYS(date)</td>
<td>返回日期date距离0000年1月1日的天数</td>
</tr>
<tr>
<td>LAST_DAY(date)</td>
<td>返回date所在月份的最后一天的日期</td>
</tr>
<tr>
<td>MAKEDATE(year,n)</td>
<td>针对给定年份与所在年份中的天数返回一个日期</td>
</tr>
<tr>
<td>MAKETIME(hour,minute,second)</td>
<td>将给定的小时、分钟和秒组合成时间并返回</td>
</tr>
<tr>
<td>PERIOD_ADD(time,n)</td>
<td>返回time加上n后的时间</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ADDTIME</span>(<span class="keyword">NOW</span>(),<span class="number">20</span>),<span class="keyword">SUBTIME</span>(<span class="keyword">NOW</span>(),<span class="number">30</span>),<span class="keyword">SUBTIME</span>(<span class="keyword">NOW</span>(),<span class="string">&#x27;1:1:3&#x27;</span>),<span class="keyword">DATEDIFF</span>(<span class="keyword">NOW</span>(),<span class="string">&#x27;2021-10-01&#x27;</span>),</span><br><span class="line"><span class="keyword">TIMEDIFF</span>(<span class="keyword">NOW</span>(),<span class="string">&#x27;2021-10-25 22:10:10&#x27;</span>),<span class="keyword">FROM_DAYS</span>(<span class="number">366</span>),<span class="keyword">TO_DAYS</span>(<span class="string">&#x27;0000-12-25&#x27;</span>),</span><br><span class="line"><span class="keyword">LAST_DAY</span>(<span class="keyword">NOW</span>()),<span class="keyword">MAKEDATE</span>(<span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()),<span class="number">12</span>),<span class="keyword">MAKETIME</span>(<span class="number">10</span>,<span class="number">21</span>,<span class="number">23</span>),<span class="keyword">PERIOD_ADD</span>(<span class="number">20200101010101</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>

<h3 id="日期的格式化与解析"><a href="#日期的格式化与解析" class="headerlink" title="日期的格式化与解析"></a>日期的格式化与解析</h3><table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>DATE_FORMAT(date,fmt)</td>
<td>按照字符串fmt格式化日期date值</td>
</tr>
<tr>
<td>TIME_FORMAT(time,fmt)</td>
<td>按照字符串fmt格式化时间time值</td>
</tr>
<tr>
<td>GET_FORMAT(date_type,format_type)</td>
<td>返回日期字符串的显示格式</td>
</tr>
<tr>
<td>STR_TO_DATE(str, fmt)</td>
<td>按照字符串fmt对str进行解析，解析为一个日期</td>
</tr>
</tbody></table>
<p>上述<code>非GET_FORMAT</code>函数中fmt参数常用的格式符：</p>
<table>
<thead>
<tr>
<th>格式符</th>
<th>说明</th>
<th>格式符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>4位数字表示年份</td>
<td>%y</td>
<td>表示两位数字表示年份</td>
</tr>
<tr>
<td>%M</td>
<td>月名表示月份（January,….）</td>
<td>%m</td>
<td>两位数字表示月份（01,02,03。。。）</td>
</tr>
<tr>
<td>%b</td>
<td>缩写的月名（Jan.，Feb.，….）</td>
<td>%c</td>
<td>数字表示月份（1,2,3,…）</td>
</tr>
<tr>
<td>%D</td>
<td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td>
<td>%d</td>
<td>两位数字表示月中的天数(01,02…)</td>
</tr>
<tr>
<td>%e</td>
<td>数字形式表示月中的天数（1,2,3,4,5…..）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%H</td>
<td>两位数字表示小数，24小时制（01,02..）</td>
<td>%h和%I</td>
<td>两位数字表示小时，12小时制（01,02..）</td>
</tr>
<tr>
<td>%k</td>
<td>数字形式的小时，24小时制(1,2,3)</td>
<td>%l</td>
<td>数字形式表示小时，12小时制（1,2,3,4….）</td>
</tr>
<tr>
<td>%i</td>
<td>两位数字表示分钟（00,01,02）</td>
<td>%S和%s</td>
<td>两位数字表示秒(00,01,02…)</td>
</tr>
<tr>
<td>%W</td>
<td>一周中的星期名称（Sunday…）</td>
<td>%a</td>
<td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td>
</tr>
<tr>
<td>%w</td>
<td>以数字表示周中的天数(0=Sunday,1=Monday….)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%j</td>
<td>以3位数字表示年中的天数(001,002…)</td>
<td>%U</td>
<td>以数字表示年中的第几周，（1,2,3。。）其中Sunday为周中第一天</td>
</tr>
<tr>
<td>%u</td>
<td>以数字表示年中的第几周，（1,2,3。。）其中Monday为周中第一天</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%T</td>
<td>24小时制</td>
<td>%r</td>
<td>12小时制</td>
</tr>
<tr>
<td>%p</td>
<td>AM或PM</td>
<td>%%</td>
<td>表示%</td>
</tr>
</tbody></table>
<p>GET_FORMAT函数中date_type和format_type参数取值如下：</p>
<table>
<thead>
<tr>
<th>日期类型</th>
<th>格式化类型</th>
<th>返回的格式化字符串</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>USA</td>
<td>%m.%d.%Y</td>
</tr>
<tr>
<td>DATE</td>
<td>JIS</td>
<td>%Y-%m-%d</td>
</tr>
<tr>
<td>DATE</td>
<td>ISO</td>
<td>%Y-%m-%d</td>
</tr>
<tr>
<td>DATE</td>
<td>EUR</td>
<td>%d.%m.%Y</td>
</tr>
<tr>
<td>DATE</td>
<td>INTERNAL</td>
<td>%Y%m%d</td>
</tr>
<tr>
<td>TIME</td>
<td>USA</td>
<td>%h:%i:%s %p</td>
</tr>
<tr>
<td>TIME</td>
<td>JIS</td>
<td>%H:%i:%s</td>
</tr>
<tr>
<td>TIME</td>
<td>ISO</td>
<td>%H:%i:%s</td>
</tr>
<tr>
<td>TIME</td>
<td>EUR</td>
<td>%H.%i.%s</td>
</tr>
<tr>
<td>TIME</td>
<td>INTERNAL</td>
<td>%H%i%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>USA</td>
<td>%Y-%m-%d %H.%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>JIS</td>
<td>%Y-%m-%d %H:%i:%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>ISO</td>
<td>%Y-%m-%d %H:%i:%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>EUR</td>
<td>%Y-%m-%d %I-L%i.%s</td>
</tr>
<tr>
<td>DATETIME</td>
<td>INTERNAL</td>
<td>%Y%m%d%H%i%s</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DATE_FORMAT(NOW(), &#39;%H:%i:%s&#39;);</span><br><span class="line">+--------------------------------+</span><br><span class="line">| DATE_FORMAT(NOW(), &#39;%H:%i:%s&#39;) |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| 22:57:34                        |</span><br><span class="line">+--------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT STR_TO_DATE(&#39;09&#x2F;01&#x2F;2009&#39;,&#39;%m&#x2F;%d&#x2F;%Y&#39;)</span><br><span class="line">FROM DUAL;</span><br><span class="line"></span><br><span class="line">SELECT STR_TO_DATE(&#39;20140422154706&#39;,&#39;%Y%m%d%H%i%s&#39;)</span><br><span class="line">FROM DUAL;</span><br><span class="line"></span><br><span class="line">SELECT STR_TO_DATE(&#39;2014-04-22 15:47:06&#39;,&#39;%Y-%m-%d %H:%i:%s&#39;)</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT GET_FORMAT(DATE, &#39;USA&#39;);</span><br><span class="line">+-------------------------+</span><br><span class="line">| GET_FORMAT(DATE, &#39;USA&#39;) |</span><br><span class="line">+-------------------------+</span><br><span class="line">| %m.%d.%Y                |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">SELECT DATE_FORMAT(NOW(),GET_FORMAT(DATE,&#39;USA&#39;)),</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT STR_TO_DATE(&#39;2020-01-01 00:00:00&#39;,&#39;%Y-%m-%d&#39;); </span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| STR_TO_DATE(&#39;2020-01-01 00:00:00&#39;,&#39;%Y-%m-%d&#39;) |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| 2020-01-01                                    |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。MySQL中的流程处理函数主要包括<code>IF()</code>、<code>IFNULL()</code>和<code>CASE()</code>函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td><code>IF(value,value1,value2)</code></td>
<td>如果value的值为TRUE，返回value1，否则返回value2</td>
</tr>
<tr>
<td><code>IFNULL(value1, value2)</code></td>
<td>如果value1不为NULL，返回value1，否则返回value2</td>
</tr>
<tr>
<td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td>
<td>相当于Java的if…else if…else…</td>
</tr>
<tr>
<td>CASE  expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td>
<td>相当于Java的switch…case…</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT IF(1 &gt; 0,&#39;正确&#39;,&#39;错误&#39;)    </span><br><span class="line">-&gt;正确</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT IFNULL(null,&#39;Hello Word&#39;)</span><br><span class="line">-&gt;Hello Word</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CASE </span><br><span class="line">　　WHEN 1 &gt; 0</span><br><span class="line">　　THEN &#39;1 &gt; 0&#39;</span><br><span class="line">　　WHEN 2 &gt; 0</span><br><span class="line">　　THEN &#39;2 &gt; 0&#39;</span><br><span class="line">　　ELSE &#39;3 &gt; 0&#39;</span><br><span class="line">　　END</span><br><span class="line">-&gt;1 &gt; 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CASE 1 </span><br><span class="line">　　WHEN 1 THEN &#39;我是1&#39;</span><br><span class="line">　　WHEN 2 THEN &#39;我是2&#39;</span><br><span class="line">ELSE &#39;你是谁&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT employee_id,salary, CASE WHEN salary&gt;&#x3D;15000 THEN &#39;高薪&#39; </span><br><span class="line">				  WHEN salary&gt;&#x3D;10000 THEN &#39;潜力股&#39;  </span><br><span class="line">				  WHEN salary&gt;&#x3D;8000 THEN &#39;屌丝&#39; </span><br><span class="line">				  ELSE &#39;草根&#39; END  &quot;描述&quot;</span><br><span class="line">FROM employees; </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT oid,&#96;status&#96;, CASE &#96;status&#96; WHEN 1 THEN &#39;未付款&#39; </span><br><span class="line">								   WHEN 2 THEN &#39;已付款&#39; </span><br><span class="line">								   WHEN 3 THEN &#39;已发货&#39;  </span><br><span class="line">								   WHEN 4 THEN &#39;确认收货&#39;  </span><br><span class="line">								   ELSE &#39;无效订单&#39; END </span><br><span class="line">FROM t_order;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT last_name, job_id, salary,</span><br><span class="line">       CASE job_id WHEN &#39;IT_PROG&#39;  THEN  1.10*salary</span><br><span class="line">                   WHEN &#39;ST_CLERK&#39; THEN  1.15*salary</span><br><span class="line">                   WHEN &#39;SA_REP&#39;   THEN  1.20*salary</span><br><span class="line">       			   ELSE      salary END     &quot;REVISED_SALARY&quot;</span><br><span class="line">FROM   employees;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>PASSWORD(str)</td>
<td>返回字符串str的加密版本，41位长的字符串。加密结果<code>不可逆</code>，常用于用户的密码加密</td>
</tr>
<tr>
<td>MD5(str)</td>
<td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL</td>
</tr>
<tr>
<td>SHA(str)</td>
<td>从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。<code>SHA加密算法比MD5更加安全</code>。</td>
</tr>
<tr>
<td>ENCODE(value,password_seed)</td>
<td>返回使用password_seed作为加密密码加密value</td>
</tr>
<tr>
<td>DECODE(value,password_seed)</td>
<td>返回使用password_seed作为加密密码解密value</td>
</tr>
</tbody></table>
<p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT PASSWORD(&#39;mysql&#39;), PASSWORD(NULL);</span><br><span class="line">+-------------------------------------------+----------------+</span><br><span class="line">| PASSWORD(&#39;mysql&#39;)                         | PASSWORD(NULL) |</span><br><span class="line">+-------------------------------------------+----------------+</span><br><span class="line">| *E74858DB86EBA20BC33D0AECAE8A8108C56B17FA |                |</span><br><span class="line">+-------------------------------------------+----------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT md5(&#39;123&#39;)</span><br><span class="line">-&gt;202cb962ac59075b964b07152d234b70</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT SHA(&#39;Tom123&#39;)</span><br><span class="line">-&gt;c7c506980abc31cc390a2438c90861d0f1216d50</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT ENCODE(&#39;mysql&#39;, &#39;mysql&#39;);</span><br><span class="line">+--------------------------+</span><br><span class="line">| ENCODE(&#39;mysql&#39;, &#39;mysql&#39;) |</span><br><span class="line">+--------------------------+</span><br><span class="line">| íg　¼　ìÉ                  |</span><br><span class="line">+--------------------------+</span><br><span class="line">1 row in set, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT DECODE(ENCODE(&#39;mysql&#39;,&#39;mysql&#39;),&#39;mysql&#39;);</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| DECODE(ENCODE(&#39;mysql&#39;,&#39;mysql&#39;),&#39;mysql&#39;) |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">| mysql                                   |</span><br><span class="line">+-----------------------------------------+</span><br><span class="line">1 row in set, 2 warnings (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>VERSION()</td>
<td>返回当前MySQL的版本号</td>
</tr>
<tr>
<td>CONNECTION_ID()</td>
<td>返回当前MySQL服务器的连接数</td>
</tr>
<tr>
<td>DATABASE()，SCHEMA()</td>
<td>返回MySQL命令行当前所在的数据库</td>
</tr>
<tr>
<td>USER()，CURRENT_USER()、SYSTEM_USER()，SESSION_USER()</td>
<td>返回当前连接MySQL的用户名，返回结果格式为“主机名@用户名”</td>
</tr>
<tr>
<td>CHARSET(value)</td>
<td>返回字符串value自变量的字符集</td>
</tr>
<tr>
<td>COLLATION(value)</td>
<td>返回字符串value的比较规则</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT USER(), CURRENT_USER(), SYSTEM_USER(),SESSION_USER();</span><br><span class="line">+<span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line">| USER()         | CURRENT_USER() | SYSTEM_USER()  | SESSION_USER() |</span><br><span class="line">+<span class="comment">----------------+----------------+----------------+----------------+</span></span><br><span class="line">| root@localhost | root@localhost | root@localhost | root@localhost |</span><br><span class="line">+<span class="comment">----------------+----------------+----------------+----------------+</span></span><br></pre></td></tr></table></figure>

<h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>FORMAT(value,n)</td>
<td>返回对数字value进行格式化后的结果数据。n表示<code>四舍五入</code>后保留到小数点后n位</td>
</tr>
<tr>
<td>CONV(value,from,to)</td>
<td>将value的值进行不同进制之间的转换</td>
</tr>
<tr>
<td>INET_ATON(ipvalue)</td>
<td>将以点分隔的IP地址转化为一个数字</td>
</tr>
<tr>
<td>INET_NTOA(value)</td>
<td>将数字形式的IP地址转化为以点分隔的IP地址</td>
</tr>
<tr>
<td>BENCHMARK(n,expr)</td>
<td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td>
</tr>
<tr>
<td>CONVERT(value USING char_code)</td>
<td>将value所使用的字符编码修改为char_code</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 启动流程</title>
    <url>/2023/09/08/SpringBoot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>每个<quote>SpringBoot</quote>程序都有一个主入口，就是<quote>main()</quote>方法，在<quote>main()</quote>方法中调用<code>SpringApplication.run()</code>来启动整个程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SpringApplication.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> run(<span class="keyword">new</span> Class[]&#123;primarySource&#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">  Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">  <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">  <span class="comment">// 根据classpath的类推断并设置webApplicationType</span></span><br><span class="line">  <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">  <span class="keyword">this</span>.bootstrapRegistryInitializers = <span class="keyword">new</span> ArrayList&lt;&gt;(getSpringFactoriesInstances(BootstrapRegistryInitializer.class));</span><br><span class="line">  setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">  <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>调用静态<code>run()</code>方法时，我们首先创建一个<code>SpringApplication</code>的对象实例。在创建实例时，进行了一些基本的初始化操作。大体如下:<ol>
<li>根据<code>classpath</code>的类推断并设置<code>webApplicationType</code>，根据源码可以看到包含三种容器<code>REACTIVE</code>、<code>NONE</code>、<code>SERVLET</code>，默认用的是<code>WebApplicationType.SERVLET</code>容器</li>
<li>从<code>META-INF/spring.factories</code>中获取<code>BootstrapRegistryInitializer</code>并放入集合<code>bootstrapRegistryInitializers</code>中</li>
<li>加载所有的<code>ApplicationContextInitializer</code>并放入集合<code>initializers</code>中</li>
<li>加载所有的<code>ApplicationListener</code>并放入集合<code>listeners</code>中</li>
<li>推断<code>mainApplicationClass</code>并赋值给<code>this.mainApplicationClass</code></li>
</ol>
</li>
</ol>
<p>初始化完成后，执行<code>run()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> run(<span class="keyword">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources, String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">  DefaultBootstrapContext bootstrapContext = createBootstrapContext();</span><br><span class="line">  ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">  configureHeadlessProperty();</span><br><span class="line">  <span class="comment">// 查找并加载所有的SpringApplicationRunListener</span></span><br><span class="line">  SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">  <span class="comment">// 通知所有的listeners程序启动</span></span><br><span class="line">  listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">    ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">    Banner printedBanner = printBanner(environment);</span><br><span class="line">    context = createApplicationContext();</span><br><span class="line">    context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">    prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">    refreshContext(context);</span><br><span class="line">    afterRefresh(context, applicationArguments);</span><br><span class="line">    Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">      <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">    &#125;</span><br><span class="line">    listeners.started(context, timeTakenToStartup);</span><br><span class="line">    callRunners(context, applicationArguments);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AbandonedRunException) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    handleRunFailure(context, ex, listeners);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.isRunning()) &#123;</span><br><span class="line">      Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">      listeners.ready(context, timeTakenToReady);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> AbandonedRunException) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    handleRunFailure(context, ex, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>run()</code>方法中首先调用方法<code>getRunListeners()</code>查找并加载所有的<code>SpringApplicationRunListener</code>（监听器），放入到<code>SpringApplicationRunListeners</code>这个集合类里面来进行统一管理。然后调用他们的<code>starting()</code>来通知所有的<code>listeners</code>（监听器）程序启动。</li>
</ol>
<p><strong>getRunListeners方法:</strong></p>
<p><code>SpringAppcation.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  ArgumentResolver argumentResolver = ArgumentResolver.of(SpringApplication.class, <span class="keyword">this</span>);</span><br><span class="line">  argumentResolver = argumentResolver.and(String[].class, args);</span><br><span class="line">  List&lt;SpringApplicationRunListener&gt; listeners = getSpringFactoriesInstances(SpringApplicationRunListener.class,</span><br><span class="line">  argumentResolver);</span><br><span class="line">  SpringApplicationHook hook = applicationHook.get();</span><br><span class="line">  SpringApplicationRunListener hookListener = (hook != <span class="keyword">null</span>) ? hook.getRunListener(<span class="keyword">this</span>) : <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (hookListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">  listeners = <span class="keyword">new</span> ArrayList&lt;&gt;(listeners);</span><br><span class="line">  listeners.add(hookListener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger, listeners, <span class="keyword">this</span>.applicationStartup);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, ArgumentResolver argumentResolver)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> SpringFactoriesLoader.forDefaultResourceLocation(getClassLoader()).load(type, argumentResolver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SpringFactoriesLoader.class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpringFactoriesLoader <span class="title">forDefaultResourceLocation</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> forResourceLocation(<span class="string">&quot;META-INF/spring.factories&quot;</span>, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getRunListeners()</code>方法从<code>spring.factories</code>中获取运行监听器。</p>
<p>我们<code>debug</code>跟踪一下。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/getRunListeners.png"></p>
<p>可以看到，注册为<code>SpringApplicationRunListener</code>的实现类只有一个，就是<code>EventPublishingRunListener</code>。用来在SpringBoot的整个启动流程中的不同时间点发布不同类型的应用事件(<code>SpringApplicationEvent</code>)。<code>EventPublishingRunListener</code> 是 <code>SpringApplicationRunListener</code> 的子类，它会在应用程序启动期间发布多个事件。当应用程序上下文创建时，<code>EventPublishingRunListener</code> 会发布 <code>ApplicationStartingEvent</code> 事件；当应用程序运行时，它会发布 <code>ApplicationStartedEvent</code> 事件。这些事件可以被其他组件监听，例如自定义的事件监听器。通过监听这些事件，您可以在应用程序启动期间执行自定义的逻辑。</p>
<hr>
<p>我们接着回到<code>Run</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">  ConfigurableEnvironment environment = prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">      DefaultBootstrapContext bootstrapContext, ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Create and configure the environment</span></span><br><span class="line">   <span class="comment">// 创建并配置environment</span></span><br><span class="line">   ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">   <span class="comment">// 配置 property sources 和 profiles</span></span><br><span class="line">   configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">   <span class="comment">// 将environment.getPropertySources()放在第一个位置</span></span><br><span class="line">   ConfigurationPropertySources.attach(environment);</span><br><span class="line">   <span class="comment">// 运行监听器通知所有监听器环境准备完成</span></span><br><span class="line">   listeners.environmentPrepared(bootstrapContext, environment);</span><br><span class="line">   <span class="comment">// 将&#x27;defaultProperties&#x27; property source移到最后</span></span><br><span class="line">   DefaultPropertiesPropertySource.moveToEnd(environment);</span><br><span class="line">   Assert.state(!environment.containsProperty(<span class="string">&quot;spring.main.environment-prefix&quot;</span>),</span><br><span class="line">         <span class="string">&quot;Environment prefix cannot be set via properties.&quot;</span>);</span><br><span class="line">  	<span class="comment">// 将 environment 绑定到 &#123;@link SpringApplication&#125;</span></span><br><span class="line">   bindToSpringApplication(environment);</span><br><span class="line">  	<span class="comment">// 环境转换成StandardEnvironment</span></span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">      EnvironmentConverter environmentConverter = <span class="keyword">new</span> EnvironmentConverter(getClassLoader());</span><br><span class="line">      environment = environmentConverter.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">   &#125;</span><br><span class="line">   ConfigurationPropertySources.attach(environment);</span><br><span class="line">  <span class="comment">// 返回环境配置对象ConfigurableEnvironment</span></span><br><span class="line">   <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">   &#125;</span><br><span class="line">   ConfigurableEnvironment environment = <span class="keyword">this</span>.applicationContextFactory.createEnvironment(<span class="keyword">this</span>.webApplicationType);</span><br><span class="line">   <span class="keyword">if</span> (environment == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.applicationContextFactory != ApplicationContextFactory.DEFAULT) &#123;</span><br><span class="line">      environment = ApplicationContextFactory.DEFAULT.createEnvironment(<span class="keyword">this</span>.webApplicationType);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (environment != <span class="keyword">null</span>) ? environment : <span class="keyword">new</span> ApplicationEnvironment();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过<code>prepareEnvironment()</code>方法进行环境的准备（包括配置<code>property</code>和对应的<code>profile</code>信息，将其放入<code>environment</code>变量），然后返回可配置环境<code>environment</code></li>
</ol>
<p>继续查看<code>run()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  Banner printedBanner = printBanner(environment);</span><br><span class="line">  context = createApplicationContext();</span><br><span class="line">  context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">  prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">  refreshContext(context);</span><br><span class="line">  afterRefresh(context, applicationArguments);</span><br><span class="line">  Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">  &#125;</span><br><span class="line">  listeners.started(context, timeTakenToStartup);</span><br><span class="line">  callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>调用<code>printBanner()</code>方法打印 <quote>banner</quote>信息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Banner <span class="title">printBanner</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.bannerMode == Mode.OFF) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ResourceLoader resourceLoader = <span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span> ? <span class="keyword">this</span>.resourceLoader : <span class="keyword">new</span> DefaultResourceLoader((ClassLoader)<span class="keyword">null</span>);</span><br><span class="line">    SpringApplicationBannerPrinter bannerPrinter = <span class="keyword">new</span> SpringApplicationBannerPrinter((ResourceLoader)resourceLoader, <span class="keyword">this</span>.banner);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bannerMode == Mode.LOG ? bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, logger) : bannerPrinter.print(environment, <span class="keyword">this</span>.mainApplicationClass, System.out);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.applicationContextFactory.create(<span class="keyword">this</span>.webApplicationType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/springbootbanner.png"></p>
<p>我们可以通过在类路径下添加<code>banner.txt</code>文件自定义<quote>banner</quote>打印信息或将<code>spring.banner.location</code>属性设置为此类文件的位置来更改启动时打印的横幅。如果文件的编码不是 UTF-8，您可以设置<code>spring.banner.charset</code>。</p>
<p>自定义<code>banner</code>示例：</p>
<p><code>banner.txt</code></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/bannertxt.png"></p>
<p>打印效果:</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/bannereffect.png"></p>
<p>继续查看<code>run()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 创建应用程序上下文对象</span></span><br><span class="line">  context = createApplicationContext();</span><br><span class="line">  <span class="comment">// 设置下上下文对象的应用程序启动器</span></span><br><span class="line">  context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">  <span class="comment">// 准备上下文，配置容器的基本信息</span></span><br><span class="line">  prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">  refreshContext(context);</span><br><span class="line">  afterRefresh(context, applicationArguments);</span><br><span class="line">  Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">  &#125;</span><br><span class="line">  listeners.started(context, timeTakenToStartup);</span><br><span class="line">  callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 设置容器的环境变量</span></span><br><span class="line">  context.setEnvironment(environment);</span><br><span class="line">  <span class="comment">// 设置容器的ResourceLoader、ClassLoader、ConversionService</span></span><br><span class="line">  <span class="keyword">this</span>.postProcessApplicationContext(context);</span><br><span class="line">  <span class="comment">// 获取所有初始化器调用initialize()初始化</span></span><br><span class="line">  <span class="keyword">this</span>.applyInitializers(context);</span><br><span class="line">  <span class="comment">// 触发所有 SpringApplicationRunListener监听器的contextPrepared事件方法</span></span><br><span class="line">  listeners.contextPrepared(context);</span><br><span class="line">  bootstrapContext.close(context);</span><br><span class="line">  <span class="comment">// 打印启动日志和启动应用的Profile</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    <span class="keyword">this</span>.logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.logStartupProfileInfo(context);</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">// Add boot specific singleton beans 添加启动特定的单例bean</span></span><br><span class="line">  ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">  <span class="comment">// 向beanFactory注册单例bean：命令行参数bean</span></span><br><span class="line">  beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">  <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 向beanFactory注册单例bean：banner bean</span></span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory) &#123;</span><br><span class="line">    ((AbstractAutowireCapableBeanFactory)beanFactory).setAllowCircularReferences(<span class="keyword">this</span>.allowCircularReferences);</span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">      ((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">    context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">  &#125;</span><br><span class="line">  context.addBeanFactoryPostProcessor(<span class="keyword">new</span> PropertySourceOrderingBeanFactoryPostProcessor(context));</span><br><span class="line">  <span class="comment">// Load the sources，加载所有的资源</span></span><br><span class="line">  Set&lt;Object&gt; sources = <span class="keyword">this</span>.getAllSources();</span><br><span class="line">  <span class="comment">// 断言资源必须非空</span></span><br><span class="line">  Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">  <span class="comment">// 将bean加载到应用上下文中</span></span><br><span class="line">  <span class="keyword">this</span>.load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">  <span class="comment">// 触发所有SpringApplicationRunListener监听器contextLoaded方法</span></span><br><span class="line">  listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续回到<code>run()</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  refreshContext(context);</span><br><span class="line">  afterRefresh(context, applicationArguments);</span><br><span class="line">  Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">  &#125;</span><br><span class="line">  listeners.started(context, timeTakenToStartup);</span><br><span class="line">  callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>refreshContext</code></p>
<p>配置完容器基本信息后，刷新容器上下文<code>refreshContext</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</span><br><span class="line">    shutdownHook.registerApplicationContext(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.refresh(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.refresh();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var3) &#123;</span><br><span class="line">        WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">        <span class="keyword">if</span> (webServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            webServer.stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        </span><br><span class="line">  <span class="keyword">synchronized</span>(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">    StartupStep contextRefresh = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.refresh&quot;</span>);</span><br><span class="line">    <span class="comment">// 上下文准备刷新</span></span><br><span class="line">    <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">    <span class="comment">// 刷新bean工厂，并返回bean工厂</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">    <span class="comment">// 准备bean工厂，以便进行上下文的使用</span></span><br><span class="line">    <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 允许在上下文子类中对 bean 工厂进行后置处理</span></span><br><span class="line">      <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">      StartupStep beanPostProcess = <span class="keyword">this</span>.applicationStartup.start(<span class="string">&quot;spring.context.beans.post-process&quot;</span>); </span><br><span class="line">      <span class="comment">// 在bean创建之前调用BeanFactoryPostProcessors后置处理方法</span></span><br><span class="line">      <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory); </span><br><span class="line">      <span class="comment">// 注册BeanPostProcessor</span></span><br><span class="line">      <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">      beanPostProcess.end();   </span><br><span class="line">      <span class="comment">// 注册DelegatingMessageSource</span></span><br><span class="line">      <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">      <span class="comment">// 注册一个applicationEventMulticaster的广播器</span></span><br><span class="line">      <span class="keyword">this</span>.initApplicationEventMulticaster(); </span><br><span class="line">      <span class="comment">// 在特定上下文子类中初始化其他特殊 bean</span></span><br><span class="line">      <span class="keyword">this</span>.onRefresh();</span><br><span class="line">      <span class="comment">// 注册监听器Listeners</span></span><br><span class="line">      <span class="keyword">this</span>.registerListeners(); </span><br><span class="line">      <span class="comment">// 实例化所有剩余的（非懒加载）单例。</span></span><br><span class="line">      <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">      <span class="comment">// 发布对应事件</span></span><br><span class="line">      <span class="keyword">this</span>.finishRefresh();  </span><br><span class="line">    &#125; <span class="keyword">catch</span> (BeansException var10) &#123;      </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var10);         </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">      <span class="keyword">this</span>.cancelRefresh(var10);</span><br><span class="line">      <span class="keyword">throw</span> var10;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.resetCommonCaches();        </span><br><span class="line">      contextRefresh.end();       </span><br><span class="line">    &#125;     </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刷新容器上下文<code>refreshContext</code>方法之后看到<code>afterRefresh</code>是一个空方法，主要用于开发者拓展使用。</p>
<p><code>run()</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  refreshContext(context);</span><br><span class="line">  afterRefresh(context, applicationArguments);</span><br><span class="line">  Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">    <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);</span><br><span class="line">  &#125;</span><br><span class="line">  listeners.started(context, timeTakenToStartup);</span><br><span class="line">  callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>容器配置都完成之后，这时监听应用上下文启动完成所有的运行监听器调用 <code>started()</code> 方法，发布监听应用的启动事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.doWithListeners(<span class="string">&quot;spring.boot.application.started&quot;</span>, (listener) -&gt; &#123;</span><br><span class="line">    listener.started(context, timeTaken);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后续继续执行<code>callRunners</code>方法遍历所有<code>runner</code>，调用<code>run</code>方法。</p>
<p>上述都完成之后到了最后一步，执行<code>listener.running</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">  <span class="comment">// 所有的运行监听器调用running()方法,监听应用上下文</span></span><br><span class="line">  listeners.ready(context, timeTakenToReady);</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">  <span class="keyword">this</span>.handleRunFailure(context, var11, (SpringApplicationRunListeners)<span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行所有运行监听器，该方法执行以后<code>SpringApplication.run()</code>也就算执行完成了，那么<code>SpringBoot</code>的<code>ApplicationContext</code>也就启动完成了。</p>
<p>流程图：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/springboot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/springbootrun.svg"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5</title>
    <url>/2021/07/12/Spring5/</url>
    <content><![CDATA[<h2 id="Spring5框架概述"><a href="#Spring5框架概述" class="headerlink" title="Spring5框架概述"></a>Spring5框架概述</h2><p>Spring 框架是一个Java平台，它为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此您可以专注于应用程序的开发。</p>
<p>Spring可以让您从“plain old Java objects”（POJO）中构建应用程序和通过非侵入性的POJO实现企业应用服务。</p>
<h3 id="Spring的两大核心部分：IOC和Aop"><a href="#Spring的两大核心部分：IOC和Aop" class="headerlink" title="Spring的两大核心部分：IOC和Aop"></a>Spring的两大核心部分：IOC和Aop</h3><ol>
<li><code>IOC</code>（Inversion of Control）控制反转，把创建对象过程交给Spring管理</li>
<li><code>Aop</code>（Aspect Oriented Programming）面向切面，在不修改源代码的基础上进行功能增强</li>
</ol>
<h3 id="Spring的特点"><a href="#Spring的特点" class="headerlink" title="Spring的特点"></a>Spring的特点</h3><ul>
<li><p>方便解耦，简化开发</p>
</li>
<li><p>Aop编程支持</p>
</li>
<li><p>方便程序测试</p>
</li>
<li><p>方便和其他框架进行整合</p>
</li>
<li><p>方便进行事务操作</p>
</li>
<li><p>降低API开发难度</p>
</li>
</ul>
<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>（1）控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理<br>（2）使用IOC目的：为了耦合度降低</p>
<h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><p>讲解IOC底层原理</p>
<p>第一步 xml配置文件，配置创建的对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">od</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">classs</span>=<span class="string">&quot;com.wotzc.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二步 有service类和dao类，创建工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String classValue = <span class="class"><span class="keyword">class</span>属性值</span>; <span class="comment">// xml解析</span></span><br><span class="line">		Class clazz = Class.forName(classValue); <span class="comment">// 通过反射机制创建对象</span></span><br><span class="line">		<span class="keyword">return</span> (UserDao) clazz.newInstance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p><code>org.springframework.beans</code>和<code>org.springframework.context</code>是Spring框架中IoC容器的基础，<code>BeanFactory</code>接口提供一种高级的配置机制能够管理任何类型的对象。<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口。它能更容易集成Spring的<strong>AOP功能</strong>、<strong>消息资源处理（比如在国际化中使用）</strong>、<strong>事件发布</strong>和<strong>特定的上下文应用层</strong>比如在网站应用中的<code>WebApplicationContext</code>。</p>
<p>总之，<code>BeanFactory</code>提供了配置框架和基本方法，<code>ApplicationContext</code>添加更多的企业特定的功能。<code>ApplicationContext</code>是<code>BeanFactory</code>的一个子接口。</p>
<h3 id="IOC-BeanFactory-接口"><a href="#IOC-BeanFactory-接口" class="headerlink" title="IOC(BeanFactory)接口"></a>IOC(BeanFactory)接口</h3><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂。</p>
<p>（1）<code>BeanFactory</code>：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用，加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象。</p>
<p>（2）<code>ApplicationContext</code>：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用，加载配置文件时候就会把在配置文件对象进行创建。</p>
<p>尽量使用<code>ApplicationContext</code>除非你有更好的理由不用它。<br>因为<code>ApplicationContext</code>包括了<code>BeanFactory</code>的所有功能，通常也优于<code>BeanFactory</code>，除非一些少数的场景，例如：在受资源约束的嵌入式设备上运行一个嵌入式应用，它的内存消耗可能至关重要，并且可能会产生字节。然而，对于大多数典型的企业级应用和系统来说，<code>ApplicationContext</code>才是你想使用的。Spring大量使用了<code>BeanPostProcessor</code>扩展点（以便使用代理等）。如果你仅仅只使用简单的BeanFactory，很多的支持功能将不会有效，例如：<strong>事务</strong>和<strong>AOP</strong>，但至少不会有额外的步骤。这可能会比较迷惑，毕竟配置又没有错。</p>
<h3 id="IOC操作Bean管理-基于xml方式"><a href="#IOC操作Bean管理-基于xml方式" class="headerlink" title="IOC操作Bean管理(基于xml方式)"></a>IOC操作Bean管理(基于xml方式)</h3><h4 id="什么是Bean管理"><a href="#什么是Bean管理" class="headerlink" title="什么是Bean管理"></a>什么是Bean管理</h4><p>Bean管理指的是两个操作</p>
<ol>
<li>Spring创建对象</li>
<li>Spring注入属性</li>
</ol>
<h4 id="Bean管理操作有两种方式"><a href="#Bean管理操作有两种方式" class="headerlink" title="Bean管理操作有两种方式"></a>Bean管理操作有两种方式</h4><ol>
<li>基于xml配置文件方式实现</li>
<li>基于注解方式实现</li>
</ol>
<p><strong>基于xml方式创建对象</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置User对象创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（1） 在spring配置文件中，使用bean标签，标签里面添加对应属性，就可以实现对象创建</p>
<p>（2）在bean标签里面有很多属性，介绍常用的属性</p>
<ul>
<li>id属性：唯一标识</li>
<li>class属性：类全路径（包类路径）</li>
</ul>
<p>（3）创建对象时，<strong>默认的是执行无参构造方法完成对象创建</strong></p>
<p><strong>基于xml方式注入属性</strong></p>
<p>第一种注入方式：使用set方法进行注入</p>
<p>（1）创建类，定义属性和对应的set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 演示使用set方法进行注入属性 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123; </span><br><span class="line">       <span class="comment">//创建属性</span></span><br><span class="line">       <span class="keyword">private</span> String bname;</span><br><span class="line">       <span class="keyword">private</span> String bauthor;</span><br><span class="line">       <span class="comment">//创建属性对应的set方法</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBname</span><span class="params">(String bname)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.bname = bname; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBauthor</span><span class="params">(String bauthor)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.bauthor = bauthor; </span><br><span class="line">       &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>（2）在spring配置文件配置对象创建，配置属性注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--2 set方法注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--使用property完成属性注入</span></span><br><span class="line"><span class="comment">    	name：类里面属性名称</span></span><br><span class="line"><span class="comment">        value：向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bauthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;达摩老祖&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种注入方式：使用有参数构造进行注入</p>
<p>（1）创建类，定义属性，创建属性对应有参数构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   使用有参数构造注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）在spring配置文件中进行配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3 有参数构造注入属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;China&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）p名称空间注入</p>
<p>使用p名称空间注入，可以简化基于xml配置方式</p>
<p>第一步 添加p名称空间在配置文件中</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/springp1.png" alt="引入p名称空间"></p>
<p>第二步 进行属性注入，在bean标签里面进行操作</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/springp2.png" alt="p名称方式引入属性"></p>
<h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p> Spring有两种类型bean，一种<code>普通bean</code>，另外一种<code>工厂bean（FactoryBean）</code></p>
<ul>
<li>普通bean：在配置文件中定义bean类型就是返回类型</li>
<li>工厂bean：在配置文件定义bean类型可以和返回类型不一样<pre><code>第一步 创建类，让这个类作为工厂bean，实现接口 FactoryBean
第二步 实现接口里面的方法，在实现的方法中定义返回的bean类型</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h4><p>在Spring里面，设置创建bean实例是单实例还是多实例</p>
<p>在Spring里面，<strong>默认情况下，bean是单实例对象</strong></p>
<p><strong>如何设置单实例还是多实例？</strong></p>
<p>（1）在spring配置文件bean标签里面有属性（<code>scope</code>）用于设置单实例还是多实例</p>
<p>第一个值 默认值，<code>singleton</code>，表示是单实例对象<br>第二个值<code>prototype</code>，表示是多实例对象</p>
<p><strong>singleton和prototype区别</strong></p>
<p>设置<code>scope</code>值是<code>singleton</code>时候，加载spring配置文件时候就会创建单实例对象<br>设置<code>scope</code>值是<code>prototype</code>时候，不是在加载spring配置文件时候创建对象，在调用getBean方法时候创建多实例对象</p>
<h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><p>1、生命周期<br>（1）从对象创建到对象销毁的过程<br>2、bean生命周期</p>
<p>（1）通过构造器创建bean实例（无参数构造）</p>
<p>（2）为bean的属性设置值和对其他bean引用（调用set方法）</p>
<p>（3）调用bean的初始化的方法（需要进行配置初始化的方法）</p>
<p>（4）bean可以使用了（对象获取到了）</p>
<p>（5）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）<br>3、演示bean生命周期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参数构造</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第一步 执行无参数构造创建bean实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOname</span><span class="params">(String oname)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.oname = oname;</span><br><span class="line">            System.out.println(<span class="string">&quot;第二步 调用set方法设置属性值&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建执行的初始化的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第三步 执行初始化的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建执行的销毁的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第五步 执行销毁的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、bean的后置处理器，bean生命周期有七步</p>
<p>（1）通过构造器创建bean实例（无参数构造）</p>
<p>（2）为bean的属性设置值和对其他bean引用（调用set方法） </p>
<p>（3）把bean实例传递bean后置处理器的方法postProcessBeforeInitialization</p>
<p>（4）调用bean的初始化的方法（需要进行配置初始化的方法）</p>
<p>（5）把bean实例传递bean后置处理器的方法 postProcessAfterInitialization</p>
<p>（6）bean可以使用了（对象获取到了）</p>
<p>（7）当容器关闭时候，调用bean的销毁的方法（需要进行配置销毁的方法）</p>
<p><strong>演示添加后置处理器效果</strong></p>
<p>（1）创建类，实现接口BeanPostProcessor，创建后置处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPost</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置后置处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="xml自动装配"><a href="#xml自动装配" class="headerlink" title="xml自动装配"></a>xml自动装配</h4><p>1、什么是自动装配<br>（1）根据指定装配规则（属性名称或者属性类型），Spring自动将匹配的属性值进行注入</p>
<p>2、演示自动装配过程</p>
<p>（1）根据属性名称自动注入</p>
<!--实现自动装配 bean标签属性autowire，配置自动装配 autowire属性常用两个值： byName根据属性名称注入 ，注入值bean的id值和类属性名称一样 byType根据属性类型注入 -->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）根据属性类型自动注入</p>
<!--实现自动装配 bean标签属性autowire，配置自动装配 autowire属性常用两个值： byName根据属性名称注入 ，注入值bean的id值和类属性名称一样 byType根据属性类型注入 -->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="引入外部属性文件"><a href="#引入外部属性文件" class="headerlink" title="引入外部属性文件"></a>引入外部属性文件</h4><p>1、直接配置数据库信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、引入外部属性文件配置数据库连接池</p>
<p>（1）创建外部属性文件，properties格式文件，写数据库信息</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/spring5jdbc.png"></p>
<p>（2）把外部properties属性文件引入到spring配置文件中</p>
<p>引入context名称空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure>

<p>在spring配置文件使用标签引入外部属性文件</p>
<!--引入外部属性文件-->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<!--配置连接池-->

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IOC操作Bean管理-基于注解方式"><a href="#IOC操作Bean管理-基于注解方式" class="headerlink" title="IOC操作Bean管理 (基于注解方式)"></a>IOC操作Bean管理 (基于注解方式)</h3><h4 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h4><p>注解，可以看作是对 一个 类/方法 的一个扩展的模版，每个 类/方法 按照注解类中的规则，来为 类/方法 注解不同的参数，在用到的地方可以得到不同的 类/方法 中注解的各种参数与值</p>
<p>注解也就是<code>Annotation</code>，相信不少人也和我之前一样以为和注释和doc一样，是一段辅助性的文字，其实注解不是这样的。</p>
<p>从JDK5开始，java增加了对元数据（描述数据属性的信息）的支持。其实说白就是代码里的特殊标志，这些标志可以在编译，类加载，运行时被读取，并执行相应的处理，以便于其他工具补充信息或者进行部署。</p>
<p><strong>注解的作用</strong></p>
<ul>
<li><strong>格式检查：</strong>告诉编译器信息，比如被@Override标记的方法如果不是父类的某个方法，IDE会报错；</li>
<li><strong>减少配置：</strong>运行时动态处理，得到注解信息，实现代替配置文件的功能；</li>
<li><strong>减少重复工作：</strong>比如第三方框架xUtils，通过注解@ViewInject减少对findViewById的调用，类似的还有（JUnit、ActiveAndroid等）；</li>
</ul>
<h4 id="Spring针对Bean管理中创建对象提供注解"><a href="#Spring针对Bean管理中创建对象提供注解" class="headerlink" title="Spring针对Bean管理中创建对象提供注解"></a>Spring针对Bean管理中创建对象提供注解</h4><p>（1）@Component<br>（2）@Service<br>（3）@Controller<br>（4）@Repository</p>
<ul>
<li>上面四个注解功能是一样的，都可以用来创建bean实例</li>
</ul>
<h4 id="基于注解方式实现对象创建"><a href="#基于注解方式实现对象创建" class="headerlink" title="基于注解方式实现对象创建"></a>基于注解方式实现对象创建</h4><p>第一步 引入依赖</p>
<p>第二步 开启组件扫描</p>
<!--开启组件扫描 1 如果扫描多个包，多个包使用逗号隔开 2 扫描包上层目录 -->

<p><code>&lt;context:component-scan base-package=&quot;com.atguigu&quot;&gt;&lt;/context:component-scan&gt;</code></p>
<p>第三步 创建类，在类上面添加创建对象注解</p>
<p>//在注解里面value属性值可以省略不写，</p>
<p> //默认值是类名称，首字母小写</p>
<p> //UserService – userService</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/component.png"></p>
<h4 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h4><p>（1）<code>@Autowired</code>：根据属性类型进行自动装配<br>第一步 把service 和dao 对象创建，在service 和dao 类添加创建对象注解<br>第二步 在service 注入dao 对象，在service 类添加dao 类型属性，在属性上面使用注解<br><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/service.png"></p>
<p>（2）<code>@Qualifier</code>：根据名称进行注入<br>这个<code>@Qualifier</code>注解的使用，和上面<code>@Autowired</code>一起使用</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/annomation.png"></p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。通俗描述：不通过修改源代码方式，在主干功能里面添加新功能.</p>
<h4 id="AOP底层使用动态代理"><a href="#AOP底层使用动态代理" class="headerlink" title="AOP底层使用动态代理"></a>AOP底层使用动态代理</h4><p>第一种 有接口情况，使用JDK动态代理<br>创建接口实现类代理对象，增强类的方法</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/aop01.png"></p>
<p>第二种 没有接口情况，使用CGLIB动态代理<br> 创建子类的代理对象，增强类的方法<br><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring5/aop02.png"></p>
<p>Spring框架一般都是基于AspectJ实现AOP操作，详情请自行查阅</p>
<h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="什么是JdbcTemplate"><a href="#什么是JdbcTemplate" class="headerlink" title="什么是JdbcTemplate"></a>什么是JdbcTemplate</h3><p>Spring框架对JDBC进行封装，使用JdbcTemplate方便实现对数据库操作</p>
<p>（1）引入相关jar包</p>
<p>（2）在spring配置文件配置数据库连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）配置JdbcTemplate对象，注入DataSource</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JdbcTemplate对象 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">​	 <span class="comment">&lt;!--注入dataSource--&gt;</span> </span><br><span class="line"></span><br><span class="line">​	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JdbcTemplate操作数据库（添加）"><a href="#JdbcTemplate操作数据库（添加）" class="headerlink" title="JdbcTemplate操作数据库（添加）"></a>JdbcTemplate操作数据库（添加）</h3><p>（1）在dao进行数据库添加操作<br>（2）调用JdbcTemplate对象里面update方法实现添加操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">update(String sql,Object... args)</span><br></pre></td></tr></table></figure>

<p>有两个参数<br>第一个参数：sql语句<br>第二个参数：可变参数，设置sql语句值 @Repository</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注入JdbcTemplate</span></span><br><span class="line"><span class="meta">@Autowired</span> <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"><span class="comment">//添加的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 创建sql语句</span></span><br><span class="line">    String sql = <span class="string">&quot;insert into t_book values(?,?,?)&quot;</span>;</span><br><span class="line">    <span class="comment">//2 调用方法实现</span></span><br><span class="line">    Object[] args = &#123;book.getUserId(), book.getUsername(), book.getUstatus()&#125;;</span><br><span class="line">    <span class="keyword">int</span> update = jdbcTemplate.update(sql,args);</span><br><span class="line">    System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JdbcTemplate操作数据库（查询返回对象）"><a href="#JdbcTemplate操作数据库（查询返回对象）" class="headerlink" title="JdbcTemplate操作数据库（查询返回对象）"></a>JdbcTemplate操作数据库（查询返回对象）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryForObject(String sql, RowMapper&lt;T&gt; rowMapper,Object... orgs)</span><br></pre></td></tr></table></figure>

<p>有三个参数</p>
<ul>
<li>第一个参数：sql语句</li>
<li>第二个参数：RowMapper是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</li>
<li>第三个参数：sql语句值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询返回对象 </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBookInfo</span><span class="params">(String id)</span> </span>&#123; </span><br><span class="line">    String sql = <span class="string">&quot;select * from t_book where user_id=?&quot;</span>;</span><br><span class="line">    <span class="comment">//调用方法 </span></span><br><span class="line">    Book book = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class), id); </span><br><span class="line">    <span class="keyword">return</span> book; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JdbcTemplate操作数据库（查询返回集合）"><a href="#JdbcTemplate操作数据库（查询返回集合）" class="headerlink" title="JdbcTemplate操作数据库（查询返回集合）"></a>JdbcTemplate操作数据库（查询返回集合）</h3><p>调用JdbcTemplate方法实现查询返回集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">query(String sql, RowMapper&lt;T&gt; rowMapper, Object... orgs)</span><br></pre></td></tr></table></figure>

<p>有三个参数</p>
<ul>
<li>第一个参数：sql语句</li>
<li>第二个参数：RowMapper是接口，针对返回不同类型数据，使用这个接口里面实现类完成数据封装</li>
<li>第三个参数：sql语句值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询返回集合</span></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from t_book&quot;</span>; </span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    List&lt;Book&gt; bookList = jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Book&gt;(Book.class)); </span><br><span class="line">    <span class="keyword">return</span> bookList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JdbcTemplate操作数据库-（批量操作）"><a href="#JdbcTemplate操作数据库-（批量操作）" class="headerlink" title="JdbcTemplate操作数据库 （批量操作）"></a>JdbcTemplate操作数据库 （批量操作）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">batchUpdate(String sql, List&lt;Object[]&gt; batchArgs)</span><br></pre></td></tr></table></figure>

<p>有两个参数</p>
<ul>
<li> 第一个参数：sql语句</li>
<li> 第二个参数：List集合，添加多条记录数据</li>
</ul>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><h3 id="什么事务？"><a href="#什么事务？" class="headerlink" title="什么事务？"></a>什么事务？</h3><p>事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操作都失败</p>
<h3 id="事务四个特性（ACID）"><a href="#事务四个特性（ACID）" class="headerlink" title="事务四个特性（ACID）"></a>事务四个特性（ACID）</h3><p>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的操作要么都做，要么都不做。</p>
<p>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</p>
<p>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>
<p>持久性（durability）。持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>
<h3 id="事务操作（Spring事务管理介绍）"><a href="#事务操作（Spring事务管理介绍）" class="headerlink" title="事务操作（Spring事务管理介绍）"></a>事务操作（Spring事务管理介绍）</h3><p>1、事务添加到JavaEE三层结构里面Service层（业务逻辑层）<br>2、在Spring进行事务管理操作<br>（1）有两种方式：编程式事务管理和声明式事务管理（使用）<br>3、声明式事务管理<br>（1）基于注解方式（使用）<br>（2）基于xml配置文件方式<br>4、在Spring进行声明式事务管理，底层使用AOP原理<br>5、Spring事务管理API<br>（1）提供一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p>
<h3 id="事务操作（注解声明式事务管理）"><a href="#事务操作（注解声明式事务管理）" class="headerlink" title="事务操作（注解声明式事务管理）"></a>事务操作（注解声明式事务管理）</h3><h4 id="在spring配置文件配置事务管理器"><a href="#在spring配置文件配置事务管理器" class="headerlink" title="在spring配置文件配置事务管理器"></a>在spring配置文件配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在spring配置文件，开启事务注解"><a href="#在spring配置文件，开启事务注解" class="headerlink" title="在spring配置文件，开启事务注解"></a>在spring配置文件，开启事务注解</h4><p>（1）在spring配置文件引入名称空间 tx</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span> 			    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）开启事务注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、在<code>service</code>类上面（或者<code>service</code>类里面方法上面）添加事务注解<br>（1）<code>@Transactional</code>，这个注解添加到类上面，也可以添加方法上面<br>（2）如果把这个注解添加类上面，这个类里面所有的方法都添加事务<br>（3）如果把这个注解添加方法上面，为这个方法添加事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1、在<code>service</code>类上面添加注解<code>@Transactional</code>，在这个注解里面可以配置事务相关参数</p>
<h5 id="propagation：事务传播行为"><a href="#propagation：事务传播行为" class="headerlink" title="propagation：事务传播行为"></a>propagation：事务传播行为</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. TransactionDefinition.PROPAGATION_REQUIRED：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</span><br><span class="line"> </span><br><span class="line">2. TransactionDefinition.PROPAGATION_REQUIRES_NEW：</span><br><span class="line">   创建一个新的事务，如果当前存在事务，则把当前事务挂起。</span><br><span class="line"> </span><br><span class="line">3. TransactionDefinition.PROPAGATION_SUPPORTS：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</span><br><span class="line"> </span><br><span class="line">4. TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</span><br><span class="line">   以非事务方式运行，如果当前存在事务，则把当前事务挂起。</span><br><span class="line"> </span><br><span class="line">5. TransactionDefinition.PROPAGATION_NEVER：</span><br><span class="line">   以非事务方式运行，如果当前存在事务，则抛出异常。</span><br><span class="line"> </span><br><span class="line">6. TransactionDefinition.PROPAGATION_MANDATORY：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</span><br><span class="line"> </span><br><span class="line">7. TransactionDefinition.PROPAGATION_NESTED：</span><br><span class="line">   如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；</span><br><span class="line">   如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</span><br></pre></td></tr></table></figure>

<h5 id="ioslation：事务隔离级别"><a href="#ioslation：事务隔离级别" class="headerlink" title="ioslation：事务隔离级别"></a>ioslation：事务隔离级别</h5><p>（1）事务有特性成为隔离性，多事务操作之间不会产生影响。不考虑隔离性产生很多问题<br>（2）有三个读问题：脏读、不可重复读、虚（幻）读<br>（3）脏读：一个未提交事务读取到另一个未提交事务的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. @Transactional(isolation &#x3D; Isolation.READ_UNCOMMITTED)：读取未提交数据(会出现脏读,</span><br><span class="line"> 不可重复读) 基本不使用</span><br><span class="line"> </span><br><span class="line">2. @Transactional(isolation &#x3D; Isolation.READ_COMMITTED)：读取已提交数据(会出现不可重复读和幻读)</span><br><span class="line"> </span><br><span class="line">3. @Transactional(isolation &#x3D; Isolation.REPEATABLE_READ)：可重复读(会出现幻读)</span><br><span class="line"> </span><br><span class="line">4. @Transactional(isolation &#x3D; Isolation.SERIALIZABLE)：串行化</span><br></pre></td></tr></table></figure>

<h5 id="timeout：超时时间"><a href="#timeout：超时时间" class="headerlink" title="timeout：超时时间"></a>timeout：超时时间</h5><p>（1）事务需要在一定时间内进行提交，如果不提交进行回滚<br>（2）默认值是 -1 ，设置时间以秒单位进行计算</p>
<h5 id="readOnly：是否只读"><a href="#readOnly：是否只读" class="headerlink" title="readOnly：是否只读"></a>readOnly：是否只读</h5><p>（1）读：查询操作，写：添加修改删除操作<br>（2）<code>readOnly</code>默认值false，表示可以查询，可以添加修改删除操作<br>（3）设置readOnly值是true，设置成true之后，只能查询</p>
<h5 id="rollbackFor：回滚"><a href="#rollbackFor：回滚" class="headerlink" title="rollbackFor：回滚"></a>rollbackFor：回滚</h5><p>（1）设置出现哪些异常进行事务回滚</p>
<h5 id="noRollbackFor：不回滚"><a href="#noRollbackFor：不回滚" class="headerlink" title="noRollbackFor：不回滚"></a>noRollbackFor：不回滚</h5><p>（1）设置出现哪些异常不进行事务回滚</p>
<h3 id="事务操作（-XML声明式事务管理）"><a href="#事务操作（-XML声明式事务管理）" class="headerlink" title="事务操作（  XML声明式事务管理）"></a>事务操作（  XML声明式事务管理）</h3><p>1、在spring配置文件中进行配置<br>第一步 配置事务管理器<br>第二步 配置通知<br>第三步 配置切入点和切面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1 创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2 配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txadvice&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置事务参数--&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.spring5.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txadvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事务操作（完全注解声明式管理）"><a href="#事务操作（完全注解声明式管理）" class="headerlink" title="事务操作（完全注解声明式管理）"></a>事务操作（完全注解声明式管理）</h3><p>1、创建配置类，使用配置类替代xml配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu&quot;)</span> <span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建数据库连接池 </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///user_db&quot;</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>); </span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建JdbcTemplate对象 </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//到ioc容器中根据类型找到dataSource</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(); </span><br><span class="line">    <span class="comment">//注入dataSource </span></span><br><span class="line">    jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//创建事务管理器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span> </span>&#123; </span><br><span class="line">    DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">    transactionManager.setDataSource(dataSource); </span><br><span class="line">    <span class="keyword">return</span> transactionManager; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring5-框架新功能"><a href="#Spring5-框架新功能" class="headerlink" title="Spring5 框架新功能"></a>Spring5 框架新功能</h2><h4 id="整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除"><a href="#整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除" class="headerlink" title="整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除"></a>整个Spring5框架的代码基于Java8，运行时兼容JDK9，许多不建议使用的类和方法在代码库中删除</h4><h4 id="Spring-5-0框架自带了通用的日志封装"><a href="#Spring-5-0框架自带了通用的日志封装" class="headerlink" title="Spring 5.0框架自带了通用的日志封装"></a>Spring 5.0框架自带了通用的日志封装</h4><p>（1）Spring5已经移除Log4jConfigListener，官方建议使用Log4j2 </p>
<p>（2）Spring5框架整合Log4j2</p>
<h4 id="Spring5框架核心容器支持-Nullable注解"><a href="#Spring5框架核心容器支持-Nullable注解" class="headerlink" title="Spring5框架核心容器支持@Nullable注解"></a>Spring5框架核心容器支持@Nullable注解</h4><p>（1）<code>@Nullable</code>注解可以使用在方法上面，属性上面，参数上面，表示方法返回可以为空，属性值可以为空，参数值可以为空<br>（2）注解用在方法上面，方法返回值可以为空</p>
<p>（3）注解使用在方法参数里面，方法参数可以为空</p>
<h4 id="Spring5核心容器支持函数式风格GenericApplicationContext"><a href="#Spring5核心容器支持函数式风格GenericApplicationContext" class="headerlink" title="Spring5核心容器支持函数式风格GenericApplicationContext"></a>Spring5核心容器支持函数式风格GenericApplicationContext</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数式风格创建对象，交给spring进行管理 </span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenericApplicationContext</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="comment">//1 创建GenericApplicationContext对象 </span></span><br><span class="line">    GenericApplicationContext context = <span class="keyword">new</span> GenericApplicationContext(); </span><br><span class="line">    <span class="comment">//2 调用context的方法对象注册</span></span><br><span class="line">    context.refresh(); context.registerBean(<span class="string">&quot;user1&quot;</span>,User.class,() -&gt; <span class="keyword">new</span> User()); </span><br><span class="line">    <span class="comment">//3 获取在spring注册的对象 </span></span><br><span class="line">    <span class="comment">// User user = (User)context.getBean(&quot;com.atguigu.spring5.test.User&quot;); </span></span><br><span class="line">    User user = (User)context.getBean(<span class="string">&quot;user1&quot;</span>); </span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring5支持整合JUnit5"><a href="#Spring5支持整合JUnit5" class="headerlink" title="Spring5支持整合JUnit5"></a>Spring5支持整合JUnit5</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:bean1.xml&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JTest5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService; </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    	userService.accountMoney(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>框架</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-自动装配</title>
    <url>/2023/09/06/SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    <content><![CDATA[<div class="note no-icon default"><p>早期的Spring项目需要添加需要配置繁琐的xml,比如MVC、事务、数据库连接等繁琐的配置。Spring Boot的出现就无需这些繁琐的配置，因为Spring Boot基于<strong>约定大于配置</strong>的理念，在项目启动时候，将约定的配置类自动配置到IOC容器里。这些都因为Spring Boot有自动配置的特性。</p>
</div>

<h1 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h1><p><code>Spring Boot</code>都需要创建一个<code>main</code>启动类，而启动类都含有<code>@SpringBootApplication</code>注解，使用<code>Spring Boot</code>零配置就可以运行起来，这就是 <code>Spring Boot</code> 自动装配的能力了。</p>
<p>看看<code>Spring Boot</code>入口——<code>main</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h1><h2 id="SpringBootApplication-注解"><a href="#SpringBootApplication-注解" class="headerlink" title="@SpringBootApplication 注解"></a>@SpringBootApplication 注解</h2><p><code>Spring Boot</code> 启动类上都有一个 <code>@SpringBootApplication</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure>

<p>我们需要关注的有以下几个：</p>
<ul>
<li><code>@ComponentScan</code> 组件扫描指令</li>
<li><code>@SpringBootConfiguration</code></li>
<li><code>@EnableAutoConfiguration</code></li>
</ul>
<p>从源码声明可以看出，<code>@SpringBootApplication</code>相当于<code>@SpringBootConfiguration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code>，因此我们直接拆开来分析。</p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p><code>@SpringBootConfiguration</code>是继承自<code>Spring</code>的<code>@Configuration</code>注解，<code>@SpringBootConfiguration</code>作用相当于<code>@Configuration</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring 3.0中增加了<code>@Configuration</code>，<code>@Bean</code>。可基<quote>JavaConfig</quote>形式对<quote>Spring</quote>容器中的<code>bean</code>进行更直观的配置。<code>SpringBoot</code>推荐使用基于<code>JavaConfig</code>的配置形式。</p>
<p>基于<quote>xml</quote>配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;..myServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于<code>JavaConfig</code>配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">mockService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结，<code>@Configuration</code>相当于一个<quote>spring</quote>的<code>xml</code>文件，配合<quote>@Bean</quote>注解，可以在里面配置需要<quote>Spring</quote>容器管理的<code>bean</code>。</p>
<hr>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(ComponentScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends BeanNameGenerator&gt; nameGenerator() <span class="keyword">default</span> BeanNameGenerator.class;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends ScopeMetadataResolver&gt; scopeResolver() <span class="keyword">default</span> AnnotationScopeMetadataResolver.class;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScopedProxyMode <span class="title">scopedProxy</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">resourcePattern</span><span class="params">()</span> <span class="keyword">default</span> &quot;**/ *.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">useDefaultFilters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">    Filter[] includeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Filter[] excludeFilters() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">lazyInit</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Target(&#123;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Filter &#123;</span><br><span class="line">        <span class="function">FilterType <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> FilterType.ANNOTATION</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;classes&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">        Class&lt;?&gt;[] classes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        String[] pattern() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关属性解释:</p>
<ul>
<li><code>basePackages</code>与<code>value</code>: 指定扫描的包或包数组</li>
<li><code>basePackageClasses</code>: 指定具体的要扫描的类</li>
<li><code>nameGenerator</code>: 对应的bean名称的生成器 默认的是<code>BeanNameGenerator</code></li>
<li><code>useDefaultFilters</code>: 是否对带有<code>@Component</code> <code>@Repository</code> <code>@Service</code> <code>@Controller</code>注解的类开启检测，默认是开启的</li>
<li><code>includeFilters</code>: 通过<code>includeFilters</code>加入扫描路径下没有以上注解的类加入spring容器</li>
<li><code>excludeFilters</code>: 通过<code>excludeFilters</code>过滤出不用加入spring容器的类</li>
<li><code>lazyInit</code>: 扫描到的类是都开启懒加载 ，默认是不开启的</li>
</ul>
<p><code>@ComponentScan</code>通常与<code>@Configuration</code>一起配合使用，用来告诉Spring需要扫描哪些包或类。如果不设值的话默认扫描<code>@ComponentScan</code>注解所在类所在的包及其所有子包，所以对于一个Spring Boot项目，一般会把入口类放在顶层目录中，这样就能够保证源码目录下的所有类都能够被扫描到。</p>
<hr>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p><code>@EnableAutoConfiguration</code>是<quote>SpringBoot</quote>自动配置的核心注解</p>
<p>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code> 就是自动配置的核心入口。</p>
<p><code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code>可以自定义导入规则，主要就是<code>AutoConfigurationImportSelector</code>类的<code>selectImports</code>方法来选择需要自动配置的类进行配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">      <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">      <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>selectImports</code>方法中主要是<code>getAutoConfigurationEntry</code>这个方法，而<code>getAutoConfigurationEntry</code>方法中最主要是<code>getCandidateConfigurations</code>这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = <span class="keyword">new</span> ArrayList(SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(),       <span class="keyword">this</span>.getBeanClassLoader()));</span><br><span class="line">    ImportCandidates.load(AutoConfiguration.class,  <span class="keyword">this</span>.getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryType, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">    <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">    classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String factoryTypeName = factoryType.getName();</span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader) &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, List&lt;String&gt;&gt; result = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SpringFactoriesLoader.loadFactoryNames()</code>方法主要作用是读取<code>spring-boot-autoconfigure.jar</code>包下的<code>META-INF/spring.factories</code>中配置可以进行自动配置的类，这些类都是以<code>JavaConfig</code>形式进行导入的，在满足了<code>@Conditional</code>中定义的加载条件后，Spring会将这些类加载到<code>IOC</code>容器中。</p>
<p><code>spring.factories</code>内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Listeners</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"># Auto Configuration Import Filters</span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition</span><br><span class="line"></span><br><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line"></span><br><span class="line">.... 省略了很多</span><br></pre></td></tr></table></figure>

<p><code>Spring.factories</code>定义了哪些类可以被自动配置，每个配置类定了在什么条件下可以被自动配置，并将这些类实例化被Spring容器管理。</p>
<p>这里以<code>AopAutoConfiguration</code>为例子，当类路径下存在<code>EnableAspectJAutoProxy.class</code>，<code>Aspect.class</code>，<code>Advice.class</code>等类时才会注入<code>AopAutoConfiguration</code>，并且默认是创建<code>CglibAutoProxyConfiguration</code>配置。</p>
<p>总的来说：</p>
<p>从上面查看的源码，可以知道<code>Spring Boot</code>自动配置主要是<code>@EnableAutoConfiguration</code>实现的，<code>@EnableAutoConfiguration</code>注解导入<code>AutoConfigurationImportSelector</code>类,通过<code>selectImports</code>方法调用<code>SpringFactoriesLoader.loadFactoryNames()</code>扫描所有含有<code>META-INF/spring.factories</code>文件的<code>jar</code>包，将所有<code>jar</code>包里面的<code>spring.factories</code>文件中<code>@EnableAutoConfiguration</code>对应的类注入到<code>IOC</code>容器中。</p>
<p><code>Spring Boot</code>基于<strong>约定大于配置</strong>的理念，配置如果没有额外的配置的话，就给按照默认的配置使用约定的默认值，按照约定配置到<code>IOC</code>容器中，无需开发人员手动添加配置，加快开发效率。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目报端口冲突的错误</title>
    <url>/2021/09/27/SpringBoot%E9%A1%B9%E7%9B%AE%E6%8A%A5%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>最近运行Springboot项目是，报了一个端口号被占用的错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Web server failed to start. Port 10000 was already in use.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Identify and stop the process that&#x27;s listening on port 10000 or configure this application to listen on another port.</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/springbooterr.png"></p>
<p>报错原因：端口被占用。</p>
<p>解决办法</p>
<p>1.使用cmd命令查看端口号占用情况，例如查看端口10000，可以看出进程号为5372；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr 10000</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/findport.png"></p>
<p>2.关闭该进程</p>
<p>方法一： 使用命令关闭</p>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskkill /F /pid 5372 </span><br></pre></td></tr></table></figure>

<p>如果是非管理员用户可能报拒绝访问的错误</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/confusetoaccess.png"></p>
<p>重新以管理员的身份打开cmd窗口，重新运行以上的关闭进程命令</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/opencmd.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/killtaskpidZ.png"></p>
<p>方法二：使用任务管理器关闭：</p>
<p>菜单栏 -&gt; 右键 - &gt; 任务管理器 -&gt; 详细信息，根据PID排序找到PID为5372的进程，选择后点击结束任务。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Springboot%E7%AB%AF%E5%8F%A3%E5%86%B2%E7%AA%81/killtask.png"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>端口冲突</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Gateway</title>
    <url>/2021/08/28/SpringCloud-Gateway/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>网关作为流量的入口，常用功能包括路由转发、权限校验、限流控制等。而springcloud gateway作为SpringCloud 官方推出的第二代网关框架，取代了Zuul 网关。</p>
<p>网关提供API 全托管服务，丰富的API 管理功能，辅助企业管理大规模的API，以降低管理成本和安全风险，包括协议适配、协议转发、安全策略、防刷、流量、监控日志等功能。<br>Spring Cloud Gateway 旨在提供一种简单而有效的方式来对API 进行路由，并为他们提供切面，例如：安全性，监控/指标和弹性等。</p>
<p>Spring Cloud Gateway 特点:</p>
<ul>
<li>基于Spring5，支持响应式编程和SpringBoot2.0</li>
<li>支持使用任何请求属性进行路由匹配</li>
<li>特定于路由的断言和过滤器</li>
<li>集成Hystrix 进行断路保护</li>
<li>集成服务发现功能</li>
<li>易于编写Predicates 和Filters</li>
<li>支持请求速率限制</li>
<li>支持路径重写</li>
</ul>
<hr>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><ul>
<li><strong>Route</strong>: 路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter 组成。如果断言路由为真，则说明请求的URL 和配置匹配</li>
<li><strong>Predicate</strong>: 断言。Java8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是Spring5.0 框架中的ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义<strong>匹配</strong>来自于http request 中的任何信息，比如请求头和参数等。</li>
<li><strong>Filter</strong>: 过滤器。一个标准的Spring webFilter。Spring cloud gateway 中的filter 分为两种类型的Filter，分别是Gateway Filter 和Global Filter。过滤器Filter 将会对请求和响应进行<strong>修改处理</strong>。</li>
<li><strong>通俗的讲，断言Predicate是判断当前请求是否向下继续传递，而过滤器Filter可以对请求和响应进行修复和处理</strong></li>
</ul>
<hr>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>​    下图提供了 Spring Cloud Gateway 工作原理的高级概述：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/gateway/spring_cloud_gateway_diagram.png"></p>
<p>​    客户端发送请求给网关，弯管HandlerMapping 判断是否请求满足某个路由，满足就发给网关的WebHandler。这个WebHandler 将请求交给一个过滤器链，请求到达目标服务之前，会执行所有过滤器的pre 方法。请求到达目标服务处理之后再依次执行所有过滤器的post 方法。</p>
<div class="note no-icon primary"><p>在没有端口的路由中定义的 URI 分别获得 HTTP 和 HTTPS URI 的默认端口值 80 和 443。 </p>
</div>

<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="引入gateway"><a href="#引入gateway" class="headerlink" title="引入gateway"></a>引入gateway</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">	<span class="attr">gateway:</span></span><br><span class="line">	  <span class="attr">routes:</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_parameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=baz</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestParameter=foo,</span> <span class="string">bar</span></span><br></pre></td></tr></table></figure>

<p>各字段含义如下：</p>
<ul>
<li><code>id</code>：我们自定义的路由 ID，保持唯一</li>
<li><code>uri</code>：目标服务地址</li>
<li><code>predicates</code>：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</li>
<li><code>filters</code>：过滤规则。</li>
</ul>
<div class="note no-icon info"><p>各种Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。<br>一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发</p>
</div>

<hr>
<h1 id="Predicate-断言条件"><a href="#Predicate-断言条件" class="headerlink" title="Predicate 断言条件"></a>Predicate 断言条件</h1><p>Predicate 来源于 Java 8，是 Java 8 中引入的一个函数，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。</p>
<p>在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。网上有一张图总结了 Spring Cloud 内置的几种 Predicate 的实现。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/gateway/RoutePredicateFactories.png"></p>
<h2 id="通过请求时间匹配"><a href="#通过请求时间匹配" class="headerlink" title="通过请求时间匹配"></a>通过请求时间匹配</h2><h3 id="After-Route-Predicate-Factory"><a href="#After-Route-Predicate-Factory" class="headerlink" title="After Route Predicate Factory"></a>After Route Predicate Factory</h3><p>The following example configures an after route predicate:<code>After</code> <code>datetime</code> <code>ZonedDateTime</code></p>
<p>Example 1. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:00</span></span><br></pre></td></tr></table></figure>

<p>此路由匹配 2017 年 1 月 20 日 17:42Mountain Time (Denver) 之后提出的任何请求。 </p>
<h3 id="Before-Route-Predicate-Factory"><a href="#Before-Route-Predicate-Factory" class="headerlink" title="Before Route Predicate Factory"></a>Before Route Predicate Factory</h3><p>The following example configures a before route predicate:<code>Before</code> <code>datetime</code> <code>ZonedDateTime</code> <code>datetime</code></p>
<p>Example 2. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">before_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure>

<p>此路由匹配 2017 年 1 月 20 日  17:42 Mountain Time (Denver)之前提出的任何请求。</p>
<h3 id="Between-Route-Predicate-Factory"><a href="#Between-Route-Predicate-Factory" class="headerlink" title="Between Route Predicate Factory"></a>Between Route Predicate Factory</h3><p>The following example configures a between route predicate:<code>Between</code> <code>datetime1</code> <code>datetime2</code> <code>ZonedDateTime</code> <code>datetime1</code> <code>datetime2</code> <code>datetime2</code> <code>datetime1</code></p>
<p>Example 3. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">between_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017-01-21T17:42:47.789-07:00</span>[<span class="string">America/Denver</span>]</span><br></pre></td></tr></table></figure>

<p>此路由匹配 任何在2017 年 1 月 20 日 17:42 Mountain Time (Denver) 之后并在2017 年 1 月 20 日 17:42 Mountain Time (Denver) 之前的请求。</p>
<hr>
<h2 id="通过Cookie匹配"><a href="#通过Cookie匹配" class="headerlink" title="通过Cookie匹配"></a>通过Cookie匹配</h2><h3 id="The-Cookie-Route-Predicate-Factory"><a href="#The-Cookie-Route-Predicate-Factory" class="headerlink" title="The Cookie Route Predicate Factory"></a>The Cookie Route Predicate Factory</h3><p>此路由谓词工厂接受两个参数，cookie 和 Java 正则表达式。 此谓词匹配具有给定名称且其值与正则表达式匹配的 cookie。 </p>
<p>The following example configures a cookie route predicate factory:<code>Cookie</code> <code>name</code> <code>regexp</code></p>
<p>Example 4. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br></pre></td></tr></table></figure>

<p>此路由匹配 请求的Cookie中有“chocolate”且其值等于“ch.p”</p>
<hr>
<h2 id="通过Header匹配"><a href="#通过Header匹配" class="headerlink" title="通过Header匹配"></a>通过Header匹配</h2><h3 id="Header-Route-Predicate-Factory"><a href="#Header-Route-Predicate-Factory" class="headerlink" title="Header Route Predicate Factory"></a>Header Route Predicate Factory</h3><p>Header 路由谓词工厂接受两个参数，Header名称和一个 regexp（这是一个 Java 正则表达式）。 此谓词与具有给定名称的Header标头匹配，并且其值与正则表达式匹配。 以下示例配置标头路由谓词： </p>
<p>Example 5. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure>

<p>如果请求具有名为 X-Request-Id 的标头，其值与 <code>\d+</code>正则表达式匹配（即，它具有一个或多个数字的值），则此路由匹配。 </p>
<hr>
<h2 id="通过Host匹配"><a href="#通过Host匹配" class="headerlink" title="通过Host匹配"></a>通过Host匹配</h2><h3 id="Host-Route-Predicate-Factory"><a href="#Host-Route-Predicate-Factory" class="headerlink" title="Host Route Predicate Factory"></a>Host Route Predicate Factory</h3><p>Host路由谓词工厂采用一个参数：host名模式列表。 该模式是 Ant 风格的模式，带有 . 作为分隔符。 此谓词匹配与模式匹配的 Host 标头。 以下示例配置主机路由谓词： </p>
<p>Example 6. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.somehost.org,**.anotherhost.org</span></span><br></pre></td></tr></table></figure>

<p>还支持 URI 模板变量（例如 {sub}.myhost.org）。 </p>
<p>如果请求具有值为 <a href="http://www.somehost.org/">www.somehost.org</a> 或 beta.somehost.org 或 <a href="http://www.anotherhost.org/">www.anotherhost.org</a> 的 Host 标头，则此路由匹配。</p>
<p> 此谓词提取 URI 模板变量（例如 sub，在前面的示例中定义）作为名称和值的映射，并将其放置在<code>ServerWebExchange.getAttributes()</code>中，并使用 <code>ServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE</code>中定义的键。 然后这些值可供<code>GatewayFilter</code>工厂使用 </p>
<hr>
<h2 id="通过请求方式匹配"><a href="#通过请求方式匹配" class="headerlink" title="通过请求方式匹配"></a>通过请求方式匹配</h2><h3 id="Method-Route-Predicate-Factory"><a href="#Method-Route-Predicate-Factory" class="headerlink" title="Method Route Predicate Factory"></a>Method Route Predicate Factory</h3><p>方法路由谓词工厂采用一个方法参数，它是一个或多个参数：要匹配的 HTTP 方法。 以下示例配置方法路由谓词： </p>
<p>Example 7. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure>

<p>如果请求方法是 GET 或 POST，则路由匹配。 </p>
<hr>
<h2 id="通过请求路径匹配"><a href="#通过请求路径匹配" class="headerlink" title="通过请求路径匹配"></a>通过请求路径匹配</h2><h3 id="Path-Route-Predicate-Factory"><a href="#Path-Route-Predicate-Factory" class="headerlink" title="Path Route Predicate Factory"></a>Path Route Predicate Factory</h3><p>Path Route Predicate Factory 接受两个参数：一个 Spring PathMatcher 模式列表和一个名为 matchTrailingSlash 的可选标志（默认为 true）。 以下示例配置路径路由谓词： </p>
<p>Example 8. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;,/blue/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果请求路径是例如：<code>/red/1</code>或<code>/red/1/</code>或<code>/red/blue</code>或<code>/blue/green</code>，则此路由匹配。 </p>
<p>如果<code>matchTrailingSlash</code>（匹配反斜杠）设置为<code>false</code>，则不会匹配请求路径<code>/red/1/</code>。</p>
<p>此谓词提取 URI 模板变量（例如在前面的示例中定义的段）作为名称和值的映射，并将其放置在 <code>ServerWebExchange.getAttributes()</code>中，键是在 <code>ServerWebExchangeUtils.URI_TEMPLATE_VARIABLES_ATTRIBUTE</code>中定义的。</p>
<p> 然后这些值可供 GatewayFilter 工厂使用 可以使用实用方法（称为 get）来更轻松地访问这些变量。 以下示例显示了如何使用 get 方法： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; uriVariables = ServerWebExchangeUtils.getPathPredicateVariables(exchange);</span><br><span class="line"></span><br><span class="line">String segment = uriVariables.get(<span class="string">&quot;segment&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过查询匹配"><a href="#通过查询匹配" class="headerlink" title="通过查询匹配"></a>通过查询匹配</h2><h3 id="Query-Route-Predicate-Factory"><a href="#Query-Route-Predicate-Factory" class="headerlink" title="Query Route Predicate Factory"></a>Query Route Predicate Factory</h3><p>查询路由谓词工厂有两个参数：一个必需的参数和一个可选的正则表达式（这是一个 Java 正则表达式）。 以下示例配置查询路由谓词：</p>
<p>Example 9. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=green</span></span><br></pre></td></tr></table></figure>

<p>如果请求包含参数<strong>green</strong>，则路由匹配。</p>
<p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=red,</span> <span class="string">gree.</span></span><br></pre></td></tr></table></figure>

<p>如果请求包含参数red，并且其对应的值满足正则表达式gree.，则路由匹配。所以 green 和 greet 会匹配。 </p>
<hr>
<h2 id="通过远程ip地址匹配"><a href="#通过远程ip地址匹配" class="headerlink" title="通过远程ip地址匹配"></a>通过远程ip地址匹配</h2><h3 id="RemoteAddr-Route-Predicate-Factory"><a href="#RemoteAddr-Route-Predicate-Factory" class="headerlink" title="RemoteAddr Route Predicate Factory"></a>RemoteAddr Route Predicate Factory</h3><p>RemoteAddr 路由谓词工厂采用源列表（最小大小 1），这些源是 CIDR 表示法（IPv4 或 IPv6）字符串，例如 192.168.0.1/16（其中 192.168.0.1 是 IP 地址，16 是子网掩码 ）。 以下示例配置<code>RemoteAddr</code>路由谓词： </p>
<p>Example 10. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure>

<p>如果请求的远程地址是例如 192.168.1.10，则此路由匹配。 </p>
<hr>
<h1 id="过滤器规则（Filter）"><a href="#过滤器规则（Filter）" class="headerlink" title="过滤器规则（Filter）"></a>过滤器规则（Filter）</h1><p>路由过滤器允许以某种方式修改传入的 HTTP 请求或传出的 HTTP 响应。 路由过滤器的范围是特定的路由。 Spring Cloud Gateway 包括许多内置的<code>GatewayFilter</code>工厂。 </p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/gateway/GatewayFilterFactories.png"></p>
<h2 id="AddRequestHeade-GatewayFilter-Factory"><a href="#AddRequestHeade-GatewayFilter-Factory" class="headerlink" title="AddRequestHeade GatewayFilter Factory"></a>AddRequestHeade GatewayFilter Factory</h2><p>The <code>AddRequestHeader</code> <code>GatewayFilter</code> factory takes a <code>name</code> and <code>value</code> parameter. The following example configures an <code>AddRequestHeader</code> <code>GatewayFilter</code>:</p>
<p>Example 13. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=X-Request-red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure>

<p><strong>会给所有匹配的请求头的请求集合添加上<code>X-Request-red:blue</code> header 。</strong></p>
<h2 id="AddRequestParameter-GatewayFilter-Factory"><a href="#AddRequestParameter-GatewayFilter-Factory" class="headerlink" title="AddRequestParameter GatewayFilter Factory"></a>AddRequestParameter GatewayFilter Factory</h2><p>The <code>AddRequestParameter</code> <code>GatewayFilter</code> Factory takes a <code>name</code> and <code>value</code> parameter. The following example configures an <code>AddRequestParameter</code> <code>GatewayFilter</code>:</p>
<p>Example 15. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_request_parameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestParameter=red,</span> <span class="string">blue</span></span><br></pre></td></tr></table></figure>

<p><strong>会给所有匹配的请求添加上 <code>red=blue</code> 的请求参数。</strong></p>
<h2 id="The-AddResponseHeader-GatewayFilter-Factory"><a href="#The-AddResponseHeader-GatewayFilter-Factory" class="headerlink" title="The AddResponseHeader GatewayFilter Factory"></a>The AddResponseHeader GatewayFilter Factory</h2><p>The <code>AddResponseHeader</code> <code>GatewayFilter</code> Factory takes a <code>name</code> and <code>value</code> parameter. The following example configures an <code>AddResponseHeader</code> <code>GatewayFilter</code>:</p>
<p>Example 17. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">add_response_header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Red,</span> <span class="string">Blue</span></span><br></pre></td></tr></table></figure>

<p>会给所有的匹配的请求添加上 <code>X-Response-Foo:Bar</code> 的响应头。</p>
<h2 id="PrefixPath-GatewayFilter-Factory"><a href="#PrefixPath-GatewayFilter-Factory" class="headerlink" title="PrefixPath GatewayFilter Factory"></a>PrefixPath GatewayFilter Factory</h2><p>The <code>PrefixPath</code> <code>GatewayFilter</code> factory takes a single <code>prefix</code> parameter. The following example configures a <code>PrefixPath</code> <code>GatewayFilter</code>:</p>
<p>Example 28. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure>

<p>这会为所有匹配请求的路径加上/mypath 前缀。 因此，对 /hello 的请求将被发送到 /mypath/hello。 </p>
<h2 id="PreserveHostHeader-GatewayFilter-Factory"><a href="#PreserveHostHeader-GatewayFilter-Factory" class="headerlink" title="PreserveHostHeader GatewayFilter Factory"></a>PreserveHostHeader GatewayFilter Factory</h2><p>PreserveHostHeader GatewayFilter 工厂没有参数。 此过滤器设置路由过滤器检查的请求属性，以确定是否应发送原始主机标头，而不是由 HTTP 客户端确定的主机标头。 以下示例配置 PreserveHostHeader GatewayFilter： </p>
<p>Example 29. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">preserve_host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PreserveHostHeader</span></span><br></pre></td></tr></table></figure>

<h2 id="RedirectTo-GatewayFilter-Factory"><a href="#RedirectTo-GatewayFilter-Factory" class="headerlink" title="RedirectTo GatewayFilter Factory"></a>RedirectTo GatewayFilter Factory</h2><p>RedirectTo GatewayFilter 工厂接受两个参数， <code>status</code> 和 <code>url</code>。 <code>status</code> 参数应该是一个 300 系列的重定向 HTTP 代码，比如 301。<code>url</code>参数应该是一个有效的 URL。 这是 Location 标头的值。 对于相对重定向，您应该使用 <code>uri: no://op</code> 作为路由定义的 uri。 以下清单配置了一个 RedirectTo GatewayFilter： </p>
<p>Example 35. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">https://acme.org</span></span><br></pre></td></tr></table></figure>

<p>这将发送带有 Location:<a href="https://acme.org/">https://acme.org</a> 标头的状态 302 以执行重定向。</p>
<h2 id="RemoveRequestHeader-GatewayFilter-Factory"><a href="#RemoveRequestHeader-GatewayFilter-Factory" class="headerlink" title="RemoveRequestHeader GatewayFilter Factory"></a>RemoveRequestHeader GatewayFilter Factory</h2><p>RemoveRequestHeader GatewayFilter 工厂只有一个 <code>name</code>参数。 它是要删除的header的名称。 以下清单配置了 RemoveRequestHeader GatewayFilter： </p>
<p>Example 36. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestHeader=X-Request-Foo</span></span><br></pre></td></tr></table></figure>

<p>请求在向下转发之前会删除 header <code>X-Request-Foo</code>。</p>
<h2 id="RemoveResponseHeader-GatewayFilter-Factory"><a href="#RemoveResponseHeader-GatewayFilter-Factory" class="headerlink" title="RemoveResponseHeader GatewayFilter Factory"></a>RemoveResponseHeader GatewayFilter Factory</h2><p>RemoveResponseHeader GatewayFilter工厂只有一个 <code>name</code>参数。 它是要删除的header的名称。 以下清单配置了 RemoveResponseHeader GatewayFilter：</p>
<p>The following listing configures a <code>RemoveResponseHeader</code> <code>GatewayFilter</code>:</p>
<p>Example 37. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removeresponseheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveResponseHeader=X-Response-Foo</span></span><br></pre></td></tr></table></figure>

<p>这将在响应返回到网关客户端之前从响应中删除 X-Response-Foo 标头。</p>
<p>要删除任何类型的敏感标头，您应该为您可能想要这样做的任何路由配置此过滤器。 此外，您可以使用 spring.cloud.gateway.default-filters 配置一次此过滤器，并将其应用于所有路由。</p>
<h2 id="RemoveRequestParameter-GatewayFilter-Factory"><a href="#RemoveRequestParameter-GatewayFilter-Factory" class="headerlink" title="RemoveRequestParameter GatewayFilter Factory"></a>RemoveRequestParameter GatewayFilter Factory</h2><p>RemoveRequestParameter GatewayFilter 只有一个<code>name</code>参数。 它是要删除的查询参数的名称。 以下示例配置 RemoveRequestParameter GatewayFilter：</p>
<p>Example 38. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestparameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestParameter=red</span></span><br></pre></td></tr></table></figure>

<p>请求在向下转发之前会删除red参数。</p>
<h2 id="RewritePath-GatewayFilter-Factory"><a href="#RewritePath-GatewayFilter-Factory" class="headerlink" title="RewritePath GatewayFilter Factory"></a>RewritePath GatewayFilter Factory</h2><p>RewritePath GatewayFilter 工厂带有两个参数，一个是正则表达式的路径参数，一个是替换参数。这使用 Java 正则表达式来灵活地重写请求路径。 以下清单配置了 RewritePath GatewayFilter： </p>
<p>Example 39. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/red/?(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于 /red/blue 的请求路径，这会在发出下游请求之前将路径设置为 /blue。 请注意，由于 YAML 规范，$ 应替换为 $\。</p>
<h2 id="SetPath-GatewayFilter-Factory"><a href="#SetPath-GatewayFilter-Factory" class="headerlink" title="SetPath GatewayFilter Factory"></a>SetPath GatewayFilter Factory</h2><p>SetPath GatewayFilter 工厂采用路径模板参数。 它提供了一种通过允许路径的模板化段来操作请求路径的简单方法。 这使用了 Spring Framework 中的 URI 模板。 允许多个匹配段。 以下示例配置 SetPath GatewayFilter：</p>
<p>Example 43. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于 /red/blue 的请求路径，这会在发出下游请求之前将路径设置为 /blue。</p>
<h2 id="SetStatus-GatewayFilter-Factory"><a href="#SetStatus-GatewayFilter-Factory" class="headerlink" title="SetStatus GatewayFilter Factory"></a>SetStatus GatewayFilter Factory</h2><p>SetStatus GatewayFilter 工厂只有一个参数 status。 它必须是有效的 Spring <code>HttpStatus</code>。 它可能是整数值 <code>404</code> 或枚举的字符串表示形式：<code>NOT_FOUND</code>。 以下清单配置了 SetStatus GatewayFilter： </p>
<p>Example 48. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setstatusstring_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetStatus=BAD_REQUEST</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setstatusint_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetStatus=401</span></span><br></pre></td></tr></table></figure>

<p>无论哪种情况，响应的 HTTP 状态都设置为 401。</p>
<h2 id="StripPrefix-GatewayFilter-Factory"><a href="#StripPrefix-GatewayFilter-Factory" class="headerlink" title="StripPrefix GatewayFilter Factory"></a>StripPrefix GatewayFilter Factory</h2><p>StripPrefix GatewayFilter 工厂只有一个参数，<code>parts</code>。 <code>parts</code>部数指在将请求发送到下游之前要从请求中剥离的路径中的部分数。 以下清单配置了 StripPrefix GatewayFilter： </p>
<p>Example 50. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">nameRoot</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://nameservice</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/name/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=2</span></span><br></pre></td></tr></table></figure>

<p>当通过网关向 /name/blue/red 发出请求时，对 nameservice/name/blue/red 发出的请求看起来像 nameservice/red。 </p>
<hr>
<h1 id="Global-Filters-全局过滤器"><a href="#Global-Filters-全局过滤器" class="headerlink" title="Global Filters(全局过滤器)"></a>Global Filters(全局过滤器)</h1><p>GlobalFilter 接口与 GatewayFilter 具有相同的签名。 这些是有条件地应用于所有路由的特殊过滤器。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/gateway/%20GlobalFilters.png"></p>
<h2 id="组合全局过滤器和网关过滤器排序"><a href="#组合全局过滤器和网关过滤器排序" class="headerlink" title="组合全局过滤器和网关过滤器排序"></a>组合全局过滤器和网关过滤器排序</h2><p>当请求与路由匹配时，过滤 Web 处理程序会将 GlobalFilter 的所有实例和 GatewayFilter 的所有特定于路由的实例添加到过滤器链中。 这个组合过滤器链由 org.springframework.core.Ordered 接口排序，您可以通过实现 getOrder() 方法设置该接口。</p>
<p>由于 Spring Cloud Gateway 区分过滤器逻辑执行的“pre”和“post”阶段（参见 How it Works），具有最高优先级的过滤器是“pre”阶段的第一个，“post”阶段的最后一个—— 阶段。</p>
<p>以下例子配置了过滤器链：</p>
<p>Example 55. ExampleConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">customFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomGlobalFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;custom global filter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ReactiveLoadBalancerClientFilter"><a href="#ReactiveLoadBalancerClientFilter" class="headerlink" title="ReactiveLoadBalancerClientFilter"></a>ReactiveLoadBalancerClientFilter</h2><p>ReactiveLoadBalancerClientFilter 在名为 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 的交换属性中查找 URI。 如果 URL 具有 lb 方案（例如 lb://myservice），则它使用 Spring Cloud ReactorLoadBalancer 将名称（在此示例中为 myservice）解析为实际主机和端口，并替换同一属性中的 URI。 未修改的原始 URL 将附加到 ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR 属性中的列表中。 过滤器还会查看 ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR 属性以查看它是否等于 lb。如果是，则应用相同的规则。 以下清单配置了一个 ReactiveLoadBalancerClientFilter：</p>
<p>Example 56. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">myRoute</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/service/**</span></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认情况下，当 ReactorLoadBalancer 找不到服务实例时，会返回 503。 您可以通过设置 spring.cloud.gateway.loadbalancer.use404&#x3D;true 将网关配置为返回 404。</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从 ReactiveLoadBalancerClientFilter 返回的 ServiceInstance 的 isSecure 值会覆盖向网关发出的请求中指定的方案。 例如，如果请求通过 HTTPS 进入网关，但 ServiceInstance 指示它不安全，则通过 HTTP 发出下游请求。 相反的情况也可以适用。 但是，如果在网关配置中为路由指定了 GATEWAY_SCHEME_PREFIX_ATTR，则前缀将被剥离，并且来自路由 URL 的结果方案将覆盖 ServiceInstance 配置。</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Netty-Routing-Filter"><a href="#Netty-Routing-Filter" class="headerlink" title="Netty Routing Filter"></a>Netty Routing Filter</h2><p>如果位于 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 交换属性中的 URL 具有 http 或 https 方案，则 Netty 路由过滤器运行。 它使用 Netty HttpClient 发出下游代理请求。 响应放在 ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR 交换属性中，以供稍后过滤器使用。 （还有一个实验性的 WebClientHttpRoutingFilter 执行相同的功能但不需要 Netty。）</p>
<h2 id="Netty-Write-Response-Filter"><a href="#Netty-Write-Response-Filter" class="headerlink" title="Netty Write Response Filter"></a>Netty Write Response Filter</h2><p>如果 ServerWebExchangeUtils.CLIENT_RESPONSE_ATTR 交换属性中存在 Netty HttpClientResponse，则 NettyWriteResponseFilter 运行。 它在所有其他过滤器完成后运行，并将代理响应写回网关客户端响应。 （还有一个实验性的 WebClientWriteResponseFilter 可以执行相同的功能，但不需要 Netty。）</p>
<h2 id="RouteToRequestUrl-Filter"><a href="#RouteToRequestUrl-Filter" class="headerlink" title="RouteToRequestUrl Filter"></a>RouteToRequestUrl Filter</h2><p>如果 ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR 交换属性中存在 Route 对象，则 RouteToRequestUrlFilter 运行。 它基于请求 URI 创建一个新的 URI，但使用 Route 对象的 URI 属性进行更新。 新 URI 放置在 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 交换属性中。</p>
<p>如果 URI 具有方案前缀，例如 lb:ws://serviceid，则 lb 方案将从 URI 中剥离并放置在 ServerWebExchangeUtils.GATEWAY_SCHEME_PREFIX_ATTR 中，以便稍后在过滤器链中使用。</p>
<h2 id="Websocket-Routing-Filter"><a href="#Websocket-Routing-Filter" class="headerlink" title="Websocket Routing Filter"></a>Websocket Routing Filter</h2><p>如果位于 ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR 交换属性中的 URL 具有 ws 或 wss 方案，则 websocket 路由过滤器运行。 它使用 Spring WebSocket 基础结构向下游转发 websocket 请求。</p>
<p>您可以通过在 URI 前加上 lb 来对 websockets 进行负载平衡，例如 lb:ws://serviceid。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你使用 SockJS 作为普通 HTTP 的后备，你应该配置一个普通的 HTTP 路由以及 websocket 路由。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>The following listing configures a websocket routing filter:</p>
<p>Example 57. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="comment"># SockJS route</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">websocket_sockjs_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:3001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/websocket/info/**</span></span><br><span class="line">      <span class="comment"># Normal Websocket route</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">websocket_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">ws://localhost:3001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/websocket/**</span></span><br></pre></td></tr></table></figure>

<h2 id="Gateway-Metrics-Filter"><a href="#Gateway-Metrics-Filter" class="headerlink" title="Gateway Metrics Filter"></a>Gateway Metrics Filter</h2><p>要启用网关指标，请将 spring-boot-starter-actuator 添加为项目依赖项。 然后，默认情况下，只要属性 spring.cloud.gateway.metrics.enabled 未设置为 false，网关指标过滤器就会运行。 此过滤器添加了一个名为 gateway.requests 的计时器指标，并带有以下标签：</p>
<p>routeId：路由ID。</p>
<p>routeUri：API 路由到的 URI。</p>
<p>结果：按 HttpStatus.Series 分类的结果。</p>
<p>status：返回给客户端的请求的 HTTP 状态。</p>
<p>httpStatusCode：返回给客户端的请求的 HTTP 状态。</p>
<p>httpMethod：用于请求的 HTTP 方法。</p>
<p>然后可以从 /actuator/metrics/gateway.requests 抓取这些指标，并且可以轻松地与 Prometheus 集成以创建 Grafana 仪表板。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要启用 prometheus 端点，请将 micrometer-registry-prometheus 添加为项目依赖项。</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
        <tag>Gateway</tag>
        <tag>网关</tag>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2核心技术中</title>
    <url>/2021/07/20/SpringBoot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%AD/</url>
    <content><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><ul>
<li>SpringBoot自动加载特地目录下的<code>application.properties</code>配置文件，在实际的使用中，一般放在<code>resources</code>文件夹下。</li>
<li><code>application.properties</code>采用<code>key=value</code>配置形式</li>
</ul>
<p>SpringBoot的设计思想是<strong>约定大于配置</strong>，让开发人员从Spring繁琐的XML配置中解放出来。当然springboot 还通过Java Config。<code>properties</code>和<code>yml</code>是SpringBoot项目常用的两种文件配置方式。SpringBoot项目默认加载以下目录下的application.properties文件。在实际的使用中，一般放在resources文件夹下。</p>
<div class="note no-icon default"><p>参考资料<br>SpringApplication loads properties from application.properties files in the following locations and adds them to the Spring Environment:<br>A /config subdirectory of the current directory The current directory A classpath /config package The classpath root</p>
</div>

<h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件。</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>key: value</code>；<strong>kv之间有空格</strong></li>
<li><strong>大小写敏感</strong></li>
<li><strong>使用缩进表示层级关系</strong></li>
<li><strong>缩进不允许使用tab，只允许空格</strong></li>
<li><strong>缩进的空格数不重要，只要相同层级的元素左对齐即可</strong></li>
<li><code>#</code><strong>表示注释</strong></li>
<li><strong>字符串无需加引号，如果要加</strong>，<code>''</code>与<code>""</code>表示字符串内容会被转义/不转义</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>●字面量：单个的、不可再分的值。date、boolean、string、number、null</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<p>●对象：键值对的集合。map、hash、set、object </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行内写法：  </span></span><br><span class="line"><span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<p>●数组：一组按次序排列的值。array、list、queue</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#行内写法：</span></span><br><span class="line"><span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> Boolean boss;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line">  <span class="keyword">private</span> String[] interests;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">  <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="配置提示"><a href="#配置提示" class="headerlink" title="配置提示"></a>配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="WEB开发"><a href="#WEB开发" class="headerlink" title="WEB开发"></a>WEB开发</h1><h2 id="SpringMVC自动配置概览"><a href="#SpringMVC自动配置概览" class="headerlink" title="SpringMVC自动配置概览"></a>SpringMVC自动配置概览</h2><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications.(大多场景我们都无需自定义配置)<br>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li>Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</li>
<li>内容协商视图解析器和BeanName视图解析器</li>
<li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).<ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li>Automatic registration of Converter, GenericConverter, and Formatter beans.<ul>
<li>注册 Converter，GenericConverter，Formatter </li>
</ul>
</li>
<li>Support for HttpMessageConverters (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).<ul>
<li>支持 HttpMessageConverters （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li>Automatic registration of MessageCodesResolver (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).<ul>
<li>自动注册 MessageCodesResolver （国际化用）</li>
</ul>
</li>
<li>Static index.html support.<ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li>Custom Favicon support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).<ul>
<li>自定义 Favicon </li>
</ul>
</li>
<li>Automatic use of a ConfigurableWebBindingInitializer bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).<ul>
<li>自动使用 ConfigurableWebBindingInitializer ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<div class="note info"><p>If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.<br>不用@EnableWebMvc注解。使用 @Configuration + WebMvcConfigurer 自定义规则</p>
</div>

<div class="note info"><p>If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.<br>声明 WebMvcRegistrations 改变默认底层组件</p>
</div>

<div class="note info"><p>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.<br>使用 @EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</p>
</div>

<hr>
<h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a><strong>静态资源访问</strong></h2><h3 id="静态资源访问-1"><a href="#静态资源访问-1" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><div class="note no-icon primary"><p>By default, Spring Boot serves static content from a directory called /static (or /public or<br>/resources or /META-INF/resources) in the classpath.</p>
</div>

<p>只要静态资源放在类路径下： called /static (or /public or /resources or /META-INF/resources</p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"><span class="comment">#改变默认的静态资源路径</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<h3 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h3><p>默认无前缀</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>

<p>当前项目 + res + 静态资源名 = 静态资源文件夹下找</p>
<h2 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h2><div class="note no-icon primary"><p>Spring Boot supports both static and templated welcome pages. It first looks for an index.html file in<br>the configured static content locations. If one is not found, it then looks for an index template. If<br>either is found, it is automatically used as the welcome page of the application.</p>
</div>

<p>静态资源路径下  index.html</p>
<ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li>
</ul>
<h2 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a>自定义Favicon</h2><p>favicon.ico 放在静态资源目录下即可。</p>
<h2 id="请求参数处理"><a href="#请求参数处理" class="headerlink" title="请求参数处理"></a>请求参数处理</h2><h3 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h3><p>注解：<br><code>@PathVariable</code>、<code>@RequestHeader</code>、<code>@RequestParam</code>、<code>@CookieValue</code>、<code>@RequestBody</code></p>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@PathVariable</code></td>
<td align="left">通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“)</td>
</tr>
<tr>
<td align="left"><code>@RequestHeader</code></td>
<td align="left">是获取请求头中的数据，通过指定参数 value 的值来获取请求头中指定的参数值。**</td>
</tr>
<tr>
<td align="left"><code>@RequestParam</code></td>
<td align="left">@RequestParam主要用于将请求参数区域的数据映射到控制层方法的参数上</td>
</tr>
<tr>
<td align="left"><code>@CookieValue</code></td>
<td align="left">@CookieValue注解主要是将请求的Cookie数据，映射到功能处理方法的参数上。</td>
</tr>
<tr>
<td align="left"><code>@RequestBody</code></td>
<td align="left">主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；GET方式无请求体，所以使用@RequestBody接收数据时，前端不能使用GET方式提交数据，而是用POST方式进行提交。</td>
</tr>
</tbody></table>
<h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">    map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">    map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">    System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言基础教程</title>
    <url>/2022/03/13/Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol>
<li><p>单行注释 - 以#和空格开头的部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(&#x27;hello,world&#x27;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行注释 - 三个引号开头，三个引号结尾</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">print(&#x27;hello,world&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h1><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p>
<ul>
<li>硬性规则：<ul>
<li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li>
<li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li>
<li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li>
</ul>
</li>
<li>PEP 8要求：<ul>
<li>用小写字母拼写，多个单词用下划线连接。</li>
<li>受保护的实例属性用单个下划线开头（后面会讲到）。</li>
<li>私有的实例属性用两个下划线开头（后面会讲到）。</li>
</ul>
</li>
</ul>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p>
<ul>
<li><code>整型</code>：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li>
<li><code>浮点型</code>：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li>
<li><code>字符串型</code>：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li>
<li><code>布尔型</code>：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li>
<li><code>复数型</code>：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li>
</ul>
<p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line">print(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">print(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>可以使用Python中内置的函数对变量类型进行转换。</p>
<ul>
<li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li>
<li><code>float()</code>：将一个字符串转换成浮点数。</li>
<li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li>
<li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li>
<li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li>
</ul>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;a = &#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;b = &#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))</span><br><span class="line">print(<span class="string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))</span><br><span class="line">print(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))</span><br><span class="line">print(<span class="string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))</span><br><span class="line">print(<span class="string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b))</span><br><span class="line">print(<span class="string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))</span><br><span class="line">print(<span class="string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b))</span><br></pre></td></tr></table></figure>

<div class="note info"><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p>
</div>

<p>除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;a1 = &#x27;</span>))</span><br><span class="line">b1 = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;a1 = &#x27;</span>))</span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a1&#125;</span> + <span class="subst">&#123;b1&#125;</span> = <span class="subst">&#123;a1 + b1&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h2><p>虽然都是用 <code>if</code> 关键词定义判断，但与<strong>C，Java</strong>等语言不同，<strong>Python</strong>不使用 <code>&#123;&#125;</code>将<code>if</code> 语句控制的区域包含起来。<strong>Python</strong>使用的是缩进方法。同时，也不需要用 <code>()</code>将判断条件括起来。</p>
<p>一个完整的 <code>if</code>结构通常如下所示（注意：条件后的 <code>:</code>是必须要的，缩进值需要一样）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if &lt;condition 1&gt;:</span><br><span class="line">    &lt;statement 1&gt;</span><br><span class="line">    &lt;statement 2&gt;</span><br><span class="line">elif &lt;condition 2&gt;: </span><br><span class="line">    &lt;statements&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;x is positive&quot;</span></span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;x is zero&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;x is negative&quot;</span></span><br><span class="line">x <span class="keyword">is</span> zero</span><br></pre></td></tr></table></figure>

<p><code>elif</code>的个数没有限制，可以是1个或者多个，也可以没有。</p>
<p><code>else</code> 最多只有1个，也可以没有。</p>
<p>可以使用 <code>and</code> ，<code>or</code>, <code>not</code>等关键词结合多个判断条件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line">y = <span class="number">-5</span></span><br><span class="line">x &gt; <span class="number">0</span> <span class="keyword">and</span> y &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">not</span> x &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<p>这里使用这个简单的例子，假如想判断一个年份是不是闰年，按照闰年的定义，这里只需要判断这个年份是不是能被4整除，但是不能被100整除，或者正好被400整除：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="number">1900</span></span><br><span class="line"><span class="keyword">if</span> year % <span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;This is a leap year!&quot;</span></span><br><span class="line"><span class="comment"># 两个条件都满足才执行</span></span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;This is a leap year!&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;This is not a leap year.&quot;</span></span><br><span class="line">This <span class="keyword">is</span> <span class="keyword">not</span> a leap year.</span><br></pre></td></tr></table></figure>

<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p>
<h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;indented block of code&gt;</span><br></pre></td></tr></table></figure>

<p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p>
<ul>
<li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li>
<li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li>
<li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li>
<li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li>
</ul>
<p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line">print(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure>

<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while 循环</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statesments&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Python</strong>会循环执行<code>&lt;statesments&gt;</code>，直到<code>&lt;condition&gt;</code>不满足为止。</p>
<p>例如，计算数字<code>0</code>到<code>1000000</code>的和：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">1000000</span>:</span><br><span class="line">    total += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> total</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">499999500000</span><br></pre></td></tr></table></figure>

<h2 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h2><p>遇到 <code>continue</code> 的时候，程序会返回到循环的最开始重新执行。</p>
<p>例如在循环中忽略一些特定的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> values:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 忽略奇数</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span> i/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h2><p>遇到 <code>break</code> 的时候，程序会跳出循环，不管循环条件是不是满足</p>
<h2 id="else语句"><a href="#else语句" class="headerlink" title="else语句"></a>else语句</h2><p>与 <code>if</code>  一样， <code>while</code>  和 <code>for</code>  循环后面也可以跟着 <code>else</code>  语句，不过要和<code>break</code> 一起连用。</p>
<ul>
<li>当循环正常结束时，循环条件不满足， <code>else</code>  被执行；</li>
<li>当循环被 <code>break</code>  结束时，循环条件仍然满足， <code>else</code>  不执行。</li>
</ul>
<p>不执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = [<span class="number">7</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> values:</span><br><span class="line">    <span class="keyword">if</span> x &lt;= <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Found:&#x27;</span>, x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;All values greater than 10&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Found: 7</span><br></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> values:</span><br><span class="line">    <span class="keyword">if</span> x &lt;= <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Found:&#x27;</span>, x</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;All values greater than 10&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">All values greater than 10</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="容器型数据类型"><a href="#容器型数据类型" class="headerlink" title="容器型数据类型"></a>容器型数据类型</h1><p>容器型数据类型包括：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td><code>列表(list)</code></td>
<td><code>[1, 1.2, &#39;hello&#39;]</code></td>
</tr>
<tr>
<td><code>元组(Tuple)</code></td>
<td><code>(10, 11, 12, 13, 14)</code></td>
</tr>
<tr>
<td><code>集合(set)</code></td>
<td><code>&#123;1, 2, 3, 1&#125;</code></td>
</tr>
<tr>
<td><code>字典(dict)</code></td>
<td><code>&#123;&#39;dogs&#39;: 5, &#39;pigs&#39;: 3&#125;</code></td>
</tr>
<tr>
<td><code>Numpy数组</code></td>
<td><code>array([1, 2, 3])</code></td>
</tr>
</tbody></table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在<strong>Python</strong>中，列表是一个有序的序列。</p>
<p>列表用一对 <code>[]</code> 生成，中间的元素用 <code>,</code>隔开，其中的元素不需要是同一类型，同时列表的长度也不固定。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&#x27;hello&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>空列表可以用 <code>[]</code> 或者 <code>list()</code> 生成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_list = []</span><br><span class="line">empty_list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_list = <span class="built_in">list</span>()</span><br><span class="line">empty_list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>列表操作</p>
<p>与字符串类似，列表也支持以下的操作：</p>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><p>用 <code>len</code> 查看列表长度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">len(l)</span><br></pre></td></tr></table></figure>

<p>加法和乘法</p>
<p>列表加法，相当于将两个列表按顺序连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">3.2</span>, <span class="string">&#x27;hello&#x27;</span>]</span><br><span class="line">a + b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 3.2, &#39;hello&#39;]</span><br></pre></td></tr></table></figure>

<p>列表与整数相乘，相当于将列表重复相加：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2.0, &#39;hello&#39;, 1, 2.0, &#39;hello&#39;]</span><br></pre></td></tr></table></figure>

<h3 id="索引和分片"><a href="#索引和分片" class="headerlink" title="索引和分片"></a>索引和分片</h3><p>列表和字符串一样可以通过索引和分片来查看它的元素。</p>
<p>索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">a[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<p>反向索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>

<p>分片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[12, 13]</span><br></pre></td></tr></table></figure>

<p>与字符串不同的是，列表可以通过索引和分片来修改。</p>
<p>对于字符串，如果我们通过索引或者分片来修改，<strong>Python</strong>会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># 把开头的 h 改成大写</span></span><br><span class="line">s[0] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-10-844622ced67a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      1 s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">      2 <span class="comment"># 把开头的 h 改成大写</span></span><br><span class="line">----&gt; 3 s[0] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> object does not support item assignment</span><br></pre></td></tr></table></figure>

<p>而这种操作对于列表来说是可以的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[100, 11, 12, 13, 14]</span><br></pre></td></tr></table></figure>

<p>这种赋值也适用于分片，例如，将列表的第2，3两个元素换掉：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[100, 1, 2, 13, 14]</span><br></pre></td></tr></table></figure>

<p>事实上，对于连续的分片（即步长为 <code>1</code> ），<strong>Python</strong>采用的是整段替换的方法，两者的元素个数并不需要相同，例如，将 <code>[11,12]</code> 替换为 <code>[1,2,3,4]</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">a[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line">[<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br></pre></td></tr></table></figure>

<p>这意味着，可以用这种方法来删除列表中一个连续的分片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="built_in">print</span> a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">a[<span class="number">1</span>:<span class="number">3</span>] = []</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure>

<p>对于不连续（间隔step不为1）的片段进行修改时，两者的元素数目必须一致：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">a[::<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 11, 2, 13, 3]</span><br></pre></td></tr></table></figure>

<p>否则会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a[::2] = []</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-16-7b6c4e43a9fa&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a[::2] = []</span><br><span class="line"></span><br><span class="line">ValueError: attempt to assign sequence of size 0 to extended slice of size 3</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="添加或删除元素"><a href="#添加或删除元素" class="headerlink" title="添加或删除元素"></a>添加或删除元素</h3><h4 id="向列表添加单个元素"><a href="#向列表添加单个元素" class="headerlink" title="向列表添加单个元素"></a>向列表添加单个元素</h4><p><code>l.append(ob)</code> 将元素 <code>ob</code> 添加到列表 <code>l</code> 的最后。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">a.append(<span class="number">11</span>)</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<p>append每次只添加一个元素，并不会因为这个元素是序列而将其展开：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.append([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">11</span>, [<span class="number">11</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>

<h4 id="向列表添加序列"><a href="#向列表添加序列" class="headerlink" title="向列表添加序列"></a>向列表添加序列</h4><p><code>l.extend(lst)</code> 将序列 <code>lst</code> 的元素依次添加到列表 <code>l</code> 的最后，作用相当于 <code>l += lst</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line">a.extend([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[10, 11, 12, 11, 1, 2]</span><br></pre></td></tr></table></figure>

<h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p><code>l.insert(idx, ob)</code> 在索引 <code>idx</code> 处插入<code>ob</code> ，之后的元素依次后移。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">11</span>]</span><br><span class="line"><span class="comment"># 在索引 3 插入 &#x27;a&#x27;</span></span><br><span class="line">a.insert(<span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10, 11, 12, &#39;a&#39;, 13, 11]</span><br></pre></td></tr></table></figure>

<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p><strong>Python</strong>提供了删除列表中元素的方法<code>del</code>。</p>
<p>删除列表中的第一个元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1002</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line">print(a)</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>删除第2到最后一个元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1002</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>:]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1002]</span><br></pre></td></tr></table></figure>

<p>删除间隔的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> a[::<span class="number">2</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2]</span><br></pre></td></tr></table></figure>

<h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p><code>l.remove(ob)</code> 会将列表中第一个出现的 <code>ob</code> 删除，如果 <code>ob</code> 不在 <code>l</code> 中会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">11</span>]</span><br><span class="line"><span class="comment"># 移除了第一个 11</span></span><br><span class="line">a.remove(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<h4 id="弹出元素"><a href="#弹出元素" class="headerlink" title="弹出元素"></a>弹出元素</h4><p><code>l.pop(idx)</code> 会将索引 <code>idx</code> 处的元素删除，并返回这个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">11</span>]</span><br><span class="line">a.pop(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<h3 id="列表遍历"><a href="#列表遍历" class="headerlink" title="列表遍历"></a>列表遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment"># 通过循环用下标遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    print(list1[index])</span><br><span class="line"><span class="comment"># 通过for循环遍历列表元素</span></span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> list1:</span><br><span class="line">    print(elem)</span><br><span class="line"><span class="comment"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(list1):</span><br><span class="line">    print(index, elem)</span><br></pre></td></tr></table></figure>

<h3 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h3><h4 id="测试从属关系"><a href="#测试从属关系" class="headerlink" title="测试从属关系"></a>测试从属关系</h4><p>用 <code>in</code> 来看某个元素是否在某个序列（不仅仅是列表）中，用<code>not in</code>来判断是否不在某个序列中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line">print(<span class="number">10</span> <span class="keyword">in</span> a)</span><br><span class="line">print(<span class="number">10</span> <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>也可以作用于字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;he&#x27;</span> <span class="keyword">in</span> s)</span><br><span class="line">print(<span class="string">&#x27;world&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>列表中可以包含各种对象，甚至可以包含列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="string">&#x27;eleven&#x27;</span>, [<span class="number">12</span>, <span class="number">13</span>]]</span><br><span class="line">a[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[12, 13]</span><br></pre></td></tr></table></figure>

<p>a[2]是列表，可以对它再进行索引：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">2</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure>

<h4 id="列表中某个元素个数count"><a href="#列表中某个元素个数count" class="headerlink" title="列表中某个元素个数count"></a>列表中某个元素个数count</h4><p><code>l.count(ob)</code> 返回列表中元素 <code>ob</code> 出现的次数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>]</span><br><span class="line">a.count(<span class="number">11</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="列表中某个元素位置index"><a href="#列表中某个元素位置index" class="headerlink" title="列表中某个元素位置index"></a>列表中某个元素位置index</h4><p><code>l.index(ob)</code> 返回列表中元素 <code>ob</code> 第一次出现的索引位置，如果 <code>ob</code> 不在 <code>l</code> 中会报错。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.index(12)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><code>l.sort()</code> 会将列表中的元素按照一定的规则排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">2</span>]</span><br><span class="line">a.sort()</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>

<p>如果不想改变原来列表中的值，可以使用 <code>sorted</code> 函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">sorted</span>(a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">[<span class="number">10</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>

<h3 id="列表反向"><a href="#列表反向" class="headerlink" title="列表反向"></a>列表反向</h3><p> <code>l.reverse()</code> 会将列表中的元素从后向前排列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.reverse()</span><br><span class="line">print(a)</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>如果不想改变原来列表中的值，可以使用这样的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">b = a[::<span class="number">-1</span>]</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>与列表相似，元组<code>Tuple</code>也是个有序序列，但是元组是不可变的，用<code>()</code>生成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>)</span><br><span class="line">t</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(10, 11, 12, 13, 14)</span><br></pre></td></tr></table></figure>

<p>可以索引，切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(11, 12)</span><br></pre></td></tr></table></figure>

<p>但是元组是不可变的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 会报错</span></span><br><span class="line">t[<span class="number">0</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-4-da6c1cabf0b0&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      1 <span class="comment"># 会报错</span></span><br><span class="line">----&gt; 2 t[0] = 1</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> object does not support item assignment</span><br></pre></td></tr></table></figure>

<h3 id="单个元素的元组生成"><a href="#单个元素的元组生成" class="headerlink" title="单个元素的元组生成"></a>单个元素的元组生成</h3><p>由于<code>()</code>在表达式中被应用，只含有单个元素的元组容易和表达式混淆，所以采用下列方式定义只有一个元素的元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">10</span>,)</span><br><span class="line">print(a)</span><br><span class="line">print(<span class="built_in">type</span>(a))</span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">10</span>)</span><br><span class="line">print(<span class="built_in">type</span>(a))</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>将列表转换为元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]</span><br><span class="line"><span class="built_in">tuple</span>(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(10, 11, 12, 13, 14)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取元组中的元素</span><br><span class="line">print(a[0])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h3 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h3><p>由于元组是不可变的，所以只能有一些不可变的方法，例如计算元素个数 <code>count</code> 和元素位置 <code>index</code> ，用法与列表一样。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.count(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.index(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p><strong>Python</strong>中可以使用一对单引号’’或者双引号””生成字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line"><span class="built_in">print</span> s</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="built_in">print</span> s</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello,</span><br><span class="line">world!</span><br><span class="line">hello,</span><br><span class="line">python!</span><br></pre></td></tr></table></figure>

<p>Python 用一对 <code>"""</code> 或者 <code>'''</code> 来生成多行字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strs = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">python!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">print(strs)</span><br></pre></td></tr></table></figure>

<p>可以在字符串中使用（反斜杠）来表示转义，也就是说<code>\</code>后面的字符不再是它原来的意义，例如：<code>\n</code>不是代表反斜杠和字符n，而是表示换行；而<code>\t</code>也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示<code>&#39;</code>要写成<code>\&#39;</code>，同理想表示<code>\</code>要写成<code>\\</code>。可以运行下面的代码看看会输出什么。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line">print(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;hello, world!&#39; </span><br><span class="line">\hello, world!\</span><br></pre></td></tr></table></figure>

<p>我们可以通过在字符串的最前面加上字母<code>r</code>来表示原始字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">s2 = <span class="string">r&#x27;\n\\hello, world!\\\n&#x27;</span></span><br><span class="line">print(s1, s2, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;hello, world!\&#39; \n\\hello, world!\\\n</span><br></pre></td></tr></table></figure>

<p>格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 * 10 &#x3D; 50</span><br></pre></td></tr></table></figure>

<h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><p>加法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello &#x27;</span> + <span class="string">&#x27;world&#x27;</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure>

<p>字符串与数字相乘：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;echo&quot;</span> * <span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;echoechoecho&#39;</span><br></pre></td></tr></table></figure>

<p>字符串长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure>

<p>使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串（成员运算）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> s) //<span class="literal">True</span></span><br><span class="line">print(<span class="string">&#x27;good&#x27;</span> <span class="keyword">in</span> s) //<span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><p>我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符（切片运算）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"><span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line">print(s[<span class="number">2</span>]) <span class="comment"># l</span></span><br><span class="line"><span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line">print(s[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># llo</span></span><br><span class="line">print(s[<span class="number">2</span>:]) <span class="comment"># llo,world</span></span><br><span class="line">print(s[<span class="number">2</span>::<span class="number">2</span>]) <span class="comment"># lowrd</span></span><br><span class="line">print(s[::<span class="number">2</span>]) <span class="comment"># hlowrd</span></span><br><span class="line">print(s[::<span class="number">-1</span>]) <span class="comment"># dlrow,olleh</span></span><br><span class="line">print(s[<span class="number">-3</span>:<span class="number">-1</span>]) <span class="comment"># rl</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// 第一种方式，<span class="keyword">for</span> <span class="keyword">in</span></span><br><span class="line">strs = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">    print(s)</span><br><span class="line">    </span><br><span class="line">// 第二种方式，内置函数<span class="built_in">range</span>()或xrange（）</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(strs)):</span><br><span class="line">    print(strs[i])</span><br><span class="line"></span><br><span class="line">// 第三种方式，内置函数<span class="built_in">enumerate</span>()</span><br><span class="line"><span class="keyword">for</span> index, <span class="built_in">str</span> <span class="keyword">in</span> <span class="built_in">enumerate</span>(strs):</span><br><span class="line">    print(index,<span class="built_in">str</span>)</span><br><span class="line">    </span><br><span class="line">// 第四种方式，内置函数<span class="built_in">iter</span>()</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> <span class="built_in">iter</span>(strs):</span><br><span class="line">    print(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><p><code>s.upper()</code>方法返回一个将s中的字母全部大写的新字符串。</p>
<p><code>s.lower()</code>方法返回一个将s中的字母全部小写的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello world&quot;</span>.upper()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;HELLO WORLD&#39;</span><br></pre></td></tr></table></figure>

<p>这两种方法也不会改变原来s的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;HELLO WORLD&quot;</span></span><br><span class="line">print(s.lower())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">HELLO WORLD</span><br></pre></td></tr></table></figure>

<h4 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h4><p><code>s.capitalize()</code>方法返回一个将s中首字母大写的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line">print(s.capitalize()) //Hello,world</span><br></pre></td></tr></table></figure>

<p><code>s.title()</code>方法返回一个将s中每个首字母大写的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s.title())</span><br><span class="line">Hello,World</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>str类型是不可变类型</p>
</div>

<h4 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a>查找子串</h4><p><code>s.index()</code>从左到右查找子串，可以指定起始查找位置，默认是0</p>
<p><code>s.rindex()</code> 则是从右向左查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line">print(s.index(<span class="string">&#x27;l&#x27;</span>))</span><br><span class="line">print(s.index(<span class="string">&#x27;l&#x27;</span>,<span class="number">3</span>))</span><br><span class="line">print(s.rindex(<span class="string">&#x27;l&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<p>如果查找不到则会程序报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s.index(<span class="string">&#x27;re&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;mac7&#x2F;PycharmProjects&#x2F;pythonBasic&#x2F;helloworld.py&quot;, line 114, in &lt;module&gt;</span><br><span class="line">    print(s.index(&#39;re&#39;))</span><br><span class="line">ValueError: substring not found</span><br></pre></td></tr></table></figure>

<p><code>s.find()</code> 查找不到则会返回-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s.find(<span class="string">&#x27;l&#x27;</span>))</span><br><span class="line">print(s.find(<span class="string">&#x27;oo&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h4 id="格式化输出-1"><a href="#格式化输出-1" class="headerlink" title="格式化输出"></a>格式化输出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line">print(s.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line">print(s.rjust(<span class="number">50</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="comment"># 将字符串以指定的宽度靠左放置右侧填充指定的字符</span></span><br><span class="line">print(s.ljust(<span class="number">50</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"><span class="comment"># 0填充,使得字符串的长度达到指定的长度</span></span><br><span class="line">n = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">print(n.zfill(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># The original string is returned if width is less than or equal to len(s).</span></span><br><span class="line"><span class="comment"># 如果指定的长度小于等于原始的长度，则返回原始的字符串</span></span><br><span class="line">n = <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">print(n.zfill(<span class="number">5</span>)) // <span class="number">12345</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*******************hello,world********************</span><br><span class="line">---------------------------------------hello,world</span><br><span class="line">hello,world---------------------------------------</span><br><span class="line">0000012345</span><br></pre></td></tr></table></figure>

<h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p><strong>Python</strong>用字符串的<code>format()</code>方法来格式化字符串。</p>
<p>具体用法如下，字符串中花括号 <code>&#123;&#125;</code> 的部分会被format传入的参数替代，传入的值可以是字符串，也可以是数字或者别的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">&#x27;&#123;&#125; * &#123;&#125; = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a, b, a * b))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 * 10 &#x3D; 50</span><br></pre></td></tr></table></figure>

<p>可以用数字指定传入参数的相对位置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;2&#125; &#123;1&#125; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;c b a&#39;</span><br></pre></td></tr></table></figure>

<p>还可以指定传入参数的名称：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;color&#125; &#123;n&#125; &#123;x&#125;&#x27;</span>.<span class="built_in">format</span>(n=<span class="number">10</span>, x=<span class="number">1.5</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以在一起混用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;color&#125; &#123;0&#125; &#123;x&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">10</span>, <span class="string">&#x27;foo&#x27;</span>, x = <span class="number">1.5</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;blue 10 1.5 foo&#39;</span><br></pre></td></tr></table></figure>

<p>Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母<code>f</code>，我们可以使用下面的语法糖来简化上面的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">5</span>, <span class="number">10</span></span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span> * <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;a * b&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="去除多余空格"><a href="#去除多余空格" class="headerlink" title="去除多余空格"></a>去除多余空格</h4><p><code>s.strip()</code>返回一个将s两端的多余空格除去的新字符串。</p>
<p><code>s.lstrip()</code>返回一个将s开头的多余空格除去的新字符串。</p>
<p><code>s.rstrip()</code>返回一个将s结尾的多余空格除去的新字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;  hello world   &quot;</span></span><br><span class="line">s.strip()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure>

<p>s的值依然不会变化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;  hello world   &#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.lstrip()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;hello world   &#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.rstrip()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;  hello world&#39;</span><br></pre></td></tr></table></figure>

<h4 id="分割与连接"><a href="#分割与连接" class="headerlink" title="分割与连接"></a>分割与连接</h4><p><code>s.split()</code>将s按照空格（包括多个空格，制表符<code>\t</code>，换行符<code>\n</code>等）分割，并返回所有分割得到的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&quot;1 2 3 4  5&quot;</span></span><br><span class="line">numbers = line.split()</span><br><span class="line"><span class="built_in">print</span> numbers</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>s.split(sep)</code>以给定的sep为分隔符对s进行分割。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&quot;1,2,3,4,5&quot;</span></span><br><span class="line">numbers = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> numbers</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>源码定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span>(<span class="params">self, *args, **kwargs</span>):</span> <span class="comment"># real signature unknown</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a list of the words in the string, using sep as the delimiter string.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">      sep  参数一：指定的分割字符</span></span><br><span class="line"><span class="string">        The delimiter according which to split the string.</span></span><br><span class="line"><span class="string">        None (the default value) means split according to any whitespace,</span></span><br><span class="line"><span class="string">        and discard empty strings from the result.</span></span><br><span class="line"><span class="string">      maxsplit  参数二：最大允许分割数量，不指定则默认-1</span></span><br><span class="line"><span class="string">        Maximum number of splits to do.</span></span><br><span class="line"><span class="string">        -1 (the default value) means no limit. </span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&quot;1,2,3,4,5,6&quot;</span></span><br><span class="line">numbers = line.split(<span class="string">&quot;,&quot;</span>,maxsplit=<span class="number">3</span>)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4,5,6&#39;]</span><br></pre></td></tr></table></figure>

<p><code>s.rsplit()</code>则是从右向左拆分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;i love you&quot;</span></span><br><span class="line">print(s.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;i love&#39;, &#39;you&#39;]</span><br></pre></td></tr></table></figure>

<p>与分割相反，<code>s.join(str_sequence)</code>的作用是以s为连接符将字符串序列str_sequence中的元素连接起来，并返回连接后得到的新字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strList = [<span class="string">&quot;i&quot;</span>,<span class="string">&quot;love&quot;</span>,<span class="string">&quot;you&quot;</span>]</span><br><span class="line">s = <span class="string">&#x27; &#x27;</span></span><br><span class="line">joinStr = s.join(strList)</span><br><span class="line">print(joinStr)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i love you</span><br></pre></td></tr></table></figure>

<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>之前看到的列表和字符串都是一种有序序列，而集合 <code>set</code> 是一种无序的序列。</p>
<p>因为集合是无序的，所以当集合中存在两个同样的元素的时候，Python只会保存其中的一个（唯一性）；同时为了确保其中不包含同样的元素，集合中放入的元素只能是不可变的对象（确定性）。</p>
<h3 id="定义集合"><a href="#定义集合" class="headerlink" title="定义集合"></a>定义集合</h3><p>可以用<code>set()</code>函数来显示的生成空集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">type</span>(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure>

<p>也可以使用一个列表来初始化一个集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>

<p>集合会自动去除重复元素 <code>1</code>。</p>
<p>可以看到，集合中的元素是用大括号<code>&#123;&#125;</code>包含起来的，这意味着可以用<code>&#123;&#125;</code>的形式来创建集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure>

<p>但是创建空集合的时候只能用<code>set</code>来创建，因为在Python中<code>&#123;&#125;</code>创建的是一个空的字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="built_in">type</span>(s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict</span><br></pre></td></tr></table></figure>

<h3 id="成员运算"><a href="#成员运算" class="headerlink" title="成员运算"></a>成员运算</h3><p>集合的成员变量在效率上是远远高于列表运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">set</span>)</span><br><span class="line">print(<span class="number">7</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure>

<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2022/python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/python-set.png" style="zoom:67%;" />

<p>假设有这样两个集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="并"><a href="#并" class="headerlink" title="并"></a>并</h4><p>两个集合的并，返回包含两个集合所有元素的集合（去除重复）。</p>
<p>可以用方法 <code>a.union(b)</code> 或者操作 <code>a | b</code> 实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.union(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.union(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a | b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<h4 id="交"><a href="#交" class="headerlink" title="交"></a>交</h4><p>两个集合的交，返回包含两个集合共有元素的集合。</p>
<p>可以用方法 <code>a.intersection(b)</code> 或者操作 <code>a & b</code> 实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.intersection(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;3, 4&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.intersection(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;3, 4&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &amp; b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;3, 4&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(a &amp; b)</span><br><span class="line">set([3, 4])</span><br></pre></td></tr></table></figure>

<p>注意：一般使用print打印set的结果与表示方法并不一致。</p>
<h4 id="差"><a href="#差" class="headerlink" title="差"></a>差</h4><p><code>a</code> 和 <code>b</code> 的差集，返回只在 <code>a</code> 不在 <code>b</code> 的元素组成的集合。</p>
<p>可以用方法 <code>a.difference(b)</code> 或者操作 <code>a - b</code> 实现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.difference(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a - b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2&#125;</span><br></pre></td></tr></table></figure>

<p>注意，<code>a - b</code> 与 <code>b - a</code>并不一样，<code>b - a</code> 返回的是返回 b 不在 a 的元素组成的集合：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b.difference(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;5, 6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b - a </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;5, 6&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对称差"><a href="#对称差" class="headerlink" title="对称差"></a>对称差</h4><p><code>a</code> 和<code>b</code> 的对称差集，返回在 <code>a</code> 或在 <code>b</code> 中，但是不同时在 <code>a</code> 和 <code>b</code> 中的元素组成的集合。</p>
<p>可以用方法 <code>a.symmetric_difference(b)</code> 或者操作 <code>a ^ b</code> 实现（异或操作符）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.symmetric_difference(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.symmetric_difference(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a ^ b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 5, 6&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h3><p>假设现在有这样两个集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>要判断 <code>b</code> 是不是 <code>a</code> 的子集，可以用 <code>b.issubset(a)</code>  方法，或者更简单的用操作 <code>b <= a</code>  ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.issubset(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b &lt;= a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<p>与之对应，也可以用 <code>a.issuperset(b)</code> 或者 <code>a >= b</code> 来判断：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.issuperset(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &gt;= b</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<p>方法只能用来测试子集，但是操作符可以用来判断真子集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &lt;= a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<p>自己不是自己的真子集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &lt; a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False</span><br></pre></td></tr></table></figure>

<h4 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h4><h5 id="add-方法向集合添加单个元素"><a href="#add-方法向集合添加单个元素" class="headerlink" title="add 方法向集合添加单个元素"></a><code>add</code> 方法向集合添加单个元素</h5><p>跟列表的 <code>append</code> 方法类似，用来向集合添加单个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.add(a)</span><br></pre></td></tr></table></figure>

<p>将元素 <code>a</code> 加入集合 <code>s</code> 中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">t.add(<span class="number">5</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 5&#125;</span><br></pre></td></tr></table></figure>

<p>如果添加的是已有元素，集合不改变：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.add(<span class="number">3</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 5&#125;</span><br></pre></td></tr></table></figure>

<h5 id="update-方法向集合添加多个元素"><a href="#update-方法向集合添加多个元素" class="headerlink" title="update 方法向集合添加多个元素"></a><code>update</code> 方法向集合添加多个元素</h5><p>跟列表的<code>extend</code>方法类似，用来向集合添加多个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.update(seq)</span><br></pre></td></tr></table></figure>

<p>将<code>seq</code>中的元素添加到<code>s</code>中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.update([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1, 2, 3, 5, 6, 7&#125;</span><br></pre></td></tr></table></figure>

<h5 id="remove-方法移除单个元素"><a href="#remove-方法移除单个元素" class="headerlink" title="remove 方法移除单个元素"></a><code>remove</code> 方法移除单个元素</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.remove(ob)</span><br></pre></td></tr></table></figure>

<p>从集合<code>s</code>中移除元素<code>ob</code>，如果不存在会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.remove(<span class="number">1</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;2, 3, 5, 6, 7&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t.remove(10)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-31-3bc25c5e1ff4&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 t.remove(10)</span><br><span class="line"></span><br><span class="line">KeyError: 10</span><br></pre></td></tr></table></figure>

<h5 id="pop方法弹出元素"><a href="#pop方法弹出元素" class="headerlink" title="pop方法弹出元素"></a>pop方法弹出元素</h5><p>由于集合没有顺序，不能像列表一样按照位置弹出元素，所以<code>pop</code> 方法删除并返回集合中任意一个元素，如果集合中没有元素会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.pop()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;3, 5, 6, 7&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(t)</span><br><span class="line"><span class="built_in">set</span>([<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; set()</span><br><span class="line"># 报错</span><br><span class="line">s.pop()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-34-9f9e06c962e6&gt; in &lt;module&gt;()</span><br><span class="line">      1 s &#x3D; set()</span><br><span class="line">      2 # 报错</span><br><span class="line">----&gt; 3 s.pop()</span><br><span class="line"></span><br><span class="line">KeyError: &#39;pop from an empty set&#39;</span><br></pre></td></tr></table></figure>

<h5 id="discard-方法"><a href="#discard-方法" class="headerlink" title="discard 方法"></a>discard 方法</h5><p>作用与 <code>remove</code> 一样，但是当元素在集合中不存在的时候不会报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.discard(<span class="number">3</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;5, 6, 7&#125;</span><br></pre></td></tr></table></figure>

<p>不存在的元素不会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.discard(<span class="number">20</span>)</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;5, 6, 7&#125;</span><br></pre></td></tr></table></figure>

<h5 id="difference-update方法"><a href="#difference-update方法" class="headerlink" title="difference_update方法"></a>difference_update方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.difference_update(b)</span><br></pre></td></tr></table></figure>

<p>从a中去除所有属于b的元素：</p>
<h5 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.clear()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典 <code>dictionary</code>  ，在一些编程语言中也称为 <code>hash</code>  ， <code>map</code>  ，是一种由键值对组成的数据结构。</p>
<p>顾名思义，我们把键想象成字典中的单词，值想象成词对应的定义，那么——</p>
<p>一个词可以对应一个或者多个定义，但是这些定义只能通过这个词来进行查询。</p>
<h3 id="初始化字典"><a href="#初始化字典" class="headerlink" title="初始化字典"></a>初始化字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建字典的字面量语法</span></span><br><span class="line">b = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="string">&#x27;this is number 1&#x27;</span>, <span class="string">&#x27;two&#x27;</span>: <span class="string">&#x27;this is number 2&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 创建字典的构造器语法</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 创建字典的推导式语法</span></span><br><span class="line">items3 = &#123;num: num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Python</strong> 使用 <code>&#123;&#125;</code> 或者 <code>dict()</code> 来创建一个空的字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="built_in">type</span>(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">type</span>(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict</span><br></pre></td></tr></table></figure>

<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>有了dict之后，可以用索引键值的方法向其中添加元素，也可以通过索引来查看元素的值：</p>
<h4 id="插入键值"><a href="#插入键值" class="headerlink" title="插入键值"></a>插入键值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;this is number 1&quot;</span></span><br><span class="line">a[<span class="string">&quot;two&quot;</span>] = <span class="string">&quot;this is number 2&quot;</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;one&#39;: &#39;this is number 1&#39;, &#39;two&#39;: &#39;this is number 2&#39;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看键值"><a href="#查看键值" class="headerlink" title="查看键值"></a>查看键值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="string">&#x27;one&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;this is number 1&#39;</span><br></pre></td></tr></table></figure>

<h4 id="更新键值"><a href="#更新键值" class="headerlink" title="更新键值"></a>更新键值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;this is number 1, too&quot;</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;one&#39;: &#39;this is number 1, too&#39;, &#39;two&#39;: &#39;this is number 2&#39;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对字典中所有键值对进行遍历</span></span><br><span class="line">dic = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;dic[key]&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 遍历字典中所以的值</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dic.values():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历键值对    </span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(key, value)</span><br></pre></td></tr></table></figure>

<h3 id="字典没有顺序"><a href="#字典没有顺序" class="headerlink" title="字典没有顺序"></a>字典没有顺序</h3><p>当我们 <code>print</code> 一个字典时，<strong>Python</strong>并不一定按照插入键值的先后顺序进行显示,因为字典中的键本身不一定是有序的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> a</span><br><span class="line">&#123;<span class="string">&#x27;two&#x27;</span>: <span class="string">&#x27;this is number 2&#x27;</span>, <span class="string">&#x27;one&#x27;</span>: <span class="string">&#x27;this is number 1, too&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> b</span><br><span class="line">&#123;<span class="string">&#x27;two&#x27;</span>: <span class="string">&#x27;this is number 2&#x27;</span>, <span class="string">&#x27;one&#x27;</span>: <span class="string">&#x27;this is number 1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>因此，<strong>Python</strong>中不能用支持用数字索引按顺序查看字典中的值，而且数字本身也有可能成为键值，这样会引起混淆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 会报错</span><br><span class="line">a[0]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-9-cc39af2a359c&gt; in &lt;module&gt;()</span><br><span class="line">      1 # 会报错</span><br><span class="line">----&gt; 2 a[0]</span><br><span class="line"></span><br><span class="line">KeyError: 0</span><br></pre></td></tr></table></figure>

<h3 id="使用-dict-初始化字典"><a href="#使用-dict-初始化字典" class="headerlink" title="使用 dict 初始化字典"></a>使用 dict 初始化字典</h3><p>除了通常的定义方式，还可以通过 <code>dict()</code> 转化来生成字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inventory = <span class="built_in">dict</span>(</span><br><span class="line">    [(<span class="string">&#x27;foozelator&#x27;</span>, <span class="number">123</span>),</span><br><span class="line">     (<span class="string">&#x27;frombicator&#x27;</span>, <span class="number">18</span>), </span><br><span class="line">     (<span class="string">&#x27;spatzleblock&#x27;</span>, <span class="number">34</span>), </span><br><span class="line">     (<span class="string">&#x27;snitzelhogen&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">    ])</span><br><span class="line">inventory</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;foozelator&#39;: 123, &#39;frombicator&#39;: 18, &#39;snitzelhogen&#39;: 23, &#39;spatzleblock&#39;: 34&#125;</span><br></pre></td></tr></table></figure>

<p>利用索引直接更新键值对：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inventory[<span class="string">&#x27;frombicator&#x27;</span>] += <span class="number">1</span></span><br><span class="line">inventory</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;foozelator&#39;: 123, &#39;frombicator&#39;: 19, &#39;snitzelhogen&#39;: 23, &#39;spatzleblock&#39;: 34&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适合做键的类型"><a href="#适合做键的类型" class="headerlink" title="适合做键的类型"></a>适合做键的类型</h2><p>在不可变类型中，<code>整数</code>和<code>字符串</code>是字典中最常用的类型；而<code>浮点数</code>通常不推荐用来做键，原因如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="number">1.1</span> + <span class="number">2.2</span>] = <span class="number">6.6</span></span><br><span class="line"><span class="comment"># 会报错</span></span><br><span class="line">data[<span class="number">3.3</span>]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span><span class="number">-16</span>-a48e87d01daa&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">2</span> data[<span class="number">1.1</span> + <span class="number">2.2</span>] = <span class="number">6.6</span></span><br><span class="line">      <span class="number">3</span> <span class="comment"># 会报错</span></span><br><span class="line">----&gt; 4 data[3.3]</span><br><span class="line"></span><br><span class="line">KeyError: <span class="number">3.3</span></span><br></pre></td></tr></table></figure>

<p>事实上，观察<code>data</code>的值就会发现，这个错误是由浮点数的精度问题所引起的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;3.3000000000000003: 6.6&#125;</span><br></pre></td></tr></table></figure>

<p>有时候，也可以使用元组作为键值，例如，可以用元组做键来表示从第一个城市飞往第二个城市航班数的多少：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">connections = &#123;&#125;</span><br><span class="line">connections[(<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Seattle&#x27;</span>)] = <span class="number">100</span></span><br><span class="line">connections[(<span class="string">&#x27;Austin&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>)] = <span class="number">200</span></span><br><span class="line">connections[(<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Austin&#x27;</span>)] = <span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>元组是有序的，因此 <code>('New York', 'Austin')</code> 和 <code>('Austin', 'New York')</code> 是两个不同的键：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> connections[(<span class="string">&#x27;Austin&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span> connections[(<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Austin&#x27;</span>)]</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">400</span></span><br></pre></td></tr></table></figure>

<h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a><code>get</code> 方法</h3><p>之前已经见过，用索引可以找到一个键对应的值，但是当字典中没有这个键的时候，Python会报错，这时候可以使用字典的  <code>get</code> 方法来处理这种情况，其用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.get(key, default = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>返回字典中键 <code>key</code> 对应的值，如果没有这个键，返回 <code>default</code>  指定的值（默认是 <code>None</code>  ）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">a[<span class="string">&quot;one&quot;</span>] = <span class="string">&quot;this is number 1&quot;</span></span><br><span class="line">a[<span class="string">&quot;two&quot;</span>] = <span class="string">&quot;this is number 2&quot;</span></span><br></pre></td></tr></table></figure>

<p>索引不存在的键值会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[&quot;three&quot;]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">KeyError                                  Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-22-8a5f2913f00e&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 a[&quot;three&quot;]</span><br><span class="line"></span><br><span class="line">KeyError: &#39;three&#39;</span><br></pre></td></tr></table></figure>

<p>改用get方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> a.get(<span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>指定默认值参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.get(<span class="string">&quot;three&quot;</span>, <span class="string">&quot;undefined&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;undefined&#39;</span><br></pre></td></tr></table></figure>

<h3 id="pop-方法删除元素"><a href="#pop-方法删除元素" class="headerlink" title="pop 方法删除元素"></a><code>pop</code> 方法删除元素</h3><p><code>pop()</code> 方法可以用来弹出字典中某个键对应的值，同时也可以指定默认参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.pop(key, default = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>删除并返回字典中键 <code>key</code>  对应的值，如果没有这个键，返回 <code>default</code>  指定的值（默认是 <code>None</code>  ）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;one&#39;: &#39;this is number 1&#39;, &#39;two&#39;: &#39;this is number 2&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>弹出并返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.pop(<span class="string">&quot;two&quot;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;this is number 2&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;one&#39;: &#39;this is number 1&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>弹出不存在的键值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.pop(<span class="string">&quot;two&quot;</span>, <span class="string">&#x27;not exist&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;not exist&#39;</span><br></pre></td></tr></table></figure>

<p>与列表一样，<code>del</code> 函数可以用来删除字典中特定的键值对，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a[<span class="string">&quot;one&quot;</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以用<code>popItem()</code> 方法删除最后一个元素</p>
<h3 id="update方法更新字典"><a href="#update方法更新字典" class="headerlink" title="update方法更新字典"></a><code>update</code>方法更新字典</h3><p>之前已经知道，可以通过索引来插入、修改单个键值对，但是如果想对多个键值对进行操作，这种方法就显得比较麻烦，好在有 <code>update</code> 方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.update(newd)</span><br></pre></td></tr></table></figure>

<p>将字典<code>newd</code>中的内容更新到<code>d</code>中去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;&#125;</span><br><span class="line">person[<span class="string">&#x27;first&#x27;</span>] = <span class="string">&quot;Jmes&quot;</span></span><br><span class="line">person[<span class="string">&#x27;last&#x27;</span>] = <span class="string">&quot;Maxwell&quot;</span></span><br><span class="line">person[<span class="string">&#x27;born&#x27;</span>] = <span class="number">1831</span></span><br><span class="line"><span class="built_in">print</span> person</span><br><span class="line">&#123;<span class="string">&#x27;born&#x27;</span>: <span class="number">1831</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;Maxwell&#x27;</span>, <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;Jmes&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>把’first’改成’James’，同时插入’middle’的值’Clerk’：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person_modifications = &#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;James&#x27;</span>, <span class="string">&#x27;middle&#x27;</span>: <span class="string">&#x27;Clerk&#x27;</span>&#125;</span><br><span class="line">person.update(person_modifications)</span><br><span class="line"><span class="built_in">print</span> person</span><br><span class="line">&#123;<span class="string">&#x27;middle&#x27;</span>: <span class="string">&#x27;Clerk&#x27;</span>, <span class="string">&#x27;born&#x27;</span>: <span class="number">1831</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;Maxwell&#x27;</span>, <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;James&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>类似的方法还有<code>a.setdefault()</code></p>
<p><code>If key is in the dictionary, return its value.</code><br><code>If not, insert key with a value of default and return default. default defaults to None.</code></p>
<h3 id="in查询字典中是否有该键"><a href="#in查询字典中是否有该键" class="headerlink" title="in查询字典中是否有该键"></a><code>in</code>查询字典中是否有该键</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">barn = &#123;<span class="string">&#x27;cows&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;dogs&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;cats&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p><code>in</code> 可以用来判断字典中是否有某个特定的键：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;chickens&#x27;</span> <span class="keyword">in</span> barn</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;cows&#x27;</span> <span class="keyword">in</span> barn</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="字典键值互换"><a href="#字典键值互换" class="headerlink" title="字典键值互换"></a>字典键值互换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">b = <span class="built_in">dict</span>(<span class="built_in">zip</span>(a.values(),a.keys()))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;1: &#39;one&#39;, 2: &#39;two&#39;, 3: &#39;three&#39;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>函数<code>function</code> ，通常接受输入参数，并有返回值。</p>
<p>它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    a = x + y</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>函数通常有一下几个特征：</p>
<ul>
<li>使用 <code>def</code> 关键词来定义一个函数。</li>
<li><code>def</code> 后面是函数的名称，括号中是函数的参数，不同的参数用 <code>,</code> 隔开， <code>def foo():</code> 的形式是必须要有的，参数可以为空；</li>
<li>使用缩进来划分函数的内容；</li>
<li><code>docstring</code> 用 <code>"""</code> 包含的字符串，用来解释函数的用途，可省略；</li>
<li><code>return</code> 返回特定的值，如果省略，返回 <code>None</code> 。</li>
</ul>
<p>函数的文档注释：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add two numbers</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param x: 需要求和的参数一</span></span><br><span class="line"><span class="string">    :param y: 需要求和的参数二</span></span><br><span class="line"><span class="string">    :return: 求和的结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = x + y</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>

<p>效果如下:</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2022/python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/pythonDocumentComments.png" style="zoom:70%;" />

<h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><p>使用函数时，只需要将参数换成特定的值传给函数。</p>
<p><strong>Python</strong>并没有限定参数的类型，因此可以使用不同的参数类型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span> add(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>) <span class="comment"># foobar</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，如果传入的两个参数不可以相加，那么<strong>Python</strong>会将报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">2</span>, <span class="string">&quot;foo&quot;</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span><span class="number">-3</span><span class="number">-6</span>f8dcf7eb280&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print add(2, &quot;foo&quot;)</span><br><span class="line"></span><br><span class="line">&lt;ipython-<span class="built_in">input</span><span class="number">-1</span>-e831943cfaf2&gt; <span class="keyword">in</span> add(x, y)</span><br><span class="line">      <span class="number">1</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">      <span class="number">2</span>     <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">----&gt; 3     a = x + y</span><br><span class="line">      <span class="number">4</span>     <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">TypeError: unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果传入的参数数目与实际不符合，也会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span><span class="number">-4</span>-ed7bae31fc7d&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print add(1, 2, 3)</span><br><span class="line"></span><br><span class="line">TypeError: add() takes exactly <span class="number">2</span> arguments (<span class="number">3</span> given)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">1</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span><span class="number">-5</span>-a954233d3b0d&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print add(1)</span><br><span class="line"></span><br><span class="line">TypeError: add() takes exactly <span class="number">2</span> arguments (<span class="number">1</span> given)</span><br></pre></td></tr></table></figure>

<p>传入参数时，Python提供了两种选项，第一种是上面使用的按照位置传入参数，另一种则是使用关键词模式，显式地指定参数的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(x=<span class="number">2</span>, y=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> add(y=<span class="string">&quot;foo&quot;</span>, x=<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">barfoo</span><br></pre></td></tr></table></figure>

<p>可以混合这两种模式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> add(<span class="number">2</span>, y=<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="设定参数默认值"><a href="#设定参数默认值" class="headerlink" title="设定参数默认值"></a>设定参数默认值</h2><p>可以在函数定义的时候给参数设定默认值，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quad</span>(<span class="params">x, a=<span class="number">1</span>, b=<span class="number">0</span>, c=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> a*x**<span class="number">2</span> + b*x + c</span><br></pre></td></tr></table></figure>

<p>可以省略有默认值的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print quad(2.0)</span><br><span class="line">4.0</span><br></pre></td></tr></table></figure>

<p>可以修改参数的默认值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> quad(<span class="number">2.0</span>, b=<span class="number">3</span>)</span><br><span class="line"><span class="number">10.0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> quad(<span class="number">2.0</span>, <span class="number">2</span>, c=<span class="number">4</span>)</span><br><span class="line"><span class="number">12.0</span></span><br></pre></td></tr></table></figure>

<p>这里混合了位置和指定两种参数传入方式，第二个2是传给 <code>a</code> 的。</p>
<p>注意，在使用混合语法时，要注意不能给同一个值赋值多次，否则会报错，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print quad(2.0, 2, a&#x3D;2)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-12-101d0c090bbb&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 print quad(2.0, 2, a&#x3D;2)</span><br><span class="line"></span><br><span class="line">TypeError: quad() got multiple values for keyword argument &#39;a&#39;</span><br></pre></td></tr></table></figure>

<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><div class="note info"><p>A scope is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</p>
</div>

<p>在一个 python 程序中，直接访问一个变量，会从内到外依次访问所有的作用域直到找到，否则会报未定义的错误。</p>
<p>变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python 的作用域一共有4种，分别是：</p>
<p>有四种作用域：</p>
<ul>
<li><strong>L（Local）</strong>：最内层，包含局部变量，比如一个函数/方法内部。</li>
<li><strong>E（Enclosing）</strong>：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal。</li>
<li><strong>G（Global）</strong>：当前脚本的最外层，比如当前模块的全局变量。</li>
<li><strong>B（Built-in）</strong>： 包含了内建的变量/关键字等，最后被搜索。</li>
</ul>
<p>规则顺序： <strong>L –&gt; E –&gt; G –&gt; B</strong>。</p>
<p>在局部找不到，便会去局部外的局部找（例如闭包），再找不到就会去全局找，再者去内置中找。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_count = <span class="number">0</span>  <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    o_count = <span class="number">1</span>  <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        i_count = <span class="number">2</span>  <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure>

<p>内置作用域是通过一个名为 builtin 的标准模块来实现的，但是这个变量名自身并没有放入内置作用域内，所以必须导入这个文件才能够使用它。在Python3.0中，可以使用以下的代码来查看到底预定义了哪些变量:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import builtins</span><br><span class="line">&gt;&gt;&gt; dir(builtins)</span><br></pre></td></tr></table></figure>

<p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问，如下代码：</p>
<h3 id="global-和-nonlocal关键字"><a href="#global-和-nonlocal关键字" class="headerlink" title="global 和 nonlocal关键字"></a>global 和 nonlocal关键字</h3><p>当内部作用域想修改外部作用域的变量时，就要用到 global 和 nonlocal 关键字了。</p>
<p><strong>global声明使用全局变量或者将一个局部变量放到全局变量中</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    print(num)</span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    print(num)</span><br><span class="line">fun1()</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">123</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p><strong>nonlocal声明使用嵌套作用域变量（不使用局部变量）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num   <span class="comment"># nonlocal关键字声明</span></span><br><span class="line">        num = <span class="number">100</span></span><br><span class="line">        print(num)</span><br><span class="line">    inner()</span><br><span class="line">    print(num)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br></pre></td></tr></table></figure>

<h2 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h2><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的代码会输出什么呢？</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p>
<p><code>module1.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>module2.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p>
<p><code>test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure>

<p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p>
<p><code>test.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from module1 import foo</span><br><span class="line">from module2 import foo</span><br><span class="line"></span><br><span class="line"># 输出goodbye, world!</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><code>test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>需要说明的是，如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是”<strong>main</strong>“。</p>
<p><code>module3.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;call foo()&#x27;</span>)</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">&#x27;call bar()&#x27;</span>)</span><br><span class="line">    bar()</span><br></pre></td></tr></table></figure>

<p><code>test.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main</span></span><br></pre></td></tr></table></figure>

<h2 id="接收不定参数"><a href="#接收不定参数" class="headerlink" title="接收不定参数"></a>接收不定参数</h2><p>使用如下方法，可以使函数接受不定数目的参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, *args</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        total += arg</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>这里，<code>*args</code> 表示参数数目不定，可以看成一个元组，把第一个参数后面的参数当作元组中的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>这样定义的函数不能使用关键词传入参数，要使用关键词，可以这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, **kwargs</span>):</span></span><br><span class="line">    total = x</span><br><span class="line">    <span class="keyword">for</span> arg, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        print(<span class="string">&quot;adding &quot;</span>, arg)</span><br><span class="line">        total += value</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>

<p>这里， <code>**kwargs</code> 表示参数数目不定，相当于一个字典，关键词和值对应于键值对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add(<span class="number">10</span>, y=<span class="number">11</span>, z=<span class="number">12</span>, w=<span class="number">13</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adding  y</span><br><span class="line">adding  z</span><br><span class="line">adding  w</span><br><span class="line">46</span><br></pre></td></tr></table></figure>

<p>再看这个例子，可以接收任意数目的位置参数和键值对参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">2</span>, <span class="number">3</span>, x=<span class="string">&#x27;bar&#x27;</span>, z=<span class="number">10</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure>

<p>不过要按顺序传入参数，先传入位置参数 <code>args</code> ，在传入关键词参数 <code>kwargs</code> 。</p>
<h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。<br>这种方式定义的函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>)</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="params">name, age, city, job</span>)</span></span><br><span class="line"><span class="function"># 调用</span></span><br><span class="line"><span class="function"><span class="title">person</span>(<span class="params"><span class="string">&#x27;city&#x27;</span>, <span class="number">22</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;IT&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">yjc</span> <span class="number">22</span> Beijing IT</span><br></pre></td></tr></table></figure>

<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊的分隔符<code>*</code>，<code>*</code>后面的参数被视为<code>命名关键字参数</code>。<br>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错。</p>
<h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p>函数可以返回多个值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> atan2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_polar</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    r = (x**<span class="number">2</span> + y**<span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line">    theta = atan2(y, x)</span><br><span class="line">    <span class="keyword">return</span> r, theta</span><br><span class="line"></span><br><span class="line">r, theta = to_polar(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(r, theta)</span><br><span class="line"><span class="number">5.0</span> <span class="number">0.927295218002</span></span><br></pre></td></tr></table></figure>

<p>事实上，<strong>Python</strong>将返回的两个值变成了元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(to_polar(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">(<span class="number">5.0</span>, <span class="number">0.9272952180016122</span>)</span><br></pre></td></tr></table></figure>

<p>因为这个元组中有两个值，所以可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r, theta &#x3D; to_polar(3, 4)</span><br></pre></td></tr></table></figure>

<p>给两个值赋值。</p>
<p>列表也有相似的功能：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(a, b, c) <span class="comment">#1 2 3</span></span><br></pre></td></tr></table></figure>

<p>事实上，不仅仅返回值可以用元组表示，也可以将参数用元组以这种方式传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    a = x + y</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">    </span><br><span class="line">z = (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> add(*z) <span class="comment">#5</span></span><br></pre></td></tr></table></figure>

<p>这里的<code>*</code>必不可少。</p>
<p>事实上，还可以通过字典传入参数来执行函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    a = x + y</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">w = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span> add(**w) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure>

<h2 id="map-方法生成序列"><a href="#map-方法生成序列" class="headerlink" title="map 方法生成序列"></a>map 方法生成序列</h2><p>可以通过 <code>map</code> 的方式利用函数来生成序列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqr</span>(<span class="params">x</span>):</span> </span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">map</span>(sqr, a)</span><br></pre></td></tr></table></figure>

<p><code>map</code>方法返回一个迭代器:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[4, 9, 16]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">list</span>(<span class="built_in">map</span>(sqr, a))) <span class="comment"># [4, 9, 16]</span></span><br></pre></td></tr></table></figure>

<p>其用法为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(aFun, aSeq)</span><br></pre></td></tr></table></figure>

<p>将函数 <code>aFun</code> 应用到序列 <code>aSeq</code> 上的每一个元素上，返回一个迭代器，不管这个序列原来是什么类型。</p>
<p>事实上，根据函数参数的多少，<code>map</code> 可以接受多组序列，将其对应的元素作为参数传入函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">list</span>(<span class="built_in">map</span>(add, a, b))) <span class="comment"># [12, 8, 7]</span></span><br></pre></td></tr></table></figure>

<h2 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h2><p>Python中的函数是一等函数</p>
<ul>
<li>函数可以作为函数的参数</li>
<li>函数可以作为函数的返回值</li>
<li>函数可以赋值给变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">init_value, fn, *args, **kwargs</span>):</span></span><br><span class="line">    total = init_value</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        total = fn(total, arg)</span><br><span class="line">    <span class="keyword">for</span> kwarg <span class="keyword">in</span> kwargs.values():</span><br><span class="line">        total = fn(total, kwarg)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multipication</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(calculate(<span class="number">0</span>, add, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(calculate(<span class="number">1</span>, multipication, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">24</span><br></pre></td></tr></table></figure>

<h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><p>关键字<code>lambda</code>表示匿名函数，冒号前面的表示函数参数。</p>
<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p>
<p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(calculate(<span class="number">0</span>, <span class="keyword">lambda</span> a, b: a + b, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(calculate(<span class="number">1</span>, <span class="keyword">lambda</span> a, b: a * b, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">24</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Python会将所有 <code>.py</code> 结尾的文件认定为Python代码文件，<strong>在 Python 中，一个 .py 文件就称之为一个模块（Module）。</strong>考虑下面的脚本 <code>ex1.py</code> ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%writefile ex1.py</span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">lst</span>):</span></span><br><span class="line">    tot = lst[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> lst[<span class="number">1</span>:]:</span><br><span class="line">        tot = tot + value</span><br><span class="line">    <span class="keyword">return</span> tot</span><br><span class="line">    </span><br><span class="line">w = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(<span class="built_in">sum</span>(w), PI)</span><br></pre></td></tr></table></figure>

<p>可以执行它：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run ex1.py</span><br><span class="line"><span class="number">6</span> <span class="number">3.1416</span></span><br></pre></td></tr></table></figure>

<p>这个脚本可以当作一个模块，可以使用<code>import</code> 关键词加载并执行它（这里要求<code>ex1.py</code>在当前工作目录）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ex1</span><br><span class="line"><span class="number">6</span> <span class="number">3.1416</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(ex1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;module &#39;ex1&#39; from &#39;ex1.py&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>在导入时，<strong>Python</strong>会执行一遍模块中的所有内容。</p>
<p><code>ex1.py</code> 中所有的变量都被载入了当前环境中，不过要使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex1.变量名</span><br></pre></td></tr></table></figure>

<p>的方法来查看或者修改这些变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(ex1.PI) <span class="comment"># 3.1416</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex1.PI = <span class="number">3.141592653</span></span><br><span class="line">print(ex1.PI)</span><br><span class="line"><span class="number">3.141592653</span></span><br></pre></td></tr></table></figure>

<p>还可以用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex1.函数名</span><br></pre></td></tr></table></figure>

<p>调用模块里面的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(ex1.<span class="built_in">sum</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>为了提高效率，<strong>Python</strong>只会载入模块一次，已经载入的模块再次载入时，Python并不会真正执行载入操作，哪怕模块的内容已经改变。</p>
<p>例如，这里重新导入 <code>ex1</code> 时，并不会执行 <code>ex1.py</code> 中的 <code>print</code> 语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ex1</span><br></pre></td></tr></table></figure>

<p>需要重新导入模块时，可以使用<code>reload</code>强制重新载入它，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reload(ex1)</span><br><span class="line"><span class="number">6</span> <span class="number">3.1416</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;module &#39;ex1&#39; from &#39;ex1.pyc&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>删除之前生成的文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;ex1.py&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="name-属性"><a href="#name-属性" class="headerlink" title="__name__ 属性"></a><code>__name__</code> 属性</h2><p>有时候我们想将一个 <code>.py</code> 文件既当作脚本，又能当作模块用，这个时候可以使用 <code>__name__</code> 这个属性。</p>
<p>只有当文件被当作脚本执行的时候，<code>__name__</code>的值才会是 <code>__main__</code>，所以我们可以：</p>
<p><code>ex2.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = <span class="number">3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span>(<span class="params">lst</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Sum the values in a list</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tot = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> lst:</span><br><span class="line">        tot = tot + value</span><br><span class="line">    <span class="keyword">return</span> tot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot; Add two values.&quot;</span></span><br><span class="line">    a = x + y</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    w = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">assert</span>(<span class="built_in">sum</span>(w) == <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;test passed.&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br><span class="line">Writing ex2.py</span><br></pre></td></tr></table></figure>

<p>运行文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run ex2.py</span><br><span class="line">test passed.</span><br></pre></td></tr></table></figure>

<p>当作模块导入， <code>test()</code> 不会执行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ex2</span><br></pre></td></tr></table></figure>

<p>但是可以使用其中的变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex2.PI</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.1416</span><br></pre></td></tr></table></figure>

<p>使用别名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ex2 <span class="keyword">as</span> e2</span><br><span class="line">e2.PI</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.1416</span><br></pre></td></tr></table></figure>

<h2 id="其他导入方法"><a href="#其他导入方法" class="headerlink" title="其他导入方法"></a>其他导入方法</h2><p>可以从模块中导入变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ex2 <span class="keyword">import</span> add, PI</span><br></pre></td></tr></table></figure>

<p>使用 <code>from</code> 后，可以直接使用<code>add</code> ， <code>PI</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(add(<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>*</code> 导入所有变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ex2 <span class="keyword">import</span> *</span><br><span class="line">add(<span class="number">3</span>, <span class="number">4.5</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7.5</span><br></pre></td></tr></table></figure>

<p>这种导入方法不是很提倡，因为如果你不确定导入的都有哪些，可能覆盖一些已有的函数。</p>
<p>删除文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;ex2.py&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>假设我们有这样的一个文件夹：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2022/python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/pythonPackage.png" style="zoom:67%;" />

<p>foo/</p>
<ul>
<li><code>__init__.py</code></li>
<li><code>bar.py</code> (defines func)</li>
<li><code>baz.py</code> (defines zap)</li>
</ul>
<p>这意味着 foo 是一个包，我们可以这样导入其中的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo.bar <span class="keyword">import</span> func</span><br><span class="line"><span class="keyword">from</span> foo.baz <span class="keyword">import</span> zap</span><br></pre></td></tr></table></figure>

<p><code>bar</code> 和 <code>baz</code> 都是 <code>foo</code> 文件夹下的 <code>.py</code> 文件。</p>
<p>导入包要求：</p>
<ul>
<li>文件夹 <code>foo</code> 在<strong>Python</strong>的搜索路径中</li>
<li><code>__init__.py</code> 表示 <code>foo</code> 是一个包，它可以是个空文件。</li>
</ul>
<h3 id="解决命名冲突"><a href="#解决命名冲突" class="headerlink" title="解决命名冲突"></a>解决命名冲突</h3><p><strong>方式一：导入函数的时候，对函数进行别名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> foo.person <span class="keyword">import</span> eat <span class="keyword">as</span> person_eat</span><br><span class="line"><span class="keyword">from</span> foo.animal <span class="keyword">import</span> eat <span class="keyword">as</span> animal_eat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person_eat()</span><br><span class="line">animal_eat()</span><br></pre></td></tr></table></figure>

<p><strong>方式二：使用完全限定名（qualified name）–&gt;[包名.]模块名.函数名</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo.person</span><br><span class="line"><span class="keyword">import</span> foo.animal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo.person.eat()</span><br><span class="line">foo.animal.eat()</span><br></pre></td></tr></table></figure>

<h2 id="常用的标准库"><a href="#常用的标准库" class="headerlink" title="常用的标准库"></a>常用的标准库</h2><ul>
<li>re 正则表达式</li>
<li>copy 复制</li>
<li>math, cmath 数学</li>
<li>decimal, fraction</li>
<li>sqlite3 数据库</li>
<li>os, os.path 文件系统</li>
<li>gzip, bz2, zipfile, tarfile 压缩文件</li>
<li>csv, netrc 各种文件格式</li>
<li>xml</li>
<li>htmllib</li>
<li>ftplib, socket</li>
<li>cmd 命令行</li>
<li>pdb</li>
<li>profile, cProfile, timeit</li>
<li>collections, heapq, bisect 数据结构</li>
<li>mmap</li>
<li>threading, Queue 并行</li>
<li>multiprocessing</li>
<li>subprocess</li>
<li>pickle, cPickle</li>
<li>struct</li>
</ul>
<h2 id="PYTHONPATH设置"><a href="#PYTHONPATH设置" class="headerlink" title="PYTHONPATH设置"></a>PYTHONPATH设置</h2><p>Python的搜索路径可以通过环境变量PYTHONPATH设置，环境变量的设置方法依操作系统的不同而不同，具体方法可以网上搜索。</p>
<hr>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>Python 就是一门面向对象的语言,</p>
<p>如果你学过 Java ，就知道 Java 的编程思想就是：万事万物皆对象。Python 也不例外，在解决实际问题的过程中，可以把构成问题事务分解成各个对象。</p>
<p>面向对象都有两个基本的概念，分别是类和对象。</p>
<ul>
<li><strong>类</strong></li>
</ul>
<p>用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>
<ul>
<li><strong>对象</strong></li>
</ul>
<p>通过类定义的数据结构实例</p>
<h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><p>面向对象的编程语言，也有三大特性，继承，多态和封装性。</p>
<ul>
<li><strong>继承</strong></li>
</ul>
<p>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。</p>
<p>例如：一个 Dog 类型的对象派生自 Animal 类，这是模拟”是一个（is-a）”关系（例图，Dog 是一个 Animal ）。</p>
<ul>
<li><strong>多态</strong></li>
</ul>
<p>它是指对不同类型的变量进行相同的操作，它会根据对象（或类）类型的不同而表现出不同的行为。</p>
<ul>
<li><strong>封装性</strong></li>
</ul>
<p>“封装”就是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体（即类）；封装的目的是增强安全性和简化编程，使用者不必了解具体的实现细节，而只是要通过外部接口，一特定的访问权限来使用类的成员。</p>
<h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>在Python中可以使用<code>class</code>关键字定义类，<strong>类的命名采用驼峰命名法</strong>，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># __init__是一个特殊方法用于在创建对象时进行初始化操作</span></span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">		</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在吃饭.&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在学习.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_movie</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;%s正在观看岛国爱情大电影.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure>

<h3 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">s.eat()</span><br><span class="line">s.study()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">张三正在吃饭.</span><br><span class="line">张三正在学习.</span><br></pre></td></tr></table></figure>

<h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>Python 的类方法和静态方法很相似，它们都推荐使用类来调用（其实也可使用对象来调用）。</p>
<p>类方法和静态方法的区别在于，Python会自动绑定类方法的第一个参数，类方法的第一个参数（通常建议参数名为 <code>cls</code>）会自动绑定到类本身；但对于静态方法则不会自动绑定。</p>
<p>使用 <code>＠classmethod</code> 修饰的方法就是类方法；使用 <code>＠staticmethod</code> 修饰的方法就是静态方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span></span><br><span class="line">    <span class="comment"># classmethod修饰的方法是类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span> (<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;类方法fly: &#x27;</span>, cls)</span><br><span class="line">    <span class="comment"># staticmethod修饰的方法是静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span> (<span class="params">p</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;静态方法info: &#x27;</span>, p)</span><br></pre></td></tr></table></figure>

<p>调用类方法，Bird类会自动绑定到第一个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bird.fly()  </span><br><span class="line"><span class="comment"># 类方法fly:  &lt;class &#x27;__main__.Bird&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>调用静态方法，不会自动绑定，因此程序必须手动绑定第一个参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bird.info(<span class="string">&#x27;crazyit&#x27;</span>)</span><br><span class="line"><span class="comment"># 静态方法info:  crazyit</span></span><br></pre></td></tr></table></figure>

<p>创建Bird对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = Bird()</span><br><span class="line"><span class="comment"># 类方法fly:  &lt;class &#x27;__main__.Bird&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用对象调用fly()类方法，其实依然还是使用类调用， 因此第一个参数依然被自动绑定到Bird类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.fly()</span><br><span class="line"><span class="comment"># 静态方法info:  fkit</span></span><br></pre></td></tr></table></figure>

<p>使用对象调用info()静态方法，其实依然还是使用类调用，因此程序必须为第一个参数执行绑定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b.info(<span class="string">&#x27;fkit&#x27;</span>)</span><br><span class="line"><span class="comment"># 静态方法info:  fkit</span></span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>首先我们来看下类的继承的基本语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>(<span class="params">BaseClassName</span>):</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>

<p>在定义类的时候，可以在括号里写继承的类，如果不用继承类的时候，也要写继承 object 类，因为在 Python 中 object 类是一切类的父类。</p>
<p>当然上面的是单继承，Python 也是支持多继承的，具体的语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span>(<span class="params">Base1,Base2,Base3</span>):</span></span><br><span class="line">    &lt;statement<span class="number">-1</span>&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-N&gt;</span><br></pre></td></tr></table></figure>

<p>多继承有一点需要注意的：若是父类中有相同的方法名，而在子类使用时未指定，python 在圆括号中父类的顺序，从左至右搜索 ， 即方法在子类中未找到时，从左到右查找父类中是否包含方法。</p>
<p>继承的子类的好处：</p>
<ul>
<li>会继承父类的属性和方法</li>
<li>可以自己定义，覆盖父类的属性和方法</li>
</ul>
<p>定义父类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, gender</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在吃饭&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在玩&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>继承父类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, gender, grade</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, gender)</span><br><span class="line">        self.grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在学习&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&quot;张三&quot;</span>, <span class="literal">True</span>, <span class="number">80</span>)</span><br><span class="line">s.eat()</span><br><span class="line">s.play()</span><br><span class="line">s.study()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">张三正在吃饭</span><br><span class="line">张三正在玩</span><br><span class="line">张三正在学习</span><br></pre></td></tr></table></figure>

<h3 id="子类的类型判断"><a href="#子类的类型判断" class="headerlink" title="子类的类型判断"></a>子类的类型判断</h3><p>对于 class 的继承关系来说，有些时候我们需要判断 class 的类型，该怎么办呢？</p>
<p>可以使用 <code>isinstance()</code> 函数,</p>
<p>一个例子就能看懂 <code>isinstance()</code> 函数的用法了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2</span>(<span class="params">User1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User3</span>(<span class="params">User2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    user1 = User1()</span><br><span class="line">    user2 = User2()</span><br><span class="line">    user3 = User3()</span><br><span class="line">    <span class="comment"># isinstance()就可以告诉我们，一个对象是否是某种类型</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(user3, User2))</span><br><span class="line">    print(<span class="built_in">isinstance</span>(user3, User1))</span><br><span class="line">    print(<span class="built_in">isinstance</span>(user3, User3))</span><br><span class="line">    <span class="comment"># 基本类型也可以用isinstance()判断</span></span><br><span class="line">    print(<span class="built_in">isinstance</span>(<span class="string">&#x27;两点水&#x27;</span>, <span class="built_in">str</span>))</span><br><span class="line">    print(<span class="built_in">isinstance</span>(<span class="number">347073565</span>, <span class="built_in">int</span>))</span><br><span class="line">    print(<span class="built_in">isinstance</span>(<span class="number">347073565</span>, <span class="built_in">str</span>))</span><br></pre></td></tr></table></figure>

<p>输出的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h1><p>在Python中实现文件的读写操作其实非常简单，通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），具体的如下表所示。</p>
<h2 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h2><p>读取文本文件时，需要在使用<code>open</code>函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为<code>'r'</code>（如果不指定，默认值也是<code>'r'</code>），然后通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;未选择的路.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>请注意上面的代码，如果<code>open</code>函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    f = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;未选择的路.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;无法打开指定的文件!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">&#x27;指定了未知的编码!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">&#x27;读取文件时解码错误!&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>在Python中，我们可以将那些在运行时可能会出现状况的代码放在<code>try</code>代码块中，在<code>try</code>代码块的后面可以跟上一个或多个<code>except</code>来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发<code>FileNotFoundError</code>，指定了未知的编码会引发<code>LookupError</code>，而如果读取文件时无法按指定方式解码会引发<code>UnicodeDecodeError</code>，我们在<code>try</code>后面跟上了三个<code>except</code>分别处理这三种不同的异常状况。最后我们使用<code>finally</code>代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于<code>finally</code>块的代码不论程序正常还是异常都会执行到（甚至是调用了<code>sys</code>模块的<code>exit</code>函数退出Python环境，<code>finally</code>块都会被执行，因为<code>exit</code>函数实质上是引发了<code>SystemExit</code>异常），因此我们通常把<code>finally</code>块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在<code>finally</code>代码块中关闭文件对象释放资源，也可以使用上下文语法，通过<code>with</code>关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;未选择的路.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            print(f.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;无法打开指定的文件!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> LookupError:</span><br><span class="line">        print(<span class="string">&#x27;指定了未知的编码!&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        print(<span class="string">&#x27;读取文件时解码错误!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>使用 <code>w</code> 模式时，如果文件不存在会被创建，如果文件已经存在， <code>w</code> 模式会覆盖之前写的所有内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;venv/resource/望江南·超然台作.txt&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file.write(<span class="string">&#x27;春未老\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;风细柳斜斜\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;试上超然台上望\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;半壕春水一城花\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;烟雨暗千家\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;寒食后\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;酒醒却咨嗟\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;休对故人思故国\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;且将新火试新茶\r\n&#x27;</span>)</span><br><span class="line">        file.write(<span class="string">&#x27;诗酒趁年华\r\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2022/python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/sushiyyds.png" style="zoom:67%;" />

<p>除了写入模式，还有追加模式  <code>a</code> ，追加模式不会覆盖之前已经写入的内容，而是在之后继续写入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;venv/resource/望江南·超然台作.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file.write(<span class="string">&#x27;end\r\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2022/python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/fileappend.png" style="zoom:67%;" />



<h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><h3 id="读写二进制文件"><a href="#读写二进制文件" class="headerlink" title="读写二进制文件"></a>读写二进制文件</h3><p>知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;guido.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fs1:</span><br><span class="line">            data = fs1.read()</span><br><span class="line">            print(<span class="built_in">type</span>(data))  <span class="comment"># &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;吉多.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fs2:</span><br><span class="line">            fs2.write(data)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;指定的文件无法打开.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;读写文件时出现错误.&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;程序执行结束.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router</title>
    <url>/2021/09/09/Vue-Router/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>
<ul>
<li>嵌套的路由/视图表</li>
<li>模块化的、基于组件的路由配置</li>
<li>路由参数、查询、通配符</li>
<li>基于 Vue.js 过渡系统的视图过渡效果</li>
<li>细粒度的导航控制</li>
<li>带有自动激活的 CSS class 的链接</li>
<li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li>
<li>自定义的滚动条行为</li>
</ul>
<hr>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure>

<h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="引入插件并使用"><a href="#引入插件并使用" class="headerlink" title="引入插件并使用"></a>引入插件并使用</h2><p>在<code>main.js</code>中引入插件并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>

<h2 id="编写router配置项"><a href="#编写router配置项" class="headerlink" title="编写router配置项:"></a>编写router配置项:</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Chinese <span class="keyword">from</span> <span class="string">&quot;../pages/Chinese.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> English <span class="keyword">from</span> <span class="string">&quot;../pages/English.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/chinese&#x27;</span>,</span><br><span class="line">            component: Chinese</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/english&#x27;</span>,</span><br><span class="line">            component: English</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="使用router"><a href="#使用router" class="headerlink" title="使用router"></a>使用router</h2><p>在<code>main.js</code>中引入<code>router</code>并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router: router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="实现路由页面切换"><a href="#实现路由页面切换" class="headerlink" title="实现路由页面切换"></a>实现路由页面切换</h2><p>（active-class可配置高亮样式）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/chinese&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/english&quot;</span>&gt;</span>英文<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定组件渲染的位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h2><ol>
<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>
<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li>
</ol>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><p>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件。</p>
<p>配置路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/chinese&#x27;</span>,</span><br><span class="line">            component: Chinese</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/english&#x27;</span>,</span><br><span class="line">            component: English,</span><br><span class="line">            <span class="comment">//通过children配置子级路由</span></span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">&#x27;book&#x27;</span>,</span><br><span class="line">                    component: Book</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">                    component: Author</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>路由跳转:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/english/book&quot;</span>&gt;</span>Book<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/english/author&quot;</span>&gt;</span>Author<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h1><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;chineseRouter&#x27;</span>,</span><br><span class="line">            path: <span class="string">&#x27;/chinese&#x27;</span>,</span><br><span class="line">            component: Chinese</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/english&#x27;</span>,</span><br><span class="line">            component: English,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">&#x27;bookRouter&#x27;</span>,</span><br><span class="line">                    path: <span class="string">&#x27;book&#x27;</span>,</span><br><span class="line">                    component: Book</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">&#x27;authorRouter&#x27;</span>,</span><br><span class="line">                    path: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">                    component: Author</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>路由跳转:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=<span class="string">&quot;/english/book&quot;</span>&gt;Book&lt;/router-link&gt;</span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name : &#x27;bookRouter&#x27;&#125;&quot;</span>&gt;Book&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=<span class="string">&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">  path: &#x27;/english/author/info&#x27;,</span></span><br><span class="line"><span class="string">  query: &#123;</span></span><br><span class="line"><span class="string">      id: author.id,</span></span><br><span class="line"><span class="string">      name: author.name,</span></span><br><span class="line"><span class="string">      info: author.info</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;</span><br><span class="line">&#123;&#123; author.name &#125;&#125;</span><br><span class="line">&lt;/router-link&gt;&amp;nbsp;&amp;nbsp;    </span><br></pre></td></tr></table></figure>

<p>接收参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>编号: &#123;&#123;$route.query.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>作家: &#123;&#123;$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>简介: &#123;&#123;$route.query.info&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="路由的param参数"><a href="#路由的param参数" class="headerlink" title="路由的param参数"></a>路由的param参数</h1><p>在 <code>vue-router</code> 的路由路径中使用“动态路径参数”(dynamic segment) </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;bookRouter&#x27;</span>,</span><br><span class="line">        path: <span class="string">&#x27;book&#x27;</span>,</span><br><span class="line">        component: Book</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;authorRouter&#x27;</span>,</span><br><span class="line">        path: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">        component: Author,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;authorInfoRouter&#x27;</span>,</span><br><span class="line">                path: <span class="string">&#x27;info/:id/:name/:info&#x27;</span>,<span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">                component: AuthorInfo</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>路由跳转:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">  name: &#x27;authorInfoRouter&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="string">  params: &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      id: author.id,</span></span></span><br><span class="line"><span class="tag"><span class="string">      name: author.name,</span></span></span><br><span class="line"><span class="tag"><span class="string">      info: author.info</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; author.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:red">特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</span></p>
</blockquote>
<p>接受参数:</p>
<p>当匹配到一个路由时，参数值会被设置到 <code>this.$route.params</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>编号: &#123;&#123;$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>作家: &#123;&#123;$route.params.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>简介: &#123;&#123;$route.params.info&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h1><p>在上面的例子中，我们读取参数需要不停重复的写 <code>this.$route.params</code> 前缀，很繁琐，使用props配置可以解决</p>
<h2 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h2><p>如果 <code>props</code> 被设置为 <code>true</code>，<code>route.params</code> 将会被设置为组件属性。</p>
<p>若<code>props</code>为true，就会把路由组件收到的所有<span style="color:red"><code>params</code></span>参数，以<code>props</code>的形式传给AuthorInfo组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;authorInfoRouter&#x27;</span>,</span><br><span class="line">        path: <span class="string">&#x27;info/:id/:name/:info&#x27;</span>,</span><br><span class="line">        component: AuthorInfo,</span><br><span class="line">        props: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>使用<code>props</code> 配置项接受参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    props: [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;info&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//这里存放数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>使用参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>编号: &#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>作家: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>简介: &#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h2><p>你可以创建一个函数返回 <code>props</code>。这样你便可以将参数转换成另一种类型，将静态值与基于路由的值结合等等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">children: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&#x27;authorInfoRouter&#x27;</span>,</span><br><span class="line">        path: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">        component: AuthorInfo,</span><br><span class="line">        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                id: $route.query.id,</span><br><span class="line">                name: $route.query.name,</span><br><span class="line">                info: $route.query.info</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><code>props</code>函数的结构赋值形式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">props</span>(<span class="params">&#123;query: &#123;id, name, info&#125;&#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        id: id,</span><br><span class="line">        name: name,</span><br><span class="line">        info: info</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt;的replace属性"></a><code>&lt;router-link&gt;</code>的replace属性</h1><ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录（相当于向一个栈中添加元素），<code>replace</code>是替换当前记录（相当于替换掉栈顶元素）。路由跳转时候默认为<code>push</code></li>
<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace&gt;News&lt;/router-link&gt;</code></li>
</ol>
<h1 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h1><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法<code>push</code>，通过编写代码来实现。</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td><code>router.push(...)</code></td>
</tr>
</tbody></table>
<p><strong>注意：在 Vue 实例内部，你可以通过 <code>$router</code> 访问路由实例。因此你可以调用 <code>this.$router.push</code>。</strong></p>
<p><code>router.push(location, onComplete?, onAbort?)</code></p>
<p>可选的在 <code>router.push</code> 或 <code>router.replace</code> 中提供 <code>onComplete</code> 和 <code>onAbort</code> 回调作为第二个和第三个参数。这些回调将会在导航成功完成 (在所有的异步钩子被解析之后) 或终止 (导航到相同的路由、或在当前导航完成之前导航到另一个不同的路由) 的时候进行相应的调用。</p>
<p>想要导航到不同的 URL，则使用 <code>router.push</code> 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.push(&#123; </span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">    params: &#123; </span><br><span class="line">        userId: <span class="string">&#x27;123&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; </span><br><span class="line">    path: <span class="string">&#x27;register&#x27;</span>, </span><br><span class="line">    query: &#123; </span><br><span class="line">        plan: <span class="string">&#x27;private&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>注意：如果提供了 <code>path</code>，<code>params</code> 会被忽略，使用<code>params</code>就不用<code>path</code>，而是用<code>name</code></strong></p>
<p><code>router.replace(location, onComplete?, onAbort?)</code></p>
<p>跟 <code>router.push</code> 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录，相当于替换掉栈顶元素。</p>
<table>
<thead>
<tr>
<th>声明式</th>
<th>编程式</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td>
<td><code>router.replace(...)</code></td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.replace(&#123; </span><br><span class="line">    path: <span class="string">&#x27;register&#x27;</span>, </span><br><span class="line">    query: &#123; </span><br><span class="line">        plan: <span class="string">&#x27;private&#x27;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>forward</code>  、<code>back</code>  、<code>go</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.go(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.go(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.go(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class="line">router.go(-<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><ul>
<li><p><strong>Props</strong>：</p>
<ul>
<li><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>
<li><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>
<li><code>max</code> - 数字。最多可以缓存多少组件实例。</li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</p>
<p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p>
</li>
</ul>
<p>主要用于保留组件状态或避免重新渲染。</p>
<p><code>include</code> 和 <code>exclude</code> prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组（组件名）来表示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="路由相关的两个生命周期钩子"><a href="#路由相关的两个生命周期钩子" class="headerlink" title="路由相关的两个生命周期钩子"></a>路由相关的两个生命周期钩子</h1><h2 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h2><ul>
<li><p><strong>类型</strong>：<code>Function</code></p>
</li>
<li><p><strong>详细</strong>：</p>
<p>被 keep-alive 缓存的组件激活时调用。</p>
</li>
<li><p><strong>代码</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//import 引入的组件需要注入到对象中才能使用</span></span><br><span class="line">  name: <span class="string">&quot;English&quot;</span>,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//这里存放数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//计算属性类似于data 概念</span></span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;&#125;, <span class="comment">// 被 keep-alive 缓存的组件激活时调用。</span></span><br><span class="line">  <span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span> &#123;&#125; <span class="comment">// 被 keep-alive 缓存的组件停用时调用。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h2><ul>
<li><p><strong>类型</strong>：<code>Function</code></p>
</li>
<li><p><strong>详细</strong>：</p>
<p>被 keep-alive 缓存的组件停用时调用。</p>
</li>
</ul>
<hr>
<h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><p>作用：对路由进行权限控制</p>
<h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。</p>
<p>每个守卫方法接收三个参数：</p>
<ul>
<li><strong><code>to: Route</code></strong>: 即将要进入的目标路由对象</li>
<li><strong><code>from: Route</code></strong>: 当前导航正要离开的路由</li>
<li><strong><code>next: Function</code></strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。<ul>
<li><strong><code>next()</code></strong>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li>
<li><strong><code>next(false)</code></strong>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 <code>from</code> 路由对应的地址。</li>
<li><strong><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code></strong>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> prop 或 <code>router.push</code>中的选项。</li>
<li><strong><code>next(error)</code></strong>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code>注册过的回调。</li>
</ul>
</li>
</ul>
<blockquote>
<p><span style="color:red"><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong>。</span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.name !== <span class="string">&#x27;Login&#x27;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">else</span> next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h2><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h2><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这些守卫与全局前置守卫的方法参数是一样的</p>
<h2 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h2><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p>
<ul>
<li><code>beforeRouteEnter</code></li>
<li><code>beforeRouteUpdate</code> (2.2 新增)</li>
<li><code>beforeRouteLeave</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//import 引入的组件需要注入到对象中才能使用</span></span><br><span class="line">  name: <span class="string">&quot;English&quot;</span>,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//这里存放数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过路由规则，进入该组件时被调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过路由规则，离开该组件时被调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>beforeRouteEnter</code> 守卫 <strong>不能</strong> 访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建。</p>
<p>不过，你可以通过传一个回调给 <code>next</code>来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意 <code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫。对于 <code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 来说，<code>this</code> 已经可用了，所以<strong>不支持</strong>传递回调，因为没有必要了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">&#x27;Do you really want to leave? you have unsaved changes!&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (answer) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><p>定义路由的时候可以配置 <code>meta</code> 字段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          component: Bar,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          meta: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过<code>to.meta.requiresAuth</code>访问</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/2021/09/11/Vue3/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>2020年9月18日Vue.js 3.0“海贼王”正式发布。该框架的这个新主要版本提供了改进的性能、更小的包大小、更好的 TypeScript 集成、用于处理大规模用例的新 API，以及该框架未来长期迭代的坚实基础。</p>
<p>特点：</p>
<ul>
<li>随着时间的推移，它演变成我们所说的“渐进式框架”：一个可以逐渐学习和采用的框架，同时随着用户处理越来越多的要求的场景提供持续的支持。</li>
<li>Vue 3.0 核心仍然可以通过一个简单的<code>&lt;script&gt;</code>标签使用，但它的内部已经从头开始重写为<a href="https://github.com/vuejs/vue-next/tree/master/packages">一组解耦模块</a>。新架构提供了更好的可维护性，并允许最终用户通过 tree-shaking 将运行时大小减少一半。</li>
<li>2.x 基于对象的 API 在 Vue 3 中基本保持不变。但是，3.0 还引入了<a href="https://v3.vuejs.org/guide/composition-api-introduction.html">Composition API——</a>一组新的 API，旨在解决 Vue 在大规模应用程序中使用的痛点。</li>
<li>性能改进</li>
<li>Vue 3 的代码库是用 TypeScript 编写的，具有自动生成、测试和捆绑的类型定义，因此它们始终是最新的</li>
</ul>
<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="使用-vue-cli-创建Vue3-0工程"><a href="#使用-vue-cli-创建Vue3-0工程" class="headerlink" title="使用 vue-cli 创建Vue3.0工程"></a>使用 vue-cli 创建Vue3.0工程</h2><p>先查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<p>如果版本过低，就需要安装或者升级你的@vue/cli</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>运行以下命令来创建一个新项目：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure>

<p>启动项目</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-world</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h1 id="常用-Composition-API"><a href="#常用-Composition-API" class="headerlink" title="常用 Composition API"></a>常用 Composition API</h1><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a><code>setup</code></h2><p>使用 (<code>data</code>、<code>computed</code>、<code>methods</code>、<code>watch</code>) 组件选项来组织逻辑通常都很有效。然而，当我们的组件开始变得更大时，<strong>逻辑关注点</strong>的列表也会增长。尤其对于那些一开始没有编写这些组件的人来说，这会导致组件难以阅读和理解。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/options-api.png"></p>
<p>这是一个大型组件的示例，其中<strong>逻辑关注点</strong>按颜色进行分组。</p>
<p>这种碎片化使得理解和维护复杂组件变得困难。选项的分离掩盖了潜在的逻辑问题。此外，在处理单个逻辑关注点时，我们必须不断地“跳转”相关代码的选项块。</p>
<p>如果能够将同一个逻辑关注点相关代码收集在一起会更好。</p>
<p><span style="color:red"><strong>setup的设计是为了使用组合式api，使相关逻辑的代码集中在一起.</strong></span></p>
<h3 id="setup-组件选项"><a href="#setup-组件选项" class="headerlink" title="setup 组件选项"></a><code>setup</code> 组件选项</h3><p>新的 <code>setup</code> 选项在<strong>组件创建之前</strong>执行，一旦 <code>props</code> 被解析，就将作为组合式 API 的入口。</p>
<blockquote>
<p><span style="color:orange">在 <code>setup</code> 中你应该避免使用 <code>this</code>，因为它不会找到组件实例。<code>setup</code> 的调用发生在 <code>data</code> property、<code>computed</code> property 或 <code>methods</code> 被解析之前，所以它们无法在 <code>setup</code> 中被获取。</span></p>
</blockquote>
<p><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，此外，我们将 <code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">prop,context</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;prop:&quot;</span>,prop)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;context:&quot;</span>,context)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="comment">// 这里返回的任何内容都可以用于组件的其余部分</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>setup</code> 函数时，它将接收两个参数：</p>
<ol>
<li><code>props</code></li>
<li><code>context</code></li>
</ol>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 prop 时，它将被更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBook.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(props.title)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:orange">但是，因为 <code>props</code> 是响应式的，你<strong>不能使用 ES6 解构</strong>，它会消除 prop 的响应性。</span></p>
</blockquote>
<p>如果需要解构 prop，可以在 <code>setup</code> 函数中使用 <a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%84"><code>toRefs</code></a> 函数来完成此操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBook.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = toRefs(props)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>title</code> 是可选的 prop，则传入的 <code>props</code> 中可能没有 <code>title</code> 。在这种情况下，<code>toRefs</code> 将不会为 <code>title</code> 创建一个 ref 。你需要使用 <code>toRef</code> 替代它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBook.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> title = toRef(props, <span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(title.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>props</code>在浏览器的控制台输出如下图：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/vue3props.png"></p>
<h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>传递给 <code>setup</code> 函数的第二个参数是 <code>context</code>。<code>context</code> 是一个普通的 JavaScript 对象，它暴露组件的三个 property：</p>
<p>的三个 property：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBook.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Attribute (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.attrs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插槽 (非响应式对象)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.slots)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发事件 (方法)</span></span><br><span class="line">    <span class="built_in">console</span>.log(context.emit)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>context</code> 是一个普通的 JavaScript 对象，也就是说，它不是响应式的，这意味着你可以安全地对 <code>context</code> 使用 ES6 解构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyBook.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>attrs</code> 和 <code>slots</code> 是有状态的对象，它们总是会随组件本身的更新而更新。这意味着你应该避免对它们进行解构，并始终以 <code>attrs.x</code> 或 <code>slots.x</code> 的方式引用 property。</p>
<p><code>context</code>在浏览器的控制台输出如下图：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/vue3context.png"></p>
<p><code>setup</code>注意点：</p>
<ol>
<li>尽量不要与Vue2.x配置混用<ul>
<li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li>
<li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li>
<li>如果有重名, setup优先。</li>
</ul>
</li>
<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>
<li><strong>在 <code>setup()</code> 内部，<code>this</code> 不是该活跃实例的引用</strong></li>
</ol>
<p>执行 <code>setup</code> 时，组件实例尚未被创建。因此，你只能访问以下 property：</p>
<ul>
<li><code>props</code></li>
<li><code>attrs</code></li>
<li><code>slots</code></li>
<li><code>emit</code></li>
</ul>
<p>换句话说，你<strong>将无法访问</strong>以下组件选项：</p>
<ul>
<li><code>data</code></li>
<li><code>computed</code></li>
<li><code>methods</code></li>
</ul>
<hr>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>接受一个内部值并返回一个响应式且可变的 ref 对象。ref 对象具有指向内部值的单个 property <code>.value</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">countAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count.value++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    countAdd</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果将对象分配为 ref 值，则通过 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive">reactive</a> 方法使该对象具有高度的响应式。</p>
<p>使用数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>count: &#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;countAdd&quot;</span>&gt;</span>count++<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>接收的数据可以是：基本类型、也可以是对象类型。</li>
<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>
<li>对象类型的数据：内部 使用了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>
</ul>
<hr>
<h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><p>返回对象的响应式副本，Proxy的实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:green"><code>reactive</code> 将解包所有深层的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">refs</a>，同时维持 ref 的响应性。</span></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> obj = reactive(&#123; count &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 会被解包</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.count === count.value) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它会更新 `obj.count`</span></span><br><span class="line">count.value++</span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.count) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它也会更新 `count` ref</span></span><br><span class="line">obj.count++</span><br><span class="line"><span class="built_in">console</span>.log(obj.count) <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul>
<li><p>实现原理：</p>
<ul>
<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>
</li>
<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>存在问题：</p>
<ul>
<li>新增属性、删除属性, 界面不会更新。</li>
<li>直接通过下标修改数组, 界面不会自动更新。</li>
</ul>
</li>
</ul>
<h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul>
<li><p>实现原理: </p>
<ul>
<li><p>通过Proxy（代理）:  <strong>Proxy 是一个对象，它包装了另一个对象，并允许你拦截对该对象的任何交互。</strong></p>
</li>
<li><p>通过Reflect（反射）:  使用 Proxy 的一个难点是 <code>this</code> 绑定。我们希望任何方法都绑定到这个 Proxy，而不是目标对象，这样我们也可以拦截它们。值得庆幸的是，ES6 引入了另一个名为 <code>Reflect</code> 的新特性，它允许我们以最小的代价消除了这个问题：</p>
</li>
<li><p>MDN文档中描述的Proxy与Reflect：</p>
<ul>
<li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>
</li>
<li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">	<span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure>

<h2 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h2><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>有时我们需要依赖于其他状态的状态——在 Vue 中，这是用组件<a href="https://v3.cn.vuejs.org/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8">计算属性</a>处理的，以直接创建计算值，我们可以使用 <code>computed</code> 方法：它接受 getter 函数并为 getter 返回的值返回一个不可变的响应式 <a href="https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html#%E5%88%9B%E5%BB%BA%E7%8B%AC%E7%AB%8B%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%80%BC%E4%BD%9C%E4%B8%BA-refs">ref</a> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> person = reactive(&#123;</span><br><span class="line">    firstName: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  person.fullName = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> person.firstName + <span class="string">&#x27; &#x27;</span> + person.lastName</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">   person</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.firstName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.lastName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>fullName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; person.fullName &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/vue3computed.png" style="zoom: 80%;" />

<p>或者，它可以使用一个带有 <code>get</code> 和 <code>set</code> 函数的对象来创建一个可写的 ref 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> person = reactive(&#123;</span><br><span class="line">      firstName: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      lastName: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    person.fullName = computed(&#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">&quot; &quot;</span> + person.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> names = newValue.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        person.firstName = names[<span class="number">0</span>];</span><br><span class="line">        person.lastName = names[names.length - <span class="number">1</span>];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      person,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>使用数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请输入姓名<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>fullName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.fullName&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>firstName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; person.firstName &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; person.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/vue3computed1.png" style="zoom:80%;" />

<hr>
<h3 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h3><p><code>watch</code> 需要侦听特定的数据源，并在回调函数中执行副作用。默认情况下，它也是惰性的，即只有当被侦听的源发生变化时才执行回调。</p>
<h4 id="侦听单个数据源"><a href="#侦听单个数据源" class="headerlink" title="侦听单个数据源"></a>侦听单个数据源</h4><p>侦听器数据源可以是返回值的 getter 函数，也可以直接是 <code>ref</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 侦听一个 getter</span></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line">watch(</span><br><span class="line">  () =&gt; state.count,</span><br><span class="line">  (count, prevCount) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接侦听ref</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line">watch(count, <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="侦听多个数据源"><a href="#侦听多个数据源" class="headerlink" title="侦听多个数据源"></a>侦听多个数据源</h4><p>侦听器还可以使用数组同时侦听多个源：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = ref(<span class="string">&quot;zhang&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> lastName = ref(<span class="string">&quot;san&quot;</span>);</span><br><span class="line"></span><br><span class="line">watch([firstName, lastName], <span class="function">(<span class="params">newValues, prevValues</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValues, prevValues);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFirstName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  firstName.value = <span class="string">&quot;Steve&quot;</span>; <span class="comment">// logs: [&quot;Steve&quot;, &quot;san&quot;] [&quot;zhang&quot;, &quot;san&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeLastName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  lastName.value = <span class="string">&quot;Jobs&quot;</span>;  <span class="comment">// logs: [&quot;zhang&quot;, &quot;Jobs&quot;] [&quot;zhang&quot;, &quot;san&quot;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尽管如此，如果你在同一个方法里同时改变这些被侦听的来源，侦听器仍只会执行一次：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFullName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  firstName.value = <span class="string">&quot;Steve&quot;</span>;</span><br><span class="line">  lastName.value = <span class="string">&quot;Jobs&quot;</span>;</span><br><span class="line">  <span class="comment">// 打印 [&quot;Steve&quot;, &quot;Jobs&quot;] [&quot;zhang&quot;, &quot;san&quot;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意多个同步更改只会触发一次侦听器。</p>
<p>两个小“坑”：</p>
<ul>
<li>监视reactive定义的响应式数据时：oldValue无法正确获取、默认已经强制开启了深度监视（deep配置失效）。</li>
<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>
</ul>
<hr>
<h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><ul>
<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>
</li>
<li><p>watchEffect有点像computed：</p>
<ul>
<li><p>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</p>
</li>
<li><p>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/lifecycle.svg"  />

<p>下表包含如何在 <a href="https://v3.cn.vuejs.org/guide/composition-api-setup.html">setup ()</a> 内部调用生命周期钩子：</p>
<table>
<thead>
<tr>
<th>选项式 API</th>
<th>Hook inside <code>setup</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>beforeCreate</code></td>
<td>Not needed*</td>
</tr>
<tr>
<td><code>created</code></td>
<td>Not needed*</td>
</tr>
<tr>
<td><code>beforeMount</code></td>
<td><code>onBeforeMount</code></td>
</tr>
<tr>
<td><code>mounted</code></td>
<td><code>onMounted</code></td>
</tr>
<tr>
<td><code>beforeUpdate</code></td>
<td><code>onBeforeUpdate</code></td>
</tr>
<tr>
<td><code>updated</code></td>
<td><code>onUpdated</code></td>
</tr>
<tr>
<td><code>beforeUnmount</code></td>
<td><code>onBeforeUnmount</code></td>
</tr>
<tr>
<td><code>unmounted</code></td>
<td><code>onUnmounted</code></td>
</tr>
<tr>
<td><code>errorCaptured</code></td>
<td><code>onErrorCaptured</code></td>
</tr>
<tr>
<td><code>renderTracked</code></td>
<td><code>onRenderTracked</code></td>
</tr>
<tr>
<td><code>renderTriggered</code></td>
<td><code>onRenderTriggered</code></td>
</tr>
<tr>
<td><code>activated</code></td>
<td><code>onActivated</code></td>
</tr>
<tr>
<td><code>deactivated</code></td>
<td><code>onDeactivated</code></td>
</tr>
</tbody></table>
<blockquote>
<p><span style="color:green">因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。</span></p>
</blockquote>
<h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a><code>toRef</code></h2><p>可以用来为源响应式对象上的某个 property 新创建一个 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。然后，ref 可以被传递，它会保持对其源 property 的响应式连接。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fooRef = toRef(state, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fooRef.value++</span><br><span class="line"><span class="built_in">console</span>.log(state.foo) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">state.foo++</span><br><span class="line"><span class="built_in">console</span>.log(fooRef.value) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a><code>toRefs</code></h2><p>将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。</p>
<p>当从组合式函数返回响应式对象时，<code>toRefs</code> 非常有用，这样消费组件就可以在不丢失响应性的情况下对返回的对象进行分解/扩散：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    foo: <span class="number">1</span>,</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 操作 state 的逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回时转换为ref</span></span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 可以在不失去响应性的情况下解构</span></span><br><span class="line">    <span class="keyword">const</span> &#123; foo, bar &#125; = useFeatureX()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo,</span><br><span class="line">      bar</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>toRefs</code> 只会为源对象中包含的 property 生成 ref。如果要为特定的 property 创建 ref，则应当使用 <code>toRef</code></p>
<hr>
<h1 id="其他-Composition-API"><a href="#其他-Composition-API" class="headerlink" title="其他 Composition API"></a>其他 Composition API</h1><h2 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h2><ul>
<li><p><code>shallowReactive</code>：创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = shallowReactive(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  nested: &#123;</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 state 本身的性质是响应式的</span></span><br><span class="line">state.foo++</span><br><span class="line"><span class="comment">// ...但是不转换嵌套对象</span></span><br><span class="line">isReactive(state.nested) <span class="comment">// false</span></span><br><span class="line">state.nested.bar++ <span class="comment">// 非响应式</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>shallowRef</code>：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = shallowRef(&#123;&#125;)</span><br><span class="line"><span class="comment">// 改变 ref 的值是响应式的</span></span><br><span class="line">foo.value = &#123;&#125;</span><br><span class="line"><span class="comment">// 但是这个值不会被转换。</span></span><br><span class="line">isReactive(foo.value) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>什么时候使用?</p>
<ul>
<li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; <code>shallowReactive</code>。</li>
<li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; <code>shallowRef</code>。</li>
</ul>
</li>
</ul>
<h2 id="readonly-与-shallowReadonly"><a href="#readonly-与-shallowReadonly" class="headerlink" title="readonly 与 shallowReadonly"></a>readonly 与 shallowReadonly</h2><ul>
<li><p><code>readonly</code>: 接受一个对象 (响应式或纯对象) 或 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref">ref</a> 并返回原始对象的只读代理。只读代理是深层的：任何被访问的嵌套 property 也是只读的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> original = reactive(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = readonly(original)</span><br><span class="line"></span><br><span class="line">watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 用于响应性追踪</span></span><br><span class="line">  <span class="built_in">console</span>.log(copy.count)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变更 original 会触发依赖于副本的侦听器</span></span><br><span class="line">original.count++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变更副本将失败并导致警告</span></span><br><span class="line">copy.count++ <span class="comment">// 警告!</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>shallowReadonly</code>：创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换 (暴露原始值)。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = shallowReadonly(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  nested: &#123;</span><br><span class="line">    bar: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变 state 本身的 property 将失败</span></span><br><span class="line">state.foo++</span><br><span class="line"><span class="comment">// ...但适用于嵌套对象</span></span><br><span class="line">isReadonly(state.nested) <span class="comment">// false</span></span><br><span class="line">state.nested.bar++ <span class="comment">// 适用</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>应用场景: 不希望数据被修改时。</p>
</li>
</ul>
<h2 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h2><ul>
<li><p>toRaw：</p>
<ul>
<li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li>
<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>
</ul>
</li>
<li><p>markRaw：</p>
<ul>
<li><p>作用：标记一个对象，使其永远不会再成为响应式对象。返回对象本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = markRaw(&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(isReactive(reactive(foo))) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套在其他响应式对象中时也可以使用</span></span><br><span class="line"><span class="keyword">const</span> bar = reactive(&#123; foo &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(isReactive(bar.foo)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><span style="color:red">有些值不应该是响应式的，例如复杂的第三方类实例或 Vue 组件对象</span></p>
<p><span style="color:red">当渲染具有不可变数据源的大列表时，跳过 proxy 转换可以提高性能。</span></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h2><p>创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。它需要一个工厂函数，该函数接收 <code>track</code> 和 <code>trigger</code> 函数作为参数，并且应该返回一个带有 <code>get</code> 和 <code>set</code> 的对象。</p>
<p>自定义customRef配合自定义hook函数使用。</p>
<p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。类似于vue2.x中的mixin。自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>
<p>在项目中新建hooks文件夹，在hooks文件夹下新建useDebounce.js文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">value, delay = <span class="number">1000</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout</span><br><span class="line">    <span class="keyword">return</span> customRef(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          track()</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">          timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            value = newValue</span><br><span class="line">            trigger()</span><br><span class="line">          &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>使用自定义 ref 通过 <code>v-model</code> 实现 debounce 的示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useDebouncedRef <span class="keyword">from</span> <span class="string">&#x27;../hooks/useDebounce&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: useDebouncedRef(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h2><p>通常，当我们需要从父组件向子组件传递数据时，我们使用 <a href="https://v3.cn.vuejs.org/guide/component-props.html">props</a>。想象一下这样的结构：有一些深度嵌套的组件，而深层的子组件只需要父组件的部分内容。在这种情况下，如果仍然将 prop 沿着组件链逐级传递下去，可能会很麻烦。</p>
<p>对于这种情况，我们可以使用一对 <code>provide</code> 和 <code>inject</code>。无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者。这个特性有两个部分：父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个 <code>inject</code> 选项来开始使用这些数据。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/vue3/components_provide.png"></p>
<p>用法:</p>
<p>父组件中提供：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子组件中使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props,context</span>)</span>&#123;</span><br><span class="line">	......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为一个 ref 对象</li>
<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>
<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>
<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>
</ul>
<hr>
<h1 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h1><p>Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下渲染了 HTML，而不必求助于全局状态或将其拆分为两个组件。</p>
<p>让我们修改 <code>modal-button</code> 以使用 <code>&lt;teleport&gt;</code>，并告诉 Vue “<strong>Teleport</strong> 这个 HTML <strong>到</strong>该‘<strong>body</strong>’标签”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;modal-button&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;modalOpen = true&quot;&gt;</span></span><br><span class="line"><span class="string">        Open full screen modal! (With teleport!)</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;teleport to=&quot;body&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div v-if=&quot;modalOpen&quot; class=&quot;modal&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          I&#x27;m a teleported modal! </span></span><br><span class="line"><span class="string">          (My parent is &quot;body&quot;)</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;modalOpen = false&quot;&gt;</span></span><br><span class="line"><span class="string">            Close</span></span><br><span class="line"><span class="string">          &lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/teleport&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line">      modalOpen: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h2><ul>
<li><p>Vue 2.x 有许多全局 API 和配置。</p>
<ul>
<li><p>例如：注册全局组件、注册全局指令等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  template: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Vue3.0中对这些API做出了调整：</p>
<ul>
<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>
<table>
<thead>
<tr>
<th>2.x 全局 API（<code>Vue</code>）</th>
<th>3.x 实例 API (<code>app</code>)</th>
</tr>
</thead>
<tbody><tr>
<td>Vue.config.xxxx</td>
<td>app.config.xxxx</td>
</tr>
<tr>
<td>Vue.config.productionTip</td>
<td><strong style="color:#DD5145">移除</strong></td>
</tr>
<tr>
<td>Vue.component</td>
<td>app.component</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>app.directive</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>app.mixin</td>
</tr>
<tr>
<td>Vue.use</td>
<td>app.use</td>
</tr>
<tr>
<td>Vue.prototype</td>
<td>app.config.globalProperties</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h2 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h2><ul>
<li><p>data选项应始终被声明为一个函数。</p>
</li>
<li><p>过度类名的更改：</p>
<ul>
<li><p>Vue2.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vue3.x写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>
</li>
<li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p>
<ul>
<li><p>父组件中绑定事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close&#x3D;&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件中声明自定义事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#39;close&#39;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p>
<blockquote>
<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue CLI</title>
    <url>/2021/09/03/Vue-CLI/</url>
    <content><![CDATA[<h1 id="Vue-CLI的使用"><a href="#Vue-CLI的使用" class="headerlink" title="Vue-CLI的使用"></a>Vue-CLI的使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>vue脚手架的作用是用来自动一键生成vue+webpack的项目模版，包括依赖库，免去你手动安装各种插件，寻找各种cdn并一个个引入的麻烦。</p>
<p>vue脚手架指的是vue-cli，它是一个专门为单页面应用快速搭建繁杂的脚手架，它可以轻松的创建新的应用程序而且可用于自动生成vue和webpack的项目模板。</p>
<p>vue-cli是有Vue提供的一个官方cli，专门为单页面应用快速搭建繁杂的脚手架。它是用于自动生成vue.js+webpack的项目模板，是为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载，保存时 lint 校验，以及生产环境可用的构建版本</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Node 版本要求</p>
<p>Vue CLI 4.x 需要 <a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。你可以使用 <a href="https://github.com/tj/n">n</a>，<a href="https://github.com/creationix/nvm">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p>
<p>可以使用下列任一命令安装这个新的包：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure>

<p>安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p>
<p>你还可以用这个命令来检查其版本是否正确：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>如需升级全局的 Vue CLI 包，请运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm update -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn global upgrade --latest @vue/cli</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>切换到你要创建项目的目录，然后运行以下命令来创建一个新项目：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure>

<p>你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 Vue2或者Vue3，也可以选“手动选择特性”来选取需要的特性。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vueprojectinit.png"></p>
<p><strong>使用图形化界面</strong></p>
<p>你也可以通过 <code>vue ui</code> 命令以图形化界面创建和管理项目：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>

<p>上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/initprojectinweb.png"></p>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如出现下载缓慢请配置npm 淘宝镜像：npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue 脚手架隐藏了所有webpack 相关的配置，若想查看具体的webpakc 配置，请执行：vue inspect &gt; output.js</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h2><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 <code>package.json</code> 同级的) 根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载。你也可以使用 <code>package.json</code> 中的 <code>vue</code> 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>
<p>这个文件应该导出一个包含了选项的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type <span class="type">&#123;import(&#x27;@vue/cli-service&#x27;).ProjectOptions&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 选项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模板项目的结构"><a href="#模板项目的结构" class="headerlink" title="模板项目的结构"></a>模板项目的结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h1><p><code>ref</code> 被用来给元素或子组件注册引用信息。</p>
<ul>
<li>引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素（id的替代者）；</li>
<li>如果用在子组件上，引用就指向组件实例<code>VueComponent</code>：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。</p>
<p>获取：<code>this.$refs.xxx</code></p>
<hr>
<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>props 可以是数组或对象，用于接收来自父组件的数据。</p>
<p><strong>三种读取方式</strong></p>
<ul>
<li><p><strong>示例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单语法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-simple&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;myMessage&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定名称和类型</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-simple&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    title: <span class="built_in">String</span>,</span><br><span class="line">    likes: <span class="built_in">Number</span>,</span><br><span class="line">    isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">    commentIds: <span class="built_in">Array</span>,</span><br><span class="line">    author: <span class="built_in">Object</span>,</span><br><span class="line">    callback: <span class="built_in">Function</span>,</span><br><span class="line">    contactsPromise: <span class="built_in">Promise</span> <span class="comment">// or any other constructor</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象语法，提供验证</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-advanced&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 检测类型</span></span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 检测类型 + 其他验证</span></span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>, <span class="comment">// 默认值</span></span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h1><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。</p>
<p>当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>混入对象的局部使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure>

<p>如果你的混入包含一个 created 钩子，而创建组件本身也有一个，那么两个函数都会被调用。</p>
<p>Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。</p>
<p>全局使用</p>
<p>全局混入：<code>Vue.mixin(xxx)</code></p>
<p>全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。<strong>不推荐在应用代码中使用</strong>。</p>
<hr>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p>
<ol>
<li>添加全局方法或者 property。如：vue-custom-element</li>
<li>添加全局资源：指令/过滤器/过渡等。如 vue-touch</li>
<li>通过全局混入来添加一些组件选项。如 vue-router</li>
<li>添加 Vue 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现。</li>
<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router</li>
</ol>
<h2 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h2><p>Vue.js 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源</span></span><br><span class="line">  Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code> 启动应用之前完成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h1><ol>
<li><p>作用：让样式在局部生效，防止冲突。</p>
</li>
<li><p>写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">250px</span>) &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.list-container</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      background: orange;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这个可选 <code>scoped</code> attribute 会自动添加一个唯一的 attribute (比如 <code>data-v-21e5b78</code>) 为组件内 CSS 指定作用域，编译的时候 <code>.list-container:hover</code> 会被编译成类似 <code>.list-container[data-v-21e5b78]:hover</code>。</p>
<hr>
<h1 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h1><p>组件的自定义事件是一种组件间通信方式，适用于：子组件给父组件传递数据。</p>
<p>不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。</p>
<p>不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且 <code>v-on</code> 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到。</p>
<p>因此，我们推荐你<strong>始终使用 kebab-case 的事件名</strong>。</p>
<p><strong>步骤：</strong></p>
<p>先在父组件中给子组件<code>TodoFooter</code>绑定事件:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TodoFooter</span> @<span class="attr">custom-event</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TodoFooter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在<code>methods</code>中定义doSomething回调方法:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">doSomething</span>(<span class="params">msg</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在子组件中绑定一个按钮来触发自定义事件:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;triggerCustomEvent&quot;</span>&gt;</span>触发自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>触发自定义事件:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">triggerCustomEvent</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$emit(<span class="string">&quot;custom-event&quot;</span>,<span class="string">&quot;doSomething...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面绑定自定义事件还有第二种方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;TodoFooter ref=<span class="string">&quot;todofooter&quot;</span>&gt;&lt;/TodoFooter&gt;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.$refs.todofooter.$on(<span class="string">&quot;custom-event&quot;</span>,<span class="built_in">this</span>.doSomething)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>解绑自定义事件：</strong></p>
<p><strong>vm.$off( [event, callback] )</strong></p>
<ul>
<li><p><strong>参数</strong>：</p>
<ul>
<li><code>&#123;string | Array&lt;string&gt;&#125; event</code> (只在 2.2.2+ 支持数组)</li>
<li><code>&#123;Function&#125; [callback]</code></li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p>移除自定义事件监听器。</p>
<ul>
<li>如果没有提供参数，则移除所有的事件监听器；</li>
<li>如果只提供了事件，则移除该事件所有的监听器；</li>
<li>如果同时提供了事件与回调，则只移除这个回调的监听器。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$off(<span class="string">&quot;custom-event&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>将原生事件绑定到组件</strong></p>
<p>你可能有很多次想要在一个组件的根元素上直接监听一个原生事件。这时，你可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TodoFooter</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TodoFooter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><p>vue组件中的数据传递最最常见的就是父子组件之间的传递。父传子通过props向下传递数据给子组件；子传父通过$emit发送事件，并携带数据给父组件。而有时两个组件之间毫无关系，或者他们之间的结构复杂，如何传递数据呢？这时就要用到 vue 中的事件总线 EventBus的概念。</p>
<h2 id="使用-EventBus"><a href="#使用-EventBus" class="headerlink" title="使用 EventBus"></a>使用 EventBus</h2><ul>
<li>第一种方式: 可以在 main.js中，初始化 EventBus</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Vue.prototype.$bus = <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>X组件想接收数据，则在X组件中给<code>$bus</code>绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">methods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Y组件想要给X组件传递数据，则在Y组件中发送事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;xxxx&#x27;</span>,param)</span><br></pre></td></tr></table></figure>

<p>在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件</p>
<p>语法：<code>this.$EventBus.$off(要移除监听的事件名)</code></p>
<hr>
<h1 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h1><h3 id="vm-nextTick-callback"><a href="#vm-nextTick-callback" class="headerlink" title="vm.$nextTick( [callback] )"></a>vm.$nextTick( [callback] )</h3><ul>
<li><p><strong>参数</strong>：</p>
<ul>
<li><code>&#123;Function&#125; [callback]</code></li>
</ul>
</li>
<li><p><strong>用法</strong>：</p>
<p>将回调延迟到下次 DOM 更新循环之后执行。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    example: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 修改数据</span></span><br><span class="line">      <span class="built_in">this</span>.message = <span class="string">&#x27;changed&#x27;</span></span><br><span class="line">      <span class="comment">// DOM 还没有更新</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// DOM 现在更新了</span></span><br><span class="line">        <span class="comment">// `this` 绑定到当前实例</span></span><br><span class="line">        <span class="built_in">this</span>.doSomethingElse()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="过渡-amp-动画"><a href="#过渡-amp-动画" class="headerlink" title="过渡&amp;动画"></a>过渡&amp;动画</h1><h2 id="单元素-组件的过渡"><a href="#单元素-组件的过渡" class="headerlink" title="单元素/组件的过渡"></a>单元素/组件的过渡</h2><p>Vue 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡</p>
<ul>
<li>条件渲染 (使用 <code>v-if</code>)</li>
<li>条件展示 (使用 <code>v-show</code>)</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>
<p>这里是一个典型的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在进入/离开的过渡中，会有 6 个 class 切换。</p>
<ol>
<li><code>v-enter</code>：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li><code>v-enter-active</code>：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-enter-to</code>：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成之后移除。</li>
<li><code>v-leave</code>：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li><code>v-leave-active</code>：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li><code>v-leave-to</code>：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 <code>v-leave</code> 被删除)，在过渡/动画完成之后移除。</li>
</ol>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/transition.png"></p>
<p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀。如果你使用了 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p>
<p><code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入/离开过渡的不同的缓和曲线。</p>
<h2 id="CSS-过渡"><a href="#CSS-过渡" class="headerlink" title="CSS 过渡"></a>CSS 过渡</h2><p>常用的过渡都是使用 CSS 过渡。</p>
<p>下面是一个简单例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以设置不同的进入和离开动画 */</span></span><br><span class="line"><span class="comment">/* 设置持续时间和动画函数 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter</span>, <span class="selector-class">.slide-fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三方-CSS-动画库"><a href="#第三方-CSS-动画库" class="headerlink" title="第三方 CSS 动画库"></a>第三方 CSS 动画库</h2><p>我们可以通过以下 attribute 来自定义过渡类名：</p>
<ul>
<li><code>enter-class</code></li>
<li><code>enter-active-class</code></li>
<li><code>enter-to-class</code></li>
<li><code>leave-class</code></li>
<li><code>leave-active-class</code></li>
<li><code>leave-to-class</code></li>
</ul>
<p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 <a href="https://daneden.github.io/animate.css/">Animate.css</a> 结合使用十分有用。</p>
<p>Install with npm:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install animate.css</span></span><br></pre></td></tr></table></figure>

<p>Import it into your file:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;animate.css&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>Toggle render<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;animate__animated animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__bounce&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__backOutDown&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>An animated element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么怎么同时渲染整个列表，比如使用 <code>v-for</code>？在这种场景中，使用 <code>&lt;transition-group&gt;</code> 组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p>
<ul>
<li>不同于 <code>&lt;transition&gt;</code>，它会以一个真实元素呈现：默认为一个 <code>&lt;span&gt;</code>。你也可以通过 <code>tag</code> attribute 更换为其他元素。</li>
<li>过渡模式不可用，因为我们不再相互切换特有的元素。</li>
<li>内部元素<strong>总是需要</strong>提供唯一的 <code>key</code> attribute 值。</li>
<li>CSS 过渡的类将会应用在内部的元素中，而不是这个组/容器本身。</li>
</ul>
<hr>
<h1 id="Vue-CLI配置代理"><a href="#Vue-CLI配置代理" class="headerlink" title="Vue-CLI配置代理"></a>Vue-CLI配置代理</h1><p>如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 <code>vue.config.js</code> 中的 <code>devServer.proxy</code> 选项来配置。</p>
<p>resolve <code>CORS policy</code> <code>Access-Control-Allow-Origin</code></p>
<ul>
<li><code>devServer.proxy</code> 可以是一个指向开发环境 API 服务器的字符串：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: <span class="string">&#x27;http://localhost:4000&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到<code>http://localhost:4000</code>。</p>
<p>说明：</p>
<ol>
<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>
<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>
<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>
</ol>
<p><strong>配置多个代理</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        target: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        target: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>
<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>
</ol>
<hr>
<h1 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽(slot)"></a>插槽(slot)</h1><p>Slot 通俗的理解就是“占坑”，在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑（替换组件模板中<span style="color:red"><code>slot</code></span>位置）<br>并且可以作为承载分发内容的出口</p>
<p>因为在2.6.0中，<strong>具名插槽</strong> 和 <strong>作用域插槽</strong> 引入了一个新的统一的语法 (即<span style="color:red"><code>v-slot</code></span> 指令)。它取代了 <span style="color:red"><code>slot</code></span> 和 <span style="color:red"><code>slot-scope</code></span></p>
<h2 id="插槽内容"><a href="#插槽内容" class="headerlink" title="插槽内容"></a>插槽内容</h2><p>Vue 实现了一套内容分发的 API，这套 API 的设计灵感源自 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Web Components 规范草案</a>，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口。</p>
<p>它允许你像这样合成组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  Hello World</span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后你在 <code>HelloWorld</code> 组件中可能会写为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当组件渲染的时候，<code>&lt;slot&gt;&lt;/slot&gt;</code> 将会被替换为“Hello World”。插槽内可以包含任何模板代码，包括 HTML。</p>
<p>如果<code>HelloWorld</code> 组件 的 <code>template</code> 中<strong>没有</strong>包含一个 <code>&lt;slot&gt;</code> 元素，则该组件起始标签<span style="color:red"><code>&lt;HelloWorld&gt;</code></span>和结束标签 <span style="color:red"><code>&lt;/HelloWorld&gt;</code></span>之间的任何内容都会被抛弃。</p>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>对于这样的情况，<code>&lt;slot&gt;</code> 元素有一个特殊的 attribute：<code>name</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p>
<p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在 <span style="color:red"><code>&lt;template&gt;</code></span>元素中的所有内容都将会被传入相应的插槽。任何没有被包裹在带有<span style="color:red"><code>v-solt</code></span>的 <span style="color:red"><code>&lt;template&gt;</code></span> 中的内容都会被视为默认插槽的内容。</p>
<p>然而，如果你希望更明确一些，仍然可以在一个 <span style="color:red"><code>&lt;template&gt;</code></span> 中包裹默认插槽的内容：<span style="color:red"><code>&lt;template&gt;</code></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>任何一种写法都会渲染出：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意 v-slot 只能添加在 &lt;template&gt; 上</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h2><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。例如，父组件访问子组件中才有的数据</p>
<p>在子组件<span style="color:red"><code>HelloWorld</code></span>中先定义数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        firstName : <span class="string">&#x27;张&#x27;</span>,</span><br><span class="line">        lastName : <span class="string">&#x27;三&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了让 <code>user</code> 在父级的插槽内容中可用，我们可以将 <code>user</code> 作为 <code>&lt;slot&gt;</code> 元素的一个 attribute 绑定上去：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在父组件中使用子组件的数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>法外狂徒&#123;&#123; user.firstName &#125;&#125;&#123;&#123; user.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/slotshow.png"></p>
<hr>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue-CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2021/09/08/Vuex/</url>
    <content><![CDATA[<h1 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex?"></a>什么是Vuex?</h1><p>Vuex是专门在Vue 中实现集中式状态（数据）管理的一个Vue 插件，对vue 应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>
<p>当我们的应用遇到<strong>多个组件共享状态</strong>时，单向数据流的简洁性很容易被破坏：</p>
<ul>
<li>多个视图依赖于同一状态。</li>
<li>来自不同视图的行为需要变更同一状态。</li>
</ul>
<p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p>
<p>因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！</p>
<p>通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。这就是 Vuex 背后的基本思想.</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vuex.png"></p>
<h1 id="什么情况下我应该使用-Vuex？"><a href="#什么情况下我应该使用-Vuex？" class="headerlink" title="什么情况下我应该使用 Vuex？"></a>什么情况下我应该使用 Vuex？</h1><p>Vuex 可以帮助我们管理共享状态，并附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p>
<p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 Redux 的作者 Dan Abramov 的话说就是：</p>
<blockquote>
<p>Flux 架构就像眼镜：您自会知道什么时候需要它。</p>
</blockquote>
<hr>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装vuex"><a href="#安装vuex" class="headerlink" title="安装vuex"></a>安装vuex</h2><p><code>NPM</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex </span><br></pre></td></tr></table></figure>

<h2 id="使用Store"><a href="#使用Store" class="headerlink" title="使用Store"></a>使用Store</h2><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的**状态 (state)**。Vuex 和单纯的全局对象有以下两点不同：</p>
<ol>
<li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p>
</li>
<li><p>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用</p>
</li>
<li><p>创建文件：<code>src/store/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            state.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p>
<p>为了在 Vue 组件中访问 <code>this.$store</code> property，你需要为 Vue 实例提供创建好的 store。Vuex 提供了一个从根组件向所有子组件，以 <code>store</code> 选项的方式“注入”该 store 的机制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store: store,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果使用 ES6，你也可以以 ES6 对象的 property 简写 (用在对象某个 property 的 key 和被传入的变量同名时)：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件<span style="color:red">HelloWorld</span>中绑定一个方法，用来改变store中的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>当前的值是:&#123;&#123;$store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">increase</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;increment&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完善<code>src/store/index.js</code>中的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="comment">//  Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 		   			context.state 和 context.getters 来获取 state 和 getters。</span></span><br><span class="line">        <span class="comment">// 参数value值是通过dispatch方法传过来的参数</span></span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">            context.commit(<span class="string">&quot;increment&quot;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state,value</span>)</span> &#123;</span><br><span class="line">            state.count += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p>效果</p>
<p>点击按钮前：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vuexchangebefore.png"></p>
<p>点击按钮5下后</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vuexchangeafter.png"></p>
</li>
</ol>
<hr>
<h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p>
<p>Getter 接受 state 作为其第一个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">increase</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">            context.commit(<span class="string">&quot;increase&quot;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        dollar: <span class="number">0</span>,</span><br><span class="line">        rate: <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        <span class="function"><span class="title">rmb</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state.dollar * state.rate</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">increase</span>(<span class="params">state,value</span>)</span> &#123;</span><br><span class="line">            state.dollar += value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>Getter 会暴露为 <code>store.getters</code> 对象，你可以以属性的形式访问这些值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$store.getters.rmb </span><br></pre></td></tr></table></figure>

<h2 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h2><p>先引入mapGetters </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>

<p>数组写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">&#x27;doneTodosCount&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;anotherGetter&#x27;</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">&#x27;doneTodosCount&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h2><p>先引入mapState </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性，让你少按几次键：</p>
<p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">&#x27;count&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>对象写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  count:<span class="string">&#x27;count&#x27;</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="mapActions-辅助函数"><a href="#mapActions-辅助函数" class="headerlink" title="mapActions 辅助函数"></a>mapActions 辅助函数</h2><p>先导入mapActions </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>

<p>数组写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   ...mapActions([</span><br><span class="line">     <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">     <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">   ]),</span><br><span class="line">   ...mapActions(&#123;</span><br><span class="line">     add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>对象写法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...mapActions(&#123;</span><br><span class="line">  add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch(&#x27;increment&#x27;)`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="mapMutations-辅助函数"><a href="#mapMutations-辅助函数" class="headerlink" title="mapMutations 辅助函数"></a>mapMutations 辅助函数</h2><p>先导入mapActions </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure>

<p>数组写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">&#x27;increment&#x27;</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">&#x27;incrementBy&#x27;</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span></span><br><span class="line">]),</span><br></pre></td></tr></table></figure>

<p>对象写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...mapMutations(&#123;</span><br><span class="line">  add: <span class="string">&#x27;increment&#x27;</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Module模块化"><a href="#Module模块化" class="headerlink" title="Module模块化"></a>Module模块化</h1><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p>
<p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</p>
<p>默认情况下，模块内部的 action、mutation 和 getter 是注册在<strong>全局命名空间</strong>的——这样使得多个模块能够对同一 mutation 或 action 作出响应。</p>
<p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  namespaced:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  namespaced:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  state: <span class="function">() =&gt;</span> (&#123; ... &#125;),</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>在组件中对数据进行读取:</strong></p>
<p>读取<span style="color:red"><code>state</code></span>数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数空间名称字符串，第二个参数是空间名称字符串的中的参数</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(<span class="string">&#x27;currency&#x27;</span>,[<span class="string">&#x27;dollar&#x27;</span>,<span class="string">&#x27;rate&#x27;</span>])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>读取<span style="color:red"><code>getters</code></span>数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数空间名称字符串</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters(<span class="string">&#x27;currency&#x27;</span>,[<span class="string">&#x27;rmb&#x27;</span>])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>组件中调用<span style="color:red"><code>dispatch</code></span>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line">    <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;currency/increase&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">    <span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">    ...mapActions(<span class="string">&#x27;currency&#x27;</span>,[<span class="string">&#x27;increase&#x27;</span>])</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>组件中调用<span style="color:red"><code>commit</code></span>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">addOnePerson</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line">        <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;person/addOnePerson&#x27;</span>,newPerson)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">    ...mapActions(<span class="string">&#x27;person&#x27;</span>,[<span class="string">&#x27;addOnePerson&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解驱动开发</title>
    <url>/2021/07/23/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h2><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>在配置类上添加<code>@ComponentScan</code>注解。该注解默认会扫描该类所在的包下所有的配置类，相当于之前的 <a href="context:component-scan">context:component-scan</a>。<code>@ComponentScan</code>注解默认就会装配标识了<code>@Controller</code>，<code>@Service</code>，<code>@Repository</code>，<code>@Component</code>注解的类到spring容器中。</p>
<p>basePackages与value: 用于指定包的路径，进行扫描</p>
<p>basePackageClasses：指定扫描类</p>
<p><code>includeFilters</code>：指定某些定义Filter满足条件的组件 FilterType有5种类型如：</p>
<ul>
<li><code>ANNOTATION</code>，注解类型(默认)</li>
<li><code>ASSIGNABLE_TYPE</code>，指定固定类</li>
<li><code>ASPECTJ</code>， ASPECTJ类型</li>
<li><code>REGEX</code>，正则表达式</li>
<li><code>CUSTOM</code>，自定义类型</li>
</ul>
<p><code>excludeFilters</code>：过滤器，和includeFilters作用刚好相反，用来对扫描的类进行排除的，被排除的类不会被注册到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(value=&quot;com.wotzc&quot;,useDefaultFilters=true,</span></span><br><span class="line"><span class="meta">    includeFilters=&#123;</span></span><br><span class="line"><span class="meta">        @Filter(type=FilterType.ANNOTATION,classes=&#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">        @Filter(type=FilterType.ASSIGNABLE_TYPE,classes=&#123;UserService2.class&#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainScanConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p><code>@Scope</code>注解是springIoc容器中的一个作用域，在 Spring IoC 容器中具有以下几种作用域：基本作用域<code>singleton</code>（单例）默认值、<code>prototype</code>(多例)，<code>Web 作用域</code>（reqeust、session、globalsession），<code>自定义作用域</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span><span class="comment">//多实例，IOC容器启动创建的时候，并不会创建对象放在容器在容器当中，当你需要的时候，需要从容器当中取该对象的时候，就会创建。@Scope(&quot;singleton&quot;)//单实例 IOC容器启动的时候就会调用方法创建对象，以后每次获取都是从容器当中拿同一个对象（map当中）。</span></span><br><span class="line"><span class="meta">@Scope(&quot;request&quot;)</span><span class="comment">//同一个请求创建一个实例</span></span><br><span class="line"><span class="meta">@Scope(&quot;session&quot;)</span><span class="comment">//同一个session创建一个实例</span></span><br></pre></td></tr></table></figure>

<h3 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h3><p>Spring IoC （ApplicationContext） 容器一般都会在启动的时候实例化所有单实例 bean 。如果我们想要 Spring 在启动的时候延迟加载 bean，即在调用某个 bean 的时候再去初始化，那么就可以使用<code>@Lazy</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>, <span class="number">55</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p><code>@Conditional</code>是Spring4新提供的注解，它的作用是按照一定的条件进行判断，满足条件就给容器注册bean。</p>
<p><code>@Conditional</code>的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此注解可以标注在类和方法上</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> </span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">    </span><br><span class="line">    Class&lt;? extends Condition&gt;[] value();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码中可以看到，需要传入一个Class数组，并且需要继承Condition接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Condition是个接口，需要实现<code>matches</code>方法，返回true则注入bean，false则不注入。</p>
<p>首先，创建一个WindowsCondition类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conditionContext:判断条件能使用的上下文环境</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotatedTypeMetadata:注解所在位置的注释信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ioc使用的beanFactory</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = conditionContext.getBeanFactory();</span><br><span class="line">        <span class="comment">//获取类加载器</span></span><br><span class="line">        ClassLoader classLoader = conditionContext.getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前环境信息</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        BeanDefinitionRegistry registry = conditionContext.getRegistry();</span><br><span class="line">        <span class="comment">//获得当前系统名</span></span><br><span class="line">        String property = environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包含Windows则说明是windows系统，返回true</span></span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">&quot;Windows&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>matches方法的两个参数的意思在注释中讲述了，值得一提的是，conditionContext提供了多种方法，方便获取各种信息，也是SpringBoot中<code>@ConditonalOnXX</code>注解多样扩展的基础。</p>
<p>接着，创建LinuxCondition类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        String property = environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">&quot;Linux&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着就是使用这两个类了，因为此注解可以标注在方法上和类上，</p>
<p>修改BeanConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有一个类时，大括号可以省略</span></span><br><span class="line">    <span class="comment">//如果WindowsCondition的实现方法返回true，则注入这个bean    </span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;bill&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;Bill Gates&quot;</span>,<span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果LinuxCondition的实现方法返回true，则注入这个bean</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;LinuxCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(&quot;linus&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">&quot;Linus&quot;</span>,<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><div class="note no-icon primary"><p>Spring的@Bean注解用于告诉方法，产生一个Bean对象，然后这个Bean对象交给Spring管理。 产生这个Bean对象的方法Spring只会调用一次，随后这个Spring将会将这个Bean对象放在自己的IOC容器中。@Bean明确地指示了一种方法，什么方法呢？产生一个bean的方法，并且交给Spring容器管理；从这我们就明白了为啥@Bean是放在方法的注释上了，因为它很明确地告诉被注释的方法，你给我产生一个Bean，然后交给Spring容器，剩下的你就别管了。记住，@Bean就放在方法上，就是让方法去产生一个Bean，然后交给Spring容器。</p>
</div>

<p><strong>为什么要有@Bean注解？</strong></p>
<p>不知道大家有没有想过，用于注册Bean的注解的有那么多个，为何还要出现@Bean注解？</p>
<p>原因很简单：类似<code>@Component</code> , <code>@Repository</code> , <code>@ Controller</code> ,<code> @Service</code> 这些注册Bean的注解存在局限性，只能局限作用于自己编写的类，如果是一个jar包第三方库要加入<code>IOC容器</code>的话，这些注解就手无缚鸡之力了，是的，<code>@Bean</code>注解就可以做到这一点！当然除了@Bean注解能做到还有<code>@Import</code>也能把第三方库中的类实例交给spring管理，而且<code>@Import</code>更加方便快捷</p>
<p>@Bean 基本构成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">	<span class="function">Autowire <span class="title">autowire</span><span class="params">()</span> <span class="keyword">default</span> Autowire.NO</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="function">String <span class="title">initMethod</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="function">String <span class="title">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> AbstractBeanDefinition.INFER_METHOD</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>value</strong>： name属性的别名，在不需要其他属性时使用，也就是说value 就是默认值</p>
<p><strong>name</strong>： 此bean 的名称，或多个名称，主要的bean的名称加别名。如果未指定，则bean的名称是带注解方法的名称。如果指定了，方法的名称就会忽略，如果没有其他属性声明的话，bean的名称和别名可能通过value属性配置</p>
<p><strong>autowire</strong> ： 此注解的方法表示自动装配的类型，返回一个<code>Autowire</code>类型的枚举，装配方式 有三个选项<br><code>Autowire.NO</code>(默认设置)<br><code>Autowire.BY_NAME</code><br><code>Autowire.BY_TYPE</code><br>指定 bean 的装配方式， 根据<strong>名称</strong>和<strong>根据类型</strong>装配， 一般不设置，采用默认即可。autowire的默认值为<code>No</code>，默认表示不通过自动装配。</p>
<p><strong>bean</strong> 的初始化方法， 直接指定方法名称即可，不用带括号</p>
<p><strong>destroyMethod</strong>: bean 的销毁方法， 在调用 IoC 容器的<code>close()</code>方法时，会执行到该属性指定的方法。不过，只是单实例的 bean 才会调用该方法，如果是多实例的情况下，不会调用该方法</p>
<hr>
<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p><strong>@Import只能用在类上</strong> ，<code>@Import</code>通过快速导入的方式实现把实例加入spring的IOC容器中</p>
<p>@Import的三种用法主要包括：</p>
<div class="note no-icon primary"><p>1、直接填class数组方式<br>2、ImportSelector方式【重点】<br>3、ImportBeanDefinitionRegistrar方式</p>
</div>

<p><strong>第一种用法：直接填class数组</strong></p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123; 类名.class , 类名.class... &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应的import的bean都将加入到spring容器中，这些在容器中bean名称是该类的<strong>全类名</strong> </p>
<p><strong>第二种用法：ImportSelector方式</strong></p>
<p>这种方式的前提就是一个类要实现ImportSelector接口，假如我要用这种方法，目标对象是Myclass这个类，分析具体如下：</p>
<p>创建Myclass类并实现ImportSelector接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    	<span class="comment">// 方法不要返回null，否则会报空指针异常！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析实现接口的selectImports方法：</p>
<div class="note success"><ul>
<li>1、返回值： 就是我们实际上要导入到容器中的组件全类名</li>
<li>2、参数： AnnotationMetadata表示当前被@Import注解给标注的所有注解信息</li>
</ul>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.wotzc.Test.TestDemo3&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三种用法：ImportBeanDefinitionRegistrar方式</strong></p>
<p>同样是一个接口，类似于第二种ImportSelector用法，相似度80%，只不过这种用法比较自定义化注册，具体如下：</p>
<p>第一步：创建Myclass2类并实现ImportBeanDefinitionRegistrar接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass2</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"><span class="comment">//该实现方法默认为空</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数分析：</p>
<ul>
<li>第一个参数：annotationMetadata 和之前的ImportSelector参数一样都是表示当前被@Import注解给标注的所有注解信息</li>
<li>第二个参数表示用于注册定义一个bean</li>
</ul>
<hr>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="@FactoryBean"></a>@FactoryBean</h3><div class="note no-icon info"><p>该类是SpringIOC容器是创建Bean的一种形式，这种方式创建Bean会有加成方式，融合了简单的工厂设计模式于装饰器模式<br>Interface to be implemented by objects used within a {@link BeanFactory} which  are themselves factories for individual objects. If a bean implements this  interface, it is used as a factory for an object to expose, not directly as a  bean instance that will be exposed itself.</p>
</div>

<p>在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在<code>&lt;bean></code>中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个<code>org.springframework.bean.factory.FactoryBean</code>的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。<code>FactoryBean</code>接口对于Spring框架来说占有重要的地位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的对象实例</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">    <span class="comment">//Bean的类型</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line">    <span class="comment">//true是单例，false是非单例  在Spring5.0中此方法利用了JDK1.8的新特性变成了default方法，返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PostConstruct"><a href="#PostConstruct" class="headerlink" title="@PostConstruct"></a>@PostConstruct</h3><p>在bean创建完成并且属性赋值完成，来执行初始化方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PreDestroy"><a href="#PreDestroy" class="headerlink" title="@PreDestroy"></a>@PreDestroy</h3><p>容器移除对象之前调用，<code>@PostConstruct</code>和<code>@PreDestroy</code>都只能用在方法上</p>
<h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><ul>
<li><code>BeanPostProcessor</code>也称为Bean后置处理器，它是Spring中定义的接口，在Spring容器的创建过程中（具体为Bean初始化前后）会回调<code>BeanPostProcessor</code>中定义的两个方法。BeanPostProcessor的源码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中<code>postProcessBeforeInitialization</code>方法会在每一个bean对象的初始化方法调用之前回调；<code>postProcessAfterInitialization</code>方法会在每个bean对象的初始化方法调用之后被回调。</li>
</ul>
<h2 id="组件赋值"><a href="#组件赋值" class="headerlink" title="组件赋值"></a>组件赋值</h2><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>不通过配置文件的注入属性的情况，通过<code>@Value</code>将外部的值动态注入到Bean中</p>
<p>使用的情况有：</p>
<ol>
<li><p>基本数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;normal&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String normal; <span class="comment">// 注入普通字符串</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>可以写SpEL获取某个bean的属性：#{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;20-2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age; </span><br></pre></td></tr></table></figure>
</li>
<li><p>可以写${}注入配置文件的值</p>
</li>
</ol>
<p>通过@Value将外部配置文件的值动态注入到Bean中。配置文件主要有两类：</p>
<ul>
<li><code>application.properties</code>。application.properties在spring boot启动时默认加载此文件</li>
<li>自定义属性文件。自定义属性文件通过<code>@PropertySource</code>加载。@PropertySource可以同时加载多个文件，也可以加载单个文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 自己配置的参数</span><br><span class="line">savePath : &#x2F;Users&#x2F;a&#x2F;Desktop&#x2F;test998&#x2F;</span><br><span class="line">libraryPath : &#x2F;opt&#x2F;local&#x2F;share&#x2F;OpenCV&#x2F;java&#x2F;libopencv_java347.dylib</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TesseractOrcServiceImpl</span> <span class="keyword">implements</span> <span class="title">TesseractOrcService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;savePath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  String savePath ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p><code>@autowired</code>注释来源于英文单词 autowire,这个单词的意思是自动装配的意思。自动装配又是什么意思？这个词语本来的意思是指的一些工业上的用机器代替人口，自动将一些需要完成的组装任务，或者别的一些任务完成。而在 Spring 的世界当中，自动装配指的就是使用将 Spring 容器中的 bean 自动的和我们需要这个 bean 的类组装在一起。</p>
<p><code>@Autowired</code>是用在JavaBean中的注解，通过byType形式，用来给指定的字段或方法注入所需的外部资源</p>
<p>自动装备一定要将属性赋值好，没有就会报错。</p>
<p>默认情况下，<code>@Autowired</code>注释意味着依赖是必须的，它类似于<code>@Required</code>注释，然而，你可以使用<code>@Autowired</code>的 <strong>（required=false）</strong> 选项关闭默认行为。</p>
<p>即使你不为 age 属性传递任何参数，下面的示例也会成功运行，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Autowired(required=false)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Autowired</strong>可以标注在方法、参数、构造器、属性上，都是从容器中获取参数组件的值</p>
<p>标在构造器上，如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略</p>
<p>@Bean标注的方法创建对象的时候，方法参数的值从容器中获取</p>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 <strong>@Qualifier</strong> 注释和 <strong>@Autowired</strong> 注释通过指定哪一个真正的 bean 将会被装配来消除混乱。</p>
<h3 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h3><p>当一个接口有2个不同实现时,使用@Autowired注解时会报<code>org.springframework.beans.factory.NoUniqueBeanDefinitionException</code>异常信息。</p>
<p>Primary可以理解为默认优先选择,不可以同时设置多个,内部实质是设置BeanDefinition的primary属性</p>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@Primary</code></td>
<td align="left">优先方案，被注解的实现，优先被注入</td>
</tr>
<tr>
<td align="left"><code>@Qualifier</code></td>
<td align="left">先声明后使用，相当于多个实现起多个不同的名字，注入时候告诉我你要注入哪个</td>
</tr>
</tbody></table>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>可以和@Autowired一样实现自动装配，默认是按组件名称进行装配的</p>
<p>@Resource 注释使用一个 ‘name’ 属性，该属性以一个 bean 名称的形式被注入。你可以说，它遵循 <strong>by-name</strong> 自动连接语义</p>
<p>如果没有明确地指定一个 ‘name’，默认名称源于字段名或者 setter 方法。在字段的情况下，它使用的是字段名；在一个 setter 方法情况下，它使用的是 bean 属性名称。</p>
<h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><ul>
<li>@Inject是JSR330 (Dependency Injection for Java)中的规范，需要导入<code>javax.inject.Inject</code>;实现注入。</li>
<li>@Inject是根据<strong>类型</strong>进行自动装配的，如果需要按名称进行装配，则需要配合@Named；</li>
<li>@Inject可以作用在变量、setter方法、构造函数上。</li>
</ul>
<p><code>@Resource</code>,<code>@Autowired</code>,<code>@Inject</code>这3种都是用来注入bean的，它们属于不同的程序中。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8/autowiredpng.png" alt="img"></p>
<p>JSR是Java Specification Requests的缩写，意思是Java 规范提案。是指向JCP(Java Community Process)提出新增一个标准化技术规范的正式请求。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。</p>
<p><strong>@Resource</strong> 没有支持@Primary功能；没有支持@Autowired(required = false)；</p>
<p><strong>@Inject</strong> 需要导入javax.inject的包；没有支持@Autowired(required = false)；</p>
<h3 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h3><p>指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件</p>
<ol>
<li><p>加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中。默认是default环境</p>
</li>
<li><p>写在配置类上，只有是指定的环境的时候，整个配置类里面的所有配置才能开始生效</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;db.user&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String driverClass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;default&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">testDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String password)</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">	ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	dataSource.setUser(user);</span><br><span class="line">	dataSource.setPassword(password);</span><br><span class="line">	dataSource.setDriverClass(driverClass);</span><br><span class="line">	<span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;dev&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">devDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String password)</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">	ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	dataSource.setUser(user);</span><br><span class="line">	dataSource.setPassword(password);</span><br><span class="line">	dataSource.setDriverClass(driverClass);</span><br><span class="line">	<span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Profile(&quot;master&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;master&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span>String password)</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">	ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	dataSource.setUser(user);</span><br><span class="line">	dataSource.setPassword(password);</span><br><span class="line">	dataSource.setDriverClass(driverClass);</span><br><span class="line">	<span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>切换运行环境的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOCTestProfile</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1. 使用命令行动态参数：在虚拟机参数位置加载 -Dspring.profiles.active=test</span></span><br><span class="line">	<span class="comment">//2. 使用代码的方式激活某种环境；</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfProfile.class);</span><br><span class="line">		<span class="comment">//1. 创建一个applicationContext</span></span><br><span class="line">		<span class="comment">//2. 设置需要激活的环境</span></span><br><span class="line">		applicationContext.getEnvironment().setActiveProfiles(<span class="string">&quot;dev&quot;</span>,<span class="string">&quot;master&quot;</span>);</span><br><span class="line">		<span class="comment">//3. 注册主配置类</span></span><br><span class="line">		applicationContext.register(MainConfigOfProfile.class);</span><br><span class="line">		<span class="comment">//4. 启动刷新容器</span></span><br><span class="line">		applicationContext.refresh();</span><br><span class="line">		</span><br><span class="line">		String[] beanNamesForType = applicationContext.getBeanNamesForType(DataSource.class);</span><br><span class="line">		System.out.println(Arrays.toString(beanNamesForType));</span><br><span class="line">		</span><br><span class="line">		applicationContext.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h3><p>开启AOP功能</p>
<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h3><p>通过<code>@Pointcut</code>定义切入点</p>
<p>格式：<code>@Pointcut(value=“表达标签(表达式格式) ”)</code><br>如：<code>@Pointcut (value=“execution(* com.cn.spring.aspectj.NotVeryUsefulAspectService.*(…))”)</code></p>
<p><strong>表达式标签</strong></p>
<ul>
<li><code>execution()</code>：用于匹配方法执行的连接点</li>
<li><code>args()</code>: 用于匹配当前执行的方法传入的参数为指定类型的执行方法</li>
<li><code>this()</code>: 用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；</li>
<li><code>target()</code>: 用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；</li>
<li><code>within()</code>: 用于匹配指定类型内的方法执行；</li>
<li><code>@args()</code>:于匹配当前执行的方法传入的参数持有指定注解的执行；</li>
<li><code>@target()</code>:用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；</li>
<li><code>@within()</code>:用于匹配所以持有指定注解类型内的方法；</li>
<li><code>@annotation</code>:用于匹配当前执行方法持有指定注解的方法；</li>
</ul>
<p>其中<code>execution</code>是用的最多的，<code>execution</code>格式：</p>
<p><code>execution(modifier-pattern?  ret-type-pattern  declaring-type-pattern?  name-pattern(param-pattern)  throws-pattern?)</code><br>其中带<code>?</code>号的<code>modifiers-pattern?</code>，<code>declaring-type-pattern?</code>，<code>hrows-pattern?</code>是可选项<br><code>ret-type-pattern</code>，<code>name-pattern</code>， <code>parameters-pattern</code>是必选项；</p>
<ul>
<li><code>modifier-pattern?</code> <strong>修饰符匹配</strong>，如public 表示匹配公有方法</li>
<li><code>ret-type-pattern</code> <strong>返回值匹配</strong>，<code>*</code> 表示任何返回值，全路径的类名等</li>
<li><code>declaring-type-pattern?</code> 类路径匹配</li>
<li><code>name-pattern</code> 方法名匹配，<code>*</code>代表所有,<code>set*</code>代表以set开头的所有方法</li>
<li><code>(param-pattern)</code>参数匹配，指定方法参数(声明的类型),<br><code>(..)</code>代表所有参数,<br><code>(*)</code>代表一个参数,<br><code>(*,String)</code>代表第一个参数为任何值,第二个为String类型.</li>
<li><code>throws-pattern?</code> 异常类型匹配</li>
</ul>
<p><strong>例子</strong></p>
<ul>
<li>execution(public * *(..)) 定义任意公共方法的执行</li>
<li>execution(* set*(..)) 定义任何一个以”set”开始的方法的执行</li>
<li>execution(* com.xyz.service.AccountService.*(..)) 定义AccountService 接口的任意方法的执行</li>
<li>execution(* com.xyz.service.<em>.</em>(..)) 定义在service包里的任意方法的执行</li>
<li>execution(* com.xyz.service ..<em>.</em>(..)) 定义在service包和所有子包里的任意类的任意方法的执行</li>
<li>execution(* com.test.spring.aop.pointcutexp…JoinPointObjP2.*(…)) 定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：</li>
</ul>
<p><strong>AspectJ类型匹配的通配符：</strong></p>
<ul>
<li><code>*</code>匹配任何数量字符； </li>
<li><code>..</code>匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。</li>
<li><code>+</code>匹配指定类型的子类型；仅能作为后缀放在类型模式后边 。</li>
</ul>
<p>如：</p>
<ul>
<li><code>java.lang.String</code>匹配String类型；</li>
<li><code>java.*.String</code>匹配java包下的任何“一级子包”下的String类型；如匹配<code>java.lang.String</code>，但不匹配<code>java.lang.ss.String</code></li>
<li><code>java..*</code> 匹配java包及任何子包下的任何类型; 如匹配<code>java.lang.String</code>、<code>java.lang.annotation.Annotation</code></li>
<li><code>java.lang.*ing</code>匹配任何java.lang包下的以ing结尾的类型；</li>
<li><code>java.lang.Number+</code>匹配java.lang包下的任何Number的自类型；如匹配java.lang.Integer，也匹配java.math.BigIntege</li>
</ul>
<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a>@Aspect</h3><p> 定义切面类</p>
<h3 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h3><p>用@Before标识的方法为前置方法，在目标方法的执行之前执行，即在连接点之前进行执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;pointcut1()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出连接点的信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;前置通知，&quot;</span> + joinPoint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h3><p>后置方法在连接点方法完成之后执行，无论连接点方法执行成功还是出现异常，都将执行后置方法。</p>
<h3 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h3><p>当连接点方法成功执行后，返回通知方法才会执行，如果连接点方法出现异常，则返回通知方法不执行。返回通知方法在目标方法执行成功后才会执行，所以，返回通知方法可以拿到目标方法(连接点方法)执行后的结果。</p>
<h3 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h3><p>异常通知方法只在连接点方法出现异常后才会执行，否则不执行。在异常通知方法中可以获取连接点方法出现的异常。在切面类中异常通知方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pointcut1()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//发生异常之后输出异常信息</span></span><br><span class="line">    System.out.println(joinPoint + <span class="string">&quot;,发生异常：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h3><p>环绕通知方法可以包含上面四种通知方法，环绕通知的功能最全面。环绕通知需要携带<code>ProceedingJoinPoint</code>类型的参数，且环绕通知必须有返回值, 返回值即为目标方法的返回值。在切面类中创建环绕通知方法，示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(public int lzj.com.spring.aop.ArithmeticCalculator.*(int, int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pdj)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*result为连接点的放回结果*/</span></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        String methodName = pdj.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*前置通知方法*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知方法&gt;目标方法名：&quot;</span> + methodName + <span class="string">&quot;,参数为：&quot;</span> + Arrays.asList(pdj.getArgs()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*执行目标方法*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = pdj.proceed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*返回通知方法*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;返回通知方法&gt;目标方法名&quot;</span> + methodName + <span class="string">&quot;,返回结果为：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">/*异常通知方法*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知方法&gt;目标方法名&quot;</span> + methodName + <span class="string">&quot;,异常为：&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*后置通知*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知方法&gt;目标方法名&quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><h3 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h3><p>开启基于注解的事务管理功能</p>
<p>注解原理：</p>
<p><code>@EnableXXX</code>原理：注解上有个<code>XXXRegistrar</code>，或通过<code>XXXSelector</code>引入<code>XXXRegistrar</code>，<code>XXXRegistrar</code>实现了<br><code>ImportBeanDefinitionRegistrar</code>的<code>registerBeanDefinitions</code>方法，给容器注册<code>XXXCreator</code>。这个Creator实现了后置处理器， 后置处理器在对象创建以后，包装对象，返回一个代理对象，代理对象执行方法利用拦截器链进行调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* <span class="number">1</span>）、@EnableTransactionManagement</span><br><span class="line">*        利用TransactionManagementConfigurationSelector给容器中会导入组件</span><br><span class="line">*        导入两个组件</span><br><span class="line">*        AutoProxyRegistrar</span><br><span class="line">*        ProxyTransactionManagementConfiguration</span><br><span class="line">* <span class="number">2</span>）、AutoProxyRegistrar：</span><br><span class="line">*        给容器中注册一个 InfrastructureAdvisorAutoProxyCreator 组件；</span><br><span class="line">*        利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象（增强器），代理对象执行方法利用拦截器链进行调用；</span><br><span class="line">* <span class="number">3</span>）、ProxyTransactionManagementConfiguration是个@Configuration</span><br><span class="line">*        <span class="number">1</span>、给容器中注册事务增强器transactionAdvisor；</span><br><span class="line">*           <span class="number">1</span>）、事务增强器要用事务注解的信息，AnnotationTransactionAttributeSource解析事务注解</span><br><span class="line">*           <span class="number">2</span>）、事务拦截器transactionInterceptor：</span><br><span class="line">*              TransactionInterceptor；保存了事务属性信息，事务管理器；</span><br><span class="line">*              TransactionInterceptor是一个 MethodInterceptor；</span><br><span class="line">*              在目标方法执行的时候；</span><br><span class="line">*                 执行拦截器链；</span><br><span class="line">*                 只有事务拦截器：</span><br><span class="line">*                    <span class="number">1</span>）、先获取事务相关的属性</span><br><span class="line">*                    <span class="number">2</span>）、再获取PlatformTransactionManager，如果事先没有添加指定任何transactionmanger</span><br><span class="line">*                       最终会从容器中按照类型获取一个PlatformTransactionManager；</span><br><span class="line">*                    <span class="number">3</span>）、执行目标方法</span><br><span class="line">*                       如果异常，获取到事务管理器，利用事务管理回滚操作；</span><br><span class="line">*                       如果正常，利用事务管理器，提交事务</span><br></pre></td></tr></table></figure>



<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h3><p><code>@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</code>可以标注在类上，以及方法上</p>
<p><code>@Transactional</code>注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。<br>系统设计：将标签放置在需要进行事务管理的方法上，而不是放在所有接口实现类上：只读的接口就不需要事务管理，由于配置了<code>@Transactional</code>就需要AOP拦截及事务的处理，可能影响系统性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Transactional &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;transactionManager&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Propagation <span class="title">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Isolation <span class="title">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">timeout</span><span class="params">()</span> <span class="keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">	Class&lt;? extends Throwable&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	Class&lt;? extends Throwable&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>propagation属性</strong>：事务的传播行为，一个事务方法被另外一个事务方法调用时，当前的事务如何使用事务.，属性的内容主要先择在一下的Propagation的枚举类中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">1. TransactionDefinition.PROPAGATION_REQUIRED：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</span><br><span class="line"> </span><br><span class="line">2. TransactionDefinition.PROPAGATION_REQUIRES_NEW：</span><br><span class="line">   创建一个新的事务，如果当前存在事务，则把当前事务挂起。</span><br><span class="line"> </span><br><span class="line">3. TransactionDefinition.PROPAGATION_SUPPORTS：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</span><br><span class="line"> </span><br><span class="line">4. TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</span><br><span class="line">   以非事务方式运行，如果当前存在事务，则把当前事务挂起。</span><br><span class="line"> </span><br><span class="line">5. TransactionDefinition.PROPAGATION_NEVER：</span><br><span class="line">   以非事务方式运行，如果当前存在事务，则抛出异常。</span><br><span class="line"> </span><br><span class="line">6. TransactionDefinition.PROPAGATION_MANDATORY：</span><br><span class="line">   如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</span><br><span class="line"> </span><br><span class="line">7. TransactionDefinition.PROPAGATION_NESTED：</span><br><span class="line">   如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；</span><br><span class="line">   如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>isolation属性</strong>：事务的隔离级别，也在<code>org.springframework.transaction.annotation.Isolation</code>枚举类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Isolation</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/**数据库的默认级别*/</span></span><br><span class="line">	DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/**读未提交      脏读*/</span></span><br><span class="line">	READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/**读已提交  不可重复读（update）*/</span></span><br><span class="line">	READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/**可重复读      幻读（插入操作）*/</span></span><br><span class="line">	REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),</span><br><span class="line"> </span><br><span class="line">	<span class="comment">/** 串行化         效率低*/</span></span><br><span class="line">	SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line"> </span><br><span class="line">	Isolation(<span class="keyword">int</span> value) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.value; &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>timeout：事物的超时时间，设置事务在强制回滚之前可以占用的时间，默认为-1，不超时，单位为s（测试为单位s）</strong></p>
<p><strong>readOnly：是否只读</strong></p>
<ol>
<li><code>true</code>:  只读 ；代表着只会对数据库进行读取操作， 不会有修改的操作，如果确保当前的事务只有读取操作，就有必要设置为只读，可以帮助数据库，引擎优化事务</li>
<li><code>false</code>: 非只读  不仅会读取数据还会有修改操作</li>
</ol>
<h2 id="扩展原理"><a href="#扩展原理" class="headerlink" title="扩展原理"></a>扩展原理</h2><p><code>BeanFactoryPostProcessor</code>是<code>beanFactory</code>的后置处理器，在BeanFactory标准初始化之后调用，所有的bean定义已经保存加载到beanFactory，但是bean实例还未创建。</p>
<h3 id="BeanFactoryPostProcessor原理"><a href="#BeanFactoryPostProcessor原理" class="headerlink" title="BeanFactoryPostProcessor原理"></a>BeanFactoryPostProcessor原理</h3><ol>
<li><p>ioc容器创建对象</p>
</li>
<li><p>invokeBeanFactoryPostProcessors(beanFactory)</p>
<p>如何找到所有的<code>BeanFactoryPostProcessor</code>并执行他们的方法：</p>
</li>
</ol>
<p>1）直接在BeanFactory中找到所有类型是BeanFactoryPostProcessor的组件，并执行他们的方法</p>
<p>2）在初始化创建其他组件前面执行</p>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><p>BeanDefinitionRegistryPostProcessor extends BeanFactoryPostProcessor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Modify the application context&#x27;s internal bean definition registry after its</span></span><br><span class="line"><span class="comment">	 * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment">	 * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment">	 * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>postProcessBeanDefinitionRegistry()</code>；在所有bean定义信息将要被加载，bean实例还未创建的时候调用</p>
<p>优于<code>BeanFactoryPostProcessor</code>执行</p>
<p>利用<code>BeanDefinitionRegistryPostProcessor</code>给容器再额外添加一些组件</p>
<p>原理：</p>
<p>1）ioc创建对象</p>
<p>2）refresh() -》invokeBeanFactoryPostProcessors(beanFactory)</p>
<p>3）从容器或获取到所有的BeanDefinitionRegistryPostProcessor组件。依次触发所有的postProcessBeanDefinitionRegistry()方法 ，再触发postProcessBeanFactory方法BeanFactoryPostProcessor</p>
<p>4）再从容器中找到BeanFactoryPostProcessor组件，然后依次触发postProcessBeanFactory()方法</p>
<h3 id="ApplicationListener"><a href="#ApplicationListener" class="headerlink" title="ApplicationListener"></a>ApplicationListener</h3><p><code>ApplicationListener</code>：监听容器中发布的事件。事件驱动模型开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>监听ApplicationEvent及其下面的子事件</p>
<p>步骤：</p>
<p>1）写一个监听器来监听某个事件（ApplicationEvent及其子类）</p>
<p>2）把监听器加入到容器中</p>
<p>3）只要容器中有相关的事件发布，我们就能监听到这个事件</p>
<p>​        <code>ContextRefreshedEvent</code>：容器刷新完成（所有Bean都完全创建）会发布这个事件</p>
<p>​        <code>ContextClosedEvent</code>：关闭容器会发布这个事件</p>
<p>4）发布一个事件：</p>
<p>​        <code>applicationContext.publishEvent();</code></p>
]]></content>
      <categories>
        <category>Spring注解</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring核心基础</title>
    <url>/2021/10/22/Spring-%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Spring-Bean命名策略"><a href="#Spring-Bean命名策略" class="headerlink" title="Spring Bean命名策略"></a>Spring Bean命名策略</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>当我们有多个相同类型的实现时，命名<code>Spring bean</code>非常有用。这是因为如果我们的 bean 没有唯一的名称，Spring 将不明确注入 bean。</p>
<p>通过控制 bean 的命名，我们可以告诉 Spring 我们要将哪个 bean 注入目标对象。</p>
<p>在本文中，我们将讨论 Spring bean 命名策略，并探讨如何为单一类型的 bean 赋予多个名称。</p>
<h2 id="默认-Bean-命名策略"><a href="#默认-Bean-命名策略" class="headerlink" title="默认 Bean 命名策略"></a>默认 Bean 命名策略</h2><p>Spring为创建 bean提供了多个注解。我们可以在不同级别使用这些注解。例如，我们可以在 bean 类上放置一些注解，而在创建 bean 的方法上放置其他注解。</p>
<p>首先，让我们看看 Spring 的默认命名策略。当我们只指定注解而没有任何值时，Spring 如何命名我们的 bean？</p>
<h3 id="类级注解"><a href="#类级注解" class="headerlink" title="类级注解"></a>类级注解</h3><p>让我们从在类级别使用的注解的默认命名策略开始。为了给 bean 命名，<span style="color:#b30049;font-weight: bold">Spring 使用类名并将第一个字母转换为小写</span>。</p>
<p>我们来看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，Spring 为<code>LoggingService</code>类创建了一个 bean，并使用名称<code>loggingService</code>注册它。</p>
<p>这个相同的默认命名策略适用于用于创建 Spring bean 的所有类级注解，例如<span style="color:blue;font-weight:bold">@Component</span>、<span style="color:blue;font-weight:bold">@Service</span>和<span style="color:blue;font-weight:bold">@Controller</span>。</p>
<h3 id="方法级注解"><a href="#方法级注解" class="headerlink" title="方法级注解"></a>方法级注解</h3><p>Spring 提供了诸如<code>@Bean</code>和<code>@Qualifier</code>之类的注解，用于在方法上创建 bean 。</p>
<p>让我们看一个例子来理解<code>@Bean</code>注解的默认命名策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuditConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuditService <span class="title">audit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> AuditService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个配置类中，Spring在名称“ <em>audit</em> ”下注册了一个<code>AuditService</code>类型的 bean，<strong>因为当我们在方法上使用@Bean注解时，Spring 使用方法名称作为 bean 名称。</strong></p>
<p>我们也可以在方法上使用<code>@Qualifier</code>注解。</p>
<h2 id="Bean-的自定义命名"><a href="#Bean-的自定义命名" class="headerlink" title="Bean 的自定义命名"></a>Bean 的自定义命名</h2><p>当我们需要在同一个 Spring 上下文中创建多个相同类型的 bean 时，我们可以为 bean 指定自定义名称并使用这些名称引用它们。</p>
<p>那么，让我们看看如何为我们的 Spring bean 指定一个自定义名称：</p>
<h3 id="类级注解-1"><a href="#类级注解-1" class="headerlink" title="类级注解"></a>类级注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomComponent</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一次，Spring 将创建名为“ <em>myBean</em> ”的<em>MyCustomComponent</em>类型的 bean 。</p>
<p>由于我们明确地为 bean 指定名称，Spring 将使用此名称，然后可以使用该名称来引用或访问 bean。</p>
<p>与<code>@Component(“myBean”)</code>类似，我们可以使用<code>@Service(“myService”)</code>、<code>@Controller(“myController”)</code>和<code>@Bean(“myCustomBean”)</code>等其他注解指定名称，然后Spring 会注册具有给定名称的那个 bean。</p>
<h3 id="方法级注解-1"><a href="#方法级注解-1" class="headerlink" title="方法级注解"></a>方法级注解</h3><p>正如我们之前看到的，<code>@Bean</code>注解是在方法级别应用的，默认情况下，Spring 使用方法名称作为 bean 名称。</p>
<p>这个默认的 bean 名称可以被覆盖——我们可以使用<code>@Bean</code>注解指定值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class MyConfiguration &#123;</span><br><span class="line">    @Bean(&quot;beanComponent&quot;)</span><br><span class="line">    public MyCustomComponent myComponent() &#123;</span><br><span class="line">        return new MyCustomComponent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，当我们想要获取一个<em>MyCustomComponent</em>类型的 bean 时，我们可以使用名称“ <em>beanComponent</em> ”来引用这个 bean 。</p>
<p>Spring <code>@Bean</code>注解通常在配置类方法中声明。它可以通过直接调用来引用同一个类中的其他<code>@Bean</code>方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/beannamestrategy.png"></p>
<hr>
<h1 id="Spring-ApplicationContext"><a href="#Spring-ApplicationContext" class="headerlink" title="Spring ApplicationContext"></a>Spring ApplicationContext</h1><h2 id="ApplicationContext接口"><a href="#ApplicationContext接口" class="headerlink" title="ApplicationContext接口"></a><em>ApplicationContext</em>接口</h2><p>Spring 框架的主要特性之一是<code>IoC</code>（控制反转）容器。在Spring <code>IoC</code>容器负责管理应用程序的对象。它使用依赖注入来实现控制反转。</p>
<p><code>BeanFactory</code>和<code>ApplicationContext</code> 接口<strong>代表 Spring IoC 容器</strong>。在这里，<code>BeanFactory</code>是访问 Spring 容器的根接口。它提供了管理 bean 的基本功能。</p>
<p>另一方面，<code>ApplicationContext</code> 是<code>BeanFactory</code>的子接口。因此，它提供了<code>BeanFactory</code>的<em>所有功能</em>。</p>
<p>此外，它还<strong>提供了</strong> <strong>更多特定于企业的功能</strong>。<code>ApplicationContext</code>的重要特性是<strong>解析消息、支持国际化、发布事件和应用层特定上下文</strong>。这就是我们将其用作默认 Spring 容器的原因。</p>
<h2 id="在容器中配置Bean"><a href="#在容器中配置Bean" class="headerlink" title="在容器中配置Bean"></a>在容器中配置Bean</h2><p>正如我们所知，<code>ApplicationContext</code>的主要工作是管理 bean。</p>
<p>因此，应用程序必须向<code>ApplicationContext容器</code>提供 bean 配置。一个 Spring bean 配置由一个或多个 bean 定义组成。此外，Spring 支持不同的 bean 配置方式。</p>
<h3 id="基于-Java-的配置"><a href="#基于-Java-的配置" class="headerlink" title="基于 Java 的配置"></a>基于 Java 的配置</h3><p>首先，我们将从基于 Java 的配置开始，因为它是最新和最受欢迎的 bean 配置方式。它从 Spring 3.0 开始可用。</p>
<p>Java 配置通常在<code>@Configuration</code>类中使用带有 @Bean 注解的方法<em>。方法上的</em>@Bean<em>注解表明该方法创建了一个 Spring bean。此外，用</em><code>@Configuration</code>注解的类表示它包含Spring bean 配置。</p>
<p>现在让我们创建一个配置类来将我们的<code>AccountService</code>类定义为 Spring bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AccountService <span class="title">accountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountService(accountRepository());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> AccountRepository <span class="title">accountRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountRepository();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h3><p>Spring 2.5 引入了基于注解的配置，作为在 Java 中启用 bean 配置的第一步。</p>
<p>在这种方法中，我们首先通过<code>XML</code>配置启用基于注解的配置。然后我们在 Java 类、方法、构造函数或字段上使用一组注解来配置 bean。这些注解的一些示例是<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Autowired</code>和<code>@Qualifier</code>。</p>
<p>值得注意的是，我们也将这些注解用于基于 Java 的配置。另外值得一提的是，Spring 会在每个版本中不断为这些注解添加更多功能。</p>
<p>现在让我们看一个这个配置的简单例子。</p>
<p>首先，我们将创建 XML 配置<code>user-bean-config.xml</code>以启用注解：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.baeldung.applicationcontext&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里，该注解的配置标签启用基于注解的映射。该<em>组件扫描</em>标签也告诉Spring到哪里寻找注解类。</p>
<p>其次，我们将创建<em>UserService</em>类并使用<code>@Component</code>注解将其定义为 Spring bean ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="comment">// user service code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于-XML-的配置"><a href="#基于-XML-的配置" class="headerlink" title="基于 XML 的配置"></a>基于 XML 的配置</h3><p>最后，让我们看一下基于 XML 的配置。这是在 Spring 中配置 bean 的传统方式。</p>
<p>显然，在这种方法中，我们<strong>在一个 XML 配置文件中</strong>完成所有<strong>bean 映射</strong>。</p>
<p>因此，让我们创建一个 XML 配置文件<code>account-bean-config.xml</code>，并为我们的<em>AccountService</em>类定义 bean ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	  </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baeldung.applicationcontext.AccountService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;accountRepository&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountRepository&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountRepository&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baeldung.applicationcontext.AccountRepository&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ApplicationContext-的类型"><a href="#ApplicationContext-的类型" class="headerlink" title="ApplicationContext 的类型"></a><em>ApplicationContext 的</em>类型</h2><p>Spring 提供了适合不同需求的不同类型的<code>ApplicationContext</code>容器。这些是<code>ApplicationContext</code>接口的实现。那么让我们来看看<code>ApplicationContext</code> 的一些常见类型。</p>
<h3 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a><em>AnnotationConfigApplicationContext</em></h3><p>首先我们来看一下Spring 3.0中引入的<code>AnnotationConfigApplicationContext</code>类。它可以采取与注解的类<code>@Configuration</code>，<code>@Component</code>，和JSR-330的元数据作为输入。从Java的配置类中加载上下文定义。</p>
<p>因此，让我们看一个使用<code>AnnotationConfigApplicationContext</code>容器和基于 Java 的配置的简单示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AccountConfig.class);</span><br><span class="line">AccountService accountService = context.getBean(AccountService.class);</span><br></pre></td></tr></table></figure>

<h3 id="AnnotationConfigWebApplicationContext"><a href="#AnnotationConfigWebApplicationContext" class="headerlink" title="AnnotationConfigWebApplicationContext"></a><em>AnnotationConfigWebApplicationContext</em></h3><p>适用于 Web 应用下xml文件中加载上下文，使用注解方式加载上下文</p>
<p>当我们 在<code>web.xml</code>文件中配置 Spring 的<code>ContextLoaderListener servlet</code>侦听器或<code>Spring MVC DispatcherServlet</code>时，我们可能会使用这个类。</p>
<p>此外，从 Spring 3.0 开始，我们还可以通过编程方式配置这个应用程序上下文容器。我们需要做的就是实现<code>WebApplicationInitializer</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">    context.register(AccountConfig.class);</span><br><span class="line">    context.setServletContext(container);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// servlet configuration</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XmlWebApplicationContext"><a href="#XmlWebApplicationContext" class="headerlink" title="XmlWebApplicationContext"></a><em>XmlWebApplicationContext</em></h3><p>如果我们<strong>在 Web 应用程序中</strong>使用<strong>基于 XML 的配置</strong>，我们可以使用<code>XmlWebApplicationContext</code>类。</p>
<p>事实上，配置这个容器就像<code>AnnotationConfigWebApplicationContext</code>类，也就是说我们可以在<code>web.xml</code>中<em>配置它</em>， 或者实现<code>WebApplicationInitializer</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyXmlWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext container)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    XmlWebApplicationContext context = <span class="keyword">new</span> XmlWebApplicationContext();</span><br><span class="line">    context.setConfigLocation(<span class="string">&quot;/WEB-INF/spring/applicationContext.xml&quot;</span>);</span><br><span class="line">    context.setServletContext(container);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Servlet configuration</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FileSystemXMLApplicationContext"><a href="#FileSystemXMLApplicationContext" class="headerlink" title="FileSystemXMLApplicationContext"></a><em>FileSystemXMLApplicationContext</em></h3><p>我们使用<code>FileSystemXMLApplicationContext</code>类<strong>从文件系统</strong>或 URL<strong>加载基于 XML 的 Spring 配置文件</strong>。当我们需要以编程方式加载<code>ApplicationContext</code>时，这个类很有用。一般来说，测试工具和独立应用程序是一些可能的用例。</p>
<p>例如，让我们看看如何创建这个 Spring 容器并为基于 XML 的配置加载 bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path = <span class="string">&quot;C:/myProject/src/main/resources/applicationcontext/account-bean-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(path);</span><br><span class="line">AccountService accountService = context.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br></pre></td></tr></table></figure>

<h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a><em>ClassPathXmlApplicationContext</em></h3><p>如果我们想<strong>从 classpath 加载 XML 配置文件</strong>，我们可以使用<code>ClassPathXmlApplicationContext</code>类。与<em>FileSystemXMLApplicationContext</em>类似<em>，</em>它对于测试工具以及嵌入在 JAR 中的应用程序上下文很有用。</p>
<p>那么让我们看一个使用这个类的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationcontext/account-bean-config.xml&quot;</span>);</span><br><span class="line">AccountService accountService = context.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="BeanFactory-和-ApplicationContext-的区别"><a href="#BeanFactory-和-ApplicationContext-的区别" class="headerlink" title="BeanFactory 和 ApplicationContext 的区别"></a>BeanFactory 和 ApplicationContext 的区别</h1><p>Spring 框架带有两个 IOC 容器—— <code>BeanFactory</code>和<code>ApplicationContext</code>。该<em>Bean工厂</em>是IOC容器的最基本的版本，以及<em>ApplicationContext的</em>扩展的功能<em>Bean工厂</em>。</p>
<p>我们将通过实际示例了解这两个 IOC 容器之间的显着差异。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/spring%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80/beanfactoryand%20context.png"></p>
<p>该<code>ApplicationContext</code>的带有先进的功能，包括正朝着企业应用面向好几个，而<em>Bean工厂</em>仅预装了基本功能。因此，通常建议使用<code>ApplicationContext</code>的，并且<strong>只有当内存消耗是至关重要的时候，我们才应该使用Bean工厂</strong>。</p>
<h1 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h1><p>在这篇文章中，我们将看到<code>@ComponentScan</code>注解可用的不同类型的过滤器选项 。</p>
<h2 id="ComponentScan过滤器"><a href="#ComponentScan过滤器" class="headerlink" title="@ ComponentScan过滤器"></a>@ <em>ComponentScan</em>过滤器</h2><p>默认情况下，使用<code>@Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>注解的<em>类</em>被注册为Spring beans。对于使用<code>@Component</code>注解的自定义注解的<em>类也是如此</em>。我们可以通过使用<code>@ComponentScan</code>注解的<code>includeFilters</code>和 <code>excludeFilters</code>参数 来扩展此行为。</p>
<p><strong>ComponentScan.Filter有五种类型的过滤器：</strong></p>
<ul>
<li><code>ANNOTATION</code>   按照注解过滤</li>
<li><code>ASSIGNABLE_TYPE</code>  按照给定的类型</li>
<li><code>ASPECTJ</code>  使用ASPECTJ表达式</li>
<li><code>REGEX</code>  正则表达式</li>
<li><code>CUSTOM</code>  自定义规则</li>
</ul>
<h2 id="FilterType-ANNOTATION"><a href="#FilterType-ANNOTATION" class="headerlink" title="FilterType.ANNOTATION"></a><em>FilterType.ANNOTATION</em></h2><p>例如，假设我们有一个<code>@Animal</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Animal &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>现在，让我们定义一个 使用*@Animal<em>的</em>Elephant*类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Animal</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elephant</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>最后，让我们使用<code>FilterType.ANNOTATION</code>告诉 Spring 扫描 <code>@Animal</code> 注解的<em>类：扫描仪很好地拾取了我们的</em>Elephant</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">        classes = Animal.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanAnnotationFilterApp</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="FilterType-ASSIGNABLE-TYPE"><a href="#FilterType-ASSIGNABLE-TYPE" class="headerlink" title="FilterType.ASSIGNABLE_TYPE"></a><em>FilterType.ASSIGNABLE_TYPE</em></h2><p>首先，让我们声明<em>Animal</em> 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>再一次，让我们声明我们的<em>Elephant</em>类，这次实现<em>Animal</em>接口<em>：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elephant</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>让我们声明我们的<em>Cat</em>类也实现了<em>Animal：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>现在，让我们使用<em>ASSIGNABLE_TYPE</em>来引导 Spring 扫描<em>Animal</em>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,</span></span><br><span class="line"><span class="meta">        classes = Animal.class))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanAssignableTypeFilterApp</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p><em>Cat</em>和<em>Elephant 都</em>被扫描到。</p>
<h2 id="FilterType-REGEX"><a href="#FilterType-REGEX" class="headerlink" title="FilterType.REGEX"></a><em>FilterType.REGEX</em></h2><p>再一次，让我们声明我们的<em>Elephant</em>类。这次没有实现任何接口或使用任何注解进行注解<em>：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elephant</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>让我们再声明一个类<em>Cat</em>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>现在，让我们声明<em>Loin</em>类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Loin</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>让我们使用<em>FilterType</em>。<em>REGEX</em>指示 Spring 扫描与正则表达式<code>.*[nt]</code>匹配的类<em>。</em>我们的正则表达式计算所有包含<em>nt 的内容：</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.REGEX,</span></span><br><span class="line"><span class="meta">        pattern = &quot;.*[nt]&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanRegexFilterApp</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>这次在我们的测试中，我们将看到 Spring 扫描<em>Elephant</em>，而不是<em>Lion</em> <em>：</em></p>
<h2 id="FilterType-ASPECTJ"><a href="#FilterType-ASPECTJ" class="headerlink" title="FilterType.ASPECTJ"></a><em>FilterType.ASPECTJ</em></h2><p>对于这个用例，我们可以重用与上一节相同的三个类。</p>
<p>让我们使用<code>FilterType.ASPECTJ</code>来指示 Spring 扫描与我们的<em>AspectJ</em>表达式匹配的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ASPECTJ,</span></span><br><span class="line"><span class="meta">  pattern = &quot;com.baeldung.componentscan.filter.aspectj.* &quot;</span></span><br><span class="line"><span class="meta">  + &quot;&amp;&amp; !(com.baeldung.componentscan.filter.aspectj.L* &quot;</span></span><br><span class="line"><span class="meta">  + &quot;|| com.baeldung.componentscan.filter.aspectj.C*)&quot;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentScanAspectJFilterApp</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>虽然有点复杂，但我们这里的逻辑希望 bean 的类名中既不以“L”也不以“C”开头，因此我们又得到了<em>Elephant</em> s</p>
<hr>
<h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><h2 id="Autowire-消除歧义的需要"><a href="#Autowire-消除歧义的需要" class="headerlink" title="Autowire 消除歧义的需要"></a>Autowire 消除歧义的需要</h2><p>当需要自动注入特定精确的Bean时，<code>@Autowire</code>是一种很好的方式，尽管它很有用，但在某些用例中，仅此注解不足以让 Spring 了解要注入哪个 bean。</p>
<p><strong>默认情况下，Spring 按类型解析自动装配的条目。</strong></p>
<p><strong>如果容器中有多个相同类型的 bean，则框架将抛出NoUniqueBeanDefinitionException</strong>， 表明有多个 bean 可用于自动装配。</p>
<p>让我们想象这样一种情况，其中 Spring 存在两个可能的候选者作为 bean 协作者注入给定实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;fooFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;barFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Formatter formatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们尝试将<em>FooService</em>加载到我们的上下文中，Spring 框架将抛出一个<code>NoUniqueBeanDefinitionException</code>。这是因为<strong>Spring 不知道要注入哪个 bean</strong>。为了避免这个问题，有几种解决方案；该<code>@Qualifier</code>注解就是其中之一。</p>
<h2 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@ Qualifier注解"></a>@ <em>Qualifier</em>注解</h2><p>通过使用<code>@Qualifier</code>注解，我们可以<strong>消除需要注入哪个bean的问题</strong>。</p>
<p>让我们回顾一下之前的示例，看看我们如何通过包含*@Qualifier*注解来指示我们要使用哪个 bean 来解决问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;fooFormatter&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Formatter formatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过包含*@Qualifier<em>注解，连同我们想要使用的具体实现的名称，在这个例子中为</em>Foo，*我们可以避免当 Spring 找到多个相同类型的 bean 时产生歧义。</p>
<p>我们需要<strong>考虑到要使用的限定符名称是@Component注解中声明的名称。</strong></p>
<p>请注意，我们也可以在<em>Formatter</em>实现类上使用<code>@Qualifier</code>注解，而不是在它们的<code>@Component</code>注解中指定名称，以获得相同的效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;fooFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;barFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BarFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Qualifier-VS-Primary"><a href="#Qualifier-VS-Primary" class="headerlink" title="@Qualifier VS @Primary"></a><em>@Qualifier</em> VS <em>@Primary</em></h2><p>还有另一个名为<code>@Primary</code>的注解 ，当依赖注入存在歧义时，我们可以使用它来决定注入哪个 bean。</p>
<p><strong>当存在多个相同类型的 bean 时，</strong>此注解<strong>定义了一个首选项</strong>。除非另有说明，否则将使用与@Primary注解关联的 bean 。</p>
<p>让我们看一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">johnEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Employee(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">tonyEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Employee(<span class="string">&quot;Tony&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此示例中，两种方法都返回相同的<em>Employee</em>类型。Spring 将注入的 bean 是<em>tonyEmployee</em>方法返回的<em>bean</em>。这是因为它包含<code>@Primary</code>注解。当我们想要<strong>指定默认情况下应该注入哪个特定类型的 bean</strong>时，此注解很有用。</p>
<p>如果我们在某个注入时需要另一个 bean，我们需要特别指出它。我们可以通过*@Qualifier<em>注解来做到这一点。例如，我们可以通过使用</em>@Qualifier<em>注解来指定我们要使用</em>johnEmployee*方法返回的 bean 。</p>
<p>值得注意的是，<strong>如果@Qualifier和@Primary注解都存在，那么@Qualifier注解将具有优先权。</strong>基本上，<code>@Primary</code>定义了一个默认值，而<code>@Qualifier</code>则非常具体。</p>
<hr>
<h1 id="理解-Spring-中的-getBean"><a href="#理解-Spring-中的-getBean" class="headerlink" title="理解 Spring 中的 getBean()"></a>理解 Spring 中的 getBean()</h1><p>我们将介绍<code>BeanFactory.getBean()</code>方法的不同变体。</p>
<p>简而言之，正如该方法的名称所暗示的那样，<strong>它负责从 Spring 容器中检索 bean 实例</strong>。</p>
<h2 id="Spring-Beans-设置"><a href="#Spring-Beans-设置" class="headerlink" title="Spring Beans 设置"></a>Spring Beans 设置</h2><p>首先，让我们定义几个 Spring bean 进行测试。我们可以通过多种方式为 Spring 容器提供 bean 定义，但在我们的示例中，我们将使用基于注解的 Java 配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &#123;&quot;tiger&quot;, &quot;kitty&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@Scope(value = &quot;prototype&quot;)</span></span><br><span class="line">    <span class="function">Tiger <span class="title">getTiger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Tiger(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;lion&quot;)</span></span><br><span class="line">    <span class="function">Lion <span class="title">getLion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Lion(<span class="string">&quot;Hardcoded lion name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们已经创建了两个 bean。<em>Lion</em>具有默认的单例范围。<em>Tiger</em>明确设置为原型范围。此外，请注意，我们为将在进一步请求中使用的每个 bean 定义了名称。</p>
<h2 id="getBean-API"><a href="#getBean-API" class="headerlink" title="getBean() API"></a><em>getBean()</em> API</h2><p><em>BeanFactory</em>提供了<code>getBean()</code>方法的<code>五种</code>不同签名</p>
<h3 id="按名称检索-Bean"><a href="#按名称检索-Bean" class="headerlink" title="按名称检索 Bean"></a>按名称检索 Bean</h3><p>让我们看看如何使用名称检索<em>Lion</em> bean 实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object lion = context.getBean(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertEquals(Lion.class, lion.getClass());</span><br></pre></td></tr></table></figure>

<p>在这个变体中，我们提供一个名称，作为回报，如果应用程序上下文中存在具有给定名称的 bean ，我们将获得一个<em>Object</em> 类的实例。否则，如果 bean 查找失败，则此实现和所有其他实现都将抛出<code>NoSuchBeanDefinitionException</code>。</p>
<p>主要的缺点是<strong>在检索 bean 后，我们必须将其强制转换为所需的类型</strong>如果返回的 bean 的类型与我们预期的不同，这可能会产生另一个异常。</p>
<h3 id="按名称和类型检索-Bean"><a href="#按名称和类型检索-Bean" class="headerlink" title="按名称和类型检索 Bean"></a>按名称和类型检索 Bean</h3><p>这里我们需要指定请求的 bean 的名称和类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lion lion = context.getBean(<span class="string">&quot;lion&quot;</span>, Lion.class);</span><br></pre></td></tr></table></figure>

<p>与前一种方法相比，这种方法更安全，因为我们可以立即获取有关类型不匹配的信息。</p>
<h3 id="按类型检索-Bean"><a href="#按类型检索-Bean" class="headerlink" title="按类型检索 Bean"></a>按类型检索 Bean</h3><p>使用<code>getBean()</code>的第三个变体， 仅指定 bean 类型就足够了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lion lion = context.getBean(Lion.class);</span><br></pre></td></tr></table></figure>

<p>在这种情况下，我们需要<strong>特别注意一个潜在的模棱两可的结果</strong></p>
<p>在上面的示例中，由于<em>Lion</em>和<em>Tiger 都</em>实现了<em>Animal</em>接口，因此仅指定类型不足以明确确定结果。因此，我们得到一个<code>NoUniqueBeanDefinitionException</code>。</p>
<h3 id="使用构造函数参数按名称检索-Bean"><a href="#使用构造函数参数按名称检索-Bean" class="headerlink" title="使用构造函数参数按名称检索 Bean"></a>使用构造函数参数按名称检索 Bean</h3><p>除了 bean 名称，我们还可以传递构造函数参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tiger tiger = (Tiger) context.getBean(<span class="string">&quot;tiger&quot;</span>, <span class="string">&quot;Siberian&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>这个方法有点不同，因为它只适用于具有原型作用域的 bean</strong>。</p>
<p>在单例的情况下，我们将得到一个<em>BeanDefinitionStoreException</em></p>
<p>因为原型 bean 每次从应用程序容器请求时都会返回一个新创建的实例，所以我们可以在调用<code>getBean()</code>时 <strong>即时提供构造函数参数</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tiger tiger = (Tiger) context.getBean(<span class="string">&quot;tiger&quot;</span>, <span class="string">&quot;Siberian&quot;</span>);</span><br><span class="line">Tiger secondTiger = (Tiger) context.getBean(<span class="string">&quot;tiger&quot;</span>, <span class="string">&quot;Striped&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertEquals(<span class="string">&quot;Siberian&quot;</span>, tiger.getName());</span><br><span class="line">assertEquals(<span class="string">&quot;Striped&quot;</span>, secondTiger.getName());</span><br></pre></td></tr></table></figure>

<p>正如我们所见，根据我们在请求 bean 时指定为第二个参数的内容，每个<em>Tiger</em>获得不同的名称。</p>
<h3 id="使用构造函数参数按类型检索-Bean"><a href="#使用构造函数参数按类型检索-Bean" class="headerlink" title="使用构造函数参数按类型检索 Bean"></a>使用构造函数参数按类型检索 Bean</h3><p>这个方法类似于最后一个，但我们需要传递类型而不是名称作为第一个参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tiger tiger = context.getBean(Tiger.class, <span class="string">&quot;Shere Khan&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertEquals(<span class="string">&quot;Shere Khan&quot;</span>, tiger.getName());</span><br></pre></td></tr></table></figure>

<p>与使用构造函数参数按名称检索 bean 类似，<strong>此方法仅适用于具有原型范围的 bean</strong>。</p>
<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><div class="note no-icon danger"><p>尽管在<em>BeanFactory</em>接口中定义了<em>getBean()<em>方法，但它最常通过</em>ApplicationContext</em>访问<em>。</em>通常，我们不想在我们的程序中直接使用getBean()方法。</p>
<p>Bean 应该由容器管理。如果我们想使用其中之一，我们应该依赖依赖注入而不是直接调用<em>ApplicationContext.getBean()</em> <em>。</em>这样，我们就可以避免将应用程序逻辑与框架相关的细节混合在一起。</p>
</div>

<hr>
<h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h1><p><strong>简单地说，我们可以使用@RequestParam从请求中提取查询参数、表单参数甚至文件。</strong></p>
<h2 id="一个简单的映射"><a href="#一个简单的映射" class="headerlink" title="一个简单的映射"></a><strong>一个简单的映射</strong></h2><p>假设我们有一个端点<code>/api/foos</code>，它接受一个名为<code>id</code>的查询参数 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoos</span><span class="params">(<span class="meta">@RequestParam</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们使用<code>@RequestParam</code>来提取<code>id</code>查询参数。</p>
<p>一个简单的 GET 请求将调用<em>getFoos</em>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos?id=abc</span><br><span class="line">----</span><br><span class="line">ID: abc</span><br></pre></td></tr></table></figure>

<p>接下来，<strong>让我们看看注解的属性：name、 value、required和defaultValue。</strong></p>
<h2 id="指定请求参数名称"><a href="#指定请求参数名称" class="headerlink" title="指定请求参数名称"></a><strong>指定请求参数名称</strong></h2><p>幸运的是，<strong>我们可以使用name属性配置@RequestParam名称</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addFoo</span><span class="params">(<span class="meta">@RequestParam(name = &quot;id&quot;)</span> String fooId, <span class="meta">@RequestParam</span> String name)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + fooId + <span class="string">&quot; Name: &quot;</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们也可以做 <code>@RequestParam(value = “id”)</code>或者只是<code>@RequestParam(“id”)</code>。</p>
<h2 id="可选的请求参数"><a href="#可选的请求参数" class="headerlink" title="可选的请求参数"></a><strong>可选的请求参数</strong></h2><p>默认用<code>@RequestParam</code>注解的方法参数 是必须的。</p>
<p>这意味着如果请求中不存在该参数，我们将收到错误消息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /api/foos HTTP/1.1</span><br><span class="line">-----</span><br><span class="line">400 Bad Request</span><br><span class="line">Required String parameter <span class="string">&#x27;id&#x27;</span> is not present</span><br></pre></td></tr></table></figure>

<p><strong>使用required 属性将@RequestParam配置为可选：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoos</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String id)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，两者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos?id=abc</span><br><span class="line">----</span><br><span class="line">ID: abc</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos</span><br><span class="line">----</span><br><span class="line">ID: null</span><br></pre></td></tr></table></figure>

<p>将正确调用该方法。</p>
<p><strong>当未指定参数时，方法参数绑定到null。</strong></p>
<h2 id="请求参数的默认值"><a href="#请求参数的默认值" class="headerlink" title="请求参数的默认值"></a><strong>请求参数的默认值</strong></h2><p>我们还可以 使用<em>defaultValue</em>属性为<code>@RequestParam</code>设置默认值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoos</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;test&quot;)</span> String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这就像required=false， 因为用户不再需要提供参数</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos</span><br><span class="line">----</span><br><span class="line">ID: <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>尽管如此，我们仍然可以提供它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos?id=abc</span><br><span class="line">----</span><br><span class="line">ID: abc</span><br></pre></td></tr></table></figure>

<p>请注意，当我们设置 <em>defaultValue</em> 属性时， <em>required</em>确实设置为<em>false</em>。</p>
<h2 id="映射所有参数"><a href="#映射所有参数" class="headerlink" title="映射所有参数"></a><strong>映射所有参数</strong></h2><p><strong>我们也可以有多个参数，而无需定义它们的名称</strong>或计数，只需使用<em>Map</em>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateFoos</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,String&gt; allParams)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Parameters are &quot;</span> + allParams.entrySet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将反映发送的任何参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST -F <span class="string">&#x27;name=abc&#x27;</span> -F <span class="string">&#x27;id=123&#x27;</span> http://localhost:8080/api/foos</span><br><span class="line">-----</span><br><span class="line">Parameters are &#123;[name=abc], [id=123]&#125;</span><br></pre></td></tr></table></figure>

<h2 id="映射多值参数"><a href="#映射多值参数" class="headerlink" title="映射多值参数"></a><strong>映射多值参数</strong></h2><p>单个<code>@RequestParam</code>可以有多个值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/api/foos&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFoos</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;IDs are &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Spring MVC 将映射一个逗号分隔的 id 参数</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos?id=1,2,3</span><br><span class="line">----</span><br><span class="line">IDs are [1,2,3]</span><br></pre></td></tr></table></figure>

<p><strong>或单独的id参数列表</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/api/foos?id=1&amp;id=2</span><br><span class="line">----</span><br><span class="line">IDs are [1,2]</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Component-vs-Repository-和-Service-在-Spring-中区别"><a href="#Component-vs-Repository-和-Service-在-Spring-中区别" class="headerlink" title="@Component vs @Repository 和 @Service 在 Spring 中区别"></a>@Component vs @Repository 和 @Service 在 Spring 中区别</h1><p>在大多数典型的应用程序中，我们有不同的层，如数据访问、表示、服务、业务等。</p>
<p>此外，在每一层中，我们都有不同的 bean。为了自动检测这些 bean，<strong>Spring 使用类路径扫描注释</strong>。</p>
<p>然后它在<em>ApplicationContext 中</em>注册每个 bean 。</p>
<p>以下是其中一些注释的快速概览：</p>
<ul>
<li><code>@Component</code>是任何 Spring 管理的组件的通用<em>构造</em>型。</li>
<li><code>@Service</code>在服务层注释类。</li>
<li><code>@Repository</code>在持久层注释类，它将充当数据库存储库。</li>
</ul>
<h2 id="有什么不同？"><a href="#有什么不同？" class="headerlink" title="有什么不同？"></a>有什么不同？</h2><p><strong>这些刻板印象之间的主要区别在于它们用于不同的分类。</strong>当我们为自动检测注释一个类时，我们应该使用相应的构造型。</p>
<p>现在让我们更详细地了解它们。</p>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><strong>@Component</strong></h3><p><strong>我们可以在整个应用程序中使用 @Component 将 bean 标记为 Spring 的托管组件</strong>。<code>@Component</code>是任何 Spring 管理的组件的通用构造型。Spring 只会使用<code>@Component</code>获取和注册 bean ，一般不会查找<code>@Service</code> 和 <code>@Repository</code>。</p>
<p>它们在<em>ApplicationContext</em>中注册，因为它们用<code>@Component</code>作为元注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">	 * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">	 * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><p>@Service 和 @Repository是@Component的特例，相当于给@Component 起的别名。它们在技术上是相同的，但我们将它们用于不同的目的。</p>
</div>



<h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a><strong>@Repository</strong></h3><p><strong>@Repository的工作是捕获特定于持久性的异常并将它们作为 Spring 的统一未检查异常之一重新抛出</strong>。</p>
<p>为此，Spring 提供了<em>PersistenceExceptionTranslationPostProcessor</em>，我们需要将其添加到我们的应用程序上下文中（如果我们使用 Spring Boot，则已包含）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=</span></span><br><span class="line"><span class="tag">  &quot;<span class="attr">org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor</span>&quot;/&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个 bean 后处理器向任何用*@Repository*注释的 bean 添加了一个顾问 <em>。</em></p>
<h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a><strong>@Service</strong></h3><p><strong>我们用 @Service 标记 bean 以表明它们持有业务逻辑</strong>。除了在服务层使用之外，这个注解没有任何其他特殊用途。</p>
<hr>
<h1 id="Spring-中基于-XML-的注入"><a href="#Spring-中基于-XML-的注入" class="headerlink" title="Spring 中基于 XML 的注入"></a>Spring 中基于 XML 的注入</h1><p>让我们从在<em>pom.xml 中</em>添加 Spring 的库依赖开始：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>         </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="依赖注入——概述"><a href="#依赖注入——概述" class="headerlink" title="依赖注入——概述"></a><strong>依赖注入——概述</strong></h2><p><a href="https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring">依赖注入</a>是一种技术，其中对象的依赖项由外部容器提供。</p>
<p>假设我们有一个依赖于实际处理业务逻辑的服务的应用程序类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexApp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IService service;</span><br><span class="line">    <span class="comment">// standard constructors/getters/setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在让我们说<code>IService</code>是一个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个接口可以有多个实现。</p>
<p>让我们快速看一下一个潜在的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexService</span> <span class="keyword">implements</span> <span class="title">IService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<em>IndexApp</em>是一个依赖于名为<em>IService</em>的低级组件的高级组件。</p>
<p>从本质上讲，我们将<em>IndexApp</em>与<em>IService</em>的特定实现分离，该实现可能因各种因素而异。</p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="使用属性注入"><a href="#使用属性注入" class="headerlink" title="使用属性注入"></a><strong>使用属性注入</strong></h3><p>让我们看看如何使用基于 XML 的配置将依赖项连接在一起：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;indexService&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.IndexService&quot;</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;indexApp&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.IndexApp&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;indexService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<p>可以看出，我们正在创建一个<em>IndexService</em>实例并为其分配一个 id。默认情况下，bean 是单例。此外，我们正在创建<em>IndexApp</em>的实例。</p>
<p>在这个 bean 中，我们使用 setter 方法注入另一个 bean。</p>
<h3 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a><strong>使用构造函数注入</strong></h3><p>我们可以使用构造函数注入依赖项，而不是通过 setter 方法注入 bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;indexApp&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.IndexApp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;indexService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<h3 id="使用静态工厂"><a href="#使用静态工厂" class="headerlink" title="使用静态工厂"></a><strong>使用静态工厂</strong></h3><p>我们也可以注入一个由工厂返回的 bean。让我们创建一个简单的工厂，根据提供的数字返回<em>IService</em>的实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticServiceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IService <span class="title">getNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在让我们看看我们如何使用上述实现使用基于 XML 的配置将 bean 注入到<em>IndexApp 中</em>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.StaticServiceFactory&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;getService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexApp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.IndexApp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;messageService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的例子中，我们使用<em>factory-method</em>调用静态<em>getService</em>方法来创建一个带有 id <em>messageService</em>的 bean ，我们将其注入<em>IndexApp。</em></p>
<h3 id="使用工厂方法"><a href="#使用工厂方法" class="headerlink" title="使用工厂方法"></a><strong>使用工厂方法</strong></h3><p>让我们考虑一个实例工厂，它根据提供的数字返回一个<em>IService</em>实例。这一次，该方法不是静态的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceServiceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IService <span class="title">getNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在让我们看看我们如何使用上面的实现来使用 XML 配置将 bean 注入到<em>IndexApp 中</em>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexServiceFactory&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.InstanceServiceFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.InstanceServiceFactory&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">factory-method</span>=<span class="string">&quot;getService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;indexServiceFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexApp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baeldung.di.spring.IndexApp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;service&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;messageService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们使用<em>factory-method</em>调用<em>InstanceServiceFactory 实例</em>上的<em>getService</em>方法来创建一个带有 id <em>messageService</em>的 bean ，我们将其注入<em>IndexApp</em>。</p>
<h2 id="访问配置的bean："><a href="#访问配置的bean：" class="headerlink" title="访问配置的bean："></a>访问配置的bean：</h2><p>这是我们如何访问配置的bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGetBeans_returnsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">    IndexApp indexApp = applicationContext.getBean(<span class="string">&quot;indexApp&quot;</span>, IndexApp.class);</span><br><span class="line">    assertNotNull(indexApp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="使用带有默认值的-Spring-Value"><a href="#使用带有默认值的-Spring-Value" class="headerlink" title="使用带有默认值的 Spring @Value"></a>使用带有默认值的 Spring @Value</h1><h2 id="字符串默认值"><a href="#字符串默认值" class="headerlink" title="字符串默认值"></a><strong>字符串默认值</strong></h2><p>让我们看一下为<em>String</em>属性设置默认值的基本语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:my default value&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String stringWithDefaultValue;</span><br></pre></td></tr></table></figure>

<p>如果<code>some.key</code>无法解析，<code>stringWithDefaultValue</code>将设置为<code>my default value</code>的默认值。</p>
<p>同样，我们可以设置一个零长度的<em>字符串</em>作为默认值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:&#125;)</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">private String stringWithBlankDefaultValue;</span></span><br></pre></td></tr></table></figure>

<p><strong>基本类型默认值</strong></p>
<p>要为基本类型（例如<em>boolean</em>和<em>int ）</em>设置默认值，我们使用文字值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:true&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> booleanWithDefaultValue;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:42&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> intWithDefaultValue;</span><br></pre></td></tr></table></figure>

<p>如果我们愿意，我们可以通过将类型更改为<em>Boolean</em>和<em>Integer</em>来使用原始包装器。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>我们还可以将逗号分隔的值列表注入数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:one,two,three&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String[] stringArrayWithDefaults;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;some.key:1,2,3&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] intArrayWithDefaults;</span><br></pre></td></tr></table></figure>

<p>在上面的第一个示例中，值<em>one</em>、<em>two</em> 和<em>three作为默认值注入到</em>stringArrayWithDefaults 中。</p>
<h2 id="使用-SpEL-的高级示例"><a href="#使用-SpEL-的高级示例" class="headerlink" title="使用 SpEL 的高级示例"></a>使用 SpEL 的高级示例</h2><p>我们还可以使用 SpEL 表达式来获取值。</p>
<p>如果我们有一个名为<em>priority</em>的系统属性<em>，</em>那么它的值将应用于该字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;priority&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String spelValue;</span><br></pre></td></tr></table></figure>

<p>如果我们还没有定义系统属性，那么将分配<em>空</em>值。</p>
<p>为了防止这种情况，我们可以在 SpEL 表达式中提供一个默认值。如果未定义系统属性，我们会为该字段获取<em>一些默认</em>值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;unknown&#x27;] ?: &#x27;some default&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String spelSomeDefault;</span><br></pre></td></tr></table></figure>

<p>此外，我们可以使用来自其他 bean 的字段值。假设我们有一个名为<em>someBean</em>的 bean ，其字段<em>someValue</em>等于<em>10</em>。然后，将<em>10</em>分配给该字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;someBean.someValue&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer someBeanValue;</span><br></pre></td></tr></table></figure>

<p>我们可以操作属性来获取值<em>列表</em>，这里是字符串值 A、B 和 C 的列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;&#x27;$&#123;listOfValues&#125;&#x27;.split(&#x27;,&#x27;)&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; valuesList;</span><br></pre></td></tr></table></figure>

<h2 id="Value-“-”-和-Value-“-”-的区别"><a href="#Value-“-”-和-Value-“-”-的区别" class="headerlink" title="@Value(“${}”)和@Value(“#{}”)的区别"></a>@Value(“${}”)和@Value(“#{}”)的区别</h2><ul>
<li><code>@Value("$&#123;&#125;")</code>主要获取的是配置文件<code> application.yml /application.proterties</code>中的配置信息。</li>
<li><code>@Value("#&#123;&#125;")</code> 表示SpEl表达式通常用来获取<code>bean的属性</code>，或者调用bean的某个方法或属性。当然还有可以表示常量</li>
</ul>
<p>在下面的示例中，我们希望将<em>some.system.key</em>设置为系统属性，如果未设置，我们希望使用<em>我的默认系统属性值</em> 作为默认值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;#&#123;systemProperties[&#x27;some.key&#x27;] ?: &#x27;my default system property value&#x27;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String spelWithDefaultValue;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Autowired-vs-Resource-vs-Inject-的区别"><a href="#Autowired-vs-Resource-vs-Inject-的区别" class="headerlink" title="@Autowired vs @Resource vs @Inject 的区别"></a>@Autowired vs @Resource vs @Inject 的区别</h1><p>为了实现依赖注入 DI 而引入，Java 提供<code>javax.annotation.Resource</code> , <code>javax.inject.Inject</code> 注解，Spring 框架提供了 <code>org.springframework.beans.factory.annotation.Autowired</code>。依赖注入（Denpendency Injection，DI）， 控制反转（Inversion of Control, IoC），主要的目的是去除代码耦合。</p>
<h2 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h2><table>
<thead>
<tr>
<th align="left">Annotation</th>
<th align="left">Package</th>
<th align="left">Source</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Autowired</td>
<td align="left">org.springframework.beans.factory.annotation.Autowire</td>
<td align="left">Spring</td>
</tr>
<tr>
<td align="left">@Resource</td>
<td align="left">javax.annotation.Resource</td>
<td align="left">Java</td>
</tr>
<tr>
<td align="left">@Inject</td>
<td align="left">javax.inject.Inject</td>
<td align="left">Java 需额外依赖</td>
</tr>
</tbody></table>
<p><code>@Autowired</code>: Spring 特有的注解，@Autowired 通过<strong>类型</strong>来注入，比如通过类的类型，或者类的接口来注解 field 或者 constructor。为了防止在项目中实现同一个接口，或者一系列子类，可以使用 @Qualifier 注解来避免歧义。默认情况下 bean 的名字就是 qualifier 的值。 尽管你可以按照约定通过名字来使用 @Autowired 注解，@Autowired 根本上还是<strong>类型驱动</strong>的注入，并且附带可选的语义上的 qualifiers.</p>
<p><code>@Inject</code>: 该注解基于 <a href="https://jcp.org/en/jsr/detail?id=330">JSR-330</a>, @Inject 注解是 Spring @Autowired 注解的代替品。所以使用 Spring 独有的 @Autowired 注解时，可以考虑选择使用 @Inject. @Autowired 和 @Inject 的不同之处在于是否有<code>required</code>属性，@Inject 没有 required 属性，因此在找不到合适的依赖对象时 inject 会失败，而 @Autowired 可以使用 required=false 来允许 null 注入。</p>
<p>使用 @Inject 需要添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Advantage of @Inject annotation is that rather than inject a reference directly, you could ask @Inject to inject a Provider. The Provider interface enables, among other things, lazy injection of bean references and injection of multiple instances of a bean. In case we have few implementation of an interface or a subclass we can narrow down the selection using the @Named annotation to avoid ambiguity. @Named annotation works much like Spring’s @Qualifier</p>
<p><code>@Resource</code>: JDK 1.6 支持注解，<a href="https://jcp.org/en/jsr/detail?id=250">JSR-250</a> 引入。@Resource 和 @Autowired @Inject 类似，最主要的区别在于寻找存在的 Bean 注入的路径不同。<code>@Resource</code>寻找的优先顺序为</p>
<ul>
<li>1）优先通过名字 (by name)</li>
<li>2）其次是类型 (by type)</li>
<li>3）再次是 qualifier(by qualifier)</li>
</ul>
<p>而 <code>@Autowired</code> and <code>@Inject</code> 寻找的顺序为</p>
<ol>
<li>通过类型寻找</li>
<li>通过 qualifier</li>
<li>最后通过名字寻找</li>
</ol>
<p>@Resource 如果没有指定 name 属性，当注解标注在 field 上，默认取字段名称作为 bean 名称寻找依赖对象；当标注在属性 setter 方法上，默认取属性名作为 bean 名称寻找依赖。如果没有指定 name 属性，并且按照默认名称找不到依赖对象时，回退到类型装配。</p>
<hr>
<h1 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h1><p>从 Spring 2.5 开始，该框架引入了注解驱动的<em>依赖注入</em>。此功能的主要注释是<code>@Autowired</code> <em>。</em> <strong>它允许 Spring 解析并将协作 bean 注入到我们的 bean 中。</strong></p>
<h2 id="启用-Autowired注解"><a href="#启用-Autowired注解" class="headerlink" title="启用@Autowired注解"></a>启用@Autowired注解</h2><p>Spring 框架支持自动依赖注入。换句话说，<strong>通过在 Spring 配置文件中声明所有 bean 依赖项，Spring 容器可以自动装配协作 bean 之间的关系</strong>。这称为<strong>Spring bean 自动装配</strong>。</p>
<p>要在我们的应用程序中使用基于 Java 的配置，让我们启用注解驱动注入 来加载我们的 Spring 配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.baeldung.autowire.sample&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>或者，注解主要用于激活 Spring XML 文件中的依赖注入注解。</p>
<p>此外，<strong>Spring Boot 引入了@SpringBootApplication注解</strong>。这个单一的注解等效于使用<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>和 <code>@ComponentScan</code>。</p>
<p>让我们在应用程序的主类中使用这个注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VehicleFactoryApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(VehicleFactoryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，当我们运行这个 Spring Boot 应用程序时，<strong>它会自动扫描当前包及其子包中的组件</strong>。因此，它将在 Spring 的应用程序上下文中注册它们，并允许我们使用<code>@Autowired</code>注入 bean 。</p>
<h2 id="使用-Autowired"><a href="#使用-Autowired" class="headerlink" title="使用@Autowired"></a>使用@Autowired</h2><p>启用注解注入后，<strong>我们可以在属性、设置器和构造函数上使用自动装配</strong>。</p>
<h3 id="Autowired用在属性上"><a href="#Autowired用在属性上" class="headerlink" title="@Autowired用在属性上"></a><strong>@Autowired用在属性上</strong></h3><p>让我们看看如何使用<code>@Autowired</code>注释属性。这消除了对 getter 和 setter 的需要。</p>
<p>首先，让我们定义一个<em>fooFormatter</em> bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;fooFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooFormatter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，我们将在字段定义上使用*@Autowired<em>将此 bean 注入</em>FooService* bean ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FooFormatter fooFormatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其结果是，Spring注入<em>fooFormatter</em>时<em>FooService接口</em>被创建。</p>
<h3 id="Autowired在-Setter-上"><a href="#Autowired在-Setter-上" class="headerlink" title="@Autowired在 Setter 上"></a><strong>@Autowired在 Setter 上</strong></h3><p>现在让我们尝试在 setter 方法上添加 @Autowired 注释。</p>
<p>在以下示例中，在创建<em>FooService</em>时使用<em>FooFormatter</em>实例调用 setter 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FooFormatter fooFormatter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFooFormatter</span><span class="params">(FooFormatter fooFormatter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fooFormatter = fooFormatter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Autowired在构造函数上"><a href="#Autowired在构造函数上" class="headerlink" title="@Autowired在构造函数上"></a><strong>@Autowired在构造函数上</strong></h3><p>最后，让我们在构造函数上使用 @Autowired 。</p>
<p>我们将看到Spring 注入了一个<em>FooFormatter</em>实例作为<em>FooService</em>构造函数的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FooFormatter fooFormatter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooService</span><span class="params">(FooFormatter fooFormatter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fooFormatter = fooFormatter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Autowired-可选注入"><a href="#Autowired-可选注入" class="headerlink" title="@Autowired 可选注入"></a><em>@Autowired</em> 可选注入</h2><p>在构建 bean 时，@ <em>Autowired</em>依赖项应该可用。否则，<strong>如果 Spring 无法解析用于连接的 bean，它将抛出异常</strong>。</p>
<p>因此，它会阻止 Spring 容器成功启动，但以下形式除外：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: </span><br><span class="line">No qualifying bean of type [com.autowire.sample.FooDAO] found <span class="keyword">for</span> dependency: </span><br><span class="line">expected at least <span class="number">1</span> bean which qualifies as autowire candidate <span class="keyword">for</span> <span class="keyword">this</span> dependency. </span><br><span class="line">Dependency annotations: </span><br><span class="line">&#123;<span class="meta">@org</span>.springframework.beans.factory.annotation.Autowired(required=<span class="keyword">true</span>)&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们需要required解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> FooDAO dataAccessor; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h1><p><code>@PropertySource</code>注解是Spring 3.1开始引入的配置类注解。通过<code>@PropertySource</code>注解将<code>properties</code>配置文件中的值存储到Spring的<code>Environment</code>中，<code>Environment</code>接口提供方法去读取配置文件中的值，参数是<code>properties</code>文件中定义的key值。也可以使用<code>@Value</code>注解用<code>$&#123;&#125;</code>占位符注入属性</p>
<p><code>@PropertySource</code>注解的源代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PropertySourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(PropertySources.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PropertySource &#123;</span><br><span class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">	String[] value();</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">ignoreResourceNotFound</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">	<span class="function">String <span class="title">encoding</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">	Class&lt;? extends PropertySourceFactory&gt; factory() <span class="keyword">default</span> PropertySourceFactory.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从<code>@PropertySource</code>的源码可以看出，我们可以通过<code>@PropertySource</code>注解指定多个<code>properties</code>文件，可以使用如下形式进行指定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value=&#123;&quot;classpath:xxx.properties&quot;, &quot;classpath:yyy.properties&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<p>细心的读者可以看到，在<code>@PropertySource</code>注解类的上面标注了如下的注解信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(PropertySources.class)</span></span><br></pre></td></tr></table></figure>

<p>看到这里，小伙伴们是不是有种恍然大悟的感觉呢？没错，我们也可以使用<code>@PropertySources</code>注解来指定<code>properties</code>配置文件。</p>
<h2 id="通过注解注册一个配置文件"><a href="#通过注解注册一个配置文件" class="headerlink" title="通过注解注册一个配置文件"></a>通过注解注册一个配置文件</h2><p>我们可以将此注解与<code>@Configuration</code>注解结合使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:foo.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种注册新属性文件的非常有用的方法是使用占位符，它允许我们<strong>在运行时动态选择正确的文件</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&#123; </span></span><br><span class="line"><span class="meta">  &quot;classpath:persistence-$&#123;envTarget:mysql&#125;.properties&quot;</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="定义多个属性位置"><a href="#定义多个属性位置" class="headerlink" title="定义多个属性位置"></a>定义多个属性位置</h2><p>根据 Java 8 约定，<code>@PropertySource</code>注释是可重复的。因此，如果我们使用 Java 8 或更高版本，我们可以使用此注释来定义多个属性位置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:foo.properties&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:bar.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，<strong>我们也可以使用@PropertySources注解，指定一个@PropertySource数组。</strong>这适用于任何受支持的 Java 版本，而不仅仅是 Java 8 或更高版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySources(&#123;</span></span><br><span class="line"><span class="meta">    @PropertySource(&quot;classpath:foo.properties&quot;),</span></span><br><span class="line"><span class="meta">    @PropertySource(&quot;classpath:bar.properties&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesWithJavaConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在任何一种情况下，值得注意的是，在发生属性名称冲突的情况下，最后一个源读取优先。</p>
<h2 id="使用-注入属性"><a href="#使用-注入属性" class="headerlink" title="使用/注入属性"></a>使用/注入属性</h2><p><strong>使用@Value注释</strong>注入属性很简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value( &quot;$&#123;jdbc.url&#125;&quot; )</span></span><br><span class="line"><span class="keyword">private</span> String jdbcUrl;</span><br></pre></td></tr></table></figure>

<p><strong>我们还可以为属性指定一个默认值：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value( &quot;$&#123;jdbc.url:aDefaultUrl&#125;&quot; )</span></span><br><span class="line"><span class="keyword">private</span> String jdbcUrl;</span><br></pre></td></tr></table></figure>

<p>Spring 3.1 中添加的新<em>PropertySourcesPlaceholderConfigurer</em>解析了 bean 定义属性值和@Value注释中的<code>$&#123;…&#125;</code> 占位符。</p>
<p>最后，我们可以 <strong>使用Environment API获取属性的值</strong> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line">...</span><br><span class="line">dataSource.setUrl(env.getProperty(<span class="string">&quot;jdbc.url&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Boot-的属性"><a href="#Spring-Boot-的属性" class="headerlink" title="Spring Boot 的属性"></a>Spring Boot 的属性</h2><p>在我们进入更高级的属性配置选项之前，让我们花点时间看看 Spring Boot 中的新属性支持。</p>
<p>一般来说，<strong>与标准 Spring 相比</strong>，<strong>这种新支持涉及的配置更少</strong>，这当然是 Boot 的主要目标之一。</p>
<h3 id="application-properties：默认属性文件"><a href="#application-properties：默认属性文件" class="headerlink" title="application.properties：默认属性文件"></a>application.properties：默认属性文件</h3><p>Boot 将其典型的约定应用于属性文件的配置方法。这意味着<strong>我们可以简单地将application.properties文件放在我们的src/main/resources 目录中，它将被自动检测</strong>。然后我们可以像往常一样从它注入任何加载的属性。</p>
<p>因此，通过使用此默认文件，我们不必显式注册<em>PropertySource</em> ，甚至不必提供属性文件的路径。</p>
<p>从<em>2.4.0</em>版本开始，<strong>Spring Boot 支持使用多文档属性文件</strong>，类似于<a href="https://yaml.org/spec/1.2/spec.html#id2760395">YAML</a>的设计：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">baeldung.customProperty=defaultValue</span><br><span class="line">#---</span><br><span class="line">baeldung.customProperty=overriddenValue</span><br></pre></td></tr></table></figure>

<p>请注意，对于属性文件，三个破折号符号前面有一个注释字符 ( <em>#</em> )。</p>
<h3 id="特定于环境的属性文件"><a href="#特定于环境的属性文件" class="headerlink" title="特定于环境的属性文件"></a><strong>特定于环境的属性文件</strong></h3><p>如果我们需要针对不同的环境，Boot 中有一个内置的机制。</p>
<p><strong>我们可以简单地在src/main/resources目录下定义一个application-environment.properties文件，然后设置一个具有相同环境名称的 Spring 配置文件。</strong></p>
<p>例如，如果我们定义一个“暂存”环境，这意味着我们必须定义一个<em>暂存</em>配置文件，然后是<em>application-staging.properties</em>。</p>
<p>此 env 文件将被加载并<strong>优先于默认属性文件。</strong>注意，默认文件还是会被加载，只是当发生属性冲突时，特定于环境的属性文件优先。<strong>替代方案：YAML 文件</strong></p>
<p>Spring 还支持 YAML 文件。</p>
<p>所有相同的命名规则都适用于特定于测试、特定于环境和默认属性文件。唯一的区别是文件扩展名和对我们类路径上的<a href="https://bitbucket.org/asomov/snakeyaml">SnakeYAML</a>库的依赖。</p>
<p><strong>YAML 特别适合分层属性存储</strong>；以下属性文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">database.url=jdbc:postgresql:/localhost:5432/instance</span><br><span class="line">database.username=foo</span><br><span class="line">database.password=bar</span><br><span class="line">secret: foo</span><br></pre></td></tr></table></figure>

<p>与以下 YAML 文件同义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">database:</span><br><span class="line">  url: jdbc:postgresql:/localhost:5432/instance</span><br><span class="line">  username: foo</span><br><span class="line">  password: bar</span><br><span class="line">secret: foo</span><br></pre></td></tr></table></figure>

<p>还值得一提的是，YAML 文件不支持*@PropertySource*注解，所以如果我们需要使用这个注解，它会限制我们使用属性文件。</p>
<p>另一个值得注意的地方是，在 2.4.0 版本中，Spring Boot 改变了从多文档 YAML 文件加载属性的方式。以前，它们的添加顺序基于配置文件激活顺序。然而，在新版本中，框架遵循我们之前为*.properties*文件指出的相同排序规则；在文件中声明较低的属性将简单地覆盖那些较高的属性。</p>
<p>此外，在此版本中，配置文件无法再从配置文件特定文档中激活，从而使结果更清晰、更可预测。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Spring</tag>
        <tag>Spring基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2021/08/31/Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Vue-js-是什么"><a href="#Vue-js-是什么" class="headerlink" title="Vue.js 是什么"></a>Vue.js 是什么</h1><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。</p>
<h1 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h1><ol>
<li>采用组件化模式，提高代码的复用率、且让代码更好维护。</li>
<li>声明式编码，让编码人员无需直接操作DOM，提高开发效率。</li>
<li>使用虚拟DOM+优秀DIff算法，尽量复用DOM结点。</li>
</ol>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="模板的理解"><a href="#模板的理解" class="headerlink" title="模板的理解"></a>模板的理解</h2><p>html 中包含了一些JS 语法代码，语法分为两种，分别为：</p>
<ol>
<li>插值语法（双大括号表达式）</li>
<li>指令（以v-开头）</li>
</ol>
<p><strong>插值语法</strong></p>
<p>功能: 用于解析<strong>标签体</strong>内容</p>
<p>语法:  ，xxxx 会作为js 表达式解析</p>
<p><strong>指令语法</strong></p>
<p>功能: 解析<strong>标签属性、解析标签体内容、绑定事件</strong></p>
<p>举例：v-bind:href = ‘xxxx’ ，xxxx 会作为js 表达式被解析</p>
<hr>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h2><p>语法：<code>v-bind</code>:href =”xxx” 或简写为:href</p>
<p>特点：数据只能从data 流向页面</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v- 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v- 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v- 前缀也变得没那么重要了。因此，Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a><code>v-bind</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a><code>v-on</code> 缩写</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>语法：<code>v-mode</code>:value=”xxx” 或简写为v-model=”xxx”</p>
<p>特点：数据不仅能从data 流向页面，还能从页面流向data</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、双向绑定一般都应用在表单类元素上（如：input、select等）</span><br><span class="line">2、v-mode:value 可以简写为v-model，因为v-model默认收集的就是value值</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="el的两种写法"><a href="#el的两种写法" class="headerlink" title="el的两种写法"></a>el的两种写法</h2><p>第一种写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        name: <span class="string">&quot;Vue&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第二种写法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v.$mount(<span class="string">&quot;#root&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="data的两种写法"><a href="#data的两种写法" class="headerlink" title="data的两种写法"></a>data的两种写法</h2><p>第一种写法：对象式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&quot;Vue&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第二种写法：函数式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            name: <span class="string">&quot;Vue&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以后学习到组件时，data必须写成函数式</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h1><p><strong>MVVM</strong>（<strong>Model–view–viewmodel</strong>）是一种软件架构模式。</p>
<p>MVVM模式不同于MVC，在MVVM模式中，将ViewModel层绑定到View层后，它基本不使用点击事件，而是使用命令(Command)来控制。数据的显示也是不同于MVC，而是使用Binding来绑定相关数据。</p>
<p>值得一提的是，MVVM通常会使用属性更改通知，即数据驱动而不是事件驱动。在WPF中当数据发生改变时，会通过接口INotifyPropertyChanged通知到对应的组件绑定的数据，实现同步数据刷新。</p>
<p><strong>M</strong>：模型(Model) ：对应data 中的数据</p>
<p><strong>V</strong>：视图(View) ：模板</p>
<p><strong>VM</strong>：视图模型(ViewModel) ： Vue 实例对象</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/viewmodel.png"></p>
<p>每个 Vue 应用都是通过用 <code>Vue</code> 函数创建一个新的 <strong>Vue 实例</strong>开始的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  &#x2F;&#x2F; 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>虽然没有完全遵循 <a href="https://zh.wikipedia.org/wiki/MVVM">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code>vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm身上的所有属性及Vue原型上的所有属性，在vue模板中都可以直接使用</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>事件的基本使用：</p>
<ul>
<li>使用v-on:xxx 或@xxx 绑定事件，其中xxx是事件名</li>
<li>事件的回调需要配置在methods对象中，最终会在vm上</li>
<li>methods中配置的函数不要用箭头函数！否则this就不是vm了</li>
<li>methods中配置的函数，都是被Vue所管理的函数，this指向是vm或组件实例化对象</li>
<li>@click=”demo”和@click=”demo($event)”效果一致，但后者可以传参。</li>
</ul>
<hr>
<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code>：阻止事件冒泡（常用）</li>
<li><code>.prevent</code>：阻止默认事件（常用）</li>
<li><code>.capture</code>：使用事件的捕获模式</li>
<li><code>.self</code>：只有event.target是当前操作的元素时才触发事件</li>
<li><code>.once</code>：事件只能触发一次（常用）</li>
<li><code>.passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 <code>v-on</code> 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以直接将 <code>KeyboardEvent.key</code>暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">&quot;onPageDown&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 <code>PageDown</code> 时被调用。</p>
<p>Vue 提供了绝大多数常用的按键码的别名：</p>
<ul>
<li><code>.enter</code></li>
<li><code>.tab</code>（必须配合keydown使用）</li>
<li><code>.delete</code> (捕获“删除”和“退格”键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
<p><strong>系统修饰键</strong></p>
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
<li><code>.meta</code></li>
</ul>
<blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">注意：在 <span class="selector-tag">Mac</span> 系统键盘上，<span class="selector-tag">meta</span> 对应 <span class="selector-tag">command</span> 键 (⌘)。在 <span class="selector-tag">Windows</span> 系统键盘 <span class="selector-tag">meta</span> 对应 <span class="selector-tag">Windows</span> 徽标键 (⊞)。在 <span class="selector-tag">Sun</span> 操作系统键盘上，<span class="selector-tag">meta</span> 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 <span class="selector-tag">MIT</span> 和 <span class="selector-tag">Lisp</span> 机器的键盘、以及其后继产品，比如 <span class="selector-tag">Knight</span> 键盘、<span class="selector-tag">space-cadet</span> 键盘，<span class="selector-tag">meta</span> 被标记为“<span class="selector-tag">META</span>”。在 <span class="selector-tag">Symbolics</span> 键盘上，<span class="selector-tag">meta</span> 被标记为“<span class="selector-tag">META</span>”或者“<span class="selector-tag">Meta</span>”。</span><br></pre></td></tr></table></figure>
</blockquote>
<ol>
<li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才触发。</li>
<li>配合keydown使用：正常触发</li>
</ol>
<hr>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这个地方，模板不再是简单的声明式逻辑。你必须看一段时间才能意识到，这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>
<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
<p>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>
<ol>
<li><strong>定义：要用的属性不存在要通过已有的属性计算得到。</strong></li>
<li><strong>原理：底层借助了Object.defineproperty方法提供的getter和setter。</strong></li>
<li><strong>get函数什么时候执行？</strong><ul>
<li><strong>初次读取时会调用一次</strong></li>
<li><strong>当依赖的数据发生变化时会再次调用</strong></li>
</ul>
</li>
<li><strong>优势：与methods实现相比，内部有缓存机制，效率更高，调试更方便</strong></li>
<li><strong>备注：</strong><ul>
<li><strong>计算属性最终会出现在vm上，直接读取使用即可。</strong></li>
<li><strong>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生变化</strong></li>
</ul>
</li>
</ol>
<p>简写形式：当计算属性只有getter时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    lastName: <span class="string">&#x27;Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h1><p>先看一个小例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>定个小目标，赚他&#123;&#123;amount&#125;&#125;个亿<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;amount++&quot;</span>&gt;</span>提高小目标<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        amount: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        amount:&#123;</span><br><span class="line">            immediate: <span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">            <span class="comment">// 当amount发生改变时调用handler</span></span><br><span class="line">            <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(newValue, oldValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>侦听属性简写形式如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        amount: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="function"><span class="title">amount</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newValue, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>除了 <code>watch</code> 选项之外，您还可以使用命令式的 <a href="https://cn.vuejs.org/v2/api/#vm-watch">vm.$watch API</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;amount&#x27;</span>,&#123;</span><br><span class="line">    <span class="comment">// 当amount发生改变时调用handler</span></span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(newValue, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>深度侦听</strong></p>
<p>为了发现对象内部值的变化，可以在选项参数中指定 <code>deep: true</code>。注意监听数组的变更不需要这么做。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是：&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是：&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        numbers: &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        numbers:&#123;</span><br><span class="line">            deep: <span class="literal">true</span>, <span class="comment">//当deep为true时，a或b的值改变下面的handler会执行，否则不会执行</span></span><br><span class="line">            <span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;numbers改变了&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>计算属性 vs 侦听属性</strong></p>
<p>computed和watch之间的区别</p>
<ol>
<li>computed能完成的功能，watch都可以完成。watch能完成的功能，computed不一定能完成，例如异步操作。</li>
<li>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、所有被Vue管理的函数最好写成普通函数，这样this的指向才是vm或组件实例对象</span><br><span class="line">2、所有不背Vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this的指向才是vm或组件实例对象</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="Class与Style的绑定"><a href="#Class与Style的绑定" class="headerlink" title="Class与Style的绑定"></a>Class与Style的绑定</h1><h2 id="Class的绑定"><a href="#Class的绑定" class="headerlink" title="Class的绑定"></a>Class的绑定</h2><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p>
<h3 id="字符串语法"><a href="#字符串语法" class="headerlink" title="字符串语法"></a>字符串语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 class 列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line">  errorClass: <span class="string">&#x27;text-danger&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active text-danger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据 property <code>isActive</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a>。</p>
<hr>
<h2 id="Style的绑定"><a href="#Style的绑定" class="headerlink" title="Style的绑定"></a>Style的绑定</h2><p><code>v-bind:style</code> 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    fontSize: <span class="string">&#x27;13px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到同一个元素上：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>用于根据条件展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意，v-show 不支持 &lt;template&gt; 元素，也不支持 v-else。</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用 <code>v-else</code> 添加一个“else 块”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if   v-else-if  v-else"></a><code>v-if</code>   <code>v-else-if</code>  <code>v-else</code></h2><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，可以连续使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="&lt;template&gt;元素上使用-v-if-条件渲染分组"></a><code>&lt;template&gt;</code>元素上使用-v-if-条件渲染分组</h2><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a><code>v-if</code> vs <code>v-show</code></h2><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<h2 id="用-key-管理可复用的元素"><a href="#用-key-管理可复用的元素" class="headerlink" title="用 key 管理可复用的元素"></a>用 <code>key</code> 管理可复用的元素</h2><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么在上面的代码中切换 <code>loginType</code> 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code> 不会被替换掉——仅仅是替换了它的 <code>placeholder</code>。</p>
<p>所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> attribute 即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;loginType === &#x27;username&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your username&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter your email address&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email-input&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在，每次切换时，输入框都将被重新渲染。</p>
<hr>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="v-for遍历-元素"><a href="#v-for遍历-元素" class="headerlink" title="v-for遍历 元素"></a><code>v-for</code>遍历 元素</h2><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Foo&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>Foo</li>
<li>Bar</li>
</ul>
<p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item of items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 &#96;key&#96; attribute：</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p>
<p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="v-for遍历-对象"><a href="#v-for遍历-对象" class="headerlink" title="v-for遍历 对象"></a><code>v-for</code>遍历 对象</h2><p>你也可以用 <code>v-for</code> 来遍历一个对象的 property。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;value in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      title: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span><br><span class="line">      author: <span class="string">&#x27;Jane Doe&#x27;</span>,</span><br><span class="line">      publishedAt: <span class="string">&#x27;2016-04-10&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<ul>
<li>How to do lists in Vue</li>
<li>Jane Doe</li>
<li>2016-04-10</li>
</ul>
<p>你也可以提供第二个的参数为 property 名称 (也就是键名)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>title: How to do lists in Vue</p>
<p>author: Jane Doe</p>
<p>publishedAt: 2016-04-10</p>
<p>还可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="0">
<li><p>title: How to do lists in Vue</p>
</li>
<li><p>author: Jane Doe</p>
</li>
<li><p>publishedAt: 2016-04-10</p>
</li>
</ol>
<hr>
<h2 id="Key的原理"><a href="#Key的原理" class="headerlink" title="Key的原理"></a>Key的原理</h2><p><code>key</code> 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p>
<p>有相同父元素的子元素必须有<strong>独特的 key</strong>。重复的 key 会造成渲染错误。</p>
<p>对比规则：<br>(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>            ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！<br>            ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p>
<p>(2).旧虚拟DOM中未找到与新虚拟DOM相同的key，创建新的真实DOM，随后渲染到到页面。</p>
<p>用index作为key可能会引发的问题：<br>                                               1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p>
<ol start="2">
<li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。</li>
<li>开发中如何选择key?:</li>
<li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li>
<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li>
</ol>
<hr>
<h2 id="显示过滤后的结果"><a href="#显示过滤后的结果" class="headerlink" title="显示过滤后的结果"></a>显示过滤后的结果</h2><p>有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际变更或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;n in evenNumbers&quot;</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="显示排序后的结果"><a href="#显示排序后的结果" class="headerlink" title="显示排序后的结果"></a>显示排序后的结果</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="function"><span class="title">evenNumbers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr <span class="built_in">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 升序排列</span></span><br><span class="line">    <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">prv,next</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next - prv</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Vue监视数据的原理"><a href="#Vue监视数据的原理" class="headerlink" title="Vue监视数据的原理"></a>Vue监视数据的原理</h1><p><strong>Vue监视数据的原理：</strong></p>
<ol>
<li>vue会监视data中所有层次的数据。</li>
</ol>
<p><strong>如何监测对象中的数据？</strong><br>通过<strong>setter方法</strong>实现监视，且要在new Vue时就传入要监测的数据。<br>(1).对象中后追加的属性，Vue默认不做响应式处理<br>(2).如需给后添加的属性做响应式，请使用如下API：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.set(target，propertyName&#x2F;index，value)</span><br></pre></td></tr></table></figure>

<p> 或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.$set(target，propertyName/index，value)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>参数</strong>：<ul>
<li><code>&#123;Object | Array&#125; target</code></li>
<li><code>&#123;string | number&#125; propertyName/index</code></li>
<li><code>&#123;any&#125; value</code></li>
</ul>
</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意对象不能是 Vue 实例即vm，或者 Vue 实例的根数据对象vm.data。</span><br></pre></td></tr></table></figure>
</blockquote>
<p>3、<strong>如何监测数组中的数据？</strong><br>通过包裹数组更新元素的方法实现，本质就是做了两件事：<br>(1).调用原生对应的方法对数组进行更新。<br>(2).重新解析模板，进而更新页面</p>
<p>4、<strong>在Vue修改数组中的某个元素一定要用如下方法：</strong><br>1）.使用这些API:</p>
<ul>
<li><code>push()</code></li>
<li><code>pop()</code></li>
<li><code>shift()</code></li>
<li><code>unshift()</code></li>
<li><code>splice()</code></li>
<li><code>sort()</code></li>
<li><code>reverse()</code></li>
</ul>
<p>2）.Vue.set() 或 vm.$set()</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul>
<li>text 和 textarea 元素使用 <code>value</code> property ，v-mode收集的是<code>value</code> 值</li>
</ul>
<h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><ul>
<li><input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span> <span class="attr">value</span>=<span class="string">&quot;One&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;one&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Two&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;two&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>若：<input type="checkbox"/><br>1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>2.配置input的value属性:<br>            (1) v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>            (2) v-model的初始值是数组，那么收集的的就是value组成的数组</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h3><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 失去焦点 事件_之后_进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在input框失去焦点时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="number"><a href="#number" class="headerlink" title=".number"></a><code>.number</code></h3><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以在一个组件的选项中定义本地的过滤器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    value = value.toString()</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者在创建 Vue 实例之前<strong>全局定义过滤器</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  value = value.toString()</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p>
<p><strong>过滤器传参</strong></p>
<p>过滤器是 JavaScript 函数，因此可以接收参数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>filterA</code> 被定义为接收三个参数的过滤器函数。其中 <code>message</code> 的值作为第一个参数，普通字符串 <code>&#39;arg1&#39;</code> 作为第二个参数，表达式 <code>arg2</code> 的值作为第三个参数。</p>
<p><strong>过滤器可以串联：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤器不改变原有的数据，是产生新的数据</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h1><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><ul>
<li><p><strong>预期</strong>：<code>string</code></p>
</li>
<li><p>更新元素的 <code>textContent</code>。如果要更新部分的 <code>textContent</code>，需要使用 <code>&#123;&#123; Mustache &#125;&#125;</code> 插值。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><ul>
<li><p><strong>预期</strong>：<code>string</code></p>
</li>
<li><p><strong>详细</strong>：</p>
<p>更新元素的 <code>innerHTML</code>。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><ul>
<li><p><strong>不需要表达式</strong></p>
</li>
<li><p><strong>用法</strong>：</p>
<p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] &#123; display: none &#125;</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>未解析的元素不会显示，直到编译结束，可以解决插值闪烁问题。</p>
</li>
</ul>
<h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><ul>
<li><p><strong>不需要表达式</strong></p>
</li>
<li><p><strong>详细</strong>：</p>
<p>只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once</span> <span class="attr">:comment</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `v-for` 指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;i in list&quot;</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><ul>
<li><p><strong>不需要表达式</strong></p>
</li>
<li><p><strong>用法</strong>：</p>
<p>跳过这个元素和它的子元素的编译过程。</p>
<p>可以利用它跳过没有使用指令语法、没有使用插值语法的结点。跳过大量没有指令的节点会加快编译。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><p>有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。举个聚焦输入框的例子，如下：</p>
<p>当页面加载时，该元素将获得焦点。事实上，只要你在打开这个页面后还没点击过任何内容，这个输入框就应当还是处于聚焦状态。现在让我们用指令来实现这个功能：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果想注册局部指令，组件中也接受一个 <code>directives</code> 的选项，</p>
<p>对象形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义指令也可以写成函数形式，但是无法在钩子函数中做自定义的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    <span class="comment">// 1.当指令与元素成功绑定时会调用</span></span><br><span class="line">    <span class="comment">// 2.指令所在的模板被重新解析时也会调用</span></span><br><span class="line">  <span class="function"><span class="title">focus</span>(<span class="params">element, binding</span>)</span>&#123;</span><br><span class="line">    element.value = binding.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后你可以在模板中任何元素上使用新的 <code>v-focus</code> property，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p>
<ul>
<li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>
<li><code>inserted</code>：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>
<li><code>update</code>：所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li>
</ul>
<h2 id="钩子函数参数"><a href="#钩子函数参数" class="headerlink" title="钩子函数参数"></a>钩子函数参数</h2><p>指令钩子函数会被传入以下参数：</p>
<ul>
<li><p><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</p>
</li>
<li><p><code>binding</code></p>
<p>：一个对象，包含以下 property：</p>
<ul>
<li><code>name</code>：指令名，不包括 <code>v-</code> 前缀。</li>
<li><code>value</code>：指令的绑定值，例如：<code>v-my-directive=&quot;1 + 1&quot;</code> 中，绑定值为 <code>2</code>。</li>
<li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><code>expression</code>：字符串形式的指令表达式。例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，表达式为 <code>&quot;1 + 1&quot;</code>。</li>
<li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code>。</li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code>。</li>
</ul>
</li>
</ul>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自定义指定定义时不加v-，但是使用时要加v-</span><br><span class="line">指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h1 id="Vue生命周期函数"><a href="#Vue生命周期函数" class="headerlink" title="Vue生命周期函数"></a>Vue生命周期函数</h1><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，下图展示了实例的生命周期。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/lifecycle.png"></p>
<p>所有的生命周期钩子自动绑定 <code>this</code> 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算。这意味着<strong>你不能使用箭头函数来定义一个生命周期方法</strong> (例如 <code>created: () =&gt; this.fetchTodos()</code>)。这是因为箭头函数绑定了父上下文，因此 <code>this</code> 与你期待的 Vue 实例不同，<code>this.fetchTodos</code> 的行为未定义。</p>
<h2 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h2><p>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</p>
<h2 id="created"><a href="#created" class="headerlink" title="created"></a>created</h2><p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，property 和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code> property 目前尚不可用。</p>
<h2 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h2><p>在挂载开始之前被调用：相关的 <code>render</code> 函数首次被调用。</p>
<p><strong>该钩子在服务器端渲染期间不被调用。</strong></p>
<h2 id="mounted（重要）"><a href="#mounted（重要）" class="headerlink" title="mounted（重要）"></a>mounted（重要）</h2><p>实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内。</p>
<p>在此钩子函数中可以发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p>
<p>注意 <code>mounted</code> <strong>不会</strong>保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 <code>mounted</code> 内部使用 vm.$nextTick：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h2><p>数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。</p>
<p><strong>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行。</strong></p>
<h2 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h2><p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p>
<p>注意 <code>updated</code> <strong>不会</strong>保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以在 <code>updated</code> 里使用 vm.$nextTick</p>
<h2 id="beforeDestroy（重要）"><a href="#beforeDestroy（重要）" class="headerlink" title="beforeDestroy（重要）"></a>beforeDestroy（重要）</h2><p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>
<p>在此钩子函数中，可以清楚定时器、解绑自定义事件、取消订阅消息等【收尾工作】</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般不会在beforeDestroy操作数据，因为即便操作数据也不会再触发更新流程了</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h2><p>实例销毁后调用。该钩子被调用后，对应 Vue 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁。</p>
<hr>
<h1 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h1><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><p>通常一个应用会以一棵嵌套的组件树的形式来组织：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vuecomponents.png"></p>
<p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p>
<p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。</p>
<p>这里有一个 <code>Vue.component</code> <strong>全局注册</strong>的示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>局部注册</strong>的示例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = Vue.extend(&#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        <span class="string">&#x27;button-counter&#x27;</span>:counter</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>&lt;button-counter&gt;</code>。我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以将组件进行任意次数的复用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用<code>Vue.extend(options)</code>创建，其中<code>options</code>和<code>new Vue(options)</code>时传入的那个<code>options</code>几乎一样，但也有点区别；区别如下：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.extend(options)中el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，如果 Vue 没有这条规则，点击一个按钮就可能会像如下代码一样影响到其它所有实例：</span><br></pre></td></tr></table></figure>
</blockquote>
<p>几个注意点：</p>
<ol>
<li><p>关于组件名:</p>
<ul>
<li><p>一个单词组成：</p>
<p>第一种写法(首字母小写)：school<br>第二种写法(首字母大写)：School</p>
</li>
<li><p>多个单词组成：    </p>
<p><strong>使用 kebab-case</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;my-component-name&#39;, &#123; &#x2F;* ... *&#x2F; &#125;)</span><br></pre></td></tr></table></figure>

<p>当使用 kebab-case (短横线分隔命名) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;</code>。</p>
<p><strong>使用 PascalCase</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;MyComponentName&#39;, &#123; &#x2F;* ... *&#x2F; &#125;)</span><br></pre></td></tr></table></figure>

<p>当使用 PascalCase (首字母大写命名) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。注意，尽管如此，直接在 DOM (即非字符串的模板) 中使用时只有 kebab-case 是有效的。</p>
</li>
</ul>
</li>
<li><p>关于组件标签:</p>
<p>第一种写法：<school></school><br>第二种写法：<school/>     (备注：不用使用脚手架时，<school/>会导致后续组件不能渲染。)</p>
</li>
<li><p>一个简写方式：<br>const school = Vue.extend(options) 可简写为：const school = options</p>
</li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</span><br><span class="line">可以使用name配置项指定组件在开发者工具中呈现的名字</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h2><ol>
<li>button-counter组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</li>
<li>我们只需要写<button-counter></button-counter>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</li>
<li>每次调用Vue.extend，返回的都是一个全新的VueComponent！</li>
<li>关于this指向：<ul>
<li><code>.new Vue(options)</code>配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】</li>
<li>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】</li>
</ul>
</li>
</ol>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个重要的内置关系：VueComponent.prototype.__proto__ &#x3D;&#x3D;&#x3D; Vue.prototype</span><br><span class="line">为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</span><br></pre></td></tr></table></figure>
</blockquote>
<hr>
<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue(&#123; el: &#39;#container &#39;&#125;)</code> 在每个页面内指定一个容器元素。</p>
<p>这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些缺点将变得非常明显：</p>
<ul>
<li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li>
<li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li>
<li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li>
<li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript，而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li>
</ul>
<p>文件扩展名为 <code>.vue</code> 的 <strong>single-file components (单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p>
<p>这是一个文件名为 <code>Hello.vue</code> 的简单实例：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/Vue%E5%9F%BA%E7%A1%80/vue-component.png"></p>
<p><strong>一个.vue 文件的组成(3 个部分)</strong></p>
<ol>
<li><p>模板页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">页面模板</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JS 模块对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;<span class="keyword">return</span> &#123;&#125;&#125;,</span></span><br><span class="line">methods: &#123;&#125;,</span><br><span class="line">computed: &#123;&#125;,</span><br><span class="line">components: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">样式定义</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>Vue核心</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2023/12/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>代理模式：</strong> 为一个对象提供一个替身，以控制对目标对象的访问。即通过代理对象访问目标对象。这样做的好处是：可以在目标对象实现的基础上，增强额外的功能操作，及扩展目标对象的功能。</p>
<p>被代理的对象可以是远程对象，创建开销大的对象或需要安全控制的对象。</p>
<p>在现实生活中，一个对象不能直接访问另一个对象，这时需要找中介来访问目标对象，此时的中介就是代理对象。例如：租房子时，我们无法与房东取得联系，只能通过某网站与中介进行交易，获取自己心仪的房间等等。</p>
<h4 id="代理模式结构"><a href="#代理模式结构" class="headerlink" title="代理模式结构"></a>代理模式结构</h4><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/2560px-Proxy_pattern_diagram.png" style="zoom: 33%;" />

<ul>
<li><strong>抽象主题</strong>（Subject）类：通过接口或抽象类声明真实主题和代理对象实现的业务方法。代理必须遵循该接口才能伪装成服务对象。</li>
<li><strong>真实主题</strong>（Real Subject）类：实现了出现主题中的具体业务，是代理对象所代理的真实对象，是最终要引用的对象。</li>
<li><strong>代理</strong>（Proxy）类：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
<li><strong>客户端</strong> （Client） 能通过同一接口与服务或代理进行交互， 所以你可在一切需要服务对象的代码中使用代理。</li>
</ul>
<h4 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h4><div class="note info no-icon"><p>我们模拟在现实生活通过携程火车票系统购票的过程，假设我们通过代理购票系统购票时，购票系统首先会校验购票人的购票资格，校验成功则会调用真正的购票系统进行购票，购票成功后会收取购票人的一定的服务费。</p>
</div>

<h4 id="程序化示例"><a href="#程序化示例" class="headerlink" title="程序化示例"></a>程序化示例</h4><p>1、抽象主题类：代理类与被代理类都需要实现的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Ticketing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、真实主题类： 目标类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RailwaySite</span> <span class="keyword">implements</span> <span class="title">Ticketing</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用官方系统购票成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、代理类：需要实现被代理类的接口，使用代理方法调用目标对象的方法，同时实现对目标方法的扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTicketSystem</span> <span class="keyword">implements</span> <span class="title">Ticketing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Ticketing ticket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyTicketSystem</span><span class="params">(Ticketing ticket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ticket = ticket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preHandle();</span><br><span class="line">        ticket.buyTicket();</span><br><span class="line">        postHandle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理（携程火车票）系统校验购票人资格！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;校验成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理（携程火车票）系统收取购票人服务费10元！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、客户端：需要创建被代理对象和代理对象，并进行组合调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RailwaySite railwaySite = <span class="keyword">new</span> RailwaySite();</span><br><span class="line">        ProxyTicketSystem proxy = <span class="keyword">new</span> ProxyTicketSystem(railwaySite);</span><br><span class="line">        proxy.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代理（携程火车票）系统校验购票人资格！</span><br><span class="line">校验成功！</span><br><span class="line">调用官方系统购票成功！</span><br><span class="line">代理（携程火车票）系统收取购票人服务费10元！</span><br></pre></td></tr></table></figure>

<h4 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h4><p>当需要比简单指针更通用或更复杂的对象引用时，就需要使用代理模式。以下是代理模式适用的几种常见情况。</p>
<ul>
<li>远程代理为不同地址空间的对象提供本地代表。</li>
<li>虚拟代理按需创建昂贵的对象。</li>
<li>保护代理控制对原始对象的访问。当对象应具有不同访问权限时，保护代理非常有用。</li>
</ul>
<h4 id="已知使用"><a href="#已知使用" class="headerlink" title="已知使用"></a>已知使用</h4><ul>
<li><code>java.lang.reflect.Proxyopen in new window</code></li>
<li><code>Apache Commons Proxy</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo多设备管理</title>
    <url>/2020/11/16/hexo%E5%A4%9A%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="如何在不同设备快速、高效的管理自己的博客？"><a href="#如何在不同设备快速、高效的管理自己的博客？" class="headerlink" title="如何在不同设备快速、高效的管理自己的博客？"></a>如何在不同设备快速、高效的管理自己的博客？</h3><p>这里采用分支的方法，在一个Github Pages项目上，实现不同终端的管理工作。</p>
<p>实现原理：<br>在项目上创建一个分支，暂定为hexo分支。<br>master分支和hexo分支互不干扰：</p>
<ul>
<li>master分支存放hexo编译后的文件，是用来生成网页的</li>
<li>Hexo分支源文件</li>
</ul>
<p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github。所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p>
<h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>首先，先在github上新建一个hexo分支，然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p>
<p>然后在本地的任意目录下，打开git bash：</p>
<blockquote>
<p>​    git clone <a href="mailto:&#103;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;</a>:wotzc/wotzc.github.io.git    </p>
</blockquote>
<p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p>
<p>接下来在克隆到本地的<code>wotzc.github.io</code>中，把除了.git 文件夹外的所有文件都删掉，把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>

<p>如果你之前克隆过theme中的主题文件，那么应该把将博客目录下 themes 文件夹下每个主题文件夹里面的 .git .gitignore 删掉。，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了。</p>
<p>cd 到博客目录，git add -A ，git commit -m “–”，git push origin hexo，将博客目录下所有文件更新到 hexo 分支。如果上一步没有删掉 .git .gitignore，主题文件夹下内容将传不上去。至此原电脑上的操作结束。</p>
<h3 id="新设备上的操作"><a href="#新设备上的操作" class="headerlink" title="新设备上的操作"></a>新设备上的操作</h3><p>在新电脑上操作，先把新电脑上环境安装好一样的，跟之前的环境搭建一样。</p>
<ul>
<li>安装git</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<ul>
<li>设置git全局邮箱和用户名</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置ssh key</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br><span class="line">#生成后填到github和coding上（有coding平台的话）</span><br><span class="line">#验证是否成功</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@git.coding.net #(有coding平台的话)</span><br></pre></td></tr></table></figure>

<ul>
<li>安装nodejs</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>但是已经不需要初始化了，直接在任意文件夹下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:wotzc/wotzc.github.io.git</span><br></pre></td></tr></table></figure>

<p>然后进入克隆到的文件夹：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>生成，部署：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后就可以开始写你的新博客了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new newpage</span><br></pre></td></tr></table></figure>

<h3 id="日常更新"><a href="#日常更新" class="headerlink" title="日常更新"></a>日常更新</h3><p>以后无论在哪台电脑上，更新以及提交博客，依次执行，git pull，git add -A ，git commit -m “–”，git push origin hexo，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 即可。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Maven</title>
    <url>/2021/04/15/%E5%88%9D%E8%AF%86Maven/</url>
    <content><![CDATA[<h2 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven?"></a>什么是Maven?</h2><p>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具 ，专注服务于ava平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家 ，内行。</p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>​    在今天的 JavaEE 开发领域，有大量的第三方框架和工具可以供我们使用。要使用这些 jar 包最简单的方法就是复制粘贴到 WEB-INF/lib 目录下。但是这会导致每次创建一个新的工程就需要将 jar 包重复复制到 lib 目录下，从而造成工作区中存在大量重复的文件，让我们的工程显得很臃肿。</p>
<p>​    而使用 Maven 后每个 jar 包本身只在本地仓库中保存一份，需要 jar 包的工程只需要以坐标的方式简单的引用一下就可以了。不仅极大的节约了存储空间，让项目更轻巧，更避免了重复文件太多而造成的混乱。</p>
<p>​    jar 包往往不是孤立存在的，很多 jar 包都需要在其他 jar 包的支持下才能够正常工作，我们称之为jar 包之间的依赖关系。最典型的例子是：commons-fileupload-1.3.jar 依赖于 commons-io-2.0.1.jar，如果没有 IO 包，FileUpload 包就不能正常工作。</p>
<p>​    那么问题来了，你知道你所使用的所有 jar 包的依赖关系吗？当你拿到一个新的从未使用过的 jar包，你如何得知他需要哪些 jar 包的支持呢？如果不了解这个情况，导入的 jar 包不够，那么现有的程序将不能正常工作。再进一步，当你的项目中需要用到上百个 jar 包时，你还会人为的，手工的逐一确认它们依赖的其他 jar 包吗？这简直是不可想象的。</p>
<p>​    而引入 Maven 后，Maven 就可以替我们自动的将当前 jar 包所依赖的其他所有 jar 包全部导入进来，无需人工参与，节约了我们大量的时间和精力。</p>
<p>​    此外,JavaEE 开发中需要使用到的 jar 包种类繁多，几乎每个 jar 包在其本身的官网上的获取方式都不尽相同。为了查找一个 jar 包找遍互联网，身心俱疲，没有经历过的人或许体会不到这种折磨。不仅如此，费劲心血找的 jar 包里有的时候并没有你需要的那个类，又或者又同名的类没有你要的方法——以不规范的方式获取的 jar 包也往往是不规范的。</p>
<p>​    使用 Maven 我们可以享受到一个完全统一规范的 jar 包管理体系。你只需要在你的项目中以坐标的方式依赖一个 jar 包，Maven 就会自动从中央仓库进行下载，并同时下载这个 jar 包所依赖的其他 jar 包。</p>
<h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p>​    在实际项目中整合第三方框架，Web 工程中除了 Java 程序和 JSP 页面、图片等静态资源之外，还包括第三方框架的 jar 包以及各种各样的配置文件。所有这些资源都必须按照正确的目录结构部署到服务器上，项目才可以运行。</p>
<p>​    所以综上所述：构建就是以我们编写的 Java 代码、框架配置文件、国际化等其他资源文件、JSP 页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。</p>
<p>​    那么项目构建的全过程中都包含哪些环节呢？</p>
<p>​    ①<strong>清理</strong>：删除以前的编译结果，为重新编译做好准备。</p>
<p>​    ②<strong>编译</strong>：将 Java 源程序编译为字节码文件。</p>
<p>​    ③<strong>测试</strong>：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。</p>
<p>​    ④<strong>报告</strong>：在每一次测试后以标准的格式记录和展示测试结果。</p>
<p>​    ⑤<strong>打包</strong>：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应 war 包。</p>
<p>​    ⑥<strong>安装</strong>：在 Maven 环境下特指将打包的结果——jar 包或 war 包安装到本地仓库中。</p>
<p>​    ⑦<strong>部署</strong>：将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。</p>
<p>​    大家看看，项目的构建可绝不仅仅是编译软件这件事情。除了写代码，在项目层面做的大部分工作，都包含在构建的过程中。有了Maven，构建中的这些过程都能够进行良好的定义（模式、固化、共识，记住这些关键词哪），而且Maven能够帮我们串起来形成一个自动构建过程，这样比我们手动执行要高效得多。</p>
<h2 id="Maven核心概念"><a href="#Maven核心概念" class="headerlink" title="Maven核心概念"></a>Maven核心概念</h2><p>​    Maven 能够实现自动化构建是和它的内部原理分不开的，这里我们从 Maven 的九个核心概念入手，</p>
<p>​    看看 Maven 是如何实现自动化构建的</p>
<p>​        ①POM</p>
<p>​        ②约定的目录结构</p>
<p>​        ③坐标</p>
<p>​        ④依赖管理</p>
<p>​        ⑤仓库管理</p>
<p>​        ⑥生命周期</p>
<p>​        ⑦插件和目标</p>
<p>​        ⑧继承</p>
<p>​        ⑨聚合</p>
<h3 id="Maven-的核心程序"><a href="#Maven-的核心程序" class="headerlink" title="Maven 的核心程序"></a>Maven 的核心程序</h3><p>​    Maven 的<strong>核心程序</strong>中仅仅定义了抽象的生命周期，而具体的操作则是由 Maven 的<strong>插件</strong>来完成的。可是Maven 的插件并不包含在 Maven 的核心程序中，在首次使用时需要联网下载。</p>
<p>​    下载得到的插件会被保存到本地仓库中。本地仓库默认的位置是：~.m2\repository。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h4><p>​    Project Object Model：项目对象模型。将 Java <strong>工程</strong>的相关信息封装为<strong>对象</strong>作为便于操作和管理的<strong>模型</strong>。Maven 工程的核心配置。可以说学习 Maven 就是学习 pom.xml 文件中的配置。</p>
<h4 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h4><p>​    使用如下三个向量在 Maven 的仓库中唯一的确定一个 Maven 工程。</p>
<p>​    [1]groupid：公司或组织的域名倒序+当前项目名称</p>
<p>​    [2]artifactId：当前项目的模块名称</p>
<p>​    [3]version：当前模块的版本</p>
<p>​    使用如下三个向量在 Maven 的仓库中唯一的确定一个 Maven 工程。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如何通过坐标到仓库中查找 jar 包？</p>
<p>​    [1]将 gav 三个向量连起来</p>
<p>​    com.atguigu.maven+Hello+0.0.1-SNAPSHOT</p>
<p>​    [2]以连起来的字符串作为目录结构到仓库中查找</p>
<p>​    com/atguigu/maven/Hello/0.0.1-SNAPSHOT/Hello-0.0.1-SNAPSHOT.jar</p>
<p>​    ※<strong>注意</strong>：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install</p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>​    Maven 中最关键的部分，我们使用 Maven 最主要的就是使用它的依赖管理功能。要理解和掌握 Maven的依赖管理，我们只需要解决一下几个问题：</p>
<p>​    ①依赖的目的是什么</p>
<p>​    当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。那么如何在项目中以依赖的方式引入一个我们需要的 jar 包呢？</p>
<p>​    答案非常简单，就是使用 dependency 标签指定被依赖 jar 包的坐标就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">		&lt;groupId&gt;com.atguigu.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;Hello&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h5 id="依赖的范围"><a href="#依赖的范围" class="headerlink" title="依赖的范围"></a>依赖的范围</h5><p>大家注意到上面的依赖信息中除 了目标jar包的坐标还有一个scope设置,这是依赖的范围.依赖的范围有几个可选值,常用的是:compile  test provide三个    </p>
<p>​    compile: 编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的maven依赖，对于编译 测试 运行三种的classpath都有效。</p>
<p>​    test：测试依赖范围。使用此依赖范围的Maven依赖，只对于测试的classpath有效，在编译主代码或者运行主代码的时候都无法依赖此类依赖。典型的例子是jUnit,它只有在编译测试代码及运行测试代码的时候才有效。</p>
<p>​    provided:以提供依赖范围。使用此依赖范围的maven依赖，对于编译和测试classpath有效，但在运行时无效。典型的例子是servlet-api，编译和测试项目的时候需要该依赖，但在运行的时候，由于容器已经提供，就不需要maven重复地引入一遍。打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是打包阶段做了exclude操作</p>
<h5 id="依赖的排除"><a href="#依赖的排除" class="headerlink" title="依赖的排除"></a>依赖的排除</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span> <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="统一管理所依赖jar包的版本"><a href="#统一管理所依赖jar包的版本" class="headerlink" title="统一管理所依赖jar包的版本"></a>统一管理所依赖jar包的版本</h5><p>[1] 统一声明版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">atguigu.spring.version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">atguigu.spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 atguigu.spring.version 部分是自定义标签。</p>
<p> [2]引用前面声明的版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;atguigu.spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>[1]本地仓库:为当前本机电脑上的所有 Maven 工程服务。 </p>
<p>[2]远程仓库<br>    (1)私服:架设在当前局域网环境下，为当前局域网范围内的所有 Maven 工程服务。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/mavensifu.png" alt="Maven服务器"></p>
<p>(2)中央仓库：架设在 Internet 上，为全世界所有 Maven 工程服务。</p>
<p>(3)中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="什么是-Maven-的生命周期？"><a href="#什么是-Maven-的生命周期？" class="headerlink" title="什么是 Maven 的生命周期？"></a>什么是 Maven 的生命周期？</h3><p>Maven 生命周期定义了各个构建环节的执行顺序，有了这个清单，Maven 就可以自动化的执行构建命令了。</p>
<p>Maven 有三套相互独立的生命周期，分别是：</p>
<p>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。</p>
<p>②Default Lifecycle 构建的核心部分，编译，测试，打包，安装，部署等等。</p>
<p>③Site Lifecycle 生成项目报告，站点，发布站点。它们是相互独立的，你可以仅仅调用 clean 来清理工作目录，仅仅调用 site 来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p>
<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p>
<h3 id="Clean-生命周期"><a href="#Clean-生命周期" class="headerlink" title="Clean 生命周期"></a>Clean 生命周期</h3><p>Clean 生命周期一共包含了三个阶段：</p>
<p>①pre-clean 执行一些需要在 clean 之前完成的工作</p>
<p>②clean 移除所有上一次构建生成的文件</p>
<p>③post-clean 执行一些需要在 clean 之后立刻完成的工作</p>
<h3 id="Site-生命周期"><a href="#Site-生命周期" class="headerlink" title="Site 生命周期"></a>Site 生命周期</h3><p>①pre-site 执行一些需要在生成站点文档之前完成的工作</p>
<p>②site 生成项目的站点文档</p>
<p>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</p>
<p>④site-deploy 将生成的站点文档部署到特定的服务器上</p>
<p>这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。</p>
<h3 id="Default-生命周期"><a href="#Default-生命周期" class="headerlink" title="Default 生命周期"></a>Default 生命周期</h3><p>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p>
<p>validate</p>
<p>generate-sources</p>
<p>process-sources</p>
<p>generate-resources</p>
<p>process-resources 复制并处理资源文件，至目标目录，准备打包。</p>
<p>compile 编译项目的源代码。</p>
<p>process-classes</p>
<p>generate-test-sources</p>
<p>process-test-sources</p>
<p>generate-test-resources</p>
<p>process-test-resources 复制并处理资源文件，至目标测试目录。</p>
<p>test-compile 编译测试源代码。</p>
<p>process-test-classes</p>
<p>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</p>
<p>prepare-package</p>
<p>package 接受编译好的代码，打包成可发布的格式，如 JAR。</p>
<p>pre-integration-test</p>
<p>integration-test</p>
<p>post-integration-test</p>
<p>verify</p>
<p>install 将包安装至本地仓库，以让其它项目依赖。</p>
<p>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。</p>
<h3 id="生命周期与自动化构建"><a href="#生命周期与自动化构建" class="headerlink" title="生命周期与自动化构建"></a>生命周期与自动化构建</h3><p><strong>运行任何一个阶段的时候，它前面的所有阶段都会被运行</strong>，例如我们运行 mvn install 的时候，代码会被编译，测试，打包。这就是 Maven 为什么能够自动执行构建过程的各个环节的原因。此外，Maven 的插件机制是完全依赖 Maven 的生命周期的，因此理解生命周期至关重要。</p>
<h2 id="插件和目标"><a href="#插件和目标" class="headerlink" title="插件和目标"></a>插件和目标</h2><p>● Maven 的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。</p>
<p>● 每个插件都能实现多个功能，每个功能就是一个插件目标。</p>
<p>● Maven 的生命周期与插件目标相互绑定，以完成某个具体的构建任务。</p>
<p>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Maven继承的特性则能够帮助抽取各模块之前相同依赖和插件配置，在简化POM的同时还能存在各个模块配置的一致性。对于规范项目开发，避免可能存在的版本不一致的问题，有良好的预防作用。</p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><h3 id="为什么要使用聚合？"><a href="#为什么要使用聚合？" class="headerlink" title="为什么要使用聚合？"></a>为什么要使用聚合？</h3><p>将多个工程拆分为模块后，需要手动逐个安装到仓库后依赖才能够生效。修改源码后也需要逐个手动进行 clean 操作。而使用了聚合之后就可以批量进行 Maven 工程的安装、清理工作。</p>
<h3 id="如何配置聚合"><a href="#如何配置聚合" class="headerlink" title="如何配置聚合?"></a>如何配置聚合?</h3><p>在总的聚合工程中使用 modules/module 标签组合，指定模块工程的相对路径即可 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>依赖管理</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2023/12/06/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="意图"><a href="#意图" class="headerlink" title="意图:"></a>意图:</h3><p><strong>单例模式</strong>是一种创建型设计模式， 让你能够保证一个类只有一个实例， 并提供一个访问该实例的全局节点。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><ol>
<li><p><strong>保证一个类只有一个实例</strong>。 为什么会有人想要控制一个类所拥有的实例数量？ 最常见的原因是控制某些共享资源 （例如数据库或文件） 的访问权限。</p>
<p>它的运作方式是这样的： 如果你创建了一个对象， 同时过一会儿后你决定再创建一个新对象， 此时你会获得之前已创建的对象， 而不是一个新对象。</p>
<p>注意， 普通构造函数无法实现上述行为， 因为构造函数的设计决定了它<strong>必须</strong>总是返回一个新对象。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/singleton-comic-1-zh-2x.png"></p>
</li>
<li><p><strong>为该实例提供一个全局访问节点</strong>。 还记得你 （好吧， 其实是我自己） 用过的那些存储重要对象的全局变量吗？ 它们在使用上十分方便， 但同时也非常不安全， 因为任何代码都有可能覆盖掉那些变量的内容， 从而引发程序崩溃。</p>
<p>和全局变量一样， 单例模式也允许在程序的任何地方访问特定对象。 但是它可以保护该实例不被其他代码覆盖。</p>
<p>还有一点： 你不会希望解决同一个问题的代码分散在程序各处的。 因此更好的方式是将其放在同一个类中， 特别是当其他代码已经依赖这个类时更应该如此。</p>
</li>
</ol>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>所有单例的实现都包含以下两个相同的步骤：</p>
<ul>
<li>将默认构造函数设为私有， 防止其他对象使用单例类的 <code>new</code>运算符。</li>
<li>新建一个静态构建方法作为构造函数。 该函数会 “偷偷” 调用私有构造函数来创建对象， 并将其保存在一个静态成员变量中。 此后所有对于该函数的调用都将返回这一缓存对象。</li>
</ul>
<p>如果你的代码能够访问单例类， 那它就能调用单例类的静态方法。 无论何时调用该方法， 它总是会返回相同的对象。</p>
<h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性:"></a>适用性:</h3><p>当满足以下情况时，使用单例模式：</p>
<ul>
<li>确保一个类只有一个实例，并且客户端能够通过一个众所周知的访问点访问该实例。</li>
<li>唯一的实例能够被子类扩展, 同时客户端不需要修改代码就能使用扩展后的实例。</li>
</ul>
<p>一些典型的单例模式用例包括：</p>
<ul>
<li><code>logging</code>类</li>
<li>管理与数据库的链接</li>
<li>文件管理器（<code>File manager</code>）</li>
</ul>
<h3 id="已知使用："><a href="#已知使用：" class="headerlink" title="已知使用："></a>已知使用：</h3><ul>
<li><code>java.lang.Runtime#getRuntime()</code></li>
<li><code>java.awt.Desktop#getDesktop()</code></li>
<li><code>java.lang.System#getSecurityManager()</code></li>
</ul>
<h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><h4 id="饿汉式："><a href="#饿汉式：" class="headerlink" title="饿汉式："></a>饿汉式：</h4><p><strong>饿汉式</strong>的单例实现比较简单，其在类加载的时候，静态实例<code>instance</code> 就已创建并初始化好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Singleton singleton1 = Singleton.getInstance();</span><br><span class="line">    Singleton singleton2 = Singleton.getInstance();</span><br><span class="line">    System.out.println(<span class="string">&quot;singleton1=&quot;</span> + singleton1);</span><br><span class="line">    System.out.println(<span class="string">&quot;singleton2=&quot;</span> + singleton2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">singleton1&#x3D;com.design.patterns.Singleton@74a14482</span><br><span class="line">singleton2&#x3D;com.design.patterns.Singleton@74a14482</span><br></pre></td></tr></table></figure>

<h4 id="懒汉式-线程安全的懒加载方式"><a href="#懒汉式-线程安全的懒加载方式" class="headerlink" title="懒汉式(线程安全的懒加载方式):"></a>懒汉式(线程安全的懒加载方式):</h4><p>与饿汉式对应的是懒汉式，懒汉式为了支持延时加载，将对象的创建延迟到了获取对象的时候，但为了线程安全，不得不为获取对象的操作加锁，这就导致了低性能。</p>
<p>并且这把锁只有在第一次创建对象时有用，而之后每次获取对象，这把锁都是一个累赘。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeLazyLoadedSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  declared as volatile to ensure atomic access by multiple threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ThreadSafeLazyLoadedSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Private constructor to prevent instantiation from outside the class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadSafeLazyLoadedSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Protect against instantiation via reflection</span></span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Already initialized.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The instance doesn&#x27;t get created until the method is called for the first time.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ThreadSafeLazyLoadedSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> ThreadSafeLazyLoadedSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadSafeLazyLoadedSingleton instance1 = ThreadSafeLazyLoadedSingleton.getInstance();</span><br><span class="line">ThreadSafeLazyLoadedSingleton instance2 = ThreadSafeLazyLoadedSingleton.getInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;instance1=&quot;</span> + instance1);</span><br><span class="line">System.out.println(<span class="string">&quot;instance2=&quot;</span> + instance2);</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">instance1&#x3D;com.design.patterns.singleton.ThreadSafeLazyLoadedSingleton@74a14482</span><br><span class="line">instance2&#x3D;com.design.patterns.singleton.ThreadSafeLazyLoadedSingleton@74a14482</span><br></pre></td></tr></table></figure>

<h4 id="双重检测："><a href="#双重检测：" class="headerlink" title="双重检测："></a>双重检测：</h4><p>饿汉式和懒汉式的单例都有缺点，双重检测的实现方式解决了这两者的缺点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeDoubleCheckSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  declared as volatile to ensure atomic access by multiple threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ThreadSafeDoubleCheckSingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Private constructor to prevent instantiation from outside the class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadSafeDoubleCheckSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Protect against instantiation via reflection</span></span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Already initialized.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To be called by user to obtain instance of the class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadSafeDoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// local variable increases performance by 25 percent</span></span><br><span class="line">        ThreadSafeDoubleCheckSingleton result = instance;</span><br><span class="line">        <span class="comment">// Check if singleton instance is initialized.</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadSafeDoubleCheckSingleton.class) &#123;</span><br><span class="line">                result = instance;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    result = <span class="keyword">new</span> ThreadSafeDoubleCheckSingleton();</span><br><span class="line">                    instance = result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThreadSafeDoubleCheckSingleton instance1 = ThreadSafeDoubleCheckSingleton.getInstance();</span><br><span class="line">    ThreadSafeDoubleCheckSingleton instance2 = ThreadSafeDoubleCheckSingleton.getInstance();</span><br><span class="line">    System.out.println(instance1);</span><br><span class="line">    System.out.println(instance2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.design.patterns.singleton.ThreadSafeDoubleCheckSingleton@74a14482</span><br><span class="line">com.design.patterns.singleton.ThreadSafeDoubleCheckSingleton@74a14482</span><br></pre></td></tr></table></figure>

<h4 id="静态内部类："><a href="#静态内部类：" class="headerlink" title="静态内部类："></a>静态内部类：</h4><p> 这种方式能达到双检锁方式一样的功效，但实现更简单。</p>
<p>这种方式是 <code>Singleton</code> 类被装载了，<code>instance</code> 不一定被初始化。因为 <code>SingletonHolder</code> 类没有被主动使用，只有通过显式调用 <code>getInstance</code> 方法时，才会显式装载 <code>SingletonHolder</code> 类，从而实例化 <code>instance</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Private constructor to prevent instantiation from outside the class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClassSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The InstanceHolder is a static inner class, and it holds the Singleton instance.</span></span><br><span class="line"><span class="comment">     * It is not loaded into memory until the getInstance() method is called.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInnerClassSingleton INSTANCE = <span class="keyword">new</span> StaticInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When this method is called, the InstanceHolder is loaded into memory</span></span><br><span class="line"><span class="comment">     * and creates the Singleton instance. This method provides a global access point</span></span><br><span class="line"><span class="comment">     * for the singleton instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="枚举："><a href="#枚举：" class="headerlink" title="枚举："></a>枚举：</h4><p>一个只有一个元素的枚举类型是实现单例模式的最佳方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumSingleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDeclaringClass().getCanonicalName() + <span class="string">&quot;@&quot;</span> + hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    EnumSingleton instance1 = EnumSingleton.INSTANCE;</span><br><span class="line">    EnumSingleton instance2 = EnumSingleton.INSTANCE;</span><br><span class="line">    System.out.println(instance1);</span><br><span class="line">    System.out.println(instance2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.design.patterns.singleton.EnumSingleton@1956725890</span><br><span class="line">com.design.patterns.singleton.EnumSingleton@1956725890</span><br></pre></td></tr></table></figure>

<h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><ul>
<li>通过控制实例的创建和生命周期，违反了单一职责原则（SRP）。</li>
<li>鼓励使用全局共享实例，组织了对象及其使用的资源被释放。</li>
<li>代码变得耦合，给客户端的测试带来难度。</li>
<li>单例模式的设计可能会使得子类化（继承）单例变得几乎不可能</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2023/12/18/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/prototype-2x.png" style="zoom:50%;" />

<p>原型模式的定义如下：</p>
<blockquote>
<p>Specify the kinds of objects to create using a prototypical instance,and create new objects by copying this prototype.</p>
</blockquote>
<p>使用原型实例指定要创建的对象类型，并通过复制此原型来创建新对象。</p>
<p>还记得多莉吗？克隆羊！我们不讨论细节，但这里的关键点是这一切都与克隆有关。</p>
<p>用简单的话来说</p>
<blockquote>
<p>通过克隆基于现有对象创建对象。</p>
</blockquote>
<p>维基百科说</p>
<blockquote>
<p>原型模式是软件开发中的一种创造性设计模式。当要创建的对象的类型由原型实例确定时使用，原型实例将被克隆以生成新的对象。</p>
</blockquote>
<p>简而言之，它允许你创建一个现有对象的副本，并根据你的需要对其进行修改，而不是费尽周折地从头开始创建一个对象并进行设置。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/1200px-Prototype_UML.png" style="zoom:67%;" />

<p>原型模式的结构很简单:</p>
<ol>
<li><code>Prototype：</code> 这个是一个接口，里面必须含有一个可以克隆自己的方法。在Java中，我们可以使用JDK自带的<code>java.lang.Cloneable</code>接口来替代此接口。</li>
<li><code>ConcretePrototype：</code>实现了<code>Prototype</code>接口的原型对象</li>
</ol>
<p>原型模式主要用于对象的复制，它的核心是就是类图中的原型类 Prototype。Prototype 类需要具备以下两个条件：</p>
<ul>
<li>实现 <code>Cloneable</code> 接口。在 java 语言有一个 <code>Cloneable</code> 接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用 <code>clone</code> 方法。在 java 虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出 <code>CloneNotSupportedException</code> 异常。</li>
<li>重写 <code>Object</code> 类中的 <code>clone</code> 方法。Java 中，所有类的父类都是 <code>Object</code> 类，<code>Object</code> 类中有一个 <code>clone</code> 方法，作用是返回对象的一个拷贝，但是其作用域 <code>protected</code> 类型的，一般的类无法调用，因此，<code>Prototype</code> 类需要将 <code>clone</code> 方法的作用域修改为 <code>public</code> 类型。</li>
</ul>
<p><strong>程序化示例：</strong></p>
<p>第一步，<code>Prototype</code>抽象原型类，声明了<code>copy</code>方法，它可以是接口或基类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype&lt;T&gt; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Prototype&lt;T&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步，原型类</p>
<p>这个类就是我们的原型类，准备被其他人克隆使用的，所以其实现<code>Prototype </code>接口，具备克隆的能力。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneSheep</span> <span class="keyword">extends</span> <span class="title">Prototype</span>&lt;<span class="title">CloneSheep</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloneSheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步，创建原型类的工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneSheepFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloneSheep cloneSheep;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CloneSheepFactory</span><span class="params">(CloneSheep cloneSheep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cloneSheep = cloneSheep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CloneSheep <span class="title">createCloneSheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (CloneSheep) cloneSheep.copy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CloneSheepFactory sheepFactory = <span class="keyword">new</span> CloneSheepFactory(<span class="keyword">new</span> CloneSheep(<span class="string">&quot;多莉&quot;</span>, <span class="number">7</span>, <span class="string">&quot;白色&quot;</span>));</span><br><span class="line">    CloneSheep cloneSheep1 = sheepFactory.createCloneSheep();</span><br><span class="line">    CloneSheep cloneSheep2 = sheepFactory.createCloneSheep();</span><br><span class="line">    CloneSheep cloneSheep3 = sheepFactory.createCloneSheep();</span><br><span class="line">    System.out.println(cloneSheep1);</span><br><span class="line">    System.out.println(cloneSheep2);</span><br><span class="line">    System.out.println(cloneSheep3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CloneSheep&#123;name&#x3D;&#39;多莉&#39;, age&#x3D;7, color&#x3D;&#39;白色&#39;&#125;</span><br><span class="line">CloneSheep&#123;name&#x3D;&#39;多莉&#39;, age&#x3D;7, color&#x3D;&#39;白色&#39;&#125;</span><br><span class="line">CloneSheep&#123;name&#x3D;&#39;多莉&#39;, age&#x3D;7, color&#x3D;&#39;白色&#39;&#125;</span><br></pre></td></tr></table></figure>

<p>使用场景</p>
<ul>
<li>当一个对象的构建代价过高时。例如某个对象里面的数据需要访问数据库才能拿到，而我们却要多次构建这样的对象。</li>
<li>当构建的多个对象，均需要处于某种原始状态时，就可以先构建一个拥有此状态的原型对象，其他对象基于原型对象来修改。</li>
</ul>
<p>已知用途</p>
<ul>
<li><code>java.lang.Object#clone()</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>原型模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2023/12/14/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>工厂模式提供了一种将对象的实例化过程封装在工厂类中的方式。通过使用工厂模式，可以将对象的创建与使用代码分离，提供一种统一的接口来创建不同类型的对象。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<p>提供封装在工厂类中的静态方法，以隐藏对象初始化逻辑并使客户端代码专注于对象的使用而不是初始化。</p>
<p><strong>解释</strong></p>
<p>现实世界的例子:</p>
<div class="note primary no-icon"><p>想象一位炼金术士即将制造硬币。炼金术士必须能够制造金币和银币，并且必须能够在不修改现有源代码的情况下在它们之间进行切换。工厂模式通过提供静态构造方法来实现这一点，可以使用相关参数进行调用。</p>
</div>

<p>维基百科说:</p>
<div class="note primary no-icon"><p>工厂是一个用于创建其他对象的对象 - 正式而言，工厂是一个函数或方法，返回不同原型或类的对象。</p>
</div>

<p><strong>代码示例:</strong></p>
<p>我们有一个接口<code>Coin</code>和两个实现类<code>GoldCoin</code>和<code>SliverCoin</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Coin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldCoin</span>  <span class="keyword">implements</span> <span class="title">Coin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是金硬币！&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SliverCoin</span> <span class="keyword">implements</span> <span class="title">Coin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是银硬币！&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的枚举代表我们支持的货币类型（<code>GoldCoin</code> 和 <code>SliverCoin</code>）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CoinType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GOLD(GoldCoin::<span class="keyword">new</span>),</span><br><span class="line">    SLIVER(SliverCoin::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Supplier&lt;Coin&gt; constructor;</span><br><span class="line"></span><br><span class="line">    CoinType(Supplier&lt;Coin&gt; constructor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.constructor = constructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Supplier&lt;Coin&gt; <span class="title">getConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> constructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们有封装了静态方法<code>getCoin</code>的工厂类<code>CoinFactory</code>来创建硬币对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoinFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Coin <span class="title">getCoin</span><span class="params">(CoinType coinType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coinType.getConstructor().get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，在客户端代码上，我们可以使用工厂类创建不同类型的硬币。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Coin goldCoin = CoinFactory.getCoin(CoinType.GOLD);</span><br><span class="line">    Coin sliverCoin = CoinFactory.getCoin(CoinType.SLIVER);</span><br><span class="line">    System.out.println(goldCoin.getDescription());</span><br><span class="line">    System.out.println(sliverCoin.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这是金硬币！</span><br><span class="line">这是银硬币！</span><br></pre></td></tr></table></figure>

<p>随着需求的改变，现在炼金术士还必须能够制造铜币。我们只需要新增铜币的类<code>CopperCoin</code>并现实<code>Coin</code>接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopperCoin</span> <span class="keyword">implements</span> <span class="title">Coin</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是铜硬币!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在枚举类中新增铜币类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CoinType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    GOLD(GoldCoin::<span class="keyword">new</span>),</span><br><span class="line">    SLIVER(SliverCoin::<span class="keyword">new</span>),</span><br><span class="line">    COPPER(copperCoin::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Supplier&lt;Coin&gt; constructor;</span><br><span class="line"></span><br><span class="line">    CoinType(Supplier&lt;Coin&gt; constructor) &#123;</span><br><span class="line">        <span class="keyword">this</span>.constructor = constructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Supplier&lt;Coin&gt; <span class="title">getConstructor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> constructor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们可以直接调用工厂类的静态方法来创建铜币。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Coin copperCoin = CoinFactory.getCoin(CoinType.COPPER);</span><br><span class="line">    System.out.println(copperCoin.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是铜硬币!</span><br></pre></td></tr></table></figure>

<p><strong>适用性:</strong></p>
<p>当您只关心对象的创建和使用，而不关心它如何创建和管理时，请使用工厂模式。</p>
<p>优点</p>
<ul>
<li>允许将所有对象创建保留在一处，并避免传播“新”对象跨代码库的关键字。</li>
<li>允许编写松散耦合的代码。它的一些主要优点包括更好的可测试性、易于理解的代码、可交换的组件、可扩展性和独立的功能。</li>
</ul>
<p>缺点</p>
<ul>
<li>代码变得比应有的更加复杂。</li>
</ul>
<p><strong>已知使用：</strong></p>
<ul>
<li><code>java.util.Calendar#getInstance()</code></li>
<li><code>java.util.ResourceBundle#getBundle()</code></li>
<li><code>java.text.NumberFormat#getInstance()</code></li>
<li><code>java.nio.charset.Charset#forName()</code></li>
<li><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)（根据协议返回不同的单例对象）</code></li>
<li><code>java.util.EnumSet#of()</code></li>
<li><code>javax.xml.bind.JAXBContext#createMarshaller()以及其他类似的方法。</code></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>avalon.js入门教程</title>
    <url>/2021/07/13/avalonjs%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="关于AvalonJs"><a href="#关于AvalonJs" class="headerlink" title="关于AvalonJs"></a>关于AvalonJs</h2><p>avalon是一个简单易用迷你的MVVM框架，它最早发布于2012.09.15，为解决同一业务逻辑存在各种视图呈现而开发出来的。 事实上，这问题其实也可以简单地利用一般的前端模板加jQuery 事件委托 搞定，但随着业务的膨胀， 代码就充满了各种选择器与事件回调，难以维护。因此彻底的将业务与逻辑分离，就只能求助于架构。 最初想到的是MVC，尝试过backbone，但代码不降反升，很偶尔的机会，碰上微软的WPF， 优雅的MVVM架构立即吸引住了作者，作者觉得这就是他一直追求的解决之道。</p>
<p>MVVM将所有前端代码彻底分成两部分，视图的处理通过绑定实现（angular有个更炫酷的名词叫指令）， 业务逻辑则集中在一个个叫VM的对象中处理。我们只要操作VM的数据，它就自然而然地神奇地同步到视图。</p>
<p>我们从一个完整的例子开始认识 avalon ：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot; background: #a9ea00;&quot;</span> <span class="attr">ms-css-width</span>=<span class="string">&quot;w&quot;</span> <span class="attr">ms-css-height</span>=<span class="string">&quot;h&quot;</span>  <span class="attr">ms-click</span>=<span class="string">&quot;click&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; w &#125;&#125; x &#123;&#123; h &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>W: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;w&quot;</span> <span class="attr">data-duplex-event</span>=<span class="string">&quot;change&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>H: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;h&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                 $id: <span class="string">&quot;box&quot;</span>,<span class="comment">//告诉avalon这个Model是作用于哪个ms-controller的</span></span></span><br><span class="line">                  w: 100,</span><br><span class="line">                  h: 100,</span><br><span class="line"><span class="javascript">                  click: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    vm.w = <span class="built_in">parseFloat</span>(vm.w) + <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                    vm.h = <span class="built_in">parseFloat</span>(vm.h) + <span class="number">10</span>;</span></span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们可以看到在JS中，没有任何一行操作DOM的代码，也没有选择器，非常干净。在HTML中， 我们发现就是多了一些以ms-开始的属性与<code> {{ }} </code>标记，有的是用于渲染样式， 有的是用于绑定事件。这些属性或标记，实质就是avalon的<strong>绑定系统</strong>的一部分。绑定（有的框架也将之称为指令）， 负责帮我们完成视图的各种操作，相当于一个隐形的<strong>jQuery</strong>。正因为有了绑定，我们就可以在JS代码专注业务逻辑本身， 写得更易维护的代码！</p>
<hr>
<h2 id="视图模型"><a href="#视图模型" class="headerlink" title="视图模型"></a>视图模型</h2><p>视图模型，ViewModel，也经常被略写成VM，是通过avalon.define方法进行定义。生成的对象会默认放到avalon.vmodels对象上。 每个VM在定义时必须指定$id。如果你有某些属性不想监听，可以直接将此属性名放到$skipArray数组中。</p>
<p>接着我们说一些重要的概念：</p>
<ul>
<li>$id， 每个VM都有$id，VM的ID，方便在avalon.vmodels里查找到它，或用在ms-controller、ms-important上。如果VM的某一个属性是对象（并且它是可监控的），也会转换为一个VM，这个子VM也会默认加上一个$id。 但只有用户添加的那个最外面的$id会注册到avalon.vmodels对象上。</li>
<li>监控属性，一般地，VM中的属性都会转换为此种属性，当我们以vm.aaa = yyy这种形式更改其值时，就会同步到视图上的对应位置上。</li>
<li>计算属性，定义时为一个对象，并且只存在set,get两个函数或只有一个get一个函数。它是监控属性的高级形式，表示它的值是通过函数计算出来的，是依赖于其他属性合成出来的。</li>
<li>监控数组，定义时为一个数组，它会添加了许多新方法，但一般情况下与普通数组无异，但调用它的push, unshift, remove, pop等方法会同步视图。</li>
<li>非监控属性，这包括框架添加的$id属性，以$开头的属性，放在$skipArray数组中的属性，值为函数、元素节点、文本节点的属性，总之，改变它们的值不会产生同步视图的效果。</li>
</ul>
<p>$skipArray 是一个字符串数组，只能放当前对象的直接属性名，想禁止子对象的某个属性的监听，在那个子对象上再添加一个$skipAray数组就行了。</p>
<p>视图里面，我们可以使用ms-controller, ms-important指定一个VM的作用域。</p>
<p>此外，在ms-each, ms-with，ms-repeat绑定属性中，它们会创建一个临时的VM，我们称之为代理VM， 用于放置$key, $val, $index, $last, $first, $remove等变量或方法。</p>
<p>另外，avalon不允许在VM定义之后，再追加新属性与方法，比如下面的方式是错误的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">    $id:   <span class="string">&quot;test&quot;</span>, </span><br><span class="line">    test1: <span class="string">&quot;点击测试按钮没反应 绑定失败&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">vm.one = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    vm.test1 = <span class="string">&quot;绑定成功&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>也不允许在define里面直接调用方法或ajax。</p>
<p><strong>我们再看看如何更新VM中的属性(重点)：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> model : avalon.define(&#123;</span><br><span class="line">     $id:  <span class="string">&quot;update&quot;</span>, </span><br><span class="line">     aaa : <span class="string">&quot;str&quot;</span>,</span><br><span class="line">     bbb : <span class="literal">false</span>,</span><br><span class="line">     ccc : <span class="number">1223</span>,</span><br><span class="line">     time : <span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">     simpleArray : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">     objectArray : [&#123;<span class="attr">name</span>: <span class="string">&quot;a&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;b&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;c&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;d&quot;</span>&#125;],</span><br><span class="line">     object : &#123;</span><br><span class="line">         o1: <span class="string">&quot;k1&quot;</span>,</span><br><span class="line">         o2: <span class="string">&quot;k2&quot;</span>,</span><br><span class="line">         o3: <span class="string">&quot;k3&quot;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     simpleArray : [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">     objectArray : [&#123;<span class="attr">name</span>: <span class="string">&quot;a&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;aa&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;b&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;bb&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;c&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;cc&quot;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;d&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;dd&quot;</span>&#125;],</span><br><span class="line">     object : &#123;</span><br><span class="line">         o1: <span class="string">&quot;k1&quot;</span>,</span><br><span class="line">         o2: <span class="string">&quot;k2&quot;</span>,</span><br><span class="line">         o3: <span class="string">&quot;k3&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">//如果是更新简单数据类型（string, boolean, number）或Date类型</span></span><br><span class="line">           model.aaa = <span class="string">&quot;这是字符串&quot;</span></span><br><span class="line">           model.bbb = <span class="literal">true</span></span><br><span class="line">           model.ccc = <span class="number">999999999999</span></span><br><span class="line">           <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">           model.time = <span class="keyword">new</span> <span class="built_in">Date</span>(date.setFullYear(<span class="number">2005</span>))</span><br><span class="line">       &#125;, <span class="number">2000</span>)</span><br><span class="line"> </span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">//如果是数组，注意保证它们的元素的类型是一致的</span></span><br><span class="line">           <span class="comment">//只能全是字符串，或是全是布尔，不能有一些是这种类型，另一些是其他类型</span></span><br><span class="line">           <span class="comment">//这时我们可以使用set方法来更新（它有两个参数，第一个是index，第2个是新值）</span></span><br><span class="line">           model.simpleArray.set(<span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">           model.simpleArray.set(<span class="number">2</span>, <span class="number">3000</span>)</span><br><span class="line">           model.objectArray.set(<span class="number">0</span>, &#123;<span class="attr">name</span>: <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;xxx&quot;</span>&#125;)</span><br><span class="line">       &#125;, <span class="number">2500</span>)</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           model.objectArray[<span class="number">1</span>].name = <span class="string">&quot;5555&quot;</span></span><br><span class="line">       &#125;, <span class="number">3000</span>)</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">//如果要更新对象，直接赋给它一个对象，注意不能将一个VM赋给它，可以到VM的$model赋给它（要不会在IE6-8中报错）</span></span><br><span class="line">           model.object = &#123;</span><br><span class="line">               aaaa: <span class="string">&quot;aaaa&quot;</span>,</span><br><span class="line">               bbbb: <span class="string">&quot;bbbb&quot;</span>,</span><br><span class="line">               cccc: <span class="string">&quot;cccc&quot;</span>,</span><br><span class="line">               dddd: <span class="string">&quot;dddd&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">3000</span>)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;aaa&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;bbb&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;ccc&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;time | date(&quot;yyyy - MM - dd mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">ms-each</span>=<span class="string">&quot;simpleArray&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-each</span>=<span class="string">&quot;objectArray&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">option</span> <span class="attr">ms-value</span>=<span class="string">&quot;el.value&quot;</span>&gt;</span>&#123;&#123;el.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ol</span> <span class="attr">ms-with</span>=<span class="string">&quot;object&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;$key&#125;&#125;                &#123;&#123;$val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><p>avalon的绑定（或指令），拥有以下三种类型：</p>
<ul>
<li><code> {{ }} </code>插值表达式， 这是开标签与闭标签间，换言之，也是位于文本节点中，innerText里。<code> {{ }} </code>里面可以添加各种过滤器（以|进行标识）。值得注意的是<code> {{ }} </code>实际是文本绑定(ms-text)的一种形式。</li>
<li>ms-<em>绑定属性， 这是位于开标签的内部， 95%的绑定都以这种形式存在。 它们的格式大概是这样划分的</em>“ms” + type + “-“ + param1 + “-“ + param1 + “-“ + param2 + … + number = value</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ms-skip                &#x2F;&#x2F;这个绑定属性没有值</span><br><span class="line">ms-controller&#x3D;&quot;expr&quot;   &#x2F;&#x2F;这个绑定属性没有参数</span><br><span class="line">ms-if&#x3D;&quot;expr&quot;           &#x2F;&#x2F;这个绑定属性没有参数</span><br><span class="line">ms-if-loop&#x3D;&quot;expr&quot;       &#x2F;&#x2F;这个绑定属性有一个参数</span><br><span class="line">ms-repeat-el&#x3D;&quot;array&quot;    &#x2F;&#x2F;这个绑定属性有一个参数</span><br><span class="line">ms-attr-href&#x3D;&quot;xxxx&quot;    &#x2F;&#x2F;这个绑定属性有一个参数</span><br><span class="line">ms-attr-src&#x3D;&quot;xxx&#x2F;&#123;&#123;a&#125;&#125;&#x2F;yyy&#x2F;&#123;&#123;b&#125;&#125;&quot;   &#x2F;&#x2F;这个绑定属性的值包含插值表达式，注意只有少部分表示字符串类型的属性可以使用插值表达式</span><br><span class="line">ms-click-1&#x3D;&quot;fn&quot;       &#x2F;&#x2F;这个绑定属性的名字最后有数字，这是方便我们绑定更多点击事件 ms-click-2&#x3D;&quot;fn&quot;  ms-click-3&#x3D;&quot;fn&quot;  </span><br><span class="line">ms-on-click&#x3D;&quot;fn&quot;     &#x2F;&#x2F;只有表示事件与类名的绑定属性的可以加数字，如这个也可以写成  ms-on-click-0&#x3D;&quot;fn&quot;    </span><br><span class="line">ms-class-1&#x3D;&quot;xxx&quot; ms-class-2&#x3D;&quot;yyy&quot; ms-class-3&#x3D;&quot;xxx&quot; &#x2F;&#x2F;数字还表示绑定的次序</span><br><span class="line">ms-css-background-color&#x3D;&quot;xxx&quot; &#x2F;&#x2F;这个绑定属性有两个参数，但在css绑定里，相当于一个，会内部转换为backgroundColor </span><br><span class="line">ms-duplex-aaa-bbb-string&#x3D;&quot;xxx&quot;&#x2F;&#x2F;这个绑定属性有三个参数，表示三种不同的拦截操作</span><br></pre></td></tr></table></figure>

<ul>
<li>data-xxx-yyy=”xxx”，辅助指令，比如ms-duplex的某一个辅助指令为data-duplex-event=”change”，ms-repeat的某一个辅助指令为data-repeat-rendered=”yyy”</li>
</ul>
<hr>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>avalon的指令是一个非常重要的东西,它用来引入一些新的HTML语法, 使元素拥有特定的行为。 举例来说，静态的HTML不知道如何来创建和展现一个日期选择器控件。 让HTML能识别这个语法，我们需要使用指令。 指令通过某种方法来创建一个能够支持日期选择的元素。</p>
<p>指令一共拥有3种形式</p>
<ol>
<li>插值表达式</li>
<li>自定义标签</li>
<li>绑定属性</li>
</ol>
<p>其中<code>绑定属性</code>的种类是最多的，它们都位置于元素节点中，以ms-开头或以:开头(avalon2.1.7新增)</p>
<p>绑定属性的属性名是以-分成几段 其中第二个就是指令的名字, 如ms-css, ms-attr, ms-html, ms-text, ms-on都是来源于jQuery同名方法名, 简单好记.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ms-on-click</span>=<span class="string">&quot;@clickFn&quot;</span> <span class="attr">ms-if</span>=<span class="string">&quot;@toggle&quot;</span>&gt;</span>&#123;&#123;@name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/avalon/avalon01.png"></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/avalon/avalon02.jpg"></p>
<hr>
<h3 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h3><p>位于文本节点中的双重花括号,当然这个可以配置.此指令其中文本ms-text指令的简单形式.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="string">&#x27;aaa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            bbb: <span class="string">&#x27;bbb&#x27;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@aaa&#125;&#125;&#123;&#123;@bbb&#125;&#125; 这个性能差些<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@aaa+@bbb&#125;&#125; 这个性能好些<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@aaa+@bbb  | uppercase&#125;&#125; 选择器必须放在表达值的后端<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code> {{ }} </code>里面可以添加各种过滤器（以|进行标识）。值得注意的是<code> {{ }} </code>实际是文本绑定(ms-text)的一种形式。</p>
<h3 id="忽略扫描绑定-ms-skip"><a href="#忽略扫描绑定-ms-skip" class="headerlink" title="忽略扫描绑定(ms-skip)"></a>忽略扫描绑定(ms-skip)</h3><p>这是ms-skip负责。只要元素定义了这个属性，无论它的值是什么，它都不会扫描其他属性及它的子孙节点了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span> <span class="attr">ms-skip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ms-repeat-num</span>=<span class="string">&quot;cd&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">ms-attr-name</span>=<span class="string">&quot;num&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ms-data-xxx</span>=<span class="string">&quot;$index&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;$index&#125;&#125; - &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    A：<span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-each</span>=<span class="string">&quot;arr&quot;</span>&gt;</span>&#123;&#123;yy&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ms-controller"><a href="#ms-controller" class="headerlink" title="ms-controller"></a>ms-controller</h3><p>这个指令是用于圈定某个VM的作用域范围(换言之,这个元素的outerHTML会被扫描编译,所有ms-*及双花括号替换成vm中的内容),ms-controller的属性值只能是某个VM的$id</p>
<p>ms-controller的元素节点下面的其他节点也可以使用ms-controller</p>
<p>每个VM的$id可以在页面上出现一次, 因此不要在ms-for内使用ms-controller.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  avalon.define(&#123;</span><br><span class="line"><span class="javascript">      $id: <span class="string">&quot;AAA&quot;</span>,</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;liger&quot;</span>,</span></span><br><span class="line"><span class="javascript">      color: <span class="string">&quot;green&quot;</span>　　</span></span><br><span class="line">  &#125;);</span><br><span class="line">  avalon.define(&#123;</span><br><span class="line"><span class="javascript">      $id: <span class="string">&quot;BBB&quot;</span>,</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;sphinx&quot;</span>,</span></span><br><span class="line"><span class="javascript">      color: <span class="string">&quot;red&quot;</span>　　</span></span><br><span class="line">  &#125;);　　</span><br><span class="line">  avalon.define(&#123;</span><br><span class="line"><span class="javascript">      $id: <span class="string">&quot;CCC&quot;</span>,</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;dragon&quot;</span> <span class="comment">//不存在color</span></span></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  avalon.define(&#123;</span><br><span class="line"><span class="javascript">      $id: <span class="string">&quot;DDD&quot;</span>,</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;sirenia&quot;</span> <span class="comment">//不存在color</span></span></span><br><span class="line"></span><br><span class="line">  &#125;);　</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;AAA&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;@name&#125;&#125; : &#123;&#123;@color&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;BBB&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;@name&#125;&#125; : &#123;&#123;@color&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;CCC&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;@name&#125;&#125; : &#123;&#123;@color&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-important</span>=<span class="string">&quot;DDD&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;@name&#125;&#125; : &#123;&#123;@color&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当avalon的扫描引擎打描到ms-controller/ms-important所在元素时, 会尝试移除ms-controller类名.因此基于此特性,我们可以在首页渲染页面时, 想挡住双花括号乱码问题,可以尝试这样干(与avalon1有点不一样):</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ms-controller</span>&#123;</span><br><span class="line">   <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-important"><a href="#ms-important" class="headerlink" title="ms-important"></a>ms-important</h3><p>这个指令是用于圈定某个VM的作用域范围(换言之,这个元素的outerHTML会被扫描编译,所有<code>ms-*</code>及双花括号替换成vm中的内容),ms-important的属性值只能是某个VM的$id</p>
<p>ms-important的元素节点下面的其他节点也可以使用<a href="http://www.itprobie.com/jc/avalon/avalon_html/ms-controller.html">ms-controller</a>或ms-important</p>
<blockquote>
<p>与ms-controller不一同的是,当某个属性在ms-important的VM找不到时,就不会所上寻找</p>
</blockquote>
<blockquote>
<p>不要在ms-for内使用ms-important.</p>
</blockquote>
<p>ms-important这特性有利协作开发,每个人的VM都不会影响其他人,并能大大提高性能</p>
<p>ms-important只能用于ms-controller的元素里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-important</span>=<span class="string">&#x27;aaa&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;ccc&#x27;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-important</span>=<span class="string">&#x27;ddd&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;bbb&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-attr"><a href="#ms-attr" class="headerlink" title="ms-attr"></a>ms-attr</h3><p>属性绑定用于为元素节点添加一组属性, 因此要求属性值为对象或数组形式. 数组最后也会合并成一个对象.然后取此对象的键名为属性名, 键值为属性值为元素添加属性</p>
<p>如果键名如果为for, char这样的关键字,请务必在两边加上引号</p>
<p>如果键名如果带横杠,请务必转换为驼峰风格或两边加上引号</p>
<p>注意,不能在ms-attr中设置style属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ms-attr</span>=<span class="string">&quot;&#123;style:&#x27;width:20px&#x27;&#125;&quot;</span>&gt;</span>这样写是错的,需要用ms-css指令!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            obj: &#123;<span class="attr">title</span>: <span class="string">&#x27;普通 &#x27;</span>, <span class="attr">algin</span>: <span class="string">&#x27;left&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            active: &#123;<span class="attr">title</span>: <span class="string">&#x27;激活&#x27;</span>&#125;,</span></span><br><span class="line">            width: 111,</span><br><span class="line">            height: 222,</span><br><span class="line"><span class="javascript">            arr: [&#123;<span class="attr">img</span>: <span class="string">&#x27;aaa&#x27;</span>&#125;, &#123;<span class="attr">img</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;, &#123;<span class="attr">img</span>: <span class="string">&#x27;ccc&#x27;</span>&#125;],</span></span><br><span class="line"><span class="javascript">            path: <span class="string">&#x27;../aaa/image.jpg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            toggle: <span class="literal">false</span>,</span></span><br><span class="line">            array: [&#123;width: 1&#125;, &#123;height: 2&#125;]</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ms-attr</span>=<span class="string">&quot;@obj&quot;</span>&gt;</span>直接引用对象<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">ms-attr</span>=<span class="string">&quot;&#123;src: @path&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @arr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ms-attr</span>=<span class="string">&quot;&#123;href:&#x27;http://www.ccc.xxx/ddd/&#x27;+ el.img&#125;&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:attr</span>=<span class="string">&quot;&#123;width: @width, height: @height&#125;&quot;</span>&gt;</span>使用对象字面量<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:attr</span>=<span class="string">&quot;@array&quot;</span>&gt;</span>直接引用数组<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:attr</span>=<span class="string">&quot;[@obj, @toggle &amp;&amp; @active ]&quot;</span> <span class="attr">:click</span>=<span class="string">&quot;@toggle = !@toggle&quot;</span>&gt;</span>选择性添加多余属性或重写已有属性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-css"><a href="#ms-css" class="headerlink" title="ms-css"></a>ms-css</h3><p>CSS绑定用于为元素节点添加一组样式, 因此要求属性值为对象或数组形式. 数组最后也会合并成一个对象.然后取此对象的键名为样式名, 键值为样式值为元素添加样式</p>
<blockquote>
<p>如果键名为表示长宽,字体大小这样的样式, 那么键值不需要加单位,会自动加上px</p>
<p>如果键名如果为float,请务必在两边加上引号</p>
<p>如果键名如果为font-size,请务必转换为驼峰风格或两边加上引号</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            obj: &#123;<span class="attr">backgroundColor</span>: <span class="string">&#x27;#3bb0d0&#x27;</span>,<span class="attr">width</span>:<span class="number">300</span>, <span class="attr">height</span>:<span class="number">50</span>, <span class="string">&#x27;text-align&#x27;</span>: <span class="string">&#x27;center&#x27;</span>&#125;,<span class="comment">//属性名带-,必须用引号括起</span></span></span><br><span class="line"><span class="javascript">            active: &#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;,</span></span><br><span class="line">            width:  300,</span><br><span class="line">            height: 60,</span><br><span class="line"><span class="javascript">            toggle: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            array: [&#123;<span class="attr">width</span>:<span class="number">100</span>&#125;,&#123;<span class="attr">height</span>:<span class="number">50</span>&#125;,&#123;<span class="attr">border</span>: <span class="string">&#x27;1px solid #5cb85c&#x27;</span>&#125;]</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-css</span>=<span class="string">&quot;@obj&quot;</span>&gt;</span>直接引用对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:css</span>=<span class="string">&quot;&#123;width: @width, height: @height,background: &#x27;pink&#x27;&#125;&quot;</span>&gt;</span>使用对象字面量<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:css</span>=<span class="string">&quot;@array&quot;</span>&gt;</span>直接引用数组<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:css</span>=<span class="string">&quot;[@obj, @toggle &amp;&amp; @active ]&quot;</span> <span class="attr">:click</span>=<span class="string">&quot;@toggle = !@toggle&quot;</span>&gt;</span>选择性添加多余属性或重写已有属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是 设置背景图片是比较复杂</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:css</span>=<span class="string">&quot;&#123;background: &#x27;url(&#x27;+@imageUrl + &#x27;) no-repeat center center;&#x27;&#125;&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:css</span>=<span class="string">&quot;&#123;backgroundImage: &#x27;url(&#x27;+@imageUrl + &#x27;)&#x27;&#125;&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-text"><a href="#ms-text" class="headerlink" title="ms-text"></a>ms-text</h3><p>文本绑定是最简单的绑定,它其实是双花括号插值表达式的一种形式</p>
<p>它要求VM对应的属性的类型为字符串, 数值及布尔, 如果是null, undefined将会被转换为空字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ms-text</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span>不使用过滤器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ms-text</span>=<span class="string">&quot;@aaa | uppercase&quot;</span>&gt;</span>使用过滤器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-html"><a href="#ms-html" class="headerlink" title="ms-html"></a>ms-html</h3><p>HTML绑定类似于文本绑定,能将一个元素清空,填上你需要的内容</p>
<p>它要求VM对应的属性的类型为字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ms-html</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span>不使用过滤器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ms-html</span>=<span class="string">&quot;@aaa | uppercase&quot;</span>&gt;</span>使用过滤器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过ms-html异步加载大片内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">:controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">  $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line"><span class="javascript">  aaa: <span class="string">&quot;loading...&quot;</span></span></span><br><span class="line">&#125;)</span><br><span class="line">jQuery.ajax(&#123;</span><br><span class="line"><span class="javascript">   url:<span class="string">&#x27;action.do&#x27;</span>,</span></span><br><span class="line"><span class="javascript">   success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">      vm.aaa = data.html</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-html</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-duplex"><a href="#ms-duplex" class="headerlink" title="ms-duplex"></a>ms-duplex</h3><p>双工绑定是MVVM框架中最强大的指令.react推崇单向数据流,没有双工绑定, 那么需要rudex等额外的库来实现相同的功能.</p>
<p>双工绑定只要用于表单元素上.或当一个div设置了contenteditable为true,也可以用ms-duplex指令.</p>
<p>注意：ms-duplex与ms-checked不能在同时使用于一个元素节点上。</p>
<p>注意：如果表单元素同时绑定了ms-duplex=xxx与ms-click或ms-change，而事件回调要立即得到这个vm.xxx的值，input[type=radio]是存在问题，它不能立即得到当前值，而是之前的值，需要在回调里面加个setTimeout。</p>
<p><strong>各个表单元素的用法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="string">&#x27;aaa&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            bbb: <span class="string">&#x27;bbb&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            ccc: <span class="string">&#x27;ccc&#x27;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span>&#123;&#123;@aaa&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@bbb&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span>&#123;&#123;@bbb&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@ccc&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>&#123;&#123;@ccc&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面有三个控件,text, password, textarea它们都是属于输入型控件, 只要每为控件敲入一个字符, 后面的文本都会立即变化.那是因为它们默认是绑定<strong>oninput</strong>事件,如果想控件全部输入好,失去焦点时 才同步,那么可以使用<code>change</code>过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa | change&quot;</span>/&gt;</span>&#123;&#123;@aaa&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是做智能提示, 控件是绑定了一个AJAX请求与后端不断交互, 使用oninput事件会太频繁, 使用onchange事件会太迟钝,那么我们可以使用<code>debounce</code>过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa | debounce(300)&quot;</span>/&gt;</span>&#123;&#123;@aaa&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>300ms同步一次.</p>
<p>另外,可编辑元素的用法与过滤器与上面三种控件一样.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa | debounce(300)&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;@aaa&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这两个过滤器只能适用于上面的情况.</p>
</blockquote>
<p>此外, 控件还有许多种, 像checkbox, radio,它们的同步机制也不一样.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="string">&#x27;33&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            bbb: [<span class="string">&#x27;22&#x27;</span>]</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@bbb&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@bbb&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@bbb&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>radio: &#123;&#123;@aaa&#125;&#125;; checkbox:&#123;&#123;@bbb&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>checkbox与radio是一点击就会更新.radio要求在vm中为一个简单数据类型数据,字符串,数字或布尔. 而checkbox则要求是一个数组.并且在最开始时,ms-duplex会令radio钩上其value值等vm属性的控件, checkbox则可以勾选多个.如此一来,vm中的属性些总是等于radio与checkbox的属性值.但我们也可以让 vm的属性值等于此控件的勾选状态,这时需要用上<code>ms-duplex-checked</code>转换器.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            bbb: <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">ms-duplex-checked</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">ms-duplex-checked</span>=<span class="string">&quot;@bbb&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>radio: &#123;&#123;@aaa&#125;&#125;; checkbox:&#123;&#123;@bbb&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后表单元素还有select控件,它根据其multiple属性分为单选下拉框与复选下拉框, 其在vm中的值与radio,checkbox一样.即单选时,必须是一个简单数据类型, 复选时为一个数组. 在最开始时, 当option元素的value值或innerText(不在value值)与数据相同,它们就会被选上.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="string">&#x27;bbb&#x27;</span></span></span><br><span class="line"><span class="javascript">            bbb: [<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>],</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">:duplex</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:duplex</span>=<span class="string">&quot;@bbb&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">控件</th>
<th align="center">触发时机</th>
<th align="right">数据</th>
</tr>
</thead>
<tbody><tr>
<td align="left">text,password,textarea及可编辑元表</td>
<td align="center">oninput,onchange, debounce</td>
<td align="right">简单数据</td>
</tr>
<tr>
<td align="left">radio,checkbox</td>
<td align="center">onclick</td>
<td align="right">简单数据或数组</td>
</tr>
<tr>
<td align="left">select</td>
<td align="center">onchange</td>
<td align="right">简单数据或数组</td>
</tr>
</tbody></table>
<p><strong>数据转换</strong></p>
<p>上面我们已经提到一个数据转换器ms-duplex-checked了.那只能用于checkbox与radio.</p>
<p>为什么会有这种东西呢?因为无论我们原来的数据类型是什么,跑到表单中都会变成字符串,然后我们通过事件取出来 它们也是字符串,不会主动变回<code>原来的类型</code>.我们需要一种机制保持数据原来的类型,这就是数据转换器.</p>
<p>avalon内置了4种过滤器</p>
<ol>
<li>ms-duplex-string=”@aaa”</li>
<li>ms-duplex-number=”@aaa”</li>
<li>ms-duplex-boolean=”@aaa”</li>
<li>ms-duplex-checked=”@aaa”</li>
</ol>
<p>前三个是将元素的value值转换成string, number, boolean（只有为’false’时转换为false）</p>
<p>最后是根据当前元素（它只能是radio或checkbox）的checked属性值转换为vm对应属性的值。</p>
<p>它们都是放在属性名上。当数据从元素节点往vmodel同步时，转换成预期的数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">ms-duplex-number</span>=<span class="string">&quot;@aaa&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据格式化</strong></p>
<p>一般来说,数据格式化是由过滤器实现的,如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa | uppercase&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>但这里有一个隐患,可能导致死循环, 因此建议放在事件回调中实现.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">        $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        aaa: <span class="string">&#x27;111&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        bbb: <span class="string">&#x27;222&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        format1: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="comment">//只能输入数字</span></span></span><br><span class="line"><span class="javascript">           vm.aaa = e.target.value.replace(<span class="regexp">/\D/g</span>,<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        format1: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="comment">//只能输入数字</span></span></span><br><span class="line"><span class="javascript">           vm.bbb = avalon.filter.date(e.target.value, <span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:duplex</span>=<span class="string">&quot;@aaa&quot;</span> <span class="attr">:on-input</span>=<span class="string">&quot;@format1&quot;</span>/&gt;</span>&#123;&#123;@aaa&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:duplex</span>=<span class="string">&quot;@bbb&quot;</span> <span class="attr">:on-change</span>=<span class="string">&quot;@format2&quot;</span>/&gt;</span>&#123;&#123;@bbb&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据格式化是放在属性值时，以过滤器形式存在，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ms-duplex=<span class="string">&#x27;@aaa | uppercase&#x27;</span></span><br><span class="line">ms-duplex=<span class="string">&#x27;@aaa | date(&#x27;</span>yyyy:MM:dd<span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据验证</strong></p>
<p>这必须在所有表单元素的上方form元素加上ms-validate指令, 当前元素加上ms-rules才会生效</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">ms-validate</span>=<span class="string">&quot;@validation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&#x27;@aaa&#x27;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">ms-rules</span>=<span class="string">&#x27;require,email,maxlength&#x27;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">data-maxlength</span>=<span class="string">&#x27;4&#x27;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">data-maxlength-message</span>=<span class="string">&#x27;太长了&#x27;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>详见<a href="http://www.itprobie.com/jc/avalon/avalon_html/ms-rules.html">ms-rules</a>指令</p>
<p><strong>同步后的回调</strong></p>
<p>ms-duplex还有一个回调，data-duplex-changed，用于与事件绑定一样， 默认第一个参数为事件对象。如果传入多个参数，那么使用$event为事件对象占位。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>  <span class="attr">ms-duplex-number</span>=<span class="string">&quot;@aaa&quot;</span> <span class="attr">data-duplex-changed</span>=<span class="string">&quot;@fn&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>现在我们来一些实际的例子!</p>
<p><strong>全选与非全选</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&quot;duplex1&quot;</span>,</span><br><span class="line">    data: [&#123;<span class="attr">checked</span>: <span class="literal">false</span>&#125;, &#123;<span class="attr">checked</span>: <span class="literal">false</span>&#125;, &#123;<span class="attr">checked</span>: <span class="literal">false</span>&#125;],</span><br><span class="line">    allchecked: <span class="literal">false</span>,</span><br><span class="line">    checkAll: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> checked = e.target.checked</span><br><span class="line">        vm.data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">            el.checked = checked</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    checkOne: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> checked = e.target.checked</span><br><span class="line">        <span class="keyword">if</span> (checked === <span class="literal">false</span>) &#123;</span><br><span class="line">            vm.allchecked = <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//avalon已经为数组添加了ecma262v5的一些新方法</span></span><br><span class="line">            vm.allchecked = vm.data.every(<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> el.checked</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;table ms-controller=<span class="string">&quot; duplex1&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span></span><br><span class="line"><span class="xml">                   ms-duplex-checked=&quot;@allchecked&quot; </span></span><br><span class="line"><span class="xml">                   data-duplex-changed=&quot;@checkAll&quot;/&gt;</span>全选&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr ms-<span class="keyword">for</span>=<span class="string">&quot;($index, el) in @data&quot;</span>&gt;</span><br><span class="line">        &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">ms-duplex-checked</span>=<span class="string">&quot;el.checked&quot;</span> <span class="attr">data-duplex-changed</span>=<span class="string">&quot;@checkOne&quot;</span> /&gt;</span></span>&#123;&#123;$index&#125;&#125;::&#123;&#123;el.checked&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>我们仔细分析其源码，allchecked是用来控制最上面的复选框的打勾情况， 数组中的checked是用来控制下面每个复选框的下勾情况。由于是使用ms-duplex，因此会监听用户行为， 当复选框的状态发生改变时，就会触发data-duplex-changed回调，将当前值传给回调。 但这里我们不需要用它的value值，只用它的checked值。</p>
<p>最上面的复选框对应的回调是checkAll，它是用来更新数组的每个元素的checked属性，因此一个forEach循环赋值就是。</p>
<p>下面的复选框对应的checkOne，它们是用来同步最上面的复选框，只要它们有一个为false上面的复选框就不能打勾， 当它们被打勾了，它们就得循环整个数组，检查是否所有元素都为true，是才给上面的checkall属性置为true。</p>
<p>现在我们学了循环指令，结合它来做一个表格看看。现在有了强大无比的orderBy, limitBy, filterBy, selectBy。 我们做高性能的大表格是得心应手的！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (!<span class="built_in">Date</span>.now) &#123;<span class="comment">//fix 旧式IE</span></span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span> - <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&quot;duplex2&quot;</span>,</span><br><span class="line">    selected: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    options: [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;size&quot;</span>, <span class="string">&quot;date&quot;</span>],</span><br><span class="line">    trend: <span class="number">1</span>,</span><br><span class="line">    data: [</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">size</span>: <span class="number">213</span>, <span class="attr">date</span>: <span class="built_in">Date</span>.now() + <span class="number">20</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&quot;bbb&quot;</span>, <span class="attr">size</span>: <span class="number">4576</span>, <span class="attr">date</span>:<span class="built_in">Date</span>.now() - <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&quot;ccc&quot;</span>, <span class="attr">size</span>: <span class="number">563</span>, <span class="attr">date</span>: <span class="built_in">Date</span>.now() - <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&quot;eee&quot;</span>, <span class="attr">size</span>: <span class="number">3713</span>, <span class="attr">date</span>: <span class="built_in">Date</span>.now() + <span class="number">9</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&quot;555&quot;</span>, <span class="attr">size</span>: <span class="number">389</span>, <span class="attr">date</span>: <span class="built_in">Date</span>.now() - <span class="number">20</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot; duplex2&quot;</span>&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;color:red&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;本例子用于显示如何做一个简单的表格排序&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;select ms-duplex=<span class="string">&quot;@selected&quot;</span>&gt;</span><br><span class="line">        &lt;option  ms-<span class="keyword">for</span>=<span class="string">&quot;el in @options&quot;</span>&gt;&#123;&#123;el&#125;&#125;&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;select ms-duplex-number=<span class="string">&quot;@trend&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;1&quot;</span>&gt;up&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;-1&quot;</span>&gt;down&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;500px&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;tbody &gt;</span><br><span class="line">        &lt;tr ms-<span class="keyword">for</span>=<span class="string">&quot;el in @data | orderBy(@selected, @trend)&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;el.name&#125;&#125;&lt;<span class="regexp">/td&gt; &lt;td&gt;&#123;&#123;el.size&#125;&#125;&lt;/</span>td&gt; <span class="xml"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;el.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>我们再来一个文本域与下拉框的联动例子，它只用到ms-duplex，不过两个控件都是绑定同一个属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">avalon.define(&#123;</span><br><span class="line">    $id: &quot;fruit&quot;,</span><br><span class="line">    options: [&quot;苹果&quot;, &quot;香蕉&quot;, &quot;桃子&quot;, &quot;雪梨&quot;, &quot;葡萄&quot;,</span><br><span class="line">        &quot;哈蜜瓜&quot;, &quot;橙子&quot;, &quot;火龙果&quot;, &quot;荔技&quot;, &quot;黄皮&quot;],</span><br><span class="line">    selected: &quot;桃子&quot;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot; fruit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本域与下拉框的联动<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">ms-duplex</span>=<span class="string">&quot;@selected&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@selected&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @options&quot;</span> <span class="attr">ms-attr</span>=<span class="string">&quot;&#123;value: el&#125;&quot;</span> &gt;</span></span><br><span class="line">        &#123;&#123;el&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>下拉框三级联动</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">&quot;中国&quot;</span>: [<span class="string">&quot;江南四大才子&quot;</span>, <span class="string">&quot;初唐四杰&quot;</span>, <span class="string">&quot;战国四君子&quot;</span>],</span><br><span class="line">    <span class="string">&quot;日本&quot;</span>: [<span class="string">&quot;日本武将&quot;</span>, <span class="string">&quot;日本城堡&quot;</span>, <span class="string">&quot;幕府时代&quot;</span>],</span><br><span class="line">    <span class="string">&quot;欧美&quot;</span>: [<span class="string">&quot;三大骑士团&quot;</span>, <span class="string">&quot;三大魔幻小说&quot;</span>, <span class="string">&quot;七大奇迹&quot;</span>],</span><br><span class="line">    <span class="string">&quot;江南四大才子&quot;</span>: [<span class="string">&quot;祝枝山&quot;</span>, <span class="string">&quot;文征明&quot;</span>, <span class="string">&quot;唐伯虎&quot;</span>, <span class="string">&quot;周文宾&quot;</span>],</span><br><span class="line">    <span class="string">&quot;初唐四杰&quot;</span>: [<span class="string">&quot;王勃&quot;</span>, <span class="string">&quot;杨炯&quot;</span>, <span class="string">&quot;卢照邻&quot;</span>, <span class="string">&quot;骆宾王&quot;</span>],</span><br><span class="line">    <span class="string">&quot;战国四君子&quot;</span>: [<span class="string">&quot;楚国春申君黄歇&quot;</span>, <span class="string">&quot;齐国孟尝君田文&quot;</span>, <span class="string">&quot;赵国平原君赵胜&quot;</span>, <span class="string">&quot;魏国信陵君魏无忌&quot;</span>],</span><br><span class="line">    <span class="string">&quot;日本武将&quot;</span>: [<span class="string">&quot;织田信长&quot;</span>, <span class="string">&quot;德川家康&quot;</span>, <span class="string">&quot;丰臣秀吉&quot;</span>],</span><br><span class="line">    <span class="string">&quot;日本城堡&quot;</span>: [<span class="string">&quot;安土城&quot;</span>, <span class="string">&quot;熊本城&quot;</span>, <span class="string">&quot;大坂城&quot;</span>, <span class="string">&quot;姬路城&quot;</span>],</span><br><span class="line">    <span class="string">&quot;幕府时代&quot;</span>: [<span class="string">&quot;镰仓&quot;</span>, <span class="string">&quot;室町&quot;</span>, <span class="string">&quot;丰臣&quot;</span>, <span class="string">&quot;江户&quot;</span>],</span><br><span class="line">    <span class="string">&quot;三大骑士团&quot;</span>: [<span class="string">&quot;圣殿骑士团&quot;</span>, <span class="string">&quot;医院骑士团&quot;</span>, <span class="string">&quot;条顿骑士团&quot;</span>],</span><br><span class="line">    <span class="string">&quot;三大魔幻小说&quot;</span>: [<span class="string">&quot;冰与火之歌&quot;</span>, <span class="string">&quot;时光之轮&quot;</span>, <span class="string">&quot;荆刺与白骨之王国&quot;</span>],</span><br><span class="line">    <span class="string">&quot;七大奇迹&quot;</span>: [<span class="string">&quot;埃及胡夫金字塔&quot;</span>, <span class="string">&quot;奥林匹亚宙斯巨像&quot;</span>, <span class="string">&quot;阿尔忒弥斯月神殿&quot;</span>, <span class="string">&quot;摩索拉斯陵墓&quot;</span>, <span class="string">&quot;亚历山大港灯塔&quot;</span>, <span class="string">&quot;巴比伦空中花园&quot;</span>, <span class="string">&quot;罗德岛太阳神巨像&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&#x27;linkage&#x27;</span>,</span><br><span class="line">    first: [<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;日本&quot;</span>, <span class="string">&quot;欧美&quot;</span>],</span><br><span class="line">    second: map[<span class="string">&#x27;日本&#x27;</span>].concat(),</span><br><span class="line">    third: map[<span class="string">&#x27;日本武将&#x27;</span>].concat(),</span><br><span class="line">    firstSelected: <span class="string">&quot;日本&quot;</span>,</span><br><span class="line">    secondSelected: <span class="string">&quot;日本武将&quot;</span>,</span><br><span class="line">    thirdSelected: <span class="string">&quot;织田信长&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&quot;firstSelected&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    vm.second = map[a].concat()</span><br><span class="line">    vm.secondSelected = vm.second[<span class="number">0</span>]</span><br><span class="line">&#125;)</span><br><span class="line">vm.$watch(<span class="string">&quot;secondSelected&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    vm.third = map[a].concat()</span><br><span class="line">    vm.thirdSelected = vm.third[<span class="number">0</span>]</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot; linkage&quot;</span>&gt;</span><br><span class="line">&lt;h3&gt;下拉框三级联动&lt;/h3&gt;</span><br><span class="line">&lt;select ms-duplex=<span class="string">&quot;@firstSelected&quot;</span> &gt;</span><br><span class="line">    &lt;option  ms-<span class="keyword">for</span>=<span class="string">&quot;el in @first&quot;</span> ms-attr=<span class="string">&quot;&#123;value:el&#125;&quot;</span> &gt;&#123;&#123;el&#125;&#125;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select ms-duplex=<span class="string">&quot;@secondSelected&quot;</span> &gt;</span><br><span class="line">    &lt;option  ms-<span class="keyword">for</span>=<span class="string">&quot;el in @second&quot;</span> ms-attr=<span class="string">&quot;&#123;value:el&#125;&quot;</span> &gt;&#123;&#123;el&#125;&#125;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select ms-duplex=<span class="string">&quot;@thirdSelected&quot;</span> &gt;</span><br><span class="line">    &lt;option  ms-<span class="keyword">for</span>=<span class="string">&quot;el in @third&quot;</span> ms-attr=<span class="string">&quot;&#123;value:el&#125;&quot;</span> &gt;&#123;&#123;el&#125;&#125;&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里的技巧在于使用$watch回调来同步下一级的数组与选中项。注意，使用concat方法来复制数组。</p>
<hr>
<h3 id="ms-for"><a href="#ms-for" class="headerlink" title="ms-for"></a>ms-for</h3><p>avalon2.0的ms-for绑定集齐了ms-repeat, ms-each, ms-with的所有功能, 并且更好用, 性能提升七八倍</p>
<p>ms-for可以同时循环对象与数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @aaa&quot;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在采用类似angular的语法, in前面如果只有一个变量,那么它就是数组元素或对象的属性名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.aaa = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]</span><br><span class="line">vm.bbb = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li ms-<span class="keyword">for</span>=<span class="string">&quot;(aaa, el) in @aaa&quot;</span>&gt;&#123;&#123;aaa&#125;&#125;-&#123;&#123;el&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li ms-<span class="keyword">for</span>=<span class="string">&quot;(k, v) in @bbb&quot;</span>&gt;&#123;&#123;k&#125;&#125;-&#123;&#123;v&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>依次输出的LI元素内容为0-aaa,1-bbb,2-ccc, a-1,b-2,c-3</p>
<p>in 前面有两个变量, 它们需要放在小括号里,以逗号隔开, 那么分别代表数组有索引值与元素, 或对象的键名与键值, 这个与jQuery或avalon的each方法的回调参数一致。</p>
<blockquote>
<p>小括号里面的变量是随便起的,主要能符合JS变量命名规范就行,当然,也不要与window, this这样变量冲突.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;($index, el) in @arr&quot;</span>&gt;</span>&#123;&#123;$index&#125;&#125;-&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;($key, $val) in @obj&quot;</span>&gt;</span>&#123;&#123;$key&#125;&#125;-&#123;&#123;$val&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写成这样,就与avalon1.*很相像了</p>
<p>ms-for还可以配套<strong>data-for-rendered</strong>回调,当列表渲染好时执行此方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @arr&quot;</span> <span class="attr">data-for-rendered</span>=<span class="string">&#x27;@fn&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>fn为vm中的一个函数，用法与<code>ms-on-*</code>差不多，如果不传参，默认第一个参数为事件对象，类型type为<code>rendered</code>， target为当前循环区域的父节点，这里为｀ul`元素。并且回调中的this指向vm。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">type</span>: <span class="string">&#x27;rendered&#x27;</span>, <span class="attr">target</span>: ULElement &#125;</span><br></pre></td></tr></table></figure>

<p>你也可以在回调里面传入其他东西，使用<code>$event</code>代表事件对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @arr&quot;</span> <span class="attr">data-for-rendered</span>=<span class="string">&quot;@fn(&#x27;xxx&#x27;,$event)&quot;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你想截取数组的一部分出来单独循环,可以用limitBy过滤器, 使用as来引用新数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @aaa | limitBy(10) as items&quot;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上例是显示数组的前10个元素, 并且将这10个元素存放在items数组中, 以保存过滤或排序结果</p>
<p>使用注释节点实现循环,解决同时循环多个元素的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODO supply a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            vm = avalon.define(&#123;</span><br><span class="line"><span class="javascript">                $id: <span class="string">&#x27;for4&#x27;</span>,</span></span><br><span class="line">                arr: [1, 2, 3, 4]</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;for4&#x27;</span>  &gt;</span></span><br><span class="line">            <span class="comment">&lt;!--ms-for: el in @arr--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--ms-for-end:--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>avalon 不需要像angular那样要求用户指定trace by或像react 那样使用key属性来提高性能,内部帮你搞定一切</p>
<p>如果你只想循环输出数组的其中一部分,请使用filterBy,只想循环输出对象某一些键值并设置默认值,则用selectBy. 不要在同一个元素上使用ms-for与ms-if,因为这样做会在页面上生成大量的注释节点,影响页面性能</p>
<p>可用于ms-for中的过滤器有limitBy, filterBy, selectby, orderBy</p>
<blockquote>
<p>ms-for支持下面的元素节点继续使用ms-for,形成双重循环与多级循环, 但要求双重循环对应的二维数组.几维循环对应几维数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.array = [&#123;<span class="attr">arr</span>: [<span class="number">111</span>,<span class="number">222</span>, <span class="number">333</span>]&#125;,&#123;<span class="attr">arr</span>: [<span class="number">111</span>,<span class="number">222</span>, <span class="number">333</span>]&#125;,&#123;<span class="attr">arr</span>: [<span class="number">111</span>,<span class="number">222</span>, <span class="number">333</span>]&#125;]</span><br><span class="line">&lt;p&gt;array的元素里面有子数组,形成<span class="number">2</span>维数组&lt;/p&gt;        </span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li ms-<span class="keyword">for</span>=<span class="string">&quot;el in @array&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-for</span>=<span class="string">&#x27;elem in el.arr&#x27;</span>&gt;</span>&#123;&#123;elem&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p><strong>如何双向绑定ms-for中生成的变量?</strong></p>
<p>由于 循环生成的变量前面不带@, 因此就找不到其对应的属性,需要特别处理一下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-for</span>=<span class="string">&quot;(key,el) in @styles&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; key &#125;&#125;::&#123;&#123; el &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@styles[key]&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!--不能ms-duplex=&quot;el&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> root = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">        $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line">        styles: &#123;</span><br><span class="line">            width: 200,</span><br><span class="line">            height: 200,</span><br><span class="line">            borderWidth: 1,</span><br><span class="line"><span class="javascript">            borderColor: <span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">            borderStyle: <span class="string">&quot;solid&quot;</span>,</span></span><br><span class="line"><span class="javascript">            backgroundColor: <span class="string">&quot;gray&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-class"><a href="#ms-class" class="headerlink" title="ms-class"></a>ms-class</h3><p><strong>类名绑定</strong></p>
<p>属性绑定用于为元素节点添加几个类名, 因此要求属性值为字符串或字符串数组.</p>
<p>字符串形式下,可以使用空格隔开多个类名</p>
<p>字符串数组形下, 可以在里面使用三元运算符或与或号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            aaa: <span class="string">&quot;aaa bbb ccc&quot;</span>,</span></span><br><span class="line"><span class="javascript">            bbb: <span class="string">&#x27;ddd&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            ccc: [<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>, <span class="string">&#x27;zzz&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            ddd: <span class="string">&#x27;eee&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            toggle: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            toggle2: <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span>直接引用字符串<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;@ccc&quot;</span>&gt;</span>直接引用数组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[@aaa, @bbb]&quot;</span>&gt;</span>使用数组字面量<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;aaa&#x27;, &#x27;bbb&#x27;,(@toggle? &#x27;ccc&#x27;:&#x27;ddd&#x27;)]&quot;</span>&gt;</span>选择性添加类名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[@toggle &amp;&amp; &#x27;aaa&#x27;]&quot;</span>&gt;</span>选择性添加类名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;[ @ddd + 4]&quot;</span>&gt;</span>动态生成类名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-if"><a href="#ms-if" class="headerlink" title="ms-if"></a>ms-if</h3><p>通过属性值决定是否渲染目标元素, 为否时原位置上变成一个注释节点</p>
<blockquote>
<p><code>avalon1.*</code>中ms-if-loop指令已经被废掉,请使用limitBy, selectBy, filterBy过滤器代替相应功能</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">:controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">  $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line"><span class="javascript">  aaa: <span class="string">&quot;这是被隐藏的内容&quot;</span></span></span><br><span class="line"><span class="javascript">  toggle: <span class="literal">false</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">:click</span>=<span class="string">&#x27;@toggle = !@toggle&#x27;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:if</span>=<span class="string">&quot;@toggle&quot;</span>&gt;</span>&#123;&#123;@aaa&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意,有许多人喜欢用ms-if做非空处理,这是不对的,因此ms-if只是决定它是否插入DOM树与否,ms-if里面的 **ms-**指令还是会执行.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">avalon.define(&#123;</span><br><span class="line">  $id: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  aaa: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">   &lt;div ms-<span class="keyword">if</span>=<span class="string">&quot;@aaa.bbb&quot;</span>&gt;</span><br><span class="line">     &#123;&#123;@aaa.bbb.ccc&#125;&#125;这里肯定会出错</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>正确的做法是,当你知道这里面有非空判定,需要用方法包起来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">avalon.define(&#123;</span><br><span class="line">  $id: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  aaa: &#123;&#125;,</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params">aaa, bbb, ccc</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> obj = aaa[bbb]</span><br><span class="line">     <span class="function"><span class="title">if</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[ccc]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">   &lt;div ms-<span class="keyword">if</span>=<span class="string">&quot;@aaa.bbb&quot;</span>&gt;</span><br><span class="line">     &#123;&#123;@show(@aaa, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>)&#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-visible"><a href="#ms-visible" class="headerlink" title="ms-visible"></a>ms-visible</h3><p>这是通过修改元素的style.display值改变元素的可见性, 要求属性值对应一个布尔，如果不是布尔， avalon会自动转换值为布尔。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">:controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">  $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line"><span class="javascript">  aaa: <span class="string">&quot;这是被隐藏的内容&quot;</span></span></span><br><span class="line"><span class="javascript">  toggle: <span class="literal">false</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">:click</span>=<span class="string">&#x27;@toggle = !@toggle&#x27;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:visible</span>=<span class="string">&quot;@toggle&quot;</span>&gt;</span>&#123;&#123;@aaa&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="ms-on"><a href="#ms-on" class="headerlink" title="ms-on"></a>ms-on</h3><p><strong>事件绑定</strong></p>
<p>此绑定为元素添加交互功能，对用户行为作出响应. <code>ms-on-*=&quot;xxx&quot;</code>是其使用形式, <code>*</code>代表click, mouseover, touchstart等事件名，只能与小写形式定义， xxx是事件回调本身，可以是方法名，或表达式。 默认,事件回调的第一个参数是事件对象,并进行标准化处理. 如果你是用<code>ms-on-click=&quot;@fn(el, 1)&quot;</code>这样的传参方式，第一个传参被你占用， 而你又想用事件对象，可以使用**$event**标识符，即<code>ms-on-click=&quot;@fn(el, 1, $event)&quot;</code> 那么第三个参数就是事件对象。</p>
<p>如果你想绑定多个点击事件,可以用<code>ms-on-click-1=&quot;@fn(el)&quot;, ms-on-click-2=&quot;@fn2(el)&quot;,ms-on-click-3=&quot;@fn3(el)&quot;</code>来添加。</p>
<p>并且,avalon对常用的事件,还做了快捷处理,你可以省掉中间的on。</p>
<p>avalon默认对以下事件做快捷处理:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animationend、 blur、 change、 input、 click、 dblclick、 focus、 keydown、 keypress、 keyup、 mousedown、 mouseenter、 mouseleave、 mousemove、 mouseout、 mouseover、 mouseup、 scroll、 submit</span><br></pre></td></tr></table></figure>

<p>此外,avalon2相对avalon1，还做了以下强化:</p>
<p>以前<code>ms-on-*</code>的值只能是vm中的一个函数名<code>ms-on-click=&quot;fnName&quot;</code>, 现在其值可以是表达式,如<code>ms-on-click=&quot;el.open = !el.open&quot;</code>, 与原生的onclick定义方式更相近. 以前<code>ms-on-*</code>的函数,this是指向绑定事件的元素本身,现在this是指向vm, 元素本身可以直接从e.target中取得.</p>
<p><code>ms-on-*</code>会优先考虑使用事件代理方式绑定事件,将事件绑在根节点上!这会带来极大的性能优化! <code>ms-on-*</code>的值转换为函数后,如果发现其内部不存在ms-for动态生成的变量,框架会将它们缓存起来! 添加了一系列针对事件的过滤器 对按键进行限制的过滤器esc，tab，enter，space，del，up，left，right，down 对事件方法stopPropagation, preventDefault进行简化的过滤器stop, prevent</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    firstName: <span class="string">&quot;司徒&quot;</span>,</span><br><span class="line">    array: [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>],</span><br><span class="line">    argsClick: <span class="function"><span class="keyword">function</span>(<span class="params">e, a, b</span>) </span>&#123;</span><br><span class="line">        alert([].slice.call(<span class="built_in">arguments</span>).join(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    loopClick: <span class="function"><span class="keyword">function</span>(<span class="params">a, e</span>) </span>&#123;</span><br><span class="line">        alert(a + <span class="string">&quot;  &quot;</span> + e.type)</span><br><span class="line">    &#125;,</span><br><span class="line">    status: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        vm.status = e.type</span><br><span class="line">    &#125;,</span><br><span class="line">    field: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        vm.field = e.target.value + <span class="string">&quot;  &quot;</span> + e.type</span><br><span class="line">    &#125;,</span><br><span class="line">    submit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = vm.$model</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.JSON) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;fieldset ms-controller=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">    &lt;legend&gt;有关事件回调传参&lt;/legend&gt;</span><br><span class="line">    &lt;div ms-mouseenter=<span class="string">&quot;@callback&quot;</span> ms-mouseleave=<span class="string">&quot;@callback&quot;</span>&gt;&#123;&#123;@status&#125;&#125;&lt;br/&gt;</span><br><span class="line">        &lt;input ms-on-input=<span class="string">&quot;@check&quot;</span>/&gt;&#123;&#123;@field&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div ms-click=<span class="string">&quot;@argsClick($event, 100, @firstName)&quot;</span>&gt;点我&lt;/div&gt;</span><br><span class="line">    &lt;div ms-<span class="keyword">for</span>=<span class="string">&quot;el in @array&quot;</span> &gt;</span><br><span class="line">        &lt;p ms-click=<span class="string">&quot;@loopClick(el, $event)&quot;</span>&gt;&#123;&#123;el&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button ms-click=<span class="string">&quot;@submit&quot;</span> type=<span class="string">&quot;button&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure>

<p>绑定多个同种事件的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> model = avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&quot;multi-click&quot;</span>,</span><br><span class="line">    str1: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    str2: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    str3: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    click0: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        model.str1 = <span class="string">&quot;xxxxxxxxx&quot;</span> + (count++)</span><br><span class="line">    &#125;,</span><br><span class="line">    click1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        model.str2 = <span class="string">&quot;xxxxxxxxx&quot;</span> + (count++)</span><br><span class="line">    &#125;,</span><br><span class="line">    click2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        model.str3 = <span class="string">&quot;xxxxxxxxx&quot;</span> + (count++)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;一个元素绑定多个同种事件的回调&lt;/legend&gt;</span><br><span class="line">    &lt;div ms-controller=<span class="string">&quot;multi-click&quot;</span>&gt;</span><br><span class="line">        &lt;div ms-click=<span class="string">&quot;@click0&quot;</span> ms-click-<span class="number">1</span>=<span class="string">&quot;@click1&quot;</span> ms-click-<span class="number">2</span>=<span class="string">&quot;@click2&quot;</span> &gt;请点我&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;@str1&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;@str2&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;@str3&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br></pre></td></tr></table></figure>

<p>回调执行顺序的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> avalon.define(&#123;</span><br><span class="line">      $id: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">      fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;11111111&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      fn1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;2222222&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      fn2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;3333333&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot;xxx&quot;</span> </span><br><span class="line">    ms-on-mouseenter-<span class="number">3</span>=<span class="string">&quot;@fn&quot;</span></span><br><span class="line">    ms-on-mouseenter-<span class="number">2</span>=<span class="string">&quot;@fn1&quot;</span></span><br><span class="line">    ms-on-mouseenter-<span class="number">1</span>=<span class="string">&quot;@fn2&quot;</span></span><br><span class="line">    style=<span class="string">&quot;width:100px;height:100px;background: red;&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>avalon已经对ms-mouseenter, ms-mouseleave进行修复，可以在这里与这里了解这两个事件。 到chrome30时，所有浏览器都原生支持这两个事件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avalon.define(&#123;</span><br><span class="line">    $id: &quot;test&quot;,</span><br><span class="line">    text: &quot;&quot;,</span><br><span class="line">    fn1: function (e) &#123;</span><br><span class="line">       this.text &#x3D; e.target.className + &quot; &quot;+ e.type</span><br><span class="line">    &#125;,</span><br><span class="line">    fn2: function (e) &#123;</span><br><span class="line">       this.text &#x3D; e.target.className + &quot; &quot;+ e.type</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.bbb&#123;</span><br><span class="line">    background: #1ba9ba;</span><br><span class="line">    width:200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    padding:20px;</span><br><span class="line">    box-sizing:content-box;</span><br><span class="line">&#125;</span><br><span class="line">.ccc&#123;</span><br><span class="line">    background: #168795;</span><br><span class="line">    width:160px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 160px;</span><br><span class="line">    height: 160px;</span><br><span class="line">    margin:20px;</span><br><span class="line">    box-sizing:content-box;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;aaa&quot; ms-controller&#x3D;&quot;test&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;bbb&quot; ms-mouseenter&#x3D;&quot;@fn1&quot; ms-mouseleave&#x3D;&quot;@fn2&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;ccc&quot; &gt;</span><br><span class="line">              &#123;&#123;@text&#125;&#125;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>最后是mousewheel事件的修改，主要问题是出现firefox上， 它死活也不愿意支持mousewheel，在avalon里是用DOMMouseScroll或wheel实现模拟的。 我们在事件对象通过wheelDelta属性是否为正数判定它在向上滚动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> avalon.define(&#123;</span><br><span class="line">      $id: <span class="string">&quot;event4&quot;</span>,</span><br><span class="line">      text: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      callback: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.text = e.wheelDelta + <span class="string">&quot;  &quot;</span> + e.type</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot;event4&quot;</span>&gt;</span><br><span class="line">    &lt;div ms-on-mousewheel=<span class="string">&quot;@callback&quot;</span> id=<span class="string">&quot;aaa&quot;</span> style=<span class="string">&quot;background: #1ba9ba;width:200px;height: 200px;&quot;</span>&gt;</span><br><span class="line">        &#123;&#123;@text&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>此外avalon还对input，animationend事件进行修复，大家也可以直接用avalon.bind, avalon.fn.bind来绑定这些事件。但建议都用ms-on绑定来处理。</p>
<hr>
<h3 id="ms-rules"><a href="#ms-rules" class="headerlink" title="ms-rules"></a>ms-rules</h3><p><strong>验证规则绑定</strong></p>
<p>avalon2砍掉了不少功能（如<code>ms-include</code>,<code>ms-data</code>），腾出空间加了其他更有用的功能。 数据验证就是其中之一。现在avalon2内置的验证指令是参考之前的oniui验证框架与jquery validation。</p>
<p>此指令只能用于添加ms-duplex指令的表单元素上。</p>
<p>avalon内置验证规则有</p>
<table>
<thead>
<tr>
<th align="left">规则</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">required(true)</td>
<td align="left">必须输入的字段</td>
</tr>
<tr>
<td align="left">norequired(true)</td>
<td align="left">不是必填的字段</td>
</tr>
<tr>
<td align="left">email(true)</td>
<td align="left">必须输入正确格式的电子邮件</td>
</tr>
<tr>
<td align="left">url(true)</td>
<td align="left">必须输入正确格式的网址</td>
</tr>
<tr>
<td align="left">date(true或正则)</td>
<td align="left">必须输入正确格式的日期。默认是要求YYYY-MM-dd这样的格式</td>
</tr>
<tr>
<td align="left">number(true)</td>
<td align="left">必须输入合法的数字（负数，小数）</td>
</tr>
<tr>
<td align="left">digits(true)</td>
<td align="left">必须输入整数</td>
</tr>
<tr>
<td align="left">pattern(正则或true）</td>
<td align="left">让输入数据匹配给定的正则，如果没有指定，那么会到元素上找pattern属性转换成正则再匹配</td>
</tr>
<tr>
<td align="left">equalto(ID名）</td>
<td align="left">输入值必须和 #id 元素的value 相同</td>
</tr>
<tr>
<td align="left">maxlength：5</td>
<td align="left">输入长度最多是 5 的字符串（汉字算一个字符）</td>
</tr>
<tr>
<td align="left">minlength：10</td>
<td align="left">输入长度最小是 10 的字符串（汉字算一个字符）</td>
</tr>
<tr>
<td align="left">chs（true）</td>
<td align="left">要求输入全部是中文</td>
</tr>
<tr>
<td align="left">max:5</td>
<td align="left">输入值不能大于 5</td>
</tr>
<tr>
<td align="left">min:10</td>
<td align="left">输入值不能小于 10</td>
</tr>
</tbody></table>
<p>这些验证规则要求使用ms-rules指令表示，要求为一个普通的JS对象。</p>
<p>此外要求验征框架能动起来，还必须在所有表单元素外包一个form元素，在form元素上加ms-validate指令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">        $id: <span class="string">&quot;validate1&quot;</span>,</span><br><span class="line">        aaa: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        bbb: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        ccc: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        validate: &#123;</span><br><span class="line">            onError: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span><br><span class="line">                reasons.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(reason.getMessage())</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            onValidateAll: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (reasons.length) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;有表单没有通过&#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;全部通过&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;div ms-controller=<span class="string">&quot;validate1&quot;</span>&gt;</span><br><span class="line">  &lt;form ms-validate=<span class="string">&quot;@validate&quot;</span>&gt;</span><br><span class="line">      &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="xml">                ms-rules=&#x27;&#123;required:true,chs:true&#125;&#x27; &gt;&#123;&#123;@aaa&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pw&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="xml">                ms-rules=&#x27;&#123;required:true&#125;&#x27; </span></span><br><span class="line"><span class="xml">                ms-duplex=&quot;@bbb&quot; /&gt;</span>&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> </span></span></span><br><span class="line"><span class="xml">             ms-rules=&quot;&#123;required:true,equalto:&#x27;pw&#x27;&#125;&quot; placeholder=&quot;再填一次&quot;</span></span><br><span class="line"><span class="xml">             ms-duplex=&quot;@ccc | change&quot; /&gt;</span>&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span>&lt;/p&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>因此，要运行起avalon2的内置验证框架，必须同时使用三个指令。ms-validate用于定义各种回调与全局的配置项（如什么时候进行验证）。<a href="http://www.itprobie.com/jc/avalon/avalon_html/ms-duplex.html">ms-duplex</a>用于将单个表单元素及相关信息组成一个Field对象，放到ms-validater指令的fields数组中。ms-rules用于定义验证规则。如果验证规则不满足你，你可以自行在<strong>avalon.validators</strong>对象上添加。</p>
<p>现在我们可以一下ms-validate的用法。其对应一个对象。</p>
<table>
<thead>
<tr>
<th align="left">配置项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fields</td>
<td align="left">框架自行添加，用户不用写。为一个数组，放置ms-duplex生成的Field对象。</td>
</tr>
<tr>
<td align="left">onSuccess</td>
<td align="left">空函数，单个验证成功时触发，this指向被验证元素this指向被验证元素，传参为一个对象数组外加一个可能存在的事件对象。</td>
</tr>
<tr>
<td align="left">onError</td>
<td align="left">空函数，单个验证失败时触发，this与传参情况同上</td>
</tr>
<tr>
<td align="left">onComplete</td>
<td align="left">空函数，单个验证无论成功与否都触发，this与传参情况同上。</td>
</tr>
<tr>
<td align="left">onValidateAll</td>
<td align="left">空函数，整体验证后或调用了validateAll方法后触发；有了这东西你就不需要在form元素上ms-on-submit=”submitForm”，直接将提交逻辑写在onValidateAll回调上</td>
</tr>
<tr>
<td align="left">onReset</td>
<td align="left">空函数，表单元素获取焦点时触发，this指向被验证元素，大家可以在这里清理className、value</td>
</tr>
<tr>
<td align="left">validateInBlur</td>
<td align="left">true，在blur事件中进行验证,触发onSuccess, onError, onComplete回调</td>
</tr>
<tr>
<td align="left">validateInKeyup</td>
<td align="left">true, 在keyup事件中进行验证,触发onSuccess, onError, onComplete回调。当用户在ms-duplex中使用change debounce过滤器时会失效</td>
</tr>
<tr>
<td align="left">validateAllInSubmit</td>
<td align="left">true，在submit事件中执行onValidateAll回调</td>
</tr>
<tr>
<td align="left">resetInFocus</td>
<td align="left">true，在focus事件中执行onReset回调</td>
</tr>
<tr>
<td align="left">deduplicateInValidateAll</td>
<td align="left">false，在validateAll回调中对reason数组根据元素节点进行去重</td>
</tr>
</tbody></table>
<p>我们看一下如何自定义验证规则.</p>
<p>比如说我们有一个变态的需求,一个字段可以不填，但如果要填的话一定要是合法的数字,并且大于零. 这就需要自定义规则了.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>ms-validate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            avalon.validators.aaa = &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;必须数字并大于0&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                get: <span class="function"><span class="keyword">function</span> (<span class="params">value, field, next</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                   <span class="comment">//想知道它们三个参数是什么,可以console.log(value, field,next)</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> ok = (value === <span class="string">&#x27;&#x27;</span> || (<span class="built_in">Number</span>(value) &gt; <span class="number">0</span>))</span></span><br><span class="line">                    next(ok)</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> value</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line"><span class="javascript">                aaa: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                validate: &#123;</span><br><span class="line"><span class="javascript">                    onError: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        reasons.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(reason.getMessage())</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    onValidateAll: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line">                        if (reasons.length) &#123;</span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&#x27;有表单没有通过&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&#x27;全部通过&#x27;</span>)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;cmxform&quot;</span> <span class="attr">ms-validate</span>=<span class="string">&quot;@validate&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">legend</span>&gt;</span>自定义规则<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;aaa: true&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                        &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上表还有一个没有提到的东西是如何显示错误信息，这个avalon不帮你处理。但提示信息会帮你拼好，如果你没有写，直接用验证规则的message，否则在元素上找data-message或data-required-message这样的属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>ms-validate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&quot;test&quot;</span>,</span></span><br><span class="line"><span class="javascript">                rules:&#123;<span class="attr">required</span>:<span class="literal">true</span>,<span class="attr">email</span>:<span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                email:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                validate: &#123;</span><br><span class="line"><span class="javascript">                    onError: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        reasons.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(reason.getMessage())</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    onValidateAll: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line">                        if (reasons.length) &#123;</span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&#x27;有表单没有通过&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">&#x27;全部通过&#x27;</span>)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;cmxform&quot;</span> <span class="attr">ms-validate</span>=<span class="string">&quot;@validate&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">legend</span>&gt;</span>验证完整的表单<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@email&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;@rules&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-required-message</span>=<span class="string">&quot;请输入&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">data-email-message</span>=<span class="string">&quot;请输入一个正确的邮箱&quot;</span></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后给一个复杂的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">        $id: <span class="string">&quot;validate2&quot;</span>,</span></span><br><span class="line"><span class="javascript">        firstname: <span class="string">&#x27;司徒正美&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        lastname: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        username: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        password: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        confirm_password: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        email: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        agree: <span class="literal">false</span>,</span></span><br><span class="line">        topic: [],</span><br><span class="line"><span class="javascript">        toggle: <span class="literal">false</span>,</span></span><br><span class="line">        validate: &#123;</span><br><span class="line"><span class="javascript">            onError: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                reasons.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(reason.getMessage())</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            onValidateAll: <span class="function"><span class="keyword">function</span> (<span class="params">reasons</span>) </span>&#123;</span></span><br><span class="line">                if (reasons.length) &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;有表单没有通过&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;全部通过&#x27;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    avalon.validators.checked = &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;必须扣上&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        get: <span class="function"><span class="keyword">function</span> (<span class="params">value, field, next</span>) </span>&#123;</span></span><br><span class="line">            next(value)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    avalon.validators.selecttwo = &#123;</span><br><span class="line"><span class="javascript">        message: <span class="string">&#x27;至少选择两个&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        get: <span class="function"><span class="keyword">function</span> (<span class="params">value, field, next</span>) </span>&#123;</span></span><br><span class="line">            next(!vm.toggle || value.length &gt;= 2)</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;validate2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;cmxform&quot;</span> <span class="attr">ms-validate</span>=<span class="string">&quot;@validate&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">legend</span>&gt;</span>验证完整的表单<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;firstname&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;firstname&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;firstname&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@firstname&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;required:true, pattern: /[\u4e00-\u9fa5a-z]&#123;2-8&#125;/i &#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-required-message</span>=<span class="string">&quot;必须是中文或字母(3-8个字符)&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lastname&quot;</span>&gt;</span>姓氏<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;lastname&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;lastname&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@lastname&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;required:true&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-required-message</span>=<span class="string">&quot;请输入您的姓氏&quot;</span></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@username | change&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;required:true, minlength:2&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@password&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;required:true,minlength:5&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-required-message</span>=<span class="string">&quot;请输入密码&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">data-required-message</span>=<span class="string">&quot;密码长度不能小于 5 个字母&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirm_password&quot;</span>&gt;</span>验证密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;confirm_password&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@confirm_password | change&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;required:true,equalto:&#x27;password&#x27;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-equalto-message</span>=<span class="string">&quot;两次密码输入不一致&quot;</span></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex</span>=<span class="string">&quot;@email&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;email:true&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">data-email-message</span>=<span class="string">&quot;请输入一个正确的邮箱&quot;</span></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span>请同意我们的声明<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">name</span>=<span class="string">&quot;agree&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex-checked</span>=<span class="string">&quot;@agree&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;checked:true&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;newsletter&quot;</span>&gt;</span>我乐意接收新信息<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">id</span>=<span class="string">&quot;newsletter&quot;</span> </span></span><br><span class="line"><span class="tag">                           <span class="attr">name</span>=<span class="string">&quot;newsletter&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">ms-duplex-checked</span>=<span class="string">&quot;@toggle&quot;</span></span></span><br><span class="line"><span class="tag">                           &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">id</span>=<span class="string">&quot;newsletter_topics&quot;</span> <span class="attr">ms-visible</span>=<span class="string">&quot;@toggle&quot;</span> &gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>主题 (至少选择两个) <span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;topic_marketflash&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">id</span>=<span class="string">&quot;topic_marketflash&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">value</span>=<span class="string">&quot;marketflash&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">name</span>=<span class="string">&quot;topic[]&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-duplex</span>=<span class="string">&quot;@topic&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;selecttwo:true&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               &gt;</span>Marketflash</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;topic_fuzz&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">id</span>=<span class="string">&quot;topic_fuzz&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">value</span>=<span class="string">&quot;fuzz&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">name</span>=<span class="string">&quot;topic[]&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-duplex</span>=<span class="string">&quot;@topic&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;selecttwo:true&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               &gt;</span>Latest fuzz</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;topic_digester&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> </span></span><br><span class="line"><span class="tag">                               <span class="attr">id</span>=<span class="string">&quot;topic_digester&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">value</span>=<span class="string">&quot;digester&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">name</span>=<span class="string">&quot;topic[]&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-duplex</span>=<span class="string">&quot;@topic&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">ms-rules</span>=<span class="string">&quot;&#123;selecttwo:true&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                               &gt;</span>Mailing list digester</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;topic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span>至少选择两个<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="格式化过滤器"><a href="#格式化过滤器" class="headerlink" title="格式化过滤器"></a>格式化过滤器</h3><p>用于处理数字或字符串，多用于<code> {{ }} </code>或ms-attr 或ms-class</p>
<blockquote>
<p>注意: avalon的过滤器与ng的过滤器在传参上有点不一样,需要用()括起来</p>
</blockquote>
<h3 id="uppercase"><a href="#uppercase" class="headerlink" title="uppercase"></a>uppercase</h3><p>将字符串全部大写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.aaa = <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;@aaa | uppercase&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="lowercase"><a href="#lowercase" class="headerlink" title="lowercase"></a>lowercase</h3><p>将字符串全部小写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.aaa = <span class="string">&quot;AAA&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;@aaa | lowercase&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>对长字符串进行截短，有两个可选参数</p>
<p>number，最后返回的字符串的长度，已经将truncation的长度包含在内，默认为30。 truncation，告知用户它已经被截短的一个结尾标识，默认为”…”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.aaa = <span class="string">&quot;121323234324324&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;@aaa | truncate(<span class="number">10</span>,<span class="string">&#x27;...&#x27;</span>)&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="camelize"><a href="#camelize" class="headerlink" title="camelize"></a>camelize</h3><p>驼峰化处理， 如”aaa-bbb”变成”aaaBBB”</p>
<h3 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h3><p>对类似于HTML格式的字符串进行转义，如将&lt;、 &gt;转换为&lt;、 &gt;</p>
<h3 id="sanitize"><a href="#sanitize" class="headerlink" title="sanitize"></a>sanitize</h3><p>对用户输入的字符串进行反XSS处理，去掉onclick, <code>javascript:alert</code>，<code>&lt;script&gt;</code>等危险属性与标签。</p>
<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>对需要处理的数字的整数部分插入千分号（每三个数字插入一个逗号），有一个参数fractionSize，用于保留小数点的后几位。</p>
<p>fractionSize:小数部分的精度，默认为3。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODO supply a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&quot;number&quot;</span>,</span></span><br><span class="line">            aaa: 1234.56789</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入数字:</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&quot;@aaa&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>不处理：&#123;&#123;@aaa&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>不传参：&#123;&#123;@aaa|number&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>不保留小数：&#123;&#123;@aaa|number(0)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>负数:&#123;&#123;-@aaa|number(4)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="currency"><a href="#currency" class="headerlink" title="currency"></a>currency</h3><p>用于格式化货币，类似于number过滤器（即插入千分号），但前面加了一个货币符号，默认使用人民币符号<code>\uFFE5</code></p>
<p>symbol, 货币符号，默认是<code>\uFFE5</code> fractionSize，小数点后保留多少数，默认是2</p>
<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>对日期进行格式化，date(formats), 目标可能是符合一定格式的字符串，数值，或Date对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TODO supply a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        avalon.define(&#123;</span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;testtest&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;大跃进右&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d1: <span class="keyword">new</span> <span class="built_in">Date</span>,</span></span><br><span class="line"><span class="javascript">            d2: <span class="string">&quot;2011/07/08&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d3: <span class="string">&quot;2011-07-08&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d4: <span class="string">&quot;01-01-2000&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d5: <span class="string">&quot;03 04,2000&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d6: <span class="string">&quot;3 4,2000&quot;</span>,</span></span><br><span class="line">            d7: 1373021259229,</span><br><span class="line"><span class="javascript">            d8: <span class="string">&quot;1373021259229&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d9: <span class="string">&quot;2014-12-07T22:50:58+08:00&quot;</span>,</span></span><br><span class="line"><span class="javascript">            d10: <span class="string">&quot;\/Date(1373021259229)\/&quot;</span></span></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;testtest&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d1 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d2 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d3 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d4 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d5 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d6 | date(&quot;yyyy MM dd&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d7 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d8 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d9 | date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125; //这是ISO8601的日期格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>生成于&#123;&#123; @d10| date(&quot;yyyy MM dd:HH:mm:ss&quot;)&#125;&#125; //这是ASP.NET输出的JSON数据的日期格式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">标记</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">yyyy</td>
<td align="left">将当前的年份以4位数输出，如果那一年为300，则补足为0300</td>
</tr>
<tr>
<td align="left">yy</td>
<td align="left">将当前的年份截取最后两位数输出，如2014变成14， 1999变成99， 2001变成01</td>
</tr>
<tr>
<td align="left">y</td>
<td align="left">将当前的年份原样输出，如2014变成2014， 399变成399， 1变成1</td>
</tr>
<tr>
<td align="left">MMMM</td>
<td align="left">在中文中，MMMM与MMM是没有区别，都是”1月”，”2月”……英语则为该月份的单词全拼</td>
</tr>
<tr>
<td align="left">MMM</td>
<td align="left">在中文中，MMMM与MMM是没有区别，都是”1月”，”2月”……英语则为该月份的单词缩写(前三个字母)</td>
</tr>
<tr>
<td align="left">MM</td>
<td align="left">将月份以01-12的形式输出(即不到两位数，前面补0)</td>
</tr>
<tr>
<td align="left">M</td>
<td align="left">将月份以1-12的形式输出</td>
</tr>
<tr>
<td align="left">dd</td>
<td align="left">以日期以01-31的形式输出(即不到两位数，前面补0)</td>
</tr>
<tr>
<td align="left">d</td>
<td align="left">以日期以1-31的形式输出</td>
</tr>
<tr>
<td align="left">EEEE</td>
<td align="left">将当前天的星期几以“星期一”，“星期二”，“星期日”的形式输出，英语则Sunday-Saturday</td>
</tr>
<tr>
<td align="left">EEE</td>
<td align="left">将当前天的星期几以“周一”，“周二”，“周日”的形式输出，英语则Sun-Sat</td>
</tr>
<tr>
<td align="left">HH</td>
<td align="left">将当前小时数以00-23的形式输出</td>
</tr>
<tr>
<td align="left">H</td>
<td align="left">将当前小时数以0-23的形式输出</td>
</tr>
<tr>
<td align="left">hh</td>
<td align="left">将当前小时数以01-12的形式输出</td>
</tr>
<tr>
<td align="left">h</td>
<td align="left">将当前小时数以0-12的形式输出</td>
</tr>
<tr>
<td align="left">mm</td>
<td align="left">将当前分钟数以00-59的形式输出</td>
</tr>
<tr>
<td align="left">m</td>
<td align="left">将当前分钟数以0-59的形式输出</td>
</tr>
<tr>
<td align="left">ss</td>
<td align="left">将当前秒数以00-59的形式输出</td>
</tr>
<tr>
<td align="left">s</td>
<td align="left">将当前秒数以0-59的形式输出</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">将当前时间是以“上午”，“下午”的形式输出</td>
</tr>
<tr>
<td align="left">Z</td>
<td align="left">将当前时间的时区以-1200-+1200的形式输出</td>
</tr>
<tr>
<td align="left">fullDate</td>
<td align="left">相当于y年M月d日EEEE 2014年12月31日星期三</td>
</tr>
<tr>
<td align="left">longDate</td>
<td align="left">相当于y年M月d日EEEE 2014年12月31日</td>
</tr>
<tr>
<td align="left">medium</td>
<td align="left">相当于yyyy-M-d H:mm:ss 2014-12-31 19:02:44</td>
</tr>
<tr>
<td align="left">mediumDate</td>
<td align="left">相当于yyyy-M-d 2014-12-31</td>
</tr>
<tr>
<td align="left">mediumTime</td>
<td align="left">相当于H:mm:ss 19:02:44</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">相当于yy-M-d ah:mm 14-12-31 下午7:02</td>
</tr>
<tr>
<td align="left">shortDate</td>
<td align="left">相当于yy-M-d 14-12-31</td>
</tr>
<tr>
<td align="left">shortTime</td>
<td align="left">相当于ah:mm 下午7:02</td>
</tr>
</tbody></table>
<hr>
<h3 id="循环过滤器"><a href="#循环过滤器" class="headerlink" title="循环过滤器"></a>循环过滤器</h3><p>用于ms-for指令中</p>
<h3 id="limitBy"><a href="#limitBy" class="headerlink" title="limitBy"></a>limitBy</h3><p>只能用于ms-for循环,对数组与对象都有效, 限制输出到页面的个数, 有两个参数</p>
<ol>
<li>limit: 最大个数,必须是数字或字符, 当个数超出数组长或键值对总数时, 等于后面</li>
<li>begin: 开始循环的个数, 可选,默认0</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    avalon.define(&#123;</span><br><span class="line"><span class="javascript">        $id: <span class="string">&quot;limitBy&quot;</span>,</span></span><br><span class="line">        array: [1, 2, 3, 4, 5, 6],</span><br><span class="line">        object: &#123;a: 1, b: 2, c: 3, d: 4, e: 5&#125;,</span><br><span class="line">        num: 3</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;limitBy&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-duplex-number</span>=<span class="string">&#x27;@num&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&#x27;el in @array | limitBy(@num)&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&#x27;el in @object | limitBy(@num)&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h3><p>只能用于ms-for循环,对数组与对象都有效, 用于排序, 有两个参数</p>
<ol>
<li>key: 要排序的属性名</li>
<li>dir: -1或1, 顺序或倒序,可选,默认1</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">avalon.define(&#123;</span><br><span class="line"><span class="javascript">    $id: <span class="string">&quot;orderBy&quot;</span>,</span></span><br><span class="line">    array: [&#123;a: 1, b: 33&#125;,&#123;a: 2, b: 22&#125;, &#123;a: 3, b: 11&#125;],</span><br><span class="line"><span class="javascript">    order: <span class="string">&#x27;a&#x27;</span>,</span></span><br><span class="line">    dir: -1</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;orderBy&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-duplex</span>=<span class="string">&#x27;@order&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>a<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>b<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-duplex-number</span>=<span class="string">&#x27;@dir&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;200&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @array | orderBy(@order, @dir)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">ms-for</span>=<span class="string">&#x27;elem in el&#x27;</span>&gt;</span>&#123;&#123;elem&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="filterBy"><a href="#filterBy" class="headerlink" title="filterBy"></a>filterBy</h3><p>只能用于ms-for循环,对数组与对象都有效, 用于获取它们的某一子集, 有至少一个参数</p>
<p>search，如果为函数时, 通过返回true决定成为子集的一部分; 如果是字符串或数字, 将转换成正则, 如果数组元素或对象键值匹配它,则成为子集的一部分,但如果是空字符串则返回原对象 ;其他情况也返回原对象。 其他参数, 只有当search为函数时有效, 这时其参数依次是数组元素或对象键值(对象的情况下), 索引值或对象键名(对象的情况下), 多余的参数 此过滤多用于自动完成的模糊匹配!</p>
<p><img src="http://www.itprobie.com/jc/avalon/avalon_html/img/filterBy.png" alt="img"></p>
<p>filterBy例子1</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    avalon.define(&#123;</span><br><span class="line"><span class="javascript">        $id: <span class="string">&quot;filterBy&quot;</span>,</span></span><br><span class="line"><span class="javascript">        array: [<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;aab&#x27;</span>, <span class="string">&#x27;acb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;dddd&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        object: &#123;<span class="attr">a</span>: <span class="string">&#x27;aaaa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;aab&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;acb&#x27;</span>, <span class="attr">d</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">e</span>: <span class="string">&#x27;dddd&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">        searchs: <span class="string">&quot;a&quot;</span>,</span></span><br><span class="line"><span class="javascript">        searchFn: <span class="function"><span class="keyword">function</span> (<span class="params">el, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> i &gt; <span class="number">2</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        searchFn2: <span class="function"><span class="keyword">function</span> (<span class="params">el, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> el.length === <span class="number">4</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        searchFn3: <span class="function"><span class="keyword">function</span> (<span class="params">el, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> i === <span class="string">&#x27;b&#x27;</span> || i === <span class="number">1</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;filterBy&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">ms-duplex</span>=<span class="string">&#x27;@search&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>a<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>b<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>c<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ms-click</span>=<span class="string">&quot;@search = @searchFn | prevent&quot;</span>&gt;</span>变成过滤函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ms-click</span>=<span class="string">&quot;@search = @searchFn2 | prevent&quot;</span>&gt;</span>变成过滤函数2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ms-click</span>=<span class="string">&quot;@search = @searchFn3 | prevent&quot;</span>&gt;</span>变成过滤函数3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&#x27;el in @array | filterBy(@search)&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&#x27;el in @object | filterBy(@search)&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>filterBy例子2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">            $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">             arr: [&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;,&#123;<span class="attr">color</span>:<span class="string">&#x27;green&#x27;</span>&#125;,&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>&#125;],</span></span><br><span class="line"><span class="javascript">             fn: <span class="function"><span class="keyword">function</span>(<span class="params">el, index, xxx</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                 <span class="built_in">console</span>.log(el, index, xxx)</span></span><br><span class="line"><span class="javascript">                 <span class="keyword">return</span> el.color === <span class="string">&#x27;red&#x27;</span></span></span><br><span class="line">             &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&quot;el in @arr | filterBy(@fn, &#x27;xxx&#x27;)&quot;</span>&gt;</span>&#123;&#123;el.color&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>filterBy例子3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">        $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        arr: [&#123;<span class="attr">name</span>: <span class="string">&#x27;wanglin&#x27;</span>, <span class="attr">age</span>: <span class="number">11</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;lin&#x27;</span>, <span class="attr">age</span>: <span class="number">3</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;Hunt&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&#x27;Joe&#x27;</span>, <span class="attr">age</span>: <span class="number">33</span>&#125;],</span></span><br><span class="line"><span class="javascript">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="comment">//过滤数组中 name属性值带lin中的元素</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>  <span class="regexp">/lin/</span>.test(a.name)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;test&#x27;</span> &gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-for</span>=<span class="string">&quot;(index,el) in @arr as items | filterBy(@fn)&quot;</span> &gt;</span></span><br><span class="line">        &#123;&#123;el.name&#125;&#125; -- &#123;&#123;items.length&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="selectBy"><a href="#selectBy" class="headerlink" title="selectBy"></a>selectBy</h3><p>只能用于ms-for循环,只对对象有效, 用于抽取目标对象的几个值,构成新数组返回.</p>
<ol>
<li>array，要抽取的属性名</li>
<li>defaults，如果目标对象不存在这个属性,那么从这个默认对象中得到默认值,否则为空字符串, 可选 这个多用于表格, 每一列的对象可能存在属性顺序不一致或缺少的情况</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    avalon.define(&#123;</span><br><span class="line"><span class="javascript">        $id: <span class="string">&quot;selectBy&quot;</span>,</span></span><br><span class="line"><span class="javascript">        obj: &#123;<span class="attr">a</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">d</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">e</span>: <span class="string">&#x27;eee&#x27;</span>&#125;,</span></span><br><span class="line">        grid: [&#123;a: 1, b: 2, c: 3&#125;, &#123;c: 11, b: 22, a: 33&#125;, &#123;b: 23, a: 44&#125;],</span><br><span class="line">        defaults: &#123;</span><br><span class="line"><span class="javascript">            a:<span class="string">&#x27;@@@&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            b:<span class="string">&#x27;$$$&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            c:<span class="string">&#x27;###&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;selectBy&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span> <span class="attr">ms-for</span>=<span class="string">&#x27;el in @obj | selectBy([&quot;c&quot;,&quot;a&quot;,&quot;b&quot;])&#x27;</span>&gt;</span>&#123;&#123;el&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;200&#x27;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ms-for</span>=<span class="string">&quot;tr in @grid&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span> <span class="attr">ms-for</span>=<span class="string">&quot;td in tr | selectBy([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;],@defaults)&quot;</span>&gt;</span>&#123;&#123;td&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件过滤器"><a href="#事件过滤器" class="headerlink" title="事件过滤器"></a>事件过滤器</h3><p>事件过滤器只要是对一些常用操作进行简化处理</p>
<p>对按键事件(keyup,keydown,keypress)到底按下了哪些功能键 或方向键进行友好的处理.许多人都记不清回车退格的keyCode是多少. 对阻止默认行为与防止冒泡进行封装</p>
<h3 id="esc"><a href="#esc" class="headerlink" title="esc"></a>esc</h3><p>当用户按下esc键时,执行你的回调</p>
<h3 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h3><p>当用户按下tab键时,执行你的回调</p>
<h3 id="enter"><a href="#enter" class="headerlink" title="enter"></a>enter</h3><p>当用户按下enter键时,执行你的回调</p>
<h3 id="space"><a href="#space" class="headerlink" title="space"></a>space</h3><p>当用户按下space键时,执行你的回调</p>
<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>当用户按下del键时,执行你的回调</p>
<h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><p>当用户按下up键时,执行你的回调</p>
<h3 id="down"><a href="#down" class="headerlink" title="down"></a>down</h3><p>当用户按下down键时,执行你的回调</p>
<h3 id="left"><a href="#left" class="headerlink" title="left"></a>left</h3><p>当用户按下left键时,执行你的回调</p>
<h3 id="right"><a href="#right" class="headerlink" title="right"></a>right</h3><p>当用户按下right键时,执行你的回调</p>
<h3 id="prevent"><a href="#prevent" class="headerlink" title="prevent"></a>prevent</h3><p>阻止默为行为,多用于form的submit事件防止页面跳转,相当于调用了event.preventDefault</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;./api.html&#x27;</span> <span class="attr">ms-click</span>=<span class="string">&#x27;@fn | prevent&#x27;</span>&gt;</span>阻止跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>阻止事件冒泡,相当于调用了event.stopPropagation</p>
<blockquote>
<p>页面的过滤器只能用于事件绑定</p>
</blockquote>
<h3 id="同步频率过滤器"><a href="#同步频率过滤器" class="headerlink" title="同步频率过滤器"></a>同步频率过滤器</h3><p>这两个过滤器只用于ms-duplex</p>
<h3 id="change"><a href="#change" class="headerlink" title="change"></a>change</h3><p>在文本域或文本区使用ms-duplex时,默认是每输入一个字符就同步一次. 当我们想在失去焦点时才进行同步, 那么可以使用此过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&#x27;@aaa | change&#x27;</span>&gt;</span>&#123;&#123;@aaa&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h3><p>当我们实现搜索框的自动完成时, 每输入一个字符可能就会向后台请求一次(请求关键字列表), 这样太频繁,后端撑不住,但使用change过滤器,则又太慢了.改为每隔几十毫秒请求一次就最好. 基于此常用需要开发出此过滤器. 拥有一个参数.</p>
<ol>
<li><p>debounceTime: 数字, 不写默认是300,不能少于4,否则做无效处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ms-duplex</span>=<span class="string">&#x27;@aaa | debounce(200)&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="编写过滤器"><a href="#编写过滤器" class="headerlink" title="编写过滤器"></a>编写过滤器</h3><p>编写一个过滤器是非常简单的. 目前用户可编写的过滤器有两种, 不带参数的及带参数.</p>
<p>比方说uppercase,就是不带参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vm.aaa = <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;@aaa | uppercase&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那它是怎么实现的呢? 源码是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">avalon.filters.uppercase = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(str).toUpperCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器总是把它前方的表达式生成的东西作为过滤器的第一个参数,然后返回一个值</p>
<p>同理lowercase的源码也很简单. 之所以用String,因为我们总想返回一个字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">avalon.filters.lowercase = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(str).toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们自定义一个过滤器,就首先要看一下文档,注意不要与现有的过滤器同名. 比如我们定义一个haha的过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   avalon.filters.haha = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> a +<span class="string">&#x27;haha&#x27;</span></span></span><br><span class="line">   &#125; </span><br><span class="line">   avalon.define(&#123;</span><br><span class="line"><span class="javascript">       $id:<span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">       aaa: <span class="string">&#x27;111&#x27;</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&#x27;tesst&#x27;</span>&gt;</span>&#123;&#123;@aaa | haha&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>// 111haha</span><br></pre></td></tr></table></figure>

<p>我们再看带参数的,带参数的必须写的括号,把第二个,第三个,放到里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;@aaa | truncate(10,&#x27;...&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>truncate要传两个参数,那么看一下其源码是这样的:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">avalon.filters.truncate = <span class="function"><span class="keyword">function</span> (<span class="params">str, length, truncation</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//length，新字符串长度，truncation，新字符串的结尾的字段,返回新字符串</span></span><br><span class="line">    length = length || <span class="number">30</span></span><br><span class="line">    truncation = <span class="keyword">typeof</span> truncation === <span class="string">&quot;string&quot;</span> ? truncation : <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str.length &gt; length ?</span><br><span class="line">            str.slice(<span class="number">0</span>, length - truncation.length) + truncation :</span><br><span class="line">            <span class="built_in">String</span>(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了,我们看一下如何写一个带参数的过滤器,里面重复利用已有的过滤器</p>
<p>众所周知,ms-attr是返回一个对象. 我们只想对其中的一个字段进行格式化. 比如我们要处理title. 那么就起名为title.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../dist/avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            avalon.filters.title = <span class="function"><span class="keyword">function</span> (<span class="params">obj, a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> title = obj.title</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newTitle = avalon.filters.truncate(title, a, b)</span></span><br><span class="line">                obj.title = newTitle</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> obj</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                el: <span class="string">&#x27;123456789qwert&#x27;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ms-controller</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-attr</span>=<span class="string">&quot;&#123;title:@el&#125; | title(10,&#x27;...&#x27;)&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="watch，-fire-unwatch"><a href="#watch，-fire-unwatch" class="headerlink" title="$watch，$fire, $unwatch"></a>$watch，$fire, $unwatch</h2><p><strong>模块间通信及属性监控 $watch，$fire, $unwatch</strong></p>
<p>avalon内置了一个强大的自定义事件系统，它在绑定在每一个VM上。每一个VM都拥有$watch, $unwatch, $fire这三个方法，及一个$events对象。$events是用于储存各种回调。先从单个VM说起，如果一个VM拥有aaa这个属性，如果我们在VM通过$watch对它监控，那么当aaa改变值时，它对应的回调就会被触发！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vmodel = avalon.define(&#123;</span><br><span class="line">     $id: <span class="string">&quot;test&quot;</span>, </span><br><span class="line">     aaa: <span class="number">111</span></span><br><span class="line"> &#125;)</span><br><span class="line">  vmodel.$watch(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">       avalon.log(newValue) <span class="comment">//222</span></span><br><span class="line">       avalon.log(oldValue) <span class="comment">//111</span></span><br><span class="line">   &#125;)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     vmodel.aaa = <span class="number">222</span></span><br><span class="line"> &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意，它只能监听当前属性的变动。</strong></p>
<p>我们还可以通过$unwatch方法，移除对应的回调。如果传入两个参数，第一个是属性名，第二个是回调，那么只移除此回调；如果只传入一个属性名，那么此属性关联的所有回调都会被移除掉。</p>
<p>有时，我们还绑定了一些与属性名无关的事件回调，想触发它，那只能使用$fire方法了。$fire方法第一个参数为属性名（自定义事件名），其他参数随意。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vmodel = avalon.define(&#123;</span><br><span class="line">     $id: <span class="string">&quot;test&quot;</span>, </span><br><span class="line">     aaa: <span class="number">111</span></span><br><span class="line"> &#125;)</span><br><span class="line"> vmodel.$watch(<span class="string">&quot;cat&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     avalon.log(avalon.slice(<span class="built_in">arguments</span>)) <span class="comment">//[1,2,3]</span></span><br><span class="line">  &#125;)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     vmodel.$fire(<span class="string">&quot;cat&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"> &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p><strong>更高级的玩法</strong>，有时我们想在任何属性变化时都触发某一个回调，这时我们就需要$watch一个特殊的属性了——“$all”。不同的是，$watch回调的参数多了一个属性名，排在最前面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vmodel = avalon.define(&#123;</span><br><span class="line">     $id: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">     aaa: <span class="number">111</span>,</span><br><span class="line">     bbb: <span class="number">222</span>,</span><br><span class="line">     </span><br><span class="line"> &#125;)</span><br><span class="line"> vmodel.$watch(<span class="string">&quot;$all&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     avalon.log(avalon.slice(<span class="built_in">arguments</span>)) </span><br><span class="line">         <span class="comment">// [&quot;aaa&quot;, 2, 111]</span></span><br><span class="line">         <span class="comment">// [&quot;bbb&quot;, 3, 222]</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     vmodel.aaa = <span class="number">2</span></span><br><span class="line">     vmodel.bbb = <span class="number">3</span></span><br><span class="line"> &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>手动触发$fire是位随着高风险的，框架内部是做了处理（只有前后值发生变化才会触发），因此万不得已使用它，但又爆发死循环怎么办？这样就需要暂时中断VM的属性监控机制。使用$unwatch()，它里面什么也不传，就暂时将监控冻结了。恢复它也很简单，使用$watch()，里面也什么也不传！</p>
<p>不过最强大的用法是实现模块间的通信（因为在实际项目中，一个页面可能非常大，有多少人分块制作，每个人自己写自己的VM，这时就需要通过某种机制来进行数据与方法的联动了），这是使用$fire方法达成的。只要在$fire的自定义事件名前添加”up!”, “down!”, “all!”前缀,它就能实现angular相似的$emit,$broadcast功能。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>by 司徒正美<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;avalon.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> vm1 = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&quot;ancestor&quot;</span>, </span></span><br><span class="line"><span class="javascript">                aaa : <span class="string">&#x27;1111111111&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                click : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    avalon.log(<span class="string">&quot;向下广播&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    vm1.$fire(<span class="string">&quot;down!aaa&quot;</span>, <span class="string">&quot;capture&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            vm1.$watch(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line">                    avalon.log(v)</span><br><span class="line"><span class="javascript">                    avalon.log(<span class="string">&quot;ancestor.aaa事件被触发了&quot;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm2 = avalon.define(&#123;</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&quot;parent&quot;</span>, </span></span><br><span class="line"><span class="javascript">                text : <span class="string">&quot;222222222&quot;</span></span></span><br><span class="line"><span class="javascript">                aaa : <span class="string">&#x27;3333333333&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                click : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;全局扩播&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    vm2.$fire(<span class="string">&quot;all!aaa&quot;</span>, <span class="string">&quot;broadcast&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            vm2.$watch(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line">                   avalon.log(v)</span><br><span class="line"><span class="javascript">                   avalon.log(<span class="string">&quot;parent.aaa事件被触发了&quot;</span>)</span></span><br><span class="line">             &#125;)</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm3 = avalon.define(</span></span><br><span class="line"><span class="javascript">                $id: <span class="string">&quot;son&quot;</span>, </span></span><br><span class="line"><span class="javascript">                click : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;向上冒泡&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    vm3.$fire(<span class="string">&quot;up!aaa&quot;</span>, <span class="string">&quot;bubble&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            vm3.$watch(<span class="string">&quot;aaa&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line">                    avalon.log(v)</span><br><span class="line"><span class="javascript">                    avalon.log(<span class="string">&quot;son.aaa事件被触发了&quot;</span>)</span></span><br><span class="line">              &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;ms-controller&quot;</span>   <span class="attr">ms-controller</span>=<span class="string">&quot;ancestor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>avalon vm.$fire的升级版 <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">ms-click</span>=<span class="string">&quot;click&quot;</span>&gt;</span></span><br><span class="line">            capture</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">ms-click</span>=<span class="string">&quot;click&quot;</span>&gt;</span>broadcast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">ms-controller</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">ms-click</span>=<span class="string">&quot;click&quot;</span>&gt;</span></span><br><span class="line">                    bubble</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="与jQuery共存"><a href="#与jQuery共存" class="headerlink" title="与jQuery共存"></a>与jQuery共存</h2><p>jQuery是世界上最流行的DOM库,它拥有各式各样的插件,在日常开发中我们可能还是离不开它.因此与它一起使用是常态, 下面是一些注意</p>
<h3 id="domReady后如何扫描"><a href="#domReady后如何扫描" class="headerlink" title="domReady后如何扫描"></a>domReady后如何扫描</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> vm = avalon.define(&#123;<span class="comment">/* */</span>&#125;)</span><br><span class="line">   <span class="comment">//如果你将vm定义在jQuery的ready方法内部,那么avalon的扫描就会失效,需要手动扫描</span></span><br><span class="line">   avalon.scan(<span class="built_in">document</span>.body) <span class="comment">//现在只要传入扫描范围的根节点就行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="如何AJAX提交数据"><a href="#如何AJAX提交数据" class="headerlink" title="如何AJAX提交数据"></a>如何AJAX提交数据</h3><p>提交整个VM</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(&#123;</span><br><span class="line">   method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">   url: <span class="string">&#x27;url-adress&#x27;</span>,</span><br><span class="line">   <span class="comment">//这里是取vm的数据模型 ,通过JSON.stringify会去掉其所有方法, 变成JSON字符串</span></span><br><span class="line">   <span class="comment">//再用JSON.parse变回纯JS对象</span></span><br><span class="line">   data: <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(vm.$model))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>提交VM中的某个<code>对象</code>属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(vm.data.$model))</span><br><span class="line"><span class="string">``</span></span><br><span class="line"></span><br><span class="line">提交VM中的某个<span class="string">`数组`</span>属性</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">data: JSON.parse(JSON.stringify(vm.data.$model))</span></span><br></pre></td></tr></table></figure>

<h3 id="如何让后台回来的数据更新VM"><a href="#如何让后台回来的数据更新VM" class="headerlink" title="如何让后台回来的数据更新VM"></a>如何让后台回来的数据更新VM</h3><p>后台的数据更新VM,只能是更新VM的某些已经定义属性. 如果后台数据很大,那么我们可以定义一个空对象(假如后台数据是对象类型)或一个空数组(假如后台数据是数组类型)来占位</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = avalon.define(&#123;</span><br><span class="line">    $id: <span class="string">&#x27;aaa&#x27;</span>,</span><br><span class="line">    array: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">jQuery.ajax(&#123;</span><br><span class="line">   method: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">   url: <span class="string">&#x27;url-adress&#x27;</span>,</span><br><span class="line">   data: &#123;<span class="comment">/**/&#125;,</span></span><br><span class="line"><span class="comment">   success: function(data)&#123;</span></span><br><span class="line"><span class="comment">     vm.array = data.array</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="如何同步表单的数据"><a href="#如何同步表单的数据" class="headerlink" title="如何同步表单的数据"></a>如何同步表单的数据</h3><p>假如我的某个表单是用于jQuery的日历插件,那么它数据如何同步到vm</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(datepick_input_css_selector).input(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   vm.aaa = <span class="built_in">this</span>.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如何同步复选框 在avalon中,checkbox要对应一个数组 首选是取得所有同名的checkbox,并要求它们在选中状态,然后用map方法收集它们的value值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;checkbox&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> array = $(<span class="string">&#x27;checkbox[name=&quot;&#x27;</span>+<span class="built_in">this</span>.name+<span class="string">&#x27;&quot;]:checked&#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $(<span class="built_in">this</span>).val();</span><br><span class="line">   &#125;)</span><br><span class="line">   vm.checkboxProps = array</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如何同步下拉框</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;select&#x27;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   vm.selectProps = $(<span class="built_in">this</span>).val()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端框架</tag>
        <tag>JavaWeb</tag>
        <tag>avalon</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2023/12/11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h3><p><strong>抽象工厂模式</strong>是一种创建型设计模式， 它能创建一系列相关的对象， 而无需指定其具体类。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/abstract-factory-zh-2x%20%281%29.png" style="zoom:50%;" />

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>要创建一个咖啡店，我们需要具有共同主题的对象。现代风格的咖啡店需要现代风格的椅子、现代风格的沙发和现代风格的咖啡桌，而维多利亚风格的咖啡店需要维多利亚风格的椅子、维多利亚风格的沙发和维多利亚风格的咖啡桌。咖啡店中的对象之间存在依赖关系。</p>
<p>假设你正在开发一款咖啡店模拟器。 你的代码中包括一些类， 用于表示：</p>
<ol>
<li>一系列相关产品， 例如椅子<code>Chair</code> 、  沙发<code>Sofa</code>和 咖啡桌<code>Coffee­Table</code> 。</li>
<li>系列产品的不同变体。 例如， 你可以使用现代<code>Modern</code> 、 维多利亚<code>Victorian</code>等风格生成椅子、沙发和咖啡桌。</li>
</ol>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/problem-zh-2x.png" style="zoom:50%;" />

<p>你需要设法单独生成每件家具对象， 这样才能确保其风格一致。 如果顾客收到的家具风格不一样， 他们可不会开心。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/abstract-factory-comic-1-zh-2x.png" style="zoom: 50%;" />

<p>此外， 你也不希望在添加新产品或新风格时修改已有代码。 家具供应商对于产品目录的更新非常频繁， 你不会想在每次更新时都去修改核心代码的。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>首先， 抽象工厂模式建议为系列中的每件产品明确声明接口 （例如椅子、 沙发或咖啡桌）。 然后， 确保所有产品变体都继承这些接口。 例如， 所有风格的椅子都实现 <code>椅子</code>接口； 所有风格的咖啡桌都实现 <code>咖啡桌</code>接口， 以此类推。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/solution1-2x.png" style="zoom:50%;" />

<p>接下来， 我们需要声明抽象工厂——包含系列中所有产品构造方法的接口。 例如 <code>create­Chair</code>创建椅子 、  <code>createSofa</code>创建沙发和 <code>create­Coffee­Table</code>创建咖啡桌 。 这些方法必须返回<strong>抽象</strong>产品类型， 即我们之前抽取的那些接口：  <code>椅子</code> ，<code>沙发</code>和 <code>咖啡桌</code>等等。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/solution2-2x.png" style="zoom:50%;" />

<p>那么该如何处理产品变体呢？ 对于系列产品的每个变体， 我们都将基于 <code>抽象工厂</code>接口创建不同的工厂类。 每个工厂类都只能返回特定类别的产品， 例如，  <code>现代家具工厂</code>Modern­Furniture­Factory只能创建 <code>现代椅子</code>Modern­Chair 、  <code>现代沙发</code>Modern­Sofa和 <code>现代咖啡桌</code>Modern­Coffee­Table对象。</p>
<h3 id="抽象工厂模式结构"><a href="#抽象工厂模式结构" class="headerlink" title="抽象工厂模式结构"></a>抽象工厂模式结构</h3><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/structure-2x.png" style="zoom:67%;" />

<h3 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h3><p>首先，我们为咖啡店中的对象提供了一些接口和实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sofa</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeTable</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modern implementations -&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernChair</span> <span class="keyword">implements</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是现代风格的椅子!&quot;</span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernSofa</span> <span class="keyword">implements</span> <span class="title">Sofa</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是现代风格的沙发!&quot;</span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernCoffeeTable</span> <span class="keyword">implements</span> <span class="title">CoffeeTable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String DESCRIPTION = <span class="string">&quot;这是现代风格的咖啡桌!&quot;</span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DESCRIPTION;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Victorian implementations similarly -&gt; ...</span></span><br></pre></td></tr></table></figure>

<p>然后我们有了家具工厂的抽象和实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FurnitureFactory</span> </span>&#123;</span><br><span class="line">  <span class="function">Chair <span class="title">createChair</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Sofa <span class="title">createSofa</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">CoffeeTable <span class="title">createCoffeeTable</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModernFurnitureFactory</span> <span class="keyword">implements</span> <span class="title">KingdomFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModernChair();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sofa <span class="title">createSofa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModernSofa();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> CoffeeTable <span class="title">createCoffeeTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModernCoffeeTable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VictorianFurnitureFactory</span> <span class="keyword">implements</span> <span class="title">KingdomFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VictorianChair();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Sofa <span class="title">createSofa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VictorianSofa();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> CoffeeTable <span class="title">createCoffeeTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> VictorianCoffeeTable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在，我们可以为不同的家具工厂设计工厂。 在此示例中，我们创建了FactoryMaker，负责返回<code>ModernFurnitureFactory</code>或<code>VictorianFurnitureFactory</code>的实例。 客户可以使用<code>FactoryMaker</code>来创建所需的具体工厂，该工厂随后将生产不同的具体对象（椅子，沙发，咖啡桌）。 在此示例中，我们还使用了一个枚举来参数化客户要求的家具工厂类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Chair chair;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sofa sofa;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeTable coffeeTable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CoffeeStoreStyle</span> </span>&#123;</span><br><span class="line">            Victorian, Modern</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FurnitureFactory <span class="title">makeFactory</span><span class="params">(CoffeeStoreStyle style)</span> </span>&#123;</span><br><span class="line">            FurnitureFactory factory;</span><br><span class="line">            <span class="keyword">switch</span> (style) &#123;</span><br><span class="line">                <span class="keyword">case</span> Victorian:</span><br><span class="line">                    factory = <span class="keyword">new</span> VictorianFurnitureFactory();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Modern:</span><br><span class="line">                    factory = <span class="keyword">new</span> ModernFurnitureFactory();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;FurnitureType not supported.&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> factory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们有了抽象工厂，使我们可以制作相关对象的系列，即现代风格工厂创建了现代风格椅子，现代风格沙发和现代风格咖啡桌等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        CoffeeStore coffeeStore = <span class="keyword">new</span> CoffeeStore();</span><br><span class="line">        System.out.println(<span class="string">&quot;Victorian Style&quot;</span>);</span><br><span class="line">        FurnitureFactory victorianFactory = CoffeeStore.FactoryMaker.makeFactory(CoffeeStore.FactoryMaker.CoffeeStoreStyle.Victorian);</span><br><span class="line">        coffeeStore.setChair(victorianFactory.createChair());</span><br><span class="line">        coffeeStore.setSofa(victorianFactory.createSofa());</span><br><span class="line">        coffeeStore.setCoffeeTable(victorianFactory.createCoffeeTable());</span><br><span class="line">        System.out.println(coffeeStore.getChair().getDescription());</span><br><span class="line">        System.out.println(coffeeStore.getSofa().getDescription());</span><br><span class="line">        System.out.println(coffeeStore.getCoffeeTable().getDescription());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Modern Style&quot;</span>);</span><br><span class="line">        FurnitureFactory ModernFactory = CoffeeStore.FactoryMaker.makeFactory(CoffeeStore.FactoryMaker.CoffeeStoreStyle.Modern);</span><br><span class="line">        coffeeStore.setChair(ModernFactory.createChair());</span><br><span class="line">        coffeeStore.setSofa(ModernFactory.createSofa());</span><br><span class="line">        coffeeStore.setCoffeeTable(ModernFactory.createCoffeeTable());</span><br><span class="line">        System.out.println(coffeeStore.getChair().getDescription());</span><br><span class="line">        System.out.println(coffeeStore.getSofa().getDescription());</span><br><span class="line">        System.out.println(coffeeStore.getCoffeeTable().getDescription());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Victorian Style</span><br><span class="line">这是维多利亚风格的椅子!</span><br><span class="line">这是维多利亚风格的沙发!</span><br><span class="line">这是维多利亚风格的咖啡桌!</span><br><span class="line">Modern Style</span><br><span class="line">这是现代风格的椅子!</span><br><span class="line">这是现代风格的沙发!</span><br><span class="line">这是现代风格的咖啡桌!</span><br></pre></td></tr></table></figure>

<h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h3><p>在以下情况下使用抽象工厂模式</p>
<ul>
<li>该系统应独立于其产品的创建，组成和表示方式</li>
<li>系统应配置有多个产品系列之一</li>
<li>相关产品对象系列旨在一起使用，你需要强制执行此约束</li>
<li>你想提供产品的类库，并且只想暴露它们的接口，而不是它们的实现。</li>
<li>从概念上讲，依赖项的生存期比使用者的生存期短。</li>
<li>你需要一个运行时值来构建特定的依赖关系</li>
<li>你想决定在运行时从系列中调用哪种产品。</li>
<li>你需要提供一个或更多仅在运行时才知道的参数，然后才能解决依赖关系。</li>
<li>当你需要产品之间的一致性时</li>
<li>在向程序添加新产品或产品系列时，您不想更改现有代码。</li>
</ul>
<p>示例场景</p>
<ul>
<li>在运行时在<code>FileSystemAcmeService</code> ，<code>DatabaseAcmeService</code> 或<code>NetworkAcmeService</code>中选择并调用一个</li>
<li>单元测试用例的编写变得更加容易</li>
<li>适用于不同操作系统的UI工具</li>
</ul>
<h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><ul>
<li><p>Java中的依赖注入会隐藏服务类的依赖关系，这些依赖关系可能导致运行时错误，而这些错误在编译时会被捕获。</p>
</li>
<li><p>虽然在创建预定义对象时模式很好，但是添加新对象可能会很困难。</p>
</li>
<li><p>由于引入了许多新的接口和类，因此代码变得比应有的复杂。</p>
</li>
</ul>
<h3 id="已知使用"><a href="#已知使用" class="headerlink" title="已知使用"></a>已知使用</h3><ul>
<li><strong>javax.xml.parsers.DocumentBuilderFactoryopen in new window</strong></li>
<li><strong>javax.xml.transform.TransformerFactoryopen in new window</strong></li>
<li><strong>javax.xml.xpath.XPathFactoryopen in new window</strong></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>抽象工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器模式</title>
    <url>/2023/12/19/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/builder-zh-2x.png" style="zoom:50%;" />

<p><strong>生成器模式</strong>是一种创建型设计模式， 使你能够分步骤创建复杂对象。 该模式允许你使用相同的创建代码生成不同类型和形式的对象。</p>
<p>使用建造者模式，用户就只需要指定需要建造的类型，具体的建造过程和细节并不需要知道。</p>
<p>建造者模式允许修改一个产品的内部表示。</p>
<p>它将构造和表示两块代码隔离开来。</p>
<p>它很好的控制了构建过程。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/builder_seq1.png" style="zoom:50%;" />

<p>建造者模式流程说明：</p>
<ol>
<li>创建大型产品建造者</li>
<li>客户端创建指挥者 <code>Director</code> 对象并配置它所需要的建造者 <code>Builder</code> 对象</li>
<li><code>Director</code> 负责通知 <code>builder</code> 何时建造 <code>product</code> 的部件</li>
<li><code>Builder</code> 处理 <code>director</code> 的请求并添加 <code>product</code> 的部件</li>
<li>客户端从 <code>builder</code> 处获得 <code>product</code></li>
</ol>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>假设有这样一个复杂对象， 在对其进行构造时需要对诸多成员变量和嵌套对象进行繁复的初始化工作。 这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中； 甚至还有更糟糕的情况， 那就是这些代码散落在客户端代码的多个位置。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/problem1229-2x.png" style="zoom:50%;" />

<p>例如， 我们来思考如何创建一个房屋<code>House</code>对象。 建造一栋简单的房屋， 首先你需要建造四面墙和地板， 安装房门和一套窗户， 然后再建造一个屋顶。 但是如果你想要一栋更宽敞更明亮的房屋， 还要有院子和其他设施 （例如暖气、 排水和供电设备）， 那又该怎么办呢？</p>
<p>最简单的方法是扩展房屋基类， 然后创建一系列涵盖所有参数组合的子类。 但最终你将面对相当数量的子类。 任何新增的参数 （例如门廊类型） 都会让这个层次结构更加复杂。</p>
<p>另一种方法则无需生成子类。 你可以在房屋基类中创建一个包括所有可能参数的超级构造函数， 并用它来控制房屋对象。 这种方法确实可以避免生成子类， 但它却会造成另外一个问题。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/problem2023-2x.png" style="zoom:50%;" />

<p>通常情况下， 绝大部分的参数都没有使用， 这使得对于构造函数的调用十分不简洁。 例如， 只有很少的房子有游泳池， 因此与游泳池相关的参数十之八九是毫无用处的。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>生成器模式建议将对象构造代码从产品类中抽取出来， 并将其放在一个名为<em>生成器</em>的独立对象中。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/solution111-2x.png" style="zoom:50%;" />

<p>该模式会将对象构造过程划分为一组步骤， 比如 <code>build­Walls</code>创建墙壁和 <code>build­Door</code>创建房门创建房门等。 每次创建对象时， 你都需要通过生成器对象执行一系列步骤。 重点在于你无需调用所有步骤， 而只需调用创建特定对象配置所需的那些步骤即可。</p>
<p>当你需要创建不同形式的产品时， 其中的一些构造步骤可能需要不同的实现。 例如， 木屋的房门可能需要使用木头制造， 而城堡的房门则必须使用石头制造。</p>
<p>在这种情况下， 你可以创建多个不同的生成器， 用不同方式实现一组相同的创建步骤。 然后你就可以在创建过程中使用这些生成器 （例如按顺序调用多个构造步骤） 来生成不同类型的对象。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/builder-comic-1-zh-2x.png" style="zoom:50%;" />

<p>例如， 假设第一个建造者使用木头和玻璃制造房屋， 第二个建造者使用石头和钢铁， 而第三个建造者使用黄金和钻石。 在调用同一组步骤后， 第一个建造者会给你一栋普通房屋， 第二个会给你一座小城堡， 而第三个则会给你一座宫殿。 但是， 只有在调用构造步骤的客户端代码可以通过通用接口与建造者进行交互时， 这样的调用才能返回需要的房屋。</p>
<h4 id="指挥者"><a href="#指挥者" class="headerlink" title="指挥者"></a>指挥者</h4><p>你可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的指挥类。 指挥类可定义创建步骤的执行顺序， 而生成器则提供这些步骤的实现。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/builder-comic-2-zh-2x.png" style="zoom:50%;" />

<p>严格来说， 你的程序中并不一定需要指挥类。 客户端代码可直接以特定顺序调用创建步骤。 不过， 指挥类中非常适合放入各种例行构造流程， 以便在程序中反复使用。</p>
<p>此外， 对于客户端代码来说， 指挥类完全隐藏了产品构造细节。 客户端只需要将一个生成器与主管类关联， 然后使用主管类来构造产品， 就能从生成器处获得构造结果了。</p>
<h4 id="生成器模式结构"><a href="#生成器模式结构" class="headerlink" title="生成器模式结构"></a>生成器模式结构</h4><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/structure-1229-2x.png" style="zoom:67%;" />

<ol>
<li><strong>建造者</strong> （Builder） 接口声明在所有类型建造者中通用的产品构造步骤。</li>
<li><strong>具体建造者</strong> （Concrete Builders） 提供构造过程的不同实现。 具体建造者也可以构造不遵循通用接口的产品。</li>
<li><strong>产品</strong> （Products） 是最终生成的对象。 由不同建造者构造的产品无需属于同一类层次结构或接口。</li>
<li><strong>主管</strong> （Director） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。</li>
<li><strong>客户端</strong> （Client） 必须将某个建造者对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用建造者对象完成后续所有的构造任务。 但在客户端将建造者对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的建造者。</li>
</ol>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h4><p>下面关于<strong>生成器</strong>模式的例子演示了你可以如何复用相同的对象构造代码来生成不同类型的产品——例如汽车 （Car）。</p>
<p>汽车是一个复杂对象， 有数百种不同的制造方法。 我们没有在 <code>汽车</code>类中塞入一个巨型构造函数， 而是将汽车组装代码抽取到单独的汽车生成器类中。 该类中有一组方法可用来配置汽车的各种部件。</p>
<p>如果客户端代码需要组装一辆与众不同、 精心调教的汽车， 它可以直接调用生成器。 或者， 客户端可以将组装工作委托给主管类， 因为主管类知道如何使用生成器制造最受欢迎的几种型号汽车。</p>
<p>比如说我是个老司机，但是除了开车还想造车，但是车的构造实在是太复杂了，那么我们就可以将车拆分…</p>
<p>4个轮子、1个底盘、1个发动机，1个驾驶位</p>
<p>好了，为了简便，就造这四个吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarType carType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WheelType wheels;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ChassisType chassis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EngineType engine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seats;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(CarType carType, WheelType wheels, ChassisType chassis, EngineType engine, <span class="keyword">int</span> seat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carType = carType;</span><br><span class="line">        <span class="keyword">this</span>.wheels = wheels;</span><br><span class="line">        <span class="keyword">this</span>.chassis = chassis;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">        <span class="keyword">this</span>.seats = seat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CarType <span class="title">getCarType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WheelType <span class="title">getWheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wheels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChassisType <span class="title">getChassis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chassis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EngineType <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seats;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;carType=&quot;</span> + carType +</span><br><span class="line">                <span class="string">&quot;, wheels=&quot;</span> + wheels +</span><br><span class="line">                <span class="string">&quot;, chassis=&quot;</span> + chassis +</span><br><span class="line">                <span class="string">&quot;, engine=&quot;</span> + engine +</span><br><span class="line">                <span class="string">&quot;, seats=&quot;</span> + seats +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们有汽车零部件的各种枚举类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CarType</span> </span>&#123;</span><br><span class="line">    CITY_CAR,</span><br><span class="line">    SPORT_CAR,</span><br><span class="line">    SUV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WheelType</span> </span>&#123;</span><br><span class="line">    CITY_CAR_WHEEL,</span><br><span class="line">    SPORT_CAR_WHEEL,</span><br><span class="line">    SUV_CAR_WHEEL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ChassisType</span> </span>&#123;</span><br><span class="line">    CITY_CAR_CHASSIS,</span><br><span class="line">    SPORT_CAR_CHASSIS,</span><br><span class="line">    SUV_CAR_CHASSIS</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EngineType</span> </span>&#123;</span><br><span class="line">    CITY_CAR_ENGINE,</span><br><span class="line">    SPORT_CAR_ENGINE,</span><br><span class="line">    SUV_CAR_ENGINE</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我需要一些具体的汽车构造者，这里我们有三种具体的汽车构建者：城市轿车构建者<code>CityCarBuilder</code>、运动跑车构建者<code>SportCarBuilder</code>、SUV汽车构建者<code>SUVCarBuilder</code>。</p>
<p><code>CityCarBuilder.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityCarBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarType carType;</span><br><span class="line">    <span class="keyword">private</span> WheelType wheels;</span><br><span class="line">    <span class="keyword">private</span> ChassisType chassis;</span><br><span class="line">    <span class="keyword">private</span> EngineType engine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carType = CarType.CITY_CAR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wheels = WheelType.CITY_CAR_WHEEL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildChassis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chassis = ChassisType.CITY_CAR_CHASSIS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = EngineType.CITY_CAR_ENGINE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seat = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(carType, wheels, chassis, engine, seat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SportCarBuilder.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportCarBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarType carType;</span><br><span class="line">    <span class="keyword">private</span> WheelType wheels;</span><br><span class="line">    <span class="keyword">private</span> ChassisType chassis;</span><br><span class="line">    <span class="keyword">private</span> EngineType engine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carType = CarType.SPORT_CAR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wheels = WheelType.SPORT_CAR_WHEEL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildChassis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chassis = ChassisType.SPORT_CAR_CHASSIS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = EngineType.SPORT_CAR_ENGINE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seat = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(carType, wheels, chassis, engine, seat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>SUVCarBuilder.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SUVCarBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CarType carType;</span><br><span class="line">    <span class="keyword">private</span> WheelType wheels;</span><br><span class="line">    <span class="keyword">private</span> ChassisType chassis;</span><br><span class="line">    <span class="keyword">private</span> EngineType engine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carType = CarType.SUV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWheels</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wheels = WheelType.SUV_CAR_WHEEL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildChassis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chassis = ChassisType.SUV_CAR_CHASSIS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = EngineType.SUV_CAR_ENGINE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seat = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(carType, wheels, chassis, engine, seat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这些建造者都实现了<code>Builder</code>接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个汽车对象</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造汽车车轮</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildWheels</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造汽车地盘</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildChassis</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造发动机</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建造驾驶位</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSeat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后我们需要一个<code>Director</code>类负责按照特定顺序执行生成步骤。其在根据特定步骤或配置来生成产品时<br>会很有帮助。由于客户端可以直接控制生成器，我们可以调用<code>Director</code>类的<code>setBuilder</code>来切换产品的具体建造者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">constructCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.createCar();</span><br><span class="line">        builder.buildWheels();</span><br><span class="line">        builder.buildChassis();</span><br><span class="line">        builder.buildEngine();</span><br><span class="line">        builder.buildSeat();</span><br><span class="line">        <span class="keyword">return</span> builder.getCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBuilder</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">getBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在指挥者和建造者都已经准备好了，可以进行建造了，调用指挥者的<code>constructCar()</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.builder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wotzc</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生产城市汽车</span></span><br><span class="line">        CityCarBuilder cityCarBuilder = <span class="keyword">new</span> CityCarBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(cityCarBuilder);</span><br><span class="line">        Car cityCar = director.constructCar();</span><br><span class="line">        System.out.println(cityCar.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产运动汽车</span></span><br><span class="line">        SportCarBuilder sportCarBuilder = <span class="keyword">new</span> SportCarBuilder();</span><br><span class="line">        director.setBuilder(sportCarBuilder);</span><br><span class="line">        Car sportCar = director.constructCar();</span><br><span class="line">        System.out.println(sportCar.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产SUV</span></span><br><span class="line">        SUVCarBuilder suvCarBuilder = <span class="keyword">new</span> SUVCarBuilder();</span><br><span class="line">        director.setBuilder(suvCarBuilder);</span><br><span class="line">        Car suv = director.constructCar();</span><br><span class="line">        System.out.println(suv.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Car&#123;carType&#x3D;CITY_CAR, wheels&#x3D;CITY_CAR_WHEEL, chassis&#x3D;CITY_CAR_CHASSIS, engine&#x3D;CITY_CAR_ENGINE, seats&#x3D;5&#125;</span><br><span class="line">Car&#123;carType&#x3D;SPORT_CAR, wheels&#x3D;SPORT_CAR_WHEEL, chassis&#x3D;SPORT_CAR_CHASSIS, engine&#x3D;SPORT_CAR_ENGINE, seats&#x3D;2&#125;</span><br><span class="line">Car&#123;carType&#x3D;SUV, wheels&#x3D;SUV_CAR_WHEEL, chassis&#x3D;SUV_CAR_CHASSIS, engine&#x3D;SUV_CAR_ENGINE, seats&#x3D;7&#125;</span><br></pre></td></tr></table></figure>

<h4 id="生成器模式适合应用场景："><a href="#生成器模式适合应用场景：" class="headerlink" title="生成器模式适合应用场景："></a>生成器模式适合应用场景：</h4><p><strong>使用生成器模式可避免 “重叠构造函数 （telescoping constructor）” 的出现。</strong></p>
<p> 假设你的构造函数中有十个可选参数， 那么调用该函数会非常不方便； 因此， 你需要重载这个构造函数， 新建几个只有较少参数的简化版。 但这些构造函数仍需调用主构造函数， 传递一些默认数值来替代省略掉的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Pizza &#123;</span><br><span class="line">    Pizza(int size) &#123; …… &#125;</span><br><span class="line">    Pizza(int size, boolean cheese) &#123; …… &#125;</span><br><span class="line">    Pizza(int size, boolean cheese, boolean pepperoni) &#123; …… &#125;</span><br><span class="line">    &#x2F;&#x2F; ……</span><br></pre></td></tr></table></figure>

<p>只有在 C# 或 Java 等支持方法重载的编程语言中才能写出如此复杂的构造函数。</p>
<p>生成器模式让你可以分步骤生成对象， 而且允许你仅使用必须的步骤。 应用该模式后， 你再也不需要将几十个参数塞进构造函数里了。</p>
<p><strong>当你希望使用代码创建不同形式的产品 （例如石头或木头房屋） 时， 可使用生成器模式。</strong></p>
<p> 如果你需要创建的各种形式的产品， 它们的制造过程相似且仅有细节上的差异， 此时可使用生成器模式。</p>
<p>基本生成器接口中定义了所有可能的制造步骤， 具体生成器将实现这些步骤来制造特定形式的产品。 同时， 主管类将负责管理制造步骤的顺序。</p>
<h4 id="已知使用"><a href="#已知使用" class="headerlink" title="已知使用:"></a>已知使用:</h4><ul>
<li><code>java.lang.StringBuilder</code></li>
<li><code>java.nio.ByteBuffer</code> as well as similar buffers such as FloatBuffer, IntBuffer and so on.</li>
<li><code>java.lang.StringBuffer</code></li>
<li><code>All implementations of java.lang.Appendable</code></li>
<li><code>Apache Camel builders</code></li>
<li><code>Apache Commons Option.Builder</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>生成器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2023/12/23/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h2><p>在策略模式中定义了一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式。策略模式是一种对象行为型模式。</p>
<p>在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。</p>
<p>在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if…else…等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，该类代码将较复杂，维护较为困难。</p>
<p>除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可供选择的算法时问题将变得更加严重。</p>
<p>为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(<code>Strategy</code>)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。</p>
<h2 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/strategy-comic-1-zh-2x.png" style="zoom:50%;" />

<p>假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。</p>
<h2 id="策略模式结构"><a href="#策略模式结构" class="headerlink" title="策略模式结构"></a>策略模式结构</h2><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/strategy-pattern-struct.png" style="zoom: 50%;" />

<ol>
<li><strong>上下文</strong> （Context） 维护指向具体策略的引用， 且仅通过策略接口与该对象进行交流。</li>
<li><strong>策略</strong> （Strategy） 接口是所有具体策略的通用接口， 它声明了一个上下文用于执行策略的方法。</li>
<li><strong>具体策略</strong> （Concrete Strategies） 实现了上下文所用算法的各种不同变体。</li>
<li>当上下文需要运行算法时， 它会在其已连接的策略对象上调用执行方法。 上下文不清楚其所涉及的策略类型与算法的执行方式。</li>
<li><strong>客户端</strong> （Client） 会创建一个特定策略对象并将其传递给上下文。 上下文则会提供一个设置器以便客户端在运行时替换相关联的策略。</li>
</ol>
<h2 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h2><div class="note info no-icon"><p>某商场在618期间推出多种促销活动，在618活动前期使用立减促销的策略，在618活动中期采用满减促销的策略，在618活动后期采用返现促销的策略。</p>
</div>

<h2 id="程序化示例"><a href="#程序化示例" class="headerlink" title="程序化示例"></a>程序化示例</h2><p>我们先介绍一下促销策略接口及其实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 促销</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doPromotion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanXianStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromotion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返现促销！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiJianStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromotion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;立减促销！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManJianStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPromotion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满减促销！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是强大的活动类，他可以根据618时间节点选择促销策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Activity</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.doPromotion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LiJianStrategy liJianStrategy = <span class="keyword">new</span> LiJianStrategy();</span><br><span class="line">        Activity activity618 = <span class="keyword">new</span> Activity(liJianStrategy);</span><br><span class="line">        activity618.executeStrategy();</span><br><span class="line"></span><br><span class="line">        ManJianStrategy manJianStrategy = <span class="keyword">new</span> ManJianStrategy();</span><br><span class="line">        activity618.setStrategy(manJianStrategy);</span><br><span class="line">        activity618.executeStrategy();</span><br><span class="line"></span><br><span class="line">        FanXianStrategy fanXianStrategy = <span class="keyword">new</span> FanXianStrategy();</span><br><span class="line">        activity618.setStrategy(fanXianStrategy);</span><br><span class="line">        activity618.executeStrategy();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">立减促销！</span><br><span class="line">满减促销！</span><br><span class="line">返现促销！</span><br></pre></td></tr></table></figure>

<p>UML：</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/assets_-LWJYTjaWpc4_WfP8Kq__-LdZ9gEHvPQcz52n4K7B_-LdZ9hFdGXFide-o-RzQ_strategy-pattern.webp" style="zoom:50%;" />

<h2 id="策略模式适合应用场景"><a href="#策略模式适合应用场景" class="headerlink" title="策略模式适合应用场景"></a>策略模式适合应用场景</h2><ul>
<li>当你想使用对象中各种不同的算法变体，并希望能在运行时切换算法时，可使用策略模式。（策略模式让你能够将对象关联至可以不同方式执行特定子任务的不同子对象， 从而以间接方式在运行时更改对象行为。）</li>
<li>当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。（策略模式让你能将不同行为抽取到一个独立类层次结构中， 并将原始类组合成同一个， 从而减少重复代码。）</li>
<li>如果算法在上下文的逻辑中不是特别重要，使用该模式能将类的业务逻辑与其算法实现细节隔离开来。（策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。）</li>
<li>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。（策略模式将所有继承自同样接口的算法抽取到独立类中， 因此不再需要条件语句。 原始对象并不实现所有算法的变体， 而是将执行工作委派给其中的一个独立算法对象。）</li>
</ul>
<h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><ul>
<li>策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。</li>
<li>在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。</li>
<li>策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中“退休”的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>策略模式提供了对“开闭原则”的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。</li>
<li>策略模式提供了管理相关的算法族的办法。</li>
<li>策略模式提供了可以替换继承关系的办法。</li>
<li>使用策略模式可以避免使用多重条件转移语句。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li>
<li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>在策略模式中定义了一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化，也称为政策模式。策略模式是一种对象行为型模式。</li>
<li>策略模式包含三个角色：环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例；抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类；具体策略类实现了在抽象策略类中定义的算法。</li>
<li>策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。</li>
<li>策略模式主要优点在于对“开闭原则”的完美支持，在不修改原有系统的基础上可以更换算法或者增加新的算法，它很好地管理算法族，提高了代码的复用性，是一种替换继承，避免多重条件转移语句的实现方式；其缺点在于客户端必须知道所有的策略类，并理解其区别，同时在一定程度上增加了系统中类的个数，可能会存在很多策略类。</li>
<li>策略模式适用情况包括：在一个系统里面有许多类，它们之间的区别仅在于它们的行为，使用策略模式可以动态地让一个对象在许多行为中选择一种行为；一个系统需要动态地在几种算法中选择一种；避免使用难以维护的多重条件选择语句；希望在具体策略类中封装算法和与相关的数据结构。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>快速掌握正则表达式</title>
    <url>/2022/03/10/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h1><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。<strong>正则表达式</strong>就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p>
<p>很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是<code>*</code>和<code>?</code>。如果你想查找某个目录下的所有的Word文档的话，你会搜索*.doc。在这里，<em>会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像</em>010-12345678<em>或</em>0376-7654321)。</p>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。</p>
<p>假设你在一篇英文小说里查找hi，你可以使用正则表达式<code>hi</code>。</p>
<p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是<code>h</code>,后一个是<code>i</code>。通常，处理正则表达式的工具会提供一个<code>忽略大小写</code>的选项，如果选中了这个选项，它可以匹配<em>hi</em>,<em>HI</em>,<em>Hi</em>,<em>hI</em>这四种情况中的任意一种。</p>
<p>不幸的是，很多单词里包含<em>hi</em>这两个连续的字符，比如<em>him</em>,<em>history</em>,<em>high</em>等等。用<span style="color:red">hi</span>来查找的话，这里边的<em>hi</em>也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用<span style="color:red">\bhi\b</span>。</p>
<p><code>\b</code>是正则表达式规定的一个特殊代码（好吧，某些人叫它<strong>元字符，metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它<strong>只匹配一个位置</strong>。</p>
<p>假如你要找的是hi后面不远处跟着一个Lucy，你应该用<code>\bhi\b.*\bLucy\b</code>。</p>
<p>这里，<code>.</code>是另一个元字符，匹配除了换行符以外的任意字符。<code>*</code>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定<em>前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，<code>.\</em></code>连在一起就意味着<code>任意数量的不包含换行的字符</code>。现在\bhi\b.*\bLucy\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</p>
<p>换行符就是<code>'\n'</code>,ASCII编码为10(十六进制0x0A)的字符。</p>
<p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：</p>
<p><code>0\d\d-\d\d\d\d\d\d\d\d</code>匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。</p>
<p>这里的<code>\d</code>是个新的元字符，<code>匹配一位数字(0，或1，或2，或……)</code>。<code>-</code>不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。</p>
<p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<code>0\d&#123;2&#125;-\d&#123;8&#125;</code>。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。</p>
<div class="note success"><p><strong>注解：</strong></p>
<ol>
<li>如果需要更精确的说法，<code>\b</code>匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)<code>\w</code>。</li>
<li>换行符就是<code>'\n'</code>，ASCII编码为10(十六进制0x0A)的字符。</li>
</ol>
</div>

<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><p>现在你已经知道几个很有用的元字符了，如<code>\b</code>,<code>.</code>,<code>*</code>，还有<code>\d.</code>正则表达式里还有更多的元字符，比如<code>\s</code>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。<code>\w</code>匹配字母或数字或下划线或汉字等。</p>
<p>对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。</p>
<p>下面来看看更多的例子：</p>
<p><code>\ba\w*\b</code>匹配以字母a开头的单词——先是某个单词开始处(<code>\b</code>)，然后是字母a，然后是任意数量的字母或数字(<code>\w</code>)，最后是单词结束处(<code>\b</code>)。</p>
<p><code>\d+</code>匹配1个或更多连续的数字。这里的<code>+</code>是和<code>*</code>类似的元字符，不同的是<code>*</code>匹配重复任意次(可能是0次)，而<code>+</code>则匹配重复1次或更多次。</p>
<p><code>\b\w&#123;6&#125;\b</code> 匹配刚好6个字符的单词。</p>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>.</code></td>
<td align="center">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td align="center"><code>\w</code></td>
<td align="center">匹配字母或数字或下划线</td>
</tr>
<tr>
<td align="center"><code>\s</code></td>
<td align="center">匹配任意的空白符</td>
</tr>
<tr>
<td align="center"><code>\d</code></td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center"><code>\b</code></td>
<td align="center">匹配单词的开始或结束</td>
</tr>
<tr>
<td align="center"><code>^</code></td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td align="center"><code>$</code></td>
<td align="center">匹配字符串的结束</td>
</tr>
</tbody></table>
<p>元字符<code>^</code>（和数字6在同一个键位上的符号）和<code>$</code>都匹配一个位置，这和<code>\b</code>有点类似。<code>^</code>匹配你要用来查找的字符串的开头，<code>$</code>匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：<code>^\d&#123;5,12&#125;$</code>。</p>
<p>这里的<code>&#123;5,12&#125;</code>和前面介绍过的<code>&#123;2&#125;</code>是类似的，只不过<code>&#123;2&#125;</code>匹配只能不多不少重复2次，<code>&#123;5,12&#125;</code>则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p>
<p>因为使用了<code>^</code>和<code>$</code>，所以输入的整个字符串都要用来和<code>\d&#123;5,12&#125;</code>来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p>
<p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，<code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</p>
<div class="note success"><p><strong>注解：</strong></p>
<ol>
<li>对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。</li>
<li>好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的<code>\w</code>。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)</li>
</ol>
</div>

<h1 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h1><p>有时候在我们查找<code> . </code>，或者<code>*</code>，或者一些元字符本身的话，会有一些问题出现，因为这些元字符已经变成别的意思了，所以我们没有办法指定这些元字符。出现这种情况，我们就得使用<code>\</code>来取消这些字符的特殊意义。所以，我们应该使用<code>\.</code>和<code>\*</code>。当然，要查找<code>\</code>本身，你也得用<code>\\</code>.</p>
<p>例如：<code>deerchao.net</code>匹配<code>deerchao.net</code>，<code>C:\Windows</code>匹配<code>C:\Windows</code>。</p>
<h1 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h1><p>你已经看过了前面的<code>*</code>，<code>+</code>，<code>&#123;2&#125;</code>，<code>&#123;5,12&#125;</code>这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：</p>
<table>
<thead>
<tr>
<th align="center">代码/语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>*</code></td>
<td align="center">重复零次或更多次</td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="center">重复一次或更多次</td>
</tr>
<tr>
<td align="center"><code>?</code></td>
<td align="center">重复零次或一次</td>
</tr>
<tr>
<td align="center"><code>&#123;n&#125;</code></td>
<td align="center">重复n次</td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;</code></td>
<td align="center">重复n次或更多次</td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;</code></td>
<td align="center">重复n到m次</td>
</tr>
</tbody></table>
<p>下面是一些使用重复的例子：</p>
<p><code>Windows\d+</code>匹配Windows后面跟1个或更多数字</p>
<p><code>^\w+</code>匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p>
<h1 id="正则表达式之字符类"><a href="#正则表达式之字符类" class="headerlink" title="正则表达式之字符类"></a>正则表达式之字符类</h1><p>如果想要查找数字，字母或数字，空白是很简单的，因为对应这些字符集合的元字符是已经存在的了，不过要想匹配像元音字母a，e，i，o，u这些没有预先定义元字符的字符集合该怎么做呢？</p>
<p>有个很简单的方法，只需要在方括号里列出它们就可以了，像<code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!)。</p>
<p>我们也可以轻松地指定一个字符<strong>范围</strong>，像<code>[0-9]</code>代表的含意与<code>\d</code>就是完全一致的：一位数字；同理<code>[a-z0-9A-Z_]</code>也完全等同于<code>\w</code>（如果只考虑英文的话）。</p>
<p>下面是一个更复杂的表达式：<code>(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。</p>
<p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符<code>(</code>,它能出现0次或1次(<code>?</code>),然后是一个<code>0</code>，后面跟着2个数字(<code>\d&#123;2&#125;</code>)，然后是<code>)</code>或<code>-</code>或<code>空格</code>中的一个，它出现1次或不出现(<code>?</code>)，最后是8个数字(<code>\d&#123;8&#125;</code>)。</p>
<div class="note success"><p><strong>注解：</strong><code> (</code>和<code>)</code>也是元字符，后面的分组节里会提到，所以在这里需要使用转义。</p>
</div>

<h1 id="正则表达式的分枝条件"><a href="#正则表达式的分枝条件" class="headerlink" title="正则表达式的分枝条件"></a>正则表达式的分枝条件</h1><p>但是在上节内容介绍的那个表达式也可以用来匹配类似<em>010)12345678</em>或*(022-87654321*这样的错误的格式。怎么办？要想解决这个问题，我们可以使用<strong>分枝条件。</strong>正则表达式里的<strong>分枝条件</strong>指的是有几种规则，只要满足这些规则中的任意一种，都会被当成匹配，因此我们要使用<code>|</code>把这些规则分开。为了更好的理解上述内容，我们来看看几个例子：</p>
<p><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。</p>
<p><code>(0\d&#123;2&#125;)[- ]?\d&#123;8&#125;|0\d&#123;2&#125;[- ]?\d&#123;8&#125;</code>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。</p>
<p><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序</strong>。如果你把它改成<code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p>
<h1 id="正则表达式之分组"><a href="#正则表达式之分组" class="headerlink" title="正则表达式之分组"></a>正则表达式之分组</h1><p>在上述章节中我们已经知道直接在字符后面加上限定符就可以重复单个字符，那么多个字符的重复又该如何实现呢？你可以使用小括号来指定子表达式（也称为<strong>分组</strong>），然后对于这个子表达式的重复次数你就可以自行规定了，子表达式也可以进行一些其他的操作，这个在后面会进行介绍。</p>
<p><code>(\d&#123;1,3&#125;.)&#123;3&#125;\d&#123;1,3&#125;</code>是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：<code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;.)&#123;3&#125;</code>匹配三位数字加上一个英文句号(这个整体也就是这个<strong>分组</strong>)重复3次，最后再加上一个一到三位的数字<code>(\d&#123;1,3&#125;)</code>。</p>
<p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：<code>((2[0-4]\d|25[0-5]|[01]?\d\d?).)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code>。</p>
<p>理解这个表达式的关键是理解<code>2[0-4]\d|25[0-5]|[01]?\d\d?</code>，这里我就不细说了，你自己应该能分析得出来它的意义。</p>
<p><strong>注解：</strong></p>
<ol>
<li>IP地址中每个数字都不能大于255. 经常有人问我，01.02.03.04 这样前面带有0的数字, 是不是正确的IP地址呢? 答案是: 是的, IP 地址里的数字可以包含有前导 0 (leading zeroes).</li>
</ol>
<h1 id="正则表达式之反义"><a href="#正则表达式之反义" class="headerlink" title="正则表达式之反义"></a>正则表达式之反义</h1><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到<strong>反义</strong>：</p>
<table>
<thead>
<tr>
<th align="center">代码/语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\W</code></td>
<td align="center">匹配任意不是字母，数字，下划线，汉字的字符</td>
</tr>
<tr>
<td align="center"><code>\S</code></td>
<td align="center">匹配任意不是空白符的字符</td>
</tr>
<tr>
<td align="center"><code>\D</code></td>
<td align="center">匹配任意非数字的字符</td>
</tr>
<tr>
<td align="center"><code>\B</code></td>
<td align="center">匹配不是单词开头或结束的位置</td>
</tr>
<tr>
<td align="center"><code>[^x]</code></td>
<td align="center">匹配除了x以外的任意字符</td>
</tr>
<tr>
<td align="center"><code>[^aeiou]</code></td>
<td align="center">匹配除了aeiou这几个字母以外的任意字符</td>
</tr>
</tbody></table>
<p>例子：<code>\S+</code>匹配不包含空白符的字符串。</p>
<p><code><a[^>]+></code>匹配用尖括号括起来的以a开头的字符串。</p>
<p>怎么查找<strong>不是某个字符或不在某个字符类里</strong>的字符的方法（反义）我们之前已经提过了。但是如果我们的目的不是去匹配某个字符，而是只想要该字符是否出现过，怎么办？例如，如果我们想要查找的单词中出现了字母q，但是字母q的后面跟着的不是字母u的话，我们可以尝试：</p>
<p><code>\b\w*q[^u]\w*\b</code>匹配包含<strong>后面不是字母u的字母q</strong>的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像<strong>Iraq,Benq</strong>，这个表达式就会出错。这是因为<code>[^u]</code>总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的<code>[^u]</code>将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的<code>\w*\b</code>将会匹配下一个单词，于是<code>\b\w*q[^u]\w*\b</code>就能匹配整个<code>Iraq fighting</code>。<strong>负向零宽断言</strong>能解决这样的问题，因为它只匹配一个位置，并不<strong>消费</strong>任何字符。现在，我们可以这样来解决这个题：<code>\b\w*q(?!u)\w*\b</code>。</p>
<p>零宽度负预测先行断言<code>(?!exp)</code>，断言此位置的后面不能匹配表达式exp。例如：<code>\d&#123;3&#125;(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；<code>\b((?!abc)\w)+\b</code>匹配不包含连续字符串abc的单词。</p>
<p>同理，我们可以用<code>(?&lt;!exp)</code>，零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：<code>(?&lt;![a-z])\d&#123;7&#125;</code>匹配前面不是小写字母的七位数字。</p>
<p>一个更复杂的例子：<code>(?<=<(\w+)>).*(?=</\1>)</code>匹配不包含属性的简单HTML标签内里的内容。<code>(?<=<(\w+)>)</code>指定了这样的<strong>前缀</strong>：被尖括号括起来的单词(比如可能是<code>)</code>，然后是<code>.*</code>(任意的字符串)，最后是一个<strong>后缀</strong><code>(?=</\1>)</code>。注意后缀里的<code>/</code>，它用到了前面提过的字符转义；<code>\1</code>则是一个反向引用，引用的正是捕获的第一组，前面的<code>(\w+)</code>匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</p>
<p><strong>注解：</strong></p>
<ul>
<li>请详细分析表达式<code>(?<=<(\w+)>).*(?=</\1>)</code>，这个表达式最能表现零宽断言的真正用途。</li>
</ul>
<h1 id="正则表达式之注释"><a href="#正则表达式之注释" class="headerlink" title="正则表达式之注释"></a>正则表达式之注释</h1><p>小括号还有另一种用途，就是通过语法<code>(?#comment)</code>来包含注释。例如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code>。</p>
<p>如果要包含注释，最好是启用“忽略模式里的空白符”选项，因为这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p>
<p>例如，我们可以前面的一个表达式写成这样：</p>
<p><code>(?<= # 断言要匹配的文本的前缀</code></p>
<p><code><(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)</code></p>
<p><code>) # 前缀结束</code></p>
<p><code>.* # 匹配任意文本</code></p>
<p><code>(?= # 断言要匹配的文本的后缀</code></p>
<p><code></\1> # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签</code></p>
<p><code>) # 后缀结束</code></p>
<h1 id="正则表达式之贪婪与懒惰"><a href="#正则表达式之贪婪与懒惰" class="headerlink" title="正则表达式之贪婪与懒惰"></a>正则表达式之贪婪与懒惰</h1><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配<strong>尽可能多</strong>的字符。以这个表达式为例：<code>a.*b</code>，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串<em>aabab</em>。这被称为<strong>贪婪</strong>匹配。</p>
<p>有时，我们更需要<strong>懒惰</strong>匹配，也就是匹配<strong>尽可能少</strong>的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>。这样<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：</p>
<p><code>a.*?b</code>匹配最短的，以a开始，以b结束的字符串。如果把它应用于<em>aabab</em>的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p>
<table>
<thead>
<tr>
<th align="center">代码/语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>*?</code></td>
<td align="center">重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>+?</code></td>
<td align="center">重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>??</code></td>
<td align="center">重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>&#123;n,m&#125;?</code></td>
<td align="center">重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td align="center"><code>&#123;n,&#125;?</code></td>
<td align="center">重复n次以上，但尽可能少重复</td>
</tr>
</tbody></table>
<p><strong>注解：</strong></p>
<ul>
<li>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。</li>
</ul>
<h1 id="正则表达式之处理选项"><a href="#正则表达式之处理选项" class="headerlink" title="正则表达式之处理选项"></a>正则表达式之处理选项</h1><p>以前介绍的忽略大小写、处理多行等选项可以用来改变处理正则表达式的方式，接下来要来介绍下载.Net中常用到的正则表达式的选项：</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IgnoreCase(忽略大小写)</td>
<td align="center">匹配时不区分大小写。</td>
</tr>
<tr>
<td align="center">Multiline(多行模式)</td>
<td align="center">更改<code>^</code>和<code>$</code>的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,<code>$</code>的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td>
</tr>
<tr>
<td align="center">Singleline(单行模式)</td>
<td align="center">更改<code>.</code>的含义，使它与每一个字符匹配（包括换行符\n）。</td>
</tr>
<tr>
<td align="center">IgnorePatternWhitespace(忽略空白)</td>
<td align="center">忽略表达式中的非转义空白并启用由<code>#</code>标记的注释。</td>
</tr>
<tr>
<td align="center">ExplicitCapture(显式捕获)</td>
<td align="center">仅捕获已被显式命名的组。</td>
</tr>
</tbody></table>
<p>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。</p>
<p><strong>注解：</strong></p>
<ul>
<li>在C#中，你可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。如：Regex regex = new Regex(@”\ba\w{6}\b”, RegexOptions.IgnoreCase);</li>
</ul>
<h1 id="正则表达式补充"><a href="#正则表达式补充" class="headerlink" title="正则表达式补充"></a>正则表达式补充</h1><p>到此为止，我们已经介绍了有关于正则表达式的大量元素，但是那么复杂的正则表达式，肯定还有一些元素还未提到，作者把那些未被提到的元素整合成如下的列表，其中还包含了语法和简单的说明。如果你觉得列表中的介绍不够详细的话，你也可以根据自己的需要利用更多的资源去学习它们。如果你的电脑中装了MSDN Library，你也能够在里面查到.net下正则表达式的详细文档，如果你没有安装MSDN Library,可以查看<a href="http://msdn.microsoft.com/zh-cn/library/az24scfc.aspx">关于正则表达式语言元素的MSDN在线文档</a>。</p>
<table>
<thead>
<tr>
<th align="center">代码/语法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\a</code></td>
<td align="center">报警字符(打印它的效果是电脑嘀一声)</td>
</tr>
<tr>
<td align="center"><code>\b</code></td>
<td align="center">通常是单词分界位置，但如果在字符类里使用代表退格</td>
</tr>
<tr>
<td align="center"><code>\t</code></td>
<td align="center">制表符，Tab</td>
</tr>
<tr>
<td align="center"><code>\r</code></td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center"><code>\v</code></td>
<td align="center">竖向制表符</td>
</tr>
<tr>
<td align="center"><code>\f</code></td>
<td align="center">换页符</td>
</tr>
<tr>
<td align="center"><code>\n</code></td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center"><code>\e</code></td>
<td align="center">Escape</td>
</tr>
<tr>
<td align="center"><code>\0nn</code></td>
<td align="center">ASCII代码中八进制代码为nn的字符</td>
</tr>
<tr>
<td align="center"><code>\xnn</code></td>
<td align="center">ASCII代码中十六进制代码为nn的字符</td>
</tr>
<tr>
<td align="center"><code>\unnnn</code></td>
<td align="center">Unicode代码中十六进制代码为nnnn的字符</td>
</tr>
<tr>
<td align="center"><code>\cN</code></td>
<td align="center">ASCII控制字符。比如\cC代表Ctrl+C</td>
</tr>
<tr>
<td align="center"><code>\A</code></td>
<td align="center">字符串开头(类似^，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td align="center"><code>\Z</code></td>
<td align="center">字符串结尾或行尾(不受处理多行选项的影响)</td>
</tr>
<tr>
<td align="center"><code>\z</code></td>
<td align="center">字符串结尾(类似$，但不受处理多行选项的影响)</td>
</tr>
<tr>
<td align="center"><code>\G</code></td>
<td align="center">当前搜索的开头</td>
</tr>
<tr>
<td align="center"><code>\p&#123;name&#125;</code></td>
<td align="center">Unicode中命名为name的字符类，例如\p{IsGreek}</td>
</tr>
<tr>
<td align="center"><code>(?>exp)</code></td>
<td align="center">贪婪子表达式</td>
</tr>
<tr>
<td align="center"><code>(?<x>-<y>exp)</code></td>
<td align="center">平衡组</td>
</tr>
<tr>
<td align="center"><code>(?im-nsx:exp)</code></td>
<td align="center">在子表达式exp中改变处理选项</td>
</tr>
<tr>
<td align="center"><code>(?im-nsx)</code></td>
<td align="center">为表达式后面的部分改变处理选项</td>
</tr>
<tr>
<td align="center"><code>(?(exp)yes|no)</code></td>
<td align="center">把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td>
</tr>
<tr>
<td align="center"><code>(?(exp)yes)</code></td>
<td align="center">同上，只是使用空表达式作为no</td>
</tr>
<tr>
<td align="center"><code>(?(name)yes|no)</code></td>
<td align="center">如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td>
</tr>
<tr>
<td align="center"><code>(?(name)yes)</code></td>
<td align="center">同上，只是使用空表达式作为no</td>
</tr>
</tbody></table>
<h1 id="常用正则表达式示例"><a href="#常用正则表达式示例" class="headerlink" title="常用正则表达式示例"></a>常用正则表达式示例</h1><h2 id="使用正则表达式匹配数值范围"><a href="#使用正则表达式匹配数值范围" class="headerlink" title="使用正则表达式匹配数值范围"></a>使用正则表达式匹配数值范围</h2><p>由于正则表达式处理文本而不是数字，因此匹配给定范围内的数字需要格外小心。你不能只写<code>[ 0-2 55 ]</code>来匹配 0 到 255 之间的数字。虽然是有效的正则表达式，但它匹配完全不同的东西。<code>[ 0-2 55 ]</code>是具有三个元素的字符类：字符范围 0-2、字符 5 和字符 5（再次）。该字符类匹配单个数字 0、1、2 或 5，就像<code>[ 0125 ]</code>一样。</p>
<p>由于正则表达式适用于文本，因此正则表达式引擎将<code>0</code>视为单个字符，将<code>255</code>视为三个字符。要匹配从 0 到 255 的所有字符，我们需要一个匹配 1 到 3 个字符的正则表达式。</p>
<p>正则表达式<code>[ 0-9 ]</code>匹配 0 到 9 的一位数。<code>[ 1-9 ] [ 0-9 ]</code>匹配 10 到 99 的两位数。这很容易。</p>
<p>匹配三位数字有点复杂，因为我们需要排除数字 256 到 999。1 <code>[ 0-9 ] [ 0-9 ]处理</code>100 到 199。<code>2 [ 0-4 ] [ 0-9 ]</code>匹配 200 到 249。最后，<code>25 [ 0-5 ]</code>添加 250 到 255。</p>
<p>如您所见，您需要将数字范围拆分为具有相同位数的范围，并且每个范围都允许每个数字具有相同的变化。在我们示例中的 3 位范围内，以 1 开头的数字允许后面的两位数字使用所有 10 位数字，而以 2 开头的数字则限制后面允许的数字。</p>
<p>使用交替将所有这些放在一起，我们得到：<code>[ 0-9 ] | [ 1-9 ] [ 0-9 ] | 1 [ 0-9 ] [ 0-9 ] | 2 [ 0-4 ] [ 0-9 ] | 25 [ 0-5 ]</code>。这匹配了我们想要的数字，但有一点需要注意：正则表达式搜索通常允许部分匹配，因此我们的正则表达式将匹配<code>123</code>中的<code>12345</code>。有两种解决方案。</p>
<h2 id="搜索数值范围"><a href="#搜索数值范围" class="headerlink" title="搜索数值范围"></a>搜索数值范围</h2><p>如果您在较大的文档或输入字符串中搜索这些数字，请使用<a href="https://www.regular-expressions.info/wordboundaries.html">单词边界</a>来要求在任何有效匹配之前和之后都需要一个非单词字符（或根本没有字符）。然后正则表达式变为<code>\b ( [ 0-9 ] | [ 1-9 ] [ 0-9 ] | 1 [ 0-9 ] [ 0-9 ] | 2 [ 0-4 ] [ 0-9 ] | 25 [ 0-5 ] ) \b</code>。由于交替运算符的优先级最低，因此<a href="https://www.regular-expressions.info/brackets.html">需要括号</a>将备选方案组合在一起。这样，正则表达式引擎将尝试匹配第一个单词边界，然后尝试所有备选方案，然后尝试匹配它匹配的数字之后的第二个单词边界。正则表达式引擎将所有字母数字字符以及下划线视为单词字符。</p>
<h2 id="验证数值范围"><a href="#验证数值范围" class="headerlink" title="验证数值范围"></a>验证数值范围</h2><p>如果您使用正则表达式验证输入，您可能需要检查整个输入是否包含有效数字。为此，请将单词边界替换为<a href="https://www.regular-expressions.info/anchors.html">锚点</a>以匹配字符串的开头和结尾：<code>^ ( [ 0-9 ] | [ 1-9 ] [ 0-9 ] | 1 [ 0-9 ] [ 0-9 ] | 2 [ 0-4 ] [ 0-9 ] | 25 [ 0-5 ] )美元</code>。</p>
<p>以下是您可能想要匹配的一些更常见的范围：</p>
<ul>
<li>000..255：<code>^ （[ 01 ] [ 0-9 ] [ 0-9 ] | 2 [ 0-4 ] [ 0-9 ] | 25 [ 0-5 ] ）$</code></li>
<li>0 或 000..255: <code>^ ( [ 01 ] ? [ 0-9 ] ? [ 0-9 ] | 2 [ 0-4 ] [ 0-9 ] | 25 [ 0-5 ] ) $</code></li>
<li>0 或 000..127: <code>^ ( 0 ? [ 0-9 ] ? [ 0-9 ] | 1 [ 01 ] [ 0-9 ] | 12 [ 0-7 ] ) $</code></li>
<li>0..999：<code>^ （[ 0-9 ] | [ 1-9 ] [ 0-9 ] | [ 1-9 ] [ 0-9 ] [ 0-9 ] ）$</code></li>
<li>000..999: <code>^ [ 0-9 ] &#123;3&#125; $</code></li>
<li>0 或 000..999: <code>^ [ 0-9 ] &#123;1,3&#125; $</code></li>
<li>1..999：<code>^ （[ 1-9 ] | [ 1-9 ] [ 0-9 ] | [ 1-9 ] [ 0-9 ] [ 0-9 ] ）$</code></li>
<li>001..999: <code>^ ( 00 [ 1-9 ] | 0 [ 1-9 ] [ 0-9 ] | [ 1-9 ] [ 0-9 ] [ 0-9 ] ) $</code></li>
<li>1 或 001..999: <code>^ ( 0 &#123;0,2&#125; [ 1-9 ] | 0 ? [ 1-9 ] [ 0-9 ] | [ 1-9 ] [ 0-9 ] [ 0-9 ] ) $</code></li>
<li>0 或 00..59: <code>^ [ 0-5 ] ? [ 0-9 ] $</code></li>
<li>0 或 000..366: <code>^ ( [ 012 ] ? [ 0-9 ] ? [ 0-9 ] | 3 [ 0-5 ] [ 0-9 ] | 36 [ 0-6 ] ) $</code></li>
</ul>
<h2 id="用正则表达式匹配浮点数"><a href="#用正则表达式匹配浮点数" class="headerlink" title="用正则表达式匹配浮点数"></a>用正则表达式匹配浮点数</h2><p>此示例说明如何避免不熟悉<a href="https://www.regular-expressions.info/index.html">正则表达式</a>的人经常犯的常见错误。例如，我们将尝试构建一个可以匹配任何浮点数的正则表达式。我们的正则表达式还应该匹配未给出整数部分的整数和浮点数。我们不会尝试将数字与指数相匹配，例如 1.5e8（科学计数法中的 1.5 亿）。</p>
<p>乍一看，以下正则表达式似乎可以解决问题：<code>[ -+ ] ？[ 0-9 ] * \。? [ 0-9 ] *</code>。这将浮点数定义为<a href="https://www.regular-expressions.info/optional.html">可选</a>符号，后跟可选的<a href="https://www.regular-expressions.info/charclass.html">数字</a><a href="https://www.regular-expressions.info/repeat.html">系列</a>（整数部分），后跟可选的点，然后是另一个可选的数字系列（小数部分）。</p>
<p>用单词拼写正则表达式很明显：这个正则表达式中的所有内容都是可选的。此正则表达式将单独的符号或单独的点视为有效的浮点数。事实上，它甚至将空字符串视为有效的浮点数。如果您尝试使用此正则表达式在文件中查找浮点数，您将在字符串中没有出现浮点数的每个位置获得<a href="https://www.regular-expressions.info/zerolength.html">零长度匹配。</a></p>
<p>不转义<a href="https://www.regular-expressions.info/dot.html">点</a>也是一个常见的错误。未转义的点匹配任何字符，包括点。如果我们没有转义点，那么<code>4.4</code>和<code>4X4</code>都将被视为浮点数。</p>
<p>在创建正则表达式时，考虑它不应该匹配的内容比它应该匹配的内容更<em>重要</em>。上面的正则表达式确实匹配正确的浮点数，因为正则表达式引擎是<a href="https://www.regular-expressions.info/optional.html#greedy">greedy</a>。但它也匹配了许多我们不想要的东西，我们必须排除这些东西。</p>
<p>这是一个更好的尝试：<code>[ -+ ] ? ( [ 0-9 ] * \。[ 0-9 ] + | [ 0-9 ] + )</code>。此正则表达式匹配一个可选符号，该符号后跟零个<a href="https://www.regular-expressions.info/alternation.html">或</a>多个数字，后跟一个点和一个或多个数字（带有可选整数部分的浮点数），或者后跟一个或多个数字（整数） .</p>
<p>这是一个更好的定义。任何匹配项都必须包含至少一位数字。没有办法绕过<code>[ 0 - 9 ] +</code>部分。我们已经成功排除了我们不想要的匹配项：那些没有数字的匹配项。</p>
<p>我们可以将这个正则表达式优化为：<code>[ -+ ] ? [ 0-9 ] * \。? [ 0-9 ] +</code>。</p>
<p>如果您还想将数字与指数匹配，您可以使用：<code>[ -+ ] ? [ 0-9 ] * \。? [ 0-9 ] + （[ eE ] [ -+ ] ？[ 0-9 ] + ）？</code>. <a href="https://www.regular-expressions.info/brackets.html">请注意我是如何通过将整个指数部分组合</a>在一起来使整个指数部分成为可选的，而不是使指数中的每个元素都是可选的。</p>
<p>最后，如果要验证特定字符串是否包含浮点数，而不是在较长的文本中查找浮点数，则必须<a href="https://www.regular-expressions.info/anchors.html">锚定</a>正则表达式：<code>^ [ -+ ] ? [ 0-9 ] * \。? [ 0-9 ] + $</code>或<code>^ [ -+ ] ？[ 0-9 ] * \。? [ 0-9 ] + ( [ eE ] [ -+ ] ? [ 0-9 ] +) ? $</code> . 您可以在<a href="https://www.regexbuddy.com/library.html">RegexBuddy 的库</a>中找到这些正则表达式的其他变体。</p>
<h2 id="如何查找或验证电子邮件地址"><a href="#如何查找或验证电子邮件地址" class="headerlink" title="如何查找或验证电子邮件地址"></a>如何查找或验证电子邮件地址</h2><p>我收到最多反馈的正则表达式，更不用说“bug”报告了，就是你可以在这个网站的<a href="https://www.regular-expressions.info/index.html">主页上</a>找到的那个：<code>\b [ AZ 0-9 ._%+ - ] + @ [ AZ 0 -9 。- ] + \。[ AZ ] &#123;2,&#125; \b</code>。我声称，这个正则表达式匹配任何电子邮件地址。我收到的大多数反馈都通过显示一个与此正则表达式不匹配的电子邮件地址来驳斥这种说法。通常，“错误”报告还包括使正则表达式“完美”的建议。</p>
<p>正如我在下面解释的那样，只有当人们接受我对有效电子邮件地址到底是什么以及不是什么的定义时，我的主张才成立。如果您想使用不同的定义，则必须调整正则表达式。匹配一个有效的电子邮件地址是一个完美的例子，它表明（1）在编写正则表达式之前，您必须确切地知道您要匹配的内容，以及不匹配的内容；(2) 在准确和实用之间经常需要权衡取舍。</p>
<p>我上面的正则表达式的优点是它匹配了当今使用的 99% 的电子邮件地址。它匹配的所有电子邮件地址都可以被 99% 的所有电子邮件软件处理。如果您正在寻找快速解决方案，您只需阅读下一段。如果您想了解所有权衡并获得大量可供选择的替代方案，请继续阅读。</p>
<p>如果要使用上面的正则表达式，有两点需要了解。首先，长正则表达式很难很好地格式化段落。所以我没有将<code>az</code>包含在三个字符类中的任何一个中。此正则表达式旨在与您的正则表达式引擎的“不区分大小写”选项打开时使用。（你会惊讶于我收到了多少“错误”报告。）其次，上面的正则表达式是用<a href="https://www.regular-expressions.info/wordboundaries.html">单词边界</a>分隔的，这使它适合从文件或更大的文本块中提取电子邮件地址。如果要检查用户是否输入了有效的电子邮件地址，请将单词边界替换为<a href="https://www.regular-expressions.info/anchors.html">字符串开头和字符串结尾的锚点</a>，如下所示：<code>^ [ AZ 0-9 ._%+- ] + @ [ AZ 0-9 。- ] + \。[ AZ ] &#123;2,&#125; $</code>。</p>
<p>上一段也适用于以下所有示例。您可能需要将单词边界更改为字符串开始/结束锚点，反之亦然。而且您必须打开不区分大小写的匹配选项。</p>
<h2 id="如何查找或验证-IP-地址"><a href="#如何查找或验证-IP-地址" class="headerlink" title="如何查找或验证 IP 地址"></a>如何查找或验证 IP 地址</h2><p>匹配 IP 地址是在正则表达式复杂性和准确性之间进行权衡的另一个很好的例子。<code>\b \d &#123;1,3&#125; \. \d &#123;1,3&#125; \. \d &#123;1,3&#125; \. \d &#123;1,3&#125; \b</code>将匹配任何 IP 地址就好了。但也会匹配<code>999.999.999.999</code>，就好像它是一个有效的 IP 地址一样。如果您的正则表达式支持 Unicode，它甚至可以匹配<code>١٢٣.१२३.೧೨೩.๑๒๓</code>。这是否是一个问题取决于您打算应用正则表达式的文件或数据。</p>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2023/12/21/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>观察者模式，也称为监听者、发布-订阅。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/observer-2x.png" style="zoom: 50%;" />

<h4 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h4><p>定义对象之间的一对多依赖关系，以便当一个对象更改状态时，其所有依赖对象都会收到通知并自动更新。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>假如你有两种类型的对象：  <code>顾客</code>和 <code>商店</code> 。 顾客对某个特定品牌的产品非常感兴趣 （例如最新型号的 iPhone 手机）， 而该产品很快将会在商店里出售。</p>
<p>顾客可以每天来商店看看产品是否到货。 但如果商品尚未到货时， 绝大多数来到商店的顾客都会空手而归。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/observer-comic-1-zh-2x.png" style="zoom:50%;" />

<p>另一方面， 每次新产品到货时， 商店可以向所有顾客发送邮件 （可能会被视为垃圾邮件）。 这样， 部分顾客就无需反复前往商店了， 但也可能会惹恼对新产品没有兴趣的其他顾客。</p>
<p>我们似乎遇到了一个矛盾： 要么让顾客浪费时间检查产品是否到货， 要么让商店浪费资源去通知没有需求的顾客。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>拥有一些值得关注的状态的对象通常被称为<em>目标</em>， 由于它要将自身的状态改变通知给其他对象， 我们也将其称为<code>发布者</code>（publisher）。 所有希望关注发布者状态变化的其他对象被称为<code>订阅者</code> （subscribers）。</p>
<p>观察者模式建议你为发布者类添加订阅机制， 让每个对象都能订阅或取消订阅发布者事件流。 不要害怕！ 这并不像听上去那么复杂。 实际上， 该机制包括 1） 一个用于存储订阅者对象引用的列表成员变量； 2） 几个用于添加或删除该列表中订阅者的公有方法。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/subscriber20231222.png" style="zoom:67%;" />

<p>现在， 无论何时发生了重要的发布者事件， 它都要遍历订阅者并调用其对象的特定通知方法。</p>
<p>实际应用中可能会有十几个不同的订阅者类跟踪着同一个发布者类的事件， 你不会希望发布者与所有这些类相耦合的。 此外如果他人会使用发布者类， 那么你甚至可能会对其中的一些类一无所知。</p>
<p>因此， 所有订阅者都必须实现同样的接口， 发布者仅通过该接口与订阅者交互。 接口中必须声明通知方法及其参数， 这样发布者在发出通知时还能传递一些上下文数据。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/solution2-zh20231222-2x.png" style="zoom:50%;" />

<p>如果你的应用中有多个不同类型的发布者， 且希望订阅者可兼容所有发布者， 那么你甚至可以进一步让所有发布者遵循同样的接口。 该接口仅需描述几个订阅方法即可。 这样订阅者就能在不与具体发布者类耦合的情况下通过接口观察发布者的状态。</p>
<h4 id="观察者模式结构"><a href="#观察者模式结构" class="headerlink" title="观察者模式结构"></a>观察者模式结构</h4><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/structure-2x-20231222.png" style="zoom:67%;" />

<h4 id="现实世界的例子"><a href="#现实世界的例子" class="headerlink" title="现实世界的例子"></a>现实世界的例子</h4><div class="note info no-icon"><p>在遥远的土地上居住着农夫们和动物们。他们大部分时间都在户外，所以他们密切关注天气变化。当天气晴朗时，农夫们会出去干活，动物们会出去觅食；当天空开始下雨时，农夫们会回家收衣服，动物们会找地方避雨；当天气开始起风了，农夫们会在家打麻将，动物们会睡大觉；当天气变冷时，农夫们都在家烤火，动物们会抱团取暖。可以说，他们一直在观察天气。</p>
</div>

<h4 id="程序化示例"><a href="#程序化示例" class="headerlink" title="程序化示例"></a>程序化示例</h4><p>我们首先介绍一下<code>WeatherObserver</code>接口和我们具体的观察者，<code>Farmer</code>以及<code>Animal</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType weatherType)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Farmer</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType weatherType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (weatherType) &#123;</span><br><span class="line">            <span class="keyword">case</span> SUNNY:</span><br><span class="line">                System.out.println(<span class="string">&quot;天气晴朗，农夫们出门干活了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RAINY:</span><br><span class="line">                System.out.println(<span class="string">&quot;下雨了，农夫们回家收衣服了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WINDY:</span><br><span class="line">                System.out.println(<span class="string">&quot;起风了，农夫们在家打麻将！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COLD:</span><br><span class="line">                System.out.println(<span class="string">&quot;天冷了，农夫们在家烤火！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">WeatherObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(WeatherType weatherType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (weatherType) &#123;</span><br><span class="line">            <span class="keyword">case</span> SUNNY:</span><br><span class="line">                System.out.println(<span class="string">&quot;天气晴朗，动物们出去觅食了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RAINY:</span><br><span class="line">                System.out.println(<span class="string">&quot;下雨了，动物们找地方避雨了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WINDY:</span><br><span class="line">                System.out.println(<span class="string">&quot;起风了，动物们在睡大觉！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> COLD:</span><br><span class="line">                System.out.println(<span class="string">&quot;天冷了，动物们抱团取暖！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是我们被观察的主体天气<code>Weather</code>类，并且提供了不断变化的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeatherType currentWeather;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;WeatherObserver&gt; observers;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(WeatherObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(WeatherObserver observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.currentWeather = WeatherType.COLD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WeatherObserver observer : observers) &#123;</span><br><span class="line">            observer.update(currentWeather);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WeatherType <span class="title">getCurrentWeather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentWeather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentWeather</span><span class="params">(WeatherType currentWeather)</span> </span>&#123;</span><br><span class="line">        WeatherType preWeather = <span class="keyword">this</span>.currentWeather;</span><br><span class="line">        <span class="keyword">this</span>.currentWeather = currentWeather;</span><br><span class="line">        <span class="keyword">if</span> (preWeather != currentWeather) &#123;</span><br><span class="line">            notifyObservers();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WeatherType[] weatherEnums = WeatherType.values();</span><br><span class="line">        WeatherType nextWeather = weatherEnums[(currentWeather.ordinal() + <span class="number">1</span>) % weatherEnums.length];</span><br><span class="line">        System.out.println(<span class="string">&quot;CurrentWeather：&quot;</span> + nextWeather);</span><br><span class="line">        <span class="keyword">this</span>.setCurrentWeather(nextWeather);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义了天气的枚举类，其中定了4种天气。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WeatherType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SUNNY(<span class="string">&quot;Sunny&quot;</span>),</span><br><span class="line">    RAINY(<span class="string">&quot;Rainy&quot;</span>),</span><br><span class="line">    WINDY(<span class="string">&quot;Windy&quot;</span>),</span><br><span class="line">    COLD(<span class="string">&quot;Cold&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WeatherType(String description) &#123;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name().toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是完整的实际示例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Weather weather = <span class="keyword">new</span> Weather();</span><br><span class="line">        Farmer farmer = <span class="keyword">new</span> Farmer();</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        weather.addObserver(farmer);</span><br><span class="line">        weather.addObserver(animal);</span><br><span class="line"></span><br><span class="line">        weather.timePasses();</span><br><span class="line">        weather.timePasses();</span><br><span class="line">        weather.timePasses();</span><br><span class="line">        weather.timePasses();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CurrentWeather：sunny</span><br><span class="line">天气晴朗，农夫们出门干活了！</span><br><span class="line">天气晴朗，动物们出去觅食了！</span><br><span class="line">CurrentWeather：rainy</span><br><span class="line">下雨了，农夫们回家收衣服了！</span><br><span class="line">下雨了，动物们找地方避雨了！</span><br><span class="line">CurrentWeather：windy</span><br><span class="line">起风了，农夫们在家打麻将！</span><br><span class="line">起风了，动物们在睡大觉！</span><br><span class="line">CurrentWeather：cold</span><br><span class="line">天冷了，农夫们在家烤火！</span><br><span class="line">天冷了，动物们抱团取暖！</span><br></pre></td></tr></table></figure>

<h4 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h4><p>在以下任一情况下使用观察者模式：</p>
<ul>
<li>当对一个对象的更改需要更改其他对象时，您不知道需要更改多少个对象。</li>
<li>当一个对象应该能够通知其他对象而无需知道这些对象是谁时。换句话说，您不希望这些对象紧密耦合。</li>
</ul>
<p>已知使用：</p>
<ul>
<li><code>java.util.Observeropen in new window</code></li>
<li><code>java.util.EventListeneropen in new window</code></li>
<li><code>javax.servlet.http.HttpSessionBindingListeneropen in new window</code></li>
<li><code>RxJavaopen in new window</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>观察者模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解决git连接超时问题</title>
    <url>/2021/08/18/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p> 最近使用git连接github时一直报下面这个错：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/gitpushproblem.png"></p>
<p>git 连接远程仓库有两种协议：<strong>ssh协议</strong>和<strong>https协议</strong>。</p>
<p>根据英文可以看出，<strong>ssh协议</strong>连接超时，我们切换成 https协议连接github。</p>
<p>移除掉远程仓库的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>

<p>重新添加新的远程仓库，以https的形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;wotzc&#x2F;wotzc.github.io.git</span><br></pre></td></tr></table></figure>

<p>https的地址其实就是github上项目对应的地址，如下图：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/githubaddress.png"></p>
<p>再次尝试push代码，可以看到已经成功。</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/gitpushsuccess.png"></p>
<p>但是我们在部署<code>hexo d</code>的时候输入账号密码后还是会报错，错误如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead [duplicate]</span><br></pre></td></tr></table></figure>

<p>因为<strong>2021年8月13日之后密码身份验证由 GitHub 禁用，不再支持。创建并使用个人访问令牌PAT而不是密码。</strong></p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/gitauthentication.png"></p>
<p>此消息意味着您使用密码而不是个人访问令牌通过 HTTPS 访问 GitHub，这已不再允许。GitHub 禁用了密码身份验证，因为人们经常会意外泄露密码，虽然个人访问令牌可以限制损坏，但密码不能。</p>
<p>如果您没有在提示时明确输入密码，那么您很可能有一个凭据管理器来保存您的密码，并在不提示您的情况下发送密码。</p>
<p>所以我们需要使用个人访问令牌进行身份验证，步骤如下：</p>
<ol>
<li><p>在 Github 上创建个人访问令牌</p>
<p>From your Github account, go to <strong>Settings</strong> =&gt; <strong>Developer Settings</strong> =&gt; <strong>Personal Access Token</strong> =&gt; <strong>Generate New Token</strong>  (Give your password) =&gt; <strong>Fillup the form</strong> =&gt; click <strong>Generate token</strong> =&gt; <strong>Copy the generated Token</strong>, it will be something like <code>ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta</code></p>
</li>
<li><p>对于Windows操作系统</p>
<p>从<strong>控制面板</strong>中访问<strong>凭证管理器</strong>，选择<strong>Windows凭据</strong>，找到<strong>git:<a href="https://github.com/">https://github.com</a></strong>，点击<strong>编辑</strong>，把上一步复制的密码粘贴到密码处。</p>
</li>
<li><p>对于Mac操作系统</p>
</li>
</ol>
<p>Click on the Spotlight icon (magnifying glass) on the right side of the menu bar. Type <strong>Keychain access</strong> then press the Enter key to launch the app =&gt; In Keychain Access, search for =&gt; Find the <strong>internet password</strong> entry for =&gt; Edit or delete the entry accordingly =&gt; You are done<code>github.com</code></p>
<p>现在将给定记录存入计算机以记住令牌：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper cache</span><br></pre></td></tr></table></figure>

<p>如果在进行<code>hexo d</code>操作时，还是提示下面这种错误：</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/hexoderror.png"></p>
<p>我们就修改根目录的_config.yml文件，把repo修改为https连接的地址</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3git%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/configyml.png"></p>
<p>再次hexo d成功！</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Mysql5.7一直重启Restarting(1)</title>
    <url>/2021/09/22/%E8%A7%A3%E5%86%B3Mysql5-7%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AFRestarting-1/</url>
    <content><![CDATA[<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>优于长时间没进Linux连接mysql，今天进入Linux连接mysql，使用<code>docker ps</code>，mysql的状态一直是Restarting (1) x seconds ago，mysql一直在重启无法连接</p>
<p>查看日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs mysql</span><br></pre></td></tr></table></figure>

<p>发现是内存不足</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">2021-06-14T11:41:26.576589Z 0 [ERROR] InnoDB: Error number 28 means &#39;No space left on device&#39;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>使用 df -h 查看 发现是 /var/docker/overlay2里面的东西占了很大的空间</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3mysql%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AF/linuxdfh.png"></p>
<p>检查内存占用情况，发现vagrant占用36G，一路找下去，发现到application data目录无线循环，上网搜索发现了问题所在。</p>
<p><strong>ls查看发现里的东西很多和我本机C盘里的文件一模一样 AppData之类的 为什么这些东西会在虚拟机里 虚拟机同步了C盘里的内容 百度发现 vagrant提供了将本机</strong></p>
<p><strong>目录挂载到虚拟机目录下的功能，默认是将vagrant配置文件所在目录挂载到虚拟机/vagrant目录下。</strong></p>
<p><strong>也就是说 我的VagrantFile 是 C/user/username/VagrantFile 那么所有和VagrantFile同级的 C/user/username/里面的内容会全部同步到vagrant中 导致虚拟机内存爆满</strong></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol>
<li><p>在和Vagrantfile同级目录（C:\Users\Administrator\）创建一个自己的文件夹,我的叫VagrantSyncFolder</p>
</li>
<li><p>然后打开目录到C:\Users\Administrator.vagrant.d\boxes\centos-VAGRANTSLASH-7\2004.01\virtualbox</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3mysql%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AF/vagrantfile.png"></p>
</li>
<li><p>打开Vagrantfile，</p>
<p>config.vm.synced_folder “.”, “/vagrant”, type: “rsync”</p>
<p>修改为</p>
<p>config.vm.synced_folder “./vagrantCache”, “/vagrant”, type: “rsync”</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3mysql%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AF/changevagrantfile.png"></p>
</li>
<li><p>修改完这个之后,vagrant reload发现还是不行,猜测可能只有vagrant成功重启之后修改的这个映射才能生效,但是已经占用100%不能成功重启,没办法,只能删东</p>
<p>西了</p>
<p>查看了一下vagrant目录里文件的大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>

<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3mysql%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AF/cdvagrant.png"></p>
<p>其中AppData很大</p>
<p>试着删了一下3D Objects文件里的一些东西,发现文件里的文件并没有影响,ok,直接将AppData删了,释放了很大的空间，然后exit退出</p>
<p>vagrant reload重启，大功告成！</p>
<p><img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/%E8%A7%A3%E5%86%B3mysql%E4%B8%80%E7%9B%B4%E9%87%8D%E5%90%AF/vagrantreload.png"></p>
</li>
</ol>
<p>其实这种情况，可能在使用vagrant  up命令的时候就会报Rsync 错误，可以参考这篇文章，其问题和上方的一样</p>
<p><a href="https://www.dissmeyer.com/2020/02/11/issue-with-centos-7-vagrant-boxes-on-windows-10/">Windows 10 上的 CentOS 7 Vagrant 框出现 Rsync 错误</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>vagrant</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2023/12/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div class="note info no-icon"><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>
</div>

<p>共有 23 种设计模式。这些模式可以分为三大类：</p>
<ul>
<li><p><strong>创建型模式（Creational Patterns）- 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</strong></p>
<ul>
<li>工厂模式（Factory Pattern）</li>
<li>抽象工厂模式（Abstract Factory Pattern）</li>
<li>单例模式（Singleton Pattern）</li>
<li>建造者模式（Builder Pattern）</li>
<li>原型模式（Prototype Pattern）</li>
</ul>
</li>
<li><p><strong>结构型模式（Structural Patterns）- 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</strong>    </p>
<ul>
<li>适配器模式（Adapter Pattern）</li>
<li>桥接模式（Bridge Pattern）</li>
<li>组合模式（Composite Pattern）</li>
<li>装饰器模式（Decorator Pattern）</li>
<li>外观模式（Facade Pattern）</li>
<li>享元模式（Flyweight Pattern）</li>
<li>代理模式（Proxy Pattern）</li>
</ul>
</li>
<li><p><strong>行为型模式（Behavioral Patterns）- 这些设计模式特别关注对象之间的通信。</strong></p>
<ul>
<li>责任链模式（Chain of Responsibility Pattern）</li>
<li>命令模式（Command Pattern）</li>
<li>迭代器模式（Iterator Pattern）</li>
<li>中介者模式（Mediator Pattern）</li>
<li>备忘录模式（Memento Pattern）</li>
<li>观察者模式（Observer Pattern）</li>
<li>状态模式（State Pattern）</li>
<li>策略模式（Strategy Pattern）</li>
<li>模板模式（Template Pattern）</li>
<li>访问者模式（Visitor Pattern）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2023/12/25/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<p>现实世界的例子</p>
<blockquote>
<p>假设您的存储卡上有一些照片，并且需要将它们传输到计算机上。要传输它们，您需要某种与计算机端口兼容的适配器，以便可以将存储卡连接到计算机。在这种情况下，读卡器是一个适配器。<br>另一个例子是著名的电源适配器；三脚插头不能连接两脚插座，需要使用兼容两脚插座的电源适配器。<br>另一个例子是翻译人员将一个人所说的单词翻译成另一个人所说的单词</p>
</blockquote>
<p>用简单的话来说</p>
<blockquote>
<p>适配器模式允许您将不兼容的对象包装在适配器中，以使其与另一个类兼容。</p>
</blockquote>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>假如你正在开发一款股票市场监测程序， 它会从不同来源下载 XML 格式的股票数据， 然后向用户呈现出美观的图表。</p>
<p>在开发过程中， 你决定在程序中整合一个第三方智能分析函数库。 但是遇到了一个问题， 那就是分析函数库只兼容 JSON 格式的数据。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/adaptor_problem-zh-2x%281%29.png" style="zoom: 50%;" />

<p>你可以修改程序库来支持 XML。 但是， 这可能需要修改部分依赖该程序库的现有代码。 甚至还有更糟糕的情况， 你可能根本没有程序库的源代码， 从而无法对其进行修改。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>你可以创建一个<em>适配器</em>。 这是一个特殊的对象， 能够转换对象接口， 使其能与其他对象进行交互。</p>
<p>适配器模式通过封装对象将复杂的转换过程隐藏于幕后。 被封装的对象甚至察觉不到适配器的存在。 例如， 你可以使用一个将所有数据转换为英制单位 （如英尺和英里） 的适配器封装运行于米和千米单位制中的对象。</p>
<p>适配器不仅可以转换不同格式的数据， 其还有助于采用不同接口的对象之间的合作。 它的运作方式如下：</p>
<ol>
<li>适配器实现与其中一个现有对象兼容的接口。</li>
<li>现有对象可以使用该接口安全地调用适配器方法。</li>
<li>适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</li>
</ol>
<p>有时你甚至可以创建一个双向适配器来实现双向转换调用。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/adaptor_solution-zh-2x.png" style="zoom: 50%;" />

<p>让我们回到股票市场程序。 为了解决数据格式不兼容的问题， 你可以为分析函数库中的每个类创建将 XML 转换为 JSON 格式的适配器， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其传递给被封装分析对象的相应方法。</p>
<h4 id="适配器模式结构"><a href="#适配器模式结构" class="headerlink" title="适配器模式结构"></a>适配器模式结构</h4><p>实现时使用了构成原则： 适配器实现了其中一个对象的接口， 并对另一个对象进行封装。 所有流行的编程语言都可以实现适配器。</p>
<img src="https://myblob-pics.oss-cn-hangzhou.aliyuncs.com/2023/designpattern/structure-object-adapter-2x.png" style="zoom:50%;" />

<p>程序示例：</p>
<p>对象适配器模式，是通过组合的形式来完成适配，在实际开发中，如果能够适用组合的形式，就尽量不用要继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adapteeRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;被适配者的方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTarget</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;concreteTarget目标方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    adaptee.adapteeRequest();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.patterns.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Target target = <span class="keyword">new</span> ConcreteTarget();</span><br><span class="line">    target.request();</span><br><span class="line"></span><br><span class="line">    Target adapterTarget = <span class="keyword">new</span> Adapter();</span><br><span class="line">    adapterTarget.request();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>
<li>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>
<li>开闭原则。 只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构</li>
<li> 代码整体复杂度增加， 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</li>
</ul>
<h4 id="已知使用："><a href="#已知使用：" class="headerlink" title="已知使用："></a>已知使用：</h4><ul>
<li><code>java.util.Arrays#asList()</code></li>
<li><code>java.util.Collections#list()</code></li>
<li><code>java.util.Collections#enumeration()</code></li>
<li><code>javax.xml.bind.annotation.adapters.XMLAdapter</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
</search>
